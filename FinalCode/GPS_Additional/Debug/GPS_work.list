
GPS_work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c24  080097b0  080097b0  000197b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d4  0800a3d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3d4  0800a3d4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3d4  0800a3d4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d8  0800a3d8  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200001e0  0800a5bc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800a5bc  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b3b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002026  00000000  00000000  00029d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa32  00000000  00000000  0002d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b745  00000000  00000000  00047ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000959d9  00000000  00000000  0005321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8bf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  000e8c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	08009798 	.word	0x08009798

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	08009798 	.word	0x08009798

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_d2lz>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4605      	mov	r5, r0
 800114c:	460c      	mov	r4, r1
 800114e:	2200      	movs	r2, #0
 8001150:	2300      	movs	r3, #0
 8001152:	4628      	mov	r0, r5
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc9d 	bl	8000a94 <__aeabi_dcmplt>
 800115a:	b928      	cbnz	r0, 8001168 <__aeabi_d2lz+0x20>
 800115c:	4628      	mov	r0, r5
 800115e:	4621      	mov	r1, r4
 8001160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001164:	f000 b80a 	b.w	800117c <__aeabi_d2ulz>
 8001168:	4628      	mov	r0, r5
 800116a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800116e:	f000 f805 	bl	800117c <__aeabi_d2ulz>
 8001172:	4240      	negs	r0, r0
 8001174:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001178:	bd38      	pop	{r3, r4, r5, pc}
 800117a:	bf00      	nop

0800117c <__aeabi_d2ulz>:
 800117c:	b5d0      	push	{r4, r6, r7, lr}
 800117e:	2200      	movs	r2, #0
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <__aeabi_d2ulz+0x34>)
 8001182:	4606      	mov	r6, r0
 8001184:	460f      	mov	r7, r1
 8001186:	f7ff fa13 	bl	80005b0 <__aeabi_dmul>
 800118a:	f7ff fce9 	bl	8000b60 <__aeabi_d2uiz>
 800118e:	4604      	mov	r4, r0
 8001190:	f7ff f994 	bl	80004bc <__aeabi_ui2d>
 8001194:	2200      	movs	r2, #0
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <__aeabi_d2ulz+0x38>)
 8001198:	f7ff fa0a 	bl	80005b0 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4630      	mov	r0, r6
 80011a2:	4639      	mov	r1, r7
 80011a4:	f7ff f84c 	bl	8000240 <__aeabi_dsub>
 80011a8:	f7ff fcda 	bl	8000b60 <__aeabi_d2uiz>
 80011ac:	4621      	mov	r1, r4
 80011ae:	bdd0      	pop	{r4, r6, r7, pc}
 80011b0:	3df00000 	.word	0x3df00000
 80011b4:	41f00000 	.word	0x41f00000

080011b8 <GPS_Init>:
uint8_t rx_buffer[GPSBUFSIZE];
uint8_t rx_index = 0;

// struct GPS_t GPS; // actual definition of the GPS_t object will be placed in the main.c file.

void GPS_Init() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	4903      	ldr	r1, [pc, #12]	; (80011cc <GPS_Init+0x14>)
 80011c0:	4803      	ldr	r0, [pc, #12]	; (80011d0 <GPS_Init+0x18>)
 80011c2:	f002 fd27 	bl	8003c14 <HAL_UART_Receive_IT>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001fc 	.word	0x200001fc
 80011d0:	2000030c 	.word	0x2000030c

080011d4 <GPS_UART_CallBack>:

void GPS_UART_CallBack() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <GPS_UART_CallBack+0x60>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d010      	beq.n	8001202 <GPS_UART_CallBack+0x2e>
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <GPS_UART_CallBack+0x64>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <GPS_UART_CallBack+0x64>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	1c5a      	adds	r2, r3, #1
 80011f0:	b2d1      	uxtb	r1, r2
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <GPS_UART_CallBack+0x64>)
 80011f4:	7011      	strb	r1, [r2, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <GPS_UART_CallBack+0x60>)
 80011fa:	7819      	ldrb	r1, [r3, #0]
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <GPS_UART_CallBack+0x68>)
 80011fe:	5499      	strb	r1, [r3, r2]
 8001200:	e010      	b.n	8001224 <GPS_UART_CallBack+0x50>

#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		if (GPS_validate((char*) rx_buffer))
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <GPS_UART_CallBack+0x68>)
 8001204:	f000 f81e 	bl	8001244 <GPS_validate>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d002      	beq.n	8001214 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <GPS_UART_CallBack+0x68>)
 8001210:	f000 f87a 	bl	8001308 <GPS_parse>
		rx_index = 0;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <GPS_UART_CallBack+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	2100      	movs	r1, #0
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <GPS_UART_CallBack+0x68>)
 8001220:	f003 fa50 	bl	80046c4 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	4903      	ldr	r1, [pc, #12]	; (8001234 <GPS_UART_CallBack+0x60>)
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <GPS_UART_CallBack+0x6c>)
 800122a:	f002 fcf3 	bl	8003c14 <HAL_UART_Receive_IT>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001fc 	.word	0x200001fc
 8001238:	20000280 	.word	0x20000280
 800123c:	20000200 	.word	0x20000200
 8001240:	2000030c 	.word	0x2000030c

08001244 <GPS_validate>:

int GPS_validate(char *nmeastr) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]

	// check to ensure that the string starts with a $
	if (nmeastr[i] == '$')
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b24      	cmp	r3, #36	; 0x24
 800125e:	d103      	bne.n	8001268 <GPS_validate+0x24>
		i++;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	3301      	adds	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
	else
		return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)) {
 8001266:	e00c      	b.n	8001282 <GPS_validate+0x3e>
		return 0;
 8001268:	2300      	movs	r3, #0
 800126a:	e047      	b.n	80012fc <GPS_validate+0xb8>
		calculated_check ^= nmeastr[i]; // calculate the checksum
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4053      	eors	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
		i++;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3301      	adds	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
	while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)) {
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <GPS_validate+0x5c>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b2a      	cmp	r3, #42	; 0x2a
 8001298:	d002      	beq.n	80012a0 <GPS_validate+0x5c>
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2b4a      	cmp	r3, #74	; 0x4a
 800129e:	dde5      	ble.n	800126c <GPS_validate+0x28>
	}

	if (i >= 75) {
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b4a      	cmp	r3, #74	; 0x4a
 80012a4:	dd01      	ble.n	80012aa <GPS_validate+0x66>
		return 0; // the string was too long so return an error
 80012a6:	2300      	movs	r3, #0
 80012a8:	e028      	b.n	80012fc <GPS_validate+0xb8>
	}

	if (nmeastr[i] == '*') {
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b2a      	cmp	r3, #42	; 0x2a
 80012b4:	d119      	bne.n	80012ea <GPS_validate+0xa6>
		check[0] = nmeastr[i + 1];    //put hex chars in check string
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3301      	adds	r3, #1
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	733b      	strb	r3, [r7, #12]
		check[1] = nmeastr[i + 2];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3302      	adds	r3, #2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	737b      	strb	r3, [r7, #13]
		check[2] = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73bb      	strb	r3, [r7, #14]
	} else
		return 0;    // no checksum separator found there for invalid

	sprintf(checkcalcstr, "%02X", calculated_check);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	490a      	ldr	r1, [pc, #40]	; (8001304 <GPS_validate+0xc0>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 f86c 	bl	80053b8 <siprintf>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 80012e0:	7a3a      	ldrb	r2, [r7, #8]
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
			1 : 0;
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d108      	bne.n	80012fa <GPS_validate+0xb6>
 80012e8:	e001      	b.n	80012ee <GPS_validate+0xaa>
		return 0;    // no checksum separator found there for invalid
 80012ea:	2300      	movs	r3, #0
 80012ec:	e006      	b.n	80012fc <GPS_validate+0xb8>
	return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ?
 80012ee:	7a7a      	ldrb	r2, [r7, #9]
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
			1 : 0;
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d101      	bne.n	80012fa <GPS_validate+0xb6>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <GPS_validate+0xb8>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	080097b0 	.word	0x080097b0

08001308 <GPS_parse>:

void GPS_parse(char *GPSstrParse) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af0a      	add	r7, sp, #40	; 0x28
 800130e:	6078      	str	r0, [r7, #4]
	if (!strncmp(GPSstrParse, "$GPGGA", 6)) {
 8001310:	2206      	movs	r2, #6
 8001312:	496e      	ldr	r1, [pc, #440]	; (80014cc <GPS_parse+0x1c4>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f004 f8de 	bl	80054d6 <strncmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d137      	bne.n	8001390 <GPS_parse+0x88>
		if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c",
 8001320:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <GPS_parse+0x1c8>)
 8001322:	9307      	str	r3, [sp, #28]
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <GPS_parse+0x1cc>)
 8001326:	9306      	str	r3, [sp, #24]
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <GPS_parse+0x1d0>)
 800132a:	9305      	str	r3, [sp, #20]
 800132c:	4b6b      	ldr	r3, [pc, #428]	; (80014dc <GPS_parse+0x1d4>)
 800132e:	9304      	str	r3, [sp, #16]
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <GPS_parse+0x1d8>)
 8001332:	9303      	str	r3, [sp, #12]
 8001334:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <GPS_parse+0x1dc>)
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <GPS_parse+0x1e0>)
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	4b6b      	ldr	r3, [pc, #428]	; (80014ec <GPS_parse+0x1e4>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <GPS_parse+0x1e8>)
 8001342:	4a6c      	ldr	r2, [pc, #432]	; (80014f4 <GPS_parse+0x1ec>)
 8001344:	496c      	ldr	r1, [pc, #432]	; (80014f8 <GPS_parse+0x1f0>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f004 f856 	bl	80053f8 <siscanf>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	f340 80b9 	ble.w	80014c6 <GPS_parse+0x1be>
				&GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
				&GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop,
				&GPS.msl_altitude, &GPS.msl_units) >= 1) {
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <GPS_parse+0x1f4>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	4a68      	ldr	r2, [pc, #416]	; (80014fc <GPS_parse+0x1f4>)
 800135a:	7e12      	ldrb	r2, [r2, #24]
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f902 	bl	8001568 <GPS_nmea_to_dec>
 8001364:	4603      	mov	r3, r0
 8001366:	4a65      	ldr	r2, [pc, #404]	; (80014fc <GPS_parse+0x1f4>)
 8001368:	6053      	str	r3, [r2, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <GPS_parse+0x1f4>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	4a63      	ldr	r2, [pc, #396]	; (80014fc <GPS_parse+0x1f4>)
 8001370:	7e52      	ldrb	r2, [r2, #25]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f8f7 	bl	8001568 <GPS_nmea_to_dec>
 800137a:	4603      	mov	r3, r0
 800137c:	4a5f      	ldr	r2, [pc, #380]	; (80014fc <GPS_parse+0x1f4>)
 800137e:	6013      	str	r3, [r2, #0]
			convertUTCTime(GPS.utc_time, &GPS.hours, &GPS.minutes,
 8001380:	4b5e      	ldr	r3, [pc, #376]	; (80014fc <GPS_parse+0x1f4>)
 8001382:	6958      	ldr	r0, [r3, #20]
 8001384:	4b5e      	ldr	r3, [pc, #376]	; (8001500 <GPS_parse+0x1f8>)
 8001386:	4a5f      	ldr	r2, [pc, #380]	; (8001504 <GPS_parse+0x1fc>)
 8001388:	495f      	ldr	r1, [pc, #380]	; (8001508 <GPS_parse+0x200>)
 800138a:	f000 f92f 	bl	80015ec <convertUTCTime>
					&GPS.seconds);

			return;
 800138e:	e09a      	b.n	80014c6 <GPS_parse+0x1be>
		}
	} else if (!strncmp(GPSstrParse, "$GPRMC", 6)) {
 8001390:	2206      	movs	r2, #6
 8001392:	495e      	ldr	r1, [pc, #376]	; (800150c <GPS_parse+0x204>)
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f004 f89e 	bl	80054d6 <strncmp>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d13f      	bne.n	8001420 <GPS_parse+0x118>
		if (sscanf(GPSstrParse, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d,%f,%c", &GPS.utc_time, &GPS.rmc_status, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude,
 80013a0:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <GPS_parse+0x208>)
 80013a2:	9308      	str	r3, [sp, #32]
 80013a4:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <GPS_parse+0x20c>)
 80013a6:	9307      	str	r3, [sp, #28]
 80013a8:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <GPS_parse+0x210>)
 80013aa:	9306      	str	r3, [sp, #24]
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <GPS_parse+0x214>)
 80013ae:	9305      	str	r3, [sp, #20]
 80013b0:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <GPS_parse+0x218>)
 80013b2:	9304      	str	r3, [sp, #16]
 80013b4:	4b4b      	ldr	r3, [pc, #300]	; (80014e4 <GPS_parse+0x1dc>)
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	4b4b      	ldr	r3, [pc, #300]	; (80014e8 <GPS_parse+0x1e0>)
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <GPS_parse+0x1e4>)
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <GPS_parse+0x1e8>)
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4b57      	ldr	r3, [pc, #348]	; (8001524 <GPS_parse+0x21c>)
 80013c6:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <GPS_parse+0x1ec>)
 80013c8:	4957      	ldr	r1, [pc, #348]	; (8001528 <GPS_parse+0x220>)
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f004 f814 	bl	80053f8 <siscanf>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	dd77      	ble.n	80014c6 <GPS_parse+0x1be>
				&GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date, &GPS.magnetic, &GPS.mag) >= 1) {
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <GPS_parse+0x1f4>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <GPS_parse+0x1f4>)
 80013dc:	7e12      	ldrb	r2, [r2, #24]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 f8c1 	bl	8001568 <GPS_nmea_to_dec>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a44      	ldr	r2, [pc, #272]	; (80014fc <GPS_parse+0x1f4>)
 80013ea:	6053      	str	r3, [r2, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <GPS_parse+0x1f4>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <GPS_parse+0x1f4>)
 80013f2:	7e52      	ldrb	r2, [r2, #25]
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f8b6 	bl	8001568 <GPS_nmea_to_dec>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a3f      	ldr	r2, [pc, #252]	; (80014fc <GPS_parse+0x1f4>)
 8001400:	6013      	str	r3, [r2, #0]
			convertUTCTime(GPS.utc_time, &GPS.hours, &GPS.minutes,
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <GPS_parse+0x1f4>)
 8001404:	6958      	ldr	r0, [r3, #20]
 8001406:	4b3e      	ldr	r3, [pc, #248]	; (8001500 <GPS_parse+0x1f8>)
 8001408:	4a3e      	ldr	r2, [pc, #248]	; (8001504 <GPS_parse+0x1fc>)
 800140a:	493f      	ldr	r1, [pc, #252]	; (8001508 <GPS_parse+0x200>)
 800140c:	f000 f8ee 	bl	80015ec <convertUTCTime>
					&GPS.seconds);
			convertDate(GPS.date, &GPS.year, &GPS.month, &GPS.day);
 8001410:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <GPS_parse+0x1f4>)
 8001412:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001414:	4b45      	ldr	r3, [pc, #276]	; (800152c <GPS_parse+0x224>)
 8001416:	4a46      	ldr	r2, [pc, #280]	; (8001530 <GPS_parse+0x228>)
 8001418:	4946      	ldr	r1, [pc, #280]	; (8001534 <GPS_parse+0x22c>)
 800141a:	f000 f927 	bl	800166c <convertDate>
			return;
 800141e:	e052      	b.n	80014c6 <GPS_parse+0x1be>
		}

	} else if (!strncmp(GPSstrParse, "$GPGLL", 6)) {
 8001420:	2206      	movs	r2, #6
 8001422:	4945      	ldr	r1, [pc, #276]	; (8001538 <GPS_parse+0x230>)
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f004 f856 	bl	80054d6 <strncmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12e      	bne.n	800148e <GPS_parse+0x186>
		if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude,
 8001430:	4b42      	ldr	r3, [pc, #264]	; (800153c <GPS_parse+0x234>)
 8001432:	9303      	str	r3, [sp, #12]
 8001434:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <GPS_parse+0x1ec>)
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <GPS_parse+0x1dc>)
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <GPS_parse+0x1e0>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <GPS_parse+0x1e4>)
 8001442:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <GPS_parse+0x1e8>)
 8001444:	493e      	ldr	r1, [pc, #248]	; (8001540 <GPS_parse+0x238>)
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f003 ffd6 	bl	80053f8 <siscanf>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	dd39      	ble.n	80014c6 <GPS_parse+0x1be>
				&GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time,
				&GPS.gll_status) >= 1) {
			GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <GPS_parse+0x1f4>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <GPS_parse+0x1f4>)
 8001458:	7e12      	ldrb	r2, [r2, #24]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f883 	bl	8001568 <GPS_nmea_to_dec>
 8001462:	4603      	mov	r3, r0
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <GPS_parse+0x1f4>)
 8001466:	6053      	str	r3, [r2, #4]
			GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <GPS_parse+0x1f4>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	4a23      	ldr	r2, [pc, #140]	; (80014fc <GPS_parse+0x1f4>)
 800146e:	7e52      	ldrb	r2, [r2, #25]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f878 	bl	8001568 <GPS_nmea_to_dec>
 8001478:	4603      	mov	r3, r0
 800147a:	4a20      	ldr	r2, [pc, #128]	; (80014fc <GPS_parse+0x1f4>)
 800147c:	6013      	str	r3, [r2, #0]
			convertUTCTime(GPS.utc_time, &GPS.hours, &GPS.minutes,
 800147e:	4b1f      	ldr	r3, [pc, #124]	; (80014fc <GPS_parse+0x1f4>)
 8001480:	6958      	ldr	r0, [r3, #20]
 8001482:	4b1f      	ldr	r3, [pc, #124]	; (8001500 <GPS_parse+0x1f8>)
 8001484:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <GPS_parse+0x1fc>)
 8001486:	4920      	ldr	r1, [pc, #128]	; (8001508 <GPS_parse+0x200>)
 8001488:	f000 f8b0 	bl	80015ec <convertUTCTime>
					&GPS.seconds);
			return;
 800148c:	e01b      	b.n	80014c6 <GPS_parse+0x1be>
		}
	} else if (!strncmp(GPSstrParse, "$GPVTG", 6)) {
 800148e:	2206      	movs	r2, #6
 8001490:	492c      	ldr	r1, [pc, #176]	; (8001544 <GPS_parse+0x23c>)
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f004 f81f 	bl	80054d6 <strncmp>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d113      	bne.n	80014c6 <GPS_parse+0x1be>
		if (sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t,
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <GPS_parse+0x240>)
 80014a0:	9305      	str	r3, [sp, #20]
 80014a2:	4b2a      	ldr	r3, [pc, #168]	; (800154c <GPS_parse+0x244>)
 80014a4:	9304      	str	r3, [sp, #16]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <GPS_parse+0x248>)
 80014a8:	9303      	str	r3, [sp, #12]
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <GPS_parse+0x218>)
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	4b29      	ldr	r3, [pc, #164]	; (8001554 <GPS_parse+0x24c>)
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <GPS_parse+0x250>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <GPS_parse+0x254>)
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <GPS_parse+0x258>)
 80014ba:	492a      	ldr	r1, [pc, #168]	; (8001564 <GPS_parse+0x25c>)
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f003 ff9b 	bl	80053f8 <siscanf>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
				&GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit,
				&GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km,
				&GPS.speed_km_unit) >= 1)
			return;
	}
}
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	080097b8 	.word	0x080097b8
 80014d0:	200003c4 	.word	0x200003c4
 80014d4:	200003c0 	.word	0x200003c0
 80014d8:	200003bc 	.word	0x200003bc
 80014dc:	200003b8 	.word	0x200003b8
 80014e0:	200003b4 	.word	0x200003b4
 80014e4:	200003b1 	.word	0x200003b1
 80014e8:	200003a4 	.word	0x200003a4
 80014ec:	200003b0 	.word	0x200003b0
 80014f0:	200003a8 	.word	0x200003a8
 80014f4:	200003ac 	.word	0x200003ac
 80014f8:	080097c0 	.word	0x080097c0
 80014fc:	20000398 	.word	0x20000398
 8001500:	20000400 	.word	0x20000400
 8001504:	200003fc 	.word	0x200003fc
 8001508:	200003f8 	.word	0x200003f8
 800150c:	080097e8 	.word	0x080097e8
 8001510:	200003d4 	.word	0x200003d4
 8001514:	200003d0 	.word	0x200003d0
 8001518:	200003d8 	.word	0x200003d8
 800151c:	200003cc 	.word	0x200003cc
 8001520:	200003c8 	.word	0x200003c8
 8001524:	200003c5 	.word	0x200003c5
 8001528:	080097f0 	.word	0x080097f0
 800152c:	2000040c 	.word	0x2000040c
 8001530:	20000408 	.word	0x20000408
 8001534:	20000404 	.word	0x20000404
 8001538:	08009818 	.word	0x08009818
 800153c:	200003dc 	.word	0x200003dc
 8001540:	08009820 	.word	0x08009820
 8001544:	0800983c 	.word	0x0800983c
 8001548:	200003f4 	.word	0x200003f4
 800154c:	200003f0 	.word	0x200003f0
 8001550:	200003ed 	.word	0x200003ed
 8001554:	200003ec 	.word	0x200003ec
 8001558:	200003e8 	.word	0x200003e8
 800155c:	200003e4 	.word	0x200003e4
 8001560:	200003e0 	.word	0x200003e0
 8001564:	08009844 	.word	0x08009844

08001568 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	70fb      	strb	r3, [r7, #3]
	int degree = (int) (deg_coord / 100);
 8001574:	491b      	ldr	r1, [pc, #108]	; (80015e4 <GPS_nmea_to_dec+0x7c>)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fd24 	bl	8000fc4 <__aeabi_fdiv>
 800157c:	4603      	mov	r3, r0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fdbc 	bl	80010fc <__aeabi_f2iz>
 8001584:	4603      	mov	r3, r0
 8001586:	613b      	str	r3, [r7, #16]
	float minutes = deg_coord - degree * 100;
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2264      	movs	r2, #100	; 0x64
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fc0f 	bl	8000db4 <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fb54 	bl	8000c48 <__aeabi_fsub>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
	float dec_deg = minutes / 60;
 80015a4:	4910      	ldr	r1, [pc, #64]	; (80015e8 <GPS_nmea_to_dec+0x80>)
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fd0c 	bl	8000fc4 <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60bb      	str	r3, [r7, #8]
	float decimal = degree + dec_deg;
 80015b0:	6938      	ldr	r0, [r7, #16]
 80015b2:	f7ff fbff 	bl	8000db4 <__aeabi_i2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4619      	mov	r1, r3
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f7ff fb46 	bl	8000c4c <__addsf3>
 80015c0:	4603      	mov	r3, r0
 80015c2:	617b      	str	r3, [r7, #20]
	if (nsew == 'S' || nsew == 'W') { // return negative
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b53      	cmp	r3, #83	; 0x53
 80015c8:	d002      	beq.n	80015d0 <GPS_nmea_to_dec+0x68>
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	2b57      	cmp	r3, #87	; 0x57
 80015ce:	d103      	bne.n	80015d8 <GPS_nmea_to_dec+0x70>
		decimal *= -1;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015d6:	617b      	str	r3, [r7, #20]
	}
	return decimal;
 80015d8:	697b      	ldr	r3, [r7, #20]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	42c80000 	.word	0x42c80000
 80015e8:	42700000 	.word	0x42700000

080015ec <convertUTCTime>:

void convertUTCTime(float utcTime, int *hours, int *minutes, int *seconds) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
	int totalSeconds = (int) utcTime;
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f7ff fd7e 	bl	80010fc <__aeabi_f2iz>
 8001600:	4603      	mov	r3, r0
 8001602:	617b      	str	r3, [r7, #20]
	*seconds = totalSeconds % 100;
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <convertUTCTime+0x78>)
 8001608:	fb83 1302 	smull	r1, r3, r3, r2
 800160c:	1159      	asrs	r1, r3, #5
 800160e:	17d3      	asrs	r3, r2, #31
 8001610:	1acb      	subs	r3, r1, r3
 8001612:	2164      	movs	r1, #100	; 0x64
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	6013      	str	r3, [r2, #0]
	*minutes = (totalSeconds / 100) % 100;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4a10      	ldr	r2, [pc, #64]	; (8001664 <convertUTCTime+0x78>)
 8001622:	fb82 1203 	smull	r1, r2, r2, r3
 8001626:	1152      	asrs	r2, r2, #5
 8001628:	17db      	asrs	r3, r3, #31
 800162a:	1ad2      	subs	r2, r2, r3
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <convertUTCTime+0x78>)
 800162e:	fb83 1302 	smull	r1, r3, r3, r2
 8001632:	1159      	asrs	r1, r3, #5
 8001634:	17d3      	asrs	r3, r2, #31
 8001636:	1acb      	subs	r3, r1, r3
 8001638:	2164      	movs	r1, #100	; 0x64
 800163a:	fb01 f303 	mul.w	r3, r1, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6013      	str	r3, [r2, #0]
	*hours = (totalSeconds / 10000) + 8;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <convertUTCTime+0x7c>)
 8001648:	fb82 1203 	smull	r1, r2, r2, r3
 800164c:	1312      	asrs	r2, r2, #12
 800164e:	17db      	asrs	r3, r3, #31
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f103 0208 	add.w	r2, r3, #8
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	601a      	str	r2, [r3, #0]

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	51eb851f 	.word	0x51eb851f
 8001668:	68db8bad 	.word	0x68db8bad

0800166c <convertDate>:

void convertDate(int date, int *year, int *month, int *day) {
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
	*year = date % 100;
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <convertDate+0x6c>)
 800167e:	fb83 1302 	smull	r1, r3, r3, r2
 8001682:	1159      	asrs	r1, r3, #5
 8001684:	17d3      	asrs	r3, r2, #31
 8001686:	1acb      	subs	r3, r1, r3
 8001688:	2164      	movs	r1, #100	; 0x64
 800168a:	fb01 f303 	mul.w	r3, r1, r3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	6013      	str	r3, [r2, #0]
	*month = (date / 100) % 100;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <convertDate+0x6c>)
 8001698:	fb82 1203 	smull	r1, r2, r2, r3
 800169c:	1152      	asrs	r2, r2, #5
 800169e:	17db      	asrs	r3, r3, #31
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <convertDate+0x6c>)
 80016a4:	fb83 1302 	smull	r1, r3, r3, r2
 80016a8:	1159      	asrs	r1, r3, #5
 80016aa:	17d3      	asrs	r3, r2, #31
 80016ac:	1acb      	subs	r3, r1, r3
 80016ae:	2164      	movs	r1, #100	; 0x64
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
	*day = date / 10000;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <convertDate+0x70>)
 80016be:	fb82 1203 	smull	r1, r2, r2, r3
 80016c2:	1312      	asrs	r2, r2, #12
 80016c4:	17db      	asrs	r3, r3, #31
 80016c6:	1ad2      	subs	r2, r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	601a      	str	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	51eb851f 	.word	0x51eb851f
 80016dc:	68db8bad 	.word	0x68db8bad

080016e0 <Delay>:
void		LCD_REG_Config          ( void );
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );


void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	e002      	b.n	80016f0 <Delay+0x10>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <Delay+0xa>
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <LCD_INIT>:

void LCD_INIT ( void )
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8001708:	2001      	movs	r0, #1
 800170a:	f000 f829 	bl	8001760 <LCD_BackLed_Control>
	LCD_Rst();
 800170e:	f000 f80f 	bl	8001730 <LCD_Rst>
	LCD_REG_Config();
 8001712:	f000 f85f 	bl	80017d4 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8001716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001720:	22f0      	movs	r2, #240	; 0xf0
 8001722:	2100      	movs	r1, #0
 8001724:	2000      	movs	r0, #0
 8001726:	f000 f9e6 	bl	8001af6 <LCD_Clear>
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <LCD_Rst+0x28>)
 800173a:	f001 fd0d 	bl	8003158 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <LCD_Rst+0x2c>)
 8001740:	f7ff ffce 	bl	80016e0 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	2102      	movs	r1, #2
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <LCD_Rst+0x28>)
 800174a:	f001 fd05 	bl	8003158 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <LCD_Rst+0x2c>)
 8001750:	f7ff ffc6 	bl	80016e0 <Delay>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40011800 	.word	0x40011800
 800175c:	0002bffc 	.word	0x0002bffc

08001760 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d006      	beq.n	800177e <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001776:	4807      	ldr	r0, [pc, #28]	; (8001794 <LCD_BackLed_Control+0x34>)
 8001778:	f001 fcee 	bl	8003158 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 800177c:	e005      	b.n	800178a <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <LCD_BackLed_Control+0x34>)
 8001786:	f001 fce7 	bl	8003158 <HAL_GPIO_WritePin>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40011400 	.word	0x40011400

08001798 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80017a2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	8013      	strh	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <LCD_Write_Data+0x1c>)
 80017c0:	88fb      	ldrh	r3, [r7, #6]
 80017c2:	8013      	strh	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	60020000 	.word	0x60020000

080017d4 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80017d8:	20cf      	movs	r0, #207	; 0xcf
 80017da:	f7ff ffdd 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff ffe8 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80017e4:	2081      	movs	r0, #129	; 0x81
 80017e6:	f7ff ffe5 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80017ea:	2030      	movs	r0, #48	; 0x30
 80017ec:	f7ff ffe2 	bl	80017b4 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80017f0:	20ed      	movs	r0, #237	; 0xed
 80017f2:	f7ff ffd1 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f7ff ffdc 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80017fc:	2003      	movs	r0, #3
 80017fe:	f7ff ffd9 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8001802:	2012      	movs	r0, #18
 8001804:	f7ff ffd6 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001808:	2081      	movs	r0, #129	; 0x81
 800180a:	f7ff ffd3 	bl	80017b4 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800180e:	20e8      	movs	r0, #232	; 0xe8
 8001810:	f7ff ffc2 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8001814:	2085      	movs	r0, #133	; 0x85
 8001816:	f7ff ffcd 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800181a:	2010      	movs	r0, #16
 800181c:	f7ff ffca 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f7ff ffc7 	bl	80017b4 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8001826:	20cb      	movs	r0, #203	; 0xcb
 8001828:	f7ff ffb6 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800182c:	2039      	movs	r0, #57	; 0x39
 800182e:	f7ff ffc1 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8001832:	202c      	movs	r0, #44	; 0x2c
 8001834:	f7ff ffbe 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ffbb 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800183e:	2034      	movs	r0, #52	; 0x34
 8001840:	f7ff ffb8 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ffb5 	bl	80017b4 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800184a:	20f7      	movs	r0, #247	; 0xf7
 800184c:	f7ff ffa4 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001850:	2020      	movs	r0, #32
 8001852:	f7ff ffaf 	bl	80017b4 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001856:	20ea      	movs	r0, #234	; 0xea
 8001858:	f7ff ff9e 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff ffa9 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff ffa6 	bl	80017b4 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001868:	20b1      	movs	r0, #177	; 0xb1
 800186a:	f7ff ff95 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff ffa0 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001874:	201b      	movs	r0, #27
 8001876:	f7ff ff9d 	bl	80017b4 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 800187a:	20b6      	movs	r0, #182	; 0xb6
 800187c:	f7ff ff8c 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001880:	200a      	movs	r0, #10
 8001882:	f7ff ff97 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001886:	20a2      	movs	r0, #162	; 0xa2
 8001888:	f7ff ff94 	bl	80017b4 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 800188c:	20c0      	movs	r0, #192	; 0xc0
 800188e:	f7ff ff83 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8001892:	2035      	movs	r0, #53	; 0x35
 8001894:	f7ff ff8e 	bl	80017b4 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001898:	20c1      	movs	r0, #193	; 0xc1
 800189a:	f7ff ff7d 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800189e:	2011      	movs	r0, #17
 80018a0:	f7ff ff88 	bl	80017b4 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80018a4:	20c5      	movs	r0, #197	; 0xc5
 80018a6:	f7ff ff77 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80018aa:	2045      	movs	r0, #69	; 0x45
 80018ac:	f7ff ff82 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80018b0:	2045      	movs	r0, #69	; 0x45
 80018b2:	f7ff ff7f 	bl	80017b4 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80018b6:	20c7      	movs	r0, #199	; 0xc7
 80018b8:	f7ff ff6e 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 80018bc:	20a2      	movs	r0, #162	; 0xa2
 80018be:	f7ff ff79 	bl	80017b4 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 80018c2:	20f2      	movs	r0, #242	; 0xf2
 80018c4:	f7ff ff68 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff ff73 	bl	80017b4 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80018ce:	2026      	movs	r0, #38	; 0x26
 80018d0:	f7ff ff62 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff ff6d 	bl	80017b4 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80018da:	20e0      	movs	r0, #224	; 0xe0
 80018dc:	f7ff ff5c 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80018e0:	200f      	movs	r0, #15
 80018e2:	f7ff ff67 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80018e6:	2026      	movs	r0, #38	; 0x26
 80018e8:	f7ff ff64 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80018ec:	2024      	movs	r0, #36	; 0x24
 80018ee:	f7ff ff61 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80018f2:	200b      	movs	r0, #11
 80018f4:	f7ff ff5e 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80018f8:	200e      	movs	r0, #14
 80018fa:	f7ff ff5b 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80018fe:	2009      	movs	r0, #9
 8001900:	f7ff ff58 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8001904:	2054      	movs	r0, #84	; 0x54
 8001906:	f7ff ff55 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800190a:	20a8      	movs	r0, #168	; 0xa8
 800190c:	f7ff ff52 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001910:	2046      	movs	r0, #70	; 0x46
 8001912:	f7ff ff4f 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8001916:	200c      	movs	r0, #12
 8001918:	f7ff ff4c 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 800191c:	2017      	movs	r0, #23
 800191e:	f7ff ff49 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001922:	2009      	movs	r0, #9
 8001924:	f7ff ff46 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001928:	200f      	movs	r0, #15
 800192a:	f7ff ff43 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800192e:	2007      	movs	r0, #7
 8001930:	f7ff ff40 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff ff3d 	bl	80017b4 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800193a:	20e1      	movs	r0, #225	; 0xe1
 800193c:	f7ff ff2c 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ff37 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001946:	2019      	movs	r0, #25
 8001948:	f7ff ff34 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800194c:	201b      	movs	r0, #27
 800194e:	f7ff ff31 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8001952:	2004      	movs	r0, #4
 8001954:	f7ff ff2e 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001958:	2010      	movs	r0, #16
 800195a:	f7ff ff2b 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800195e:	2007      	movs	r0, #7
 8001960:	f7ff ff28 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001964:	202a      	movs	r0, #42	; 0x2a
 8001966:	f7ff ff25 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 800196a:	2047      	movs	r0, #71	; 0x47
 800196c:	f7ff ff22 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001970:	2039      	movs	r0, #57	; 0x39
 8001972:	f7ff ff1f 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001976:	2003      	movs	r0, #3
 8001978:	f7ff ff1c 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800197c:	2006      	movs	r0, #6
 800197e:	f7ff ff19 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001982:	2006      	movs	r0, #6
 8001984:	f7ff ff16 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001988:	2030      	movs	r0, #48	; 0x30
 800198a:	f7ff ff13 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800198e:	2038      	movs	r0, #56	; 0x38
 8001990:	f7ff ff10 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001994:	200f      	movs	r0, #15
 8001996:	f7ff ff0d 	bl	80017b4 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 800199a:	2036      	movs	r0, #54	; 0x36
 800199c:	f7ff fefc 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80019a0:	20c8      	movs	r0, #200	; 0xc8
 80019a2:	f7ff ff07 	bl	80017b4 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80019a6:	202a      	movs	r0, #42	; 0x2a
 80019a8:	f7ff fef6 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ff01 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019b2:	2000      	movs	r0, #0
 80019b4:	f7ff fefe 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fefb 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 80019be:	20ef      	movs	r0, #239	; 0xef
 80019c0:	f7ff fef8 	bl	80017b4 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 80019c4:	202b      	movs	r0, #43	; 0x2b
 80019c6:	f7ff fee7 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff fef2 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff feef 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff feec 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80019dc:	203f      	movs	r0, #63	; 0x3f
 80019de:	f7ff fee9 	bl	80017b4 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80019e2:	203a      	movs	r0, #58	; 0x3a
 80019e4:	f7ff fed8 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80019e8:	2055      	movs	r0, #85	; 0x55
 80019ea:	f7ff fee3 	bl	80017b4 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80019ee:	2011      	movs	r0, #17
 80019f0:	f7ff fed2 	bl	8001798 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <LCD_REG_Config+0x230>)
 80019f6:	f7ff fe73 	bl	80016e0 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80019fa:	2029      	movs	r0, #41	; 0x29
 80019fc:	f7ff fecc 	bl	8001798 <LCD_Write_Cmd>
	
	
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	0002bffc 	.word	0x0002bffc

08001a08 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4604      	mov	r4, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4623      	mov	r3, r4
 8001a18:	80fb      	strh	r3, [r7, #6]
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80bb      	strh	r3, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8001a26:	202a      	movs	r0, #42	; 0x2a
 8001a28:	f7ff feb6 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 // read the most significant 8 byte
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff febe 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  ); // read the least significant 8 byte
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff feb8 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );  	// write most significant byte of the ending column address (usCOLUMN + usWidth - 1)
 8001a44:	88fa      	ldrh	r2, [r7, #6]
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	121b      	asrs	r3, r3, #8
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff feaf 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  ); // write least significant byte of the ending column address (usCOLUMN + usWidth - 1)
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fea4 	bl	80017b4 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001a6c:	202b      	movs	r0, #43	; 0x2b
 8001a6e:	f7ff fe93 	bl	8001798 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe9b 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe95 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001a8a:	88ba      	ldrh	r2, [r7, #4]
 8001a8c:	883b      	ldrh	r3, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b01      	subs	r3, #1
 8001a92:	121b      	asrs	r3, r3, #8
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fe8c 	bl	80017b4 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fe81 	bl	80017b4 <LCD_Write_Data>
	
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}

08001aba <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001aca:	202c      	movs	r0, #44	; 0x2c
 8001acc:	f7ff fe64 	bl	8001798 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e006      	b.n	8001ae4 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fe6b 	bl	80017b4 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d3f4      	bcc.n	8001ad6 <LCD_FillColor+0x1c>
		
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001af6:	b590      	push	{r4, r7, lr}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4604      	mov	r4, r0
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	461a      	mov	r2, r3
 8001b04:	4623      	mov	r3, r4
 8001b06:	80fb      	strh	r3, [r7, #6]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	80bb      	strh	r3, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8001b14:	883b      	ldrh	r3, [r7, #0]
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	88b9      	ldrh	r1, [r7, #4]
 8001b1a:	88f8      	ldrh	r0, [r7, #6]
 8001b1c:	f7ff ff74 	bl	8001a08 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	883a      	ldrh	r2, [r7, #0]
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	8b3b      	ldrh	r3, [r7, #24]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f7ff ffc3 	bl	8001aba <LCD_FillColor>
	
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}

08001b3c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
 8001b46:	460b      	mov	r3, r1
 8001b48:	80bb      	strh	r3, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	3b20      	subs	r3, #32
 8001b52:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001b54:	88b9      	ldrh	r1, [r7, #4]
 8001b56:	88f8      	ldrh	r0, [r7, #6]
 8001b58:	2310      	movs	r3, #16
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	f7ff ff54 	bl	8001a08 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001b60:	202c      	movs	r0, #44	; 0x2c
 8001b62:	f7ff fe19 	bl	8001798 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001b66:	2300      	movs	r3, #0
 8001b68:	73bb      	strb	r3, [r7, #14]
 8001b6a:	e023      	b.n	8001bb4 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001b6c:	7b3a      	ldrb	r2, [r7, #12]
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	4914      	ldr	r1, [pc, #80]	; (8001bc4 <LCD_DrawChar+0x88>)
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	440a      	add	r2, r1
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]
 8001b80:	e012      	b.n	8001ba8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001b8c:	201f      	movs	r0, #31
 8001b8e:	f7ff fe11 	bl	80017b4 <LCD_Write_Data>
 8001b92:	e003      	b.n	8001b9c <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001b94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b98:	f7ff fe0c 	bl	80017b4 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	085b      	lsrs	r3, r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001ba2:	7b7b      	ldrb	r3, [r7, #13]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	737b      	strb	r3, [r7, #13]
 8001ba8:	7b7b      	ldrb	r3, [r7, #13]
 8001baa:	2b07      	cmp	r3, #7
 8001bac:	d9e9      	bls.n	8001b82 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	73bb      	strb	r3, [r7, #14]
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d9d8      	bls.n	8001b6c <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08009914 	.word	0x08009914

08001bc8 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	603a      	str	r2, [r7, #0]
 8001bd2:	80fb      	strh	r3, [r7, #6]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001bd8:	e01c      	b.n	8001c14 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2be8      	cmp	r3, #232	; 0xe8
 8001bde:	d904      	bls.n	8001bea <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001be0:	2300      	movs	r3, #0
 8001be2:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001be4:	88bb      	ldrh	r3, [r7, #4]
 8001be6:	3310      	adds	r3, #16
 8001be8:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001bf0:	d903      	bls.n	8001bfa <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	88b9      	ldrh	r1, [r7, #4]
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff9a 	bl	8001b3c <LCD_DrawChar>
		
		pStr ++;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	3308      	adds	r3, #8
 8001c12:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1de      	bne.n	8001bda <LCD_DrawString+0x12>
		
	}
	
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <LCD_DrawFloat>:
		}
	}
}

void LCD_DrawFloat(uint16_t usC, uint16_t usP, float value)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	; 0x40
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	603a      	str	r2, [r7, #0]
 8001c32:	80fb      	strh	r3, [r7, #6]
 8001c34:	460b      	mov	r3, r1
 8001c36:	80bb      	strh	r3, [r7, #4]
    char buffer[50];
    sprintf(buffer, "%.4f", value);
 8001c38:	6838      	ldr	r0, [r7, #0]
 8001c3a:	f7fe fc61 	bl	8000500 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	f107 0008 	add.w	r0, r7, #8
 8001c46:	4916      	ldr	r1, [pc, #88]	; (8001ca0 <LCD_DrawFloat+0x78>)
 8001c48:	f003 fbb6 	bl	80053b8 <siprintf>
    const char* pStr = buffer;
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (*pStr != '\0')
 8001c52:	e01c      	b.n	8001c8e <LCD_DrawFloat+0x66>
    {
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2be8      	cmp	r3, #232	; 0xe8
 8001c58:	d904      	bls.n	8001c64 <LCD_DrawFloat+0x3c>
        {
            usC = LCD_DispWindow_Start_COLUMN;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	80fb      	strh	r3, [r7, #6]
            usP += HEIGHT_EN_CHAR;
 8001c5e:	88bb      	ldrh	r3, [r7, #4]
 8001c60:	3310      	adds	r3, #16
 8001c62:	80bb      	strh	r3, [r7, #4]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE)
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001c6a:	d903      	bls.n	8001c74 <LCD_DrawFloat+0x4c>
        {
            usC = LCD_DispWindow_Start_COLUMN;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	80fb      	strh	r3, [r7, #6]
            usP = LCD_DispWindow_Start_PAGE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	80bb      	strh	r3, [r7, #4]
        }

        LCD_DrawChar(usC, usP, *pStr);
 8001c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	88b9      	ldrh	r1, [r7, #4]
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5d 	bl	8001b3c <LCD_DrawChar>

        pStr++;
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	3301      	adds	r3, #1
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        usC += WIDTH_EN_CHAR;
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	80fb      	strh	r3, [r7, #6]
    while (*pStr != '\0')
 8001c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1de      	bne.n	8001c54 <LCD_DrawFloat+0x2c>
    }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	3740      	adds	r7, #64	; 0x40
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	08009874 	.word	0x08009874

08001ca4 <LCD_DrawTimeDate>:

void LCD_DrawTimeDate(uint16_t usC, uint16_t usP, int hours, int minutes, int seconds) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b094      	sub	sp, #80	; 0x50
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	81bb      	strh	r3, [r7, #12]
    char buffer[50];
    sprintf(buffer, "%02d:%02d:%02d", hours, minutes, seconds);
 8001cb6:	f107 0010 	add.w	r0, r7, #16
 8001cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	4916      	ldr	r1, [pc, #88]	; (8001d1c <LCD_DrawTimeDate+0x78>)
 8001cc4:	f003 fb78 	bl	80053b8 <siprintf>
    const char* pStr = buffer;
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44

    while (*pStr != '\0') {
 8001cce:	e01c      	b.n	8001d0a <LCD_DrawTimeDate+0x66>
        if ((usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR) > LCD_DispWindow_COLUMN) {
 8001cd0:	89fb      	ldrh	r3, [r7, #14]
 8001cd2:	2be8      	cmp	r3, #232	; 0xe8
 8001cd4:	d904      	bls.n	8001ce0 <LCD_DrawTimeDate+0x3c>
            usC = LCD_DispWindow_Start_COLUMN;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	81fb      	strh	r3, [r7, #14]
            usP += HEIGHT_EN_CHAR;
 8001cda:	89bb      	ldrh	r3, [r7, #12]
 8001cdc:	3310      	adds	r3, #16
 8001cde:	81bb      	strh	r3, [r7, #12]
        }

        if ((usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR) > LCD_DispWindow_PAGE) {
 8001ce0:	89bb      	ldrh	r3, [r7, #12]
 8001ce2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001ce6:	d903      	bls.n	8001cf0 <LCD_DrawTimeDate+0x4c>
            usC = LCD_DispWindow_Start_COLUMN;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	81fb      	strh	r3, [r7, #14]
            usP = LCD_DispWindow_Start_PAGE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	81bb      	strh	r3, [r7, #12]
        }

        LCD_DrawChar(usC, usP, *pStr);
 8001cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cf2:	781a      	ldrb	r2, [r3, #0]
 8001cf4:	89b9      	ldrh	r1, [r7, #12]
 8001cf6:	89fb      	ldrh	r3, [r7, #14]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff1f 	bl	8001b3c <LCD_DrawChar>

        pStr++;
 8001cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d00:	3301      	adds	r3, #1
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
        usC += WIDTH_EN_CHAR;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
 8001d06:	3308      	adds	r3, #8
 8001d08:	81fb      	strh	r3, [r7, #14]
    while (*pStr != '\0') {
 8001d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1de      	bne.n	8001cd0 <LCD_DrawTimeDate+0x2c>
    }
}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3748      	adds	r7, #72	; 0x48
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	0800987c 	.word	0x0800987c

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b096      	sub	sp, #88	; 0x58
 8001d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f000 fdd1 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f8ed 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d2e:	f000 f9af 	bl	8002090 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001d32:	f000 fa19 	bl	8002168 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001d36:	f000 f981 	bl	800203c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001d3a:	f000 f955 	bl	8001fe8 <MX_USART1_UART_Init>
  MX_UART5_Init();
 8001d3e:	f000 f929 	bl	8001f94 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	LCD_INIT();
 8001d42:	f7ff fcde 	bl	8001702 <LCD_INIT>
	// HAL_GPIO_WritePin(GPS_GPIO_Port, GPS_Pin, GPIO_PIN_SET);
	GPS_Init();
 8001d46:	f7ff fa37 	bl	80011b8 <GPS_Init>
	HAL_UART_Receive_IT (&huart1, &PCInt, 1);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	495e      	ldr	r1, [pc, #376]	; (8001ec8 <main+0x1a8>)
 8001d4e:	485f      	ldr	r0, [pc, #380]	; (8001ecc <main+0x1ac>)
 8001d50:	f001 ff60 	bl	8003c14 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT (&huart5, &LoraInt, 1);
 8001d54:	2201      	movs	r2, #1
 8001d56:	495e      	ldr	r1, [pc, #376]	; (8001ed0 <main+0x1b0>)
 8001d58:	485e      	ldr	r0, [pc, #376]	; (8001ed4 <main+0x1b4>)
 8001d5a:	f001 ff5b 	bl	8003c14 <HAL_UART_Receive_IT>
//				    memset(PCMsg, 0, 20); // clear message buffer
//				    Pindex = 0;
//				    FromPCMsgComplete = 0;
//				  }

			if (FromLoraMsgComplete){
 8001d5e:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <main+0x1b8>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d011      	beq.n	8001d8a <main+0x6a>
				    Lindex = 0;
 8001d66:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <main+0x1bc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
				    HAL_UART_Transmit(&huart1, loraMsg, sizeof(loraMsg), 300); // transmit to PC for display
 8001d6c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001d70:	22c8      	movs	r2, #200	; 0xc8
 8001d72:	495b      	ldr	r1, [pc, #364]	; (8001ee0 <main+0x1c0>)
 8001d74:	4855      	ldr	r0, [pc, #340]	; (8001ecc <main+0x1ac>)
 8001d76:	f001 febb 	bl	8003af0 <HAL_UART_Transmit>
				    memset(loraMsg, 0, 200); // clear message buffer
 8001d7a:	22c8      	movs	r2, #200	; 0xc8
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4858      	ldr	r0, [pc, #352]	; (8001ee0 <main+0x1c0>)
 8001d80:	f002 fca0 	bl	80046c4 <memset>
				    FromLoraMsgComplete = 0;
 8001d84:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <main+0x1b8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	701a      	strb	r2, [r3, #0]
		}

		LCD_DrawString(7, 15, "Hiii!");
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <main+0x1c4>)
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	2007      	movs	r0, #7
 8001d90:	f7ff ff1a 	bl	8001bc8 <LCD_DrawString>
		LCD_DrawString(7, 35, "This is current pet location.");
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <main+0x1c8>)
 8001d96:	2123      	movs	r1, #35	; 0x23
 8001d98:	2007      	movs	r0, #7
 8001d9a:	f7ff ff15 	bl	8001bc8 <LCD_DrawString>

//		HAL_UART_Transmit(&huart1, (uint8_t*) "Start", sizeof("Start") - 1,
//				HAL_MAX_DELAY);

		LCD_DrawString(10, 60, "Date: ");
 8001d9e:	4a53      	ldr	r2, [pc, #332]	; (8001eec <main+0x1cc>)
 8001da0:	213c      	movs	r1, #60	; 0x3c
 8001da2:	200a      	movs	r0, #10
 8001da4:	f7ff ff10 	bl	8001bc8 <LCD_DrawString>
		LCD_DrawTimeDate(120, 60, GPS.year, GPS.month, GPS.day);
 8001da8:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <main+0x1d0>)
 8001daa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <main+0x1d0>)
 8001dae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <main+0x1d0>)
 8001db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	213c      	movs	r1, #60	; 0x3c
 8001dba:	2078      	movs	r0, #120	; 0x78
 8001dbc:	f7ff ff72 	bl	8001ca4 <LCD_DrawTimeDate>

		char buffer[20];
		sprintf(buffer, "%02d,%02d,%02d \r\n", GPS.year, GPS.month, GPS.day);
 8001dc0:	4b4b      	ldr	r3, [pc, #300]	; (8001ef0 <main+0x1d0>)
 8001dc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <main+0x1d0>)
 8001dc6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <main+0x1d0>)
 8001dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dcc:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4947      	ldr	r1, [pc, #284]	; (8001ef4 <main+0x1d4>)
 8001dd6:	f003 faef 	bl	80053b8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),HAL_MAX_DELAY);
 8001dda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fa22 	bl	8000228 <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df0:	4836      	ldr	r0, [pc, #216]	; (8001ecc <main+0x1ac>)
 8001df2:	f001 fe7d 	bl	8003af0 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart5, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
//				HAL_MAX_DELAY);

		LCD_DrawString(10, 80, "Time: ");
 8001df6:	4a40      	ldr	r2, [pc, #256]	; (8001ef8 <main+0x1d8>)
 8001df8:	2150      	movs	r1, #80	; 0x50
 8001dfa:	200a      	movs	r0, #10
 8001dfc:	f7ff fee4 	bl	8001bc8 <LCD_DrawString>
		LCD_DrawTimeDate(120, 80, GPS.hours, GPS.minutes, GPS.seconds);
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <main+0x1d0>)
 8001e02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <main+0x1d0>)
 8001e06:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <main+0x1d0>)
 8001e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	2150      	movs	r1, #80	; 0x50
 8001e12:	2078      	movs	r0, #120	; 0x78
 8001e14:	f7ff ff46 	bl	8001ca4 <LCD_DrawTimeDate>

		char buffer1[20];
		sprintf(buffer1, "%02d,%02d,%02d \r\n", GPS.hours, GPS.minutes,
 8001e18:	4b35      	ldr	r3, [pc, #212]	; (8001ef0 <main+0x1d0>)
 8001e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <main+0x1d0>)
 8001e1e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <main+0x1d0>)
 8001e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e24:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4931      	ldr	r1, [pc, #196]	; (8001ef4 <main+0x1d4>)
 8001e2e:	f003 fac3 	bl	80053b8 <siprintf>
				GPS.seconds);
//		HAL_UART_Transmit(&huart5, (uint8_t*) buffer1, strlen(buffer1), HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer1, strlen(buffer1),
//				HAL_MAX_DELAY);

		LCD_DrawString(10, 100, "Longitude: ");
 8001e32:	4a32      	ldr	r2, [pc, #200]	; (8001efc <main+0x1dc>)
 8001e34:	2164      	movs	r1, #100	; 0x64
 8001e36:	200a      	movs	r0, #10
 8001e38:	f7ff fec6 	bl	8001bc8 <LCD_DrawString>
		LCD_DrawFloat(120, 100, GPS.dec_latitude);
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <main+0x1d0>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	461a      	mov	r2, r3
 8001e42:	2164      	movs	r1, #100	; 0x64
 8001e44:	2078      	movs	r0, #120	; 0x78
 8001e46:	f7ff feef 	bl	8001c28 <LCD_DrawFloat>
		//LCD_DrawFloat(150, 100, nmea_longitude);
		char buffer2[20];
		sprintf(buffer2, "%f \r\n", GPS.dec_latitude);
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <main+0x1d0>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb56 	bl	8000500 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	f107 0014 	add.w	r0, r7, #20
 8001e5c:	4928      	ldr	r1, [pc, #160]	; (8001f00 <main+0x1e0>)
 8001e5e:	f003 faab 	bl	80053b8 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*) buffer2, strlen(buffer2), HAL_MAX_DELAY);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe f9de 	bl	8000228 <strlen>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	f107 0114 	add.w	r1, r7, #20
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e78:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <main+0x1b4>)
 8001e7a:	f001 fe39 	bl	8003af0 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, (uint8_t*) buffer2, strlen(buffer2),
//				HAL_MAX_DELAY);

		LCD_DrawString(10, 120, "Latitude: ");
 8001e7e:	4a21      	ldr	r2, [pc, #132]	; (8001f04 <main+0x1e4>)
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	200a      	movs	r0, #10
 8001e84:	f7ff fea0 	bl	8001bc8 <LCD_DrawString>
		LCD_DrawFloat(120, 120, GPS.dec_longitude);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <main+0x1d0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2178      	movs	r1, #120	; 0x78
 8001e90:	2078      	movs	r0, #120	; 0x78
 8001e92:	f7ff fec9 	bl	8001c28 <LCD_DrawFloat>
		//LCD_DrawFloat(150, 120, nmea_latitude);
		char buffer3[20];
		sprintf(buffer3, "%f \r\n", GPS.dec_longitude);
 8001e96:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <main+0x1d0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb30 	bl	8000500 <__aeabi_f2d>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	4916      	ldr	r1, [pc, #88]	; (8001f00 <main+0x1e0>)
 8001ea8:	f003 fa86 	bl	80053b8 <siprintf>
		HAL_UART_Transmit(&huart5, (uint8_t*) buffer3, strlen(buffer3), HAL_MAX_DELAY);
 8001eac:	463b      	mov	r3, r7
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe f9ba 	bl	8000228 <strlen>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	4639      	mov	r1, r7
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <main+0x1b4>)
 8001ec0:	f001 fe16 	bl	8003af0 <HAL_UART_Transmit>
	while (1) {
 8001ec4:	e74b      	b.n	8001d5e <main+0x3e>
 8001ec6:	bf00      	nop
 8001ec8:	20000412 	.word	0x20000412
 8001ecc:	200002c8 	.word	0x200002c8
 8001ed0:	20000413 	.word	0x20000413
 8001ed4:	20000284 	.word	0x20000284
 8001ed8:	20000415 	.word	0x20000415
 8001edc:	20000411 	.word	0x20000411
 8001ee0:	2000042c 	.word	0x2000042c
 8001ee4:	0800988c 	.word	0x0800988c
 8001ee8:	08009894 	.word	0x08009894
 8001eec:	080098b4 	.word	0x080098b4
 8001ef0:	20000398 	.word	0x20000398
 8001ef4:	080098bc 	.word	0x080098bc
 8001ef8:	080098d0 	.word	0x080098d0
 8001efc:	080098d8 	.word	0x080098d8
 8001f00:	080098e4 	.word	0x080098e4
 8001f04:	080098ec 	.word	0x080098ec

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b090      	sub	sp, #64	; 0x40
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0318 	add.w	r3, r7, #24
 8001f12:	2228      	movs	r2, #40	; 0x28
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fbd4 	bl	80046c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 f919 	bl	8003188 <HAL_RCC_OscConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f5c:	f000 fa02 	bl	8002364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f60:	230f      	movs	r3, #15
 8001f62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f64:	2302      	movs	r3, #2
 8001f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f001 fb86 	bl	800368c <HAL_RCC_ClockConfig>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f86:	f000 f9ed 	bl	8002364 <Error_Handler>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3740      	adds	r7, #64	; 0x40
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_UART5_Init+0x50>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fa0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001fa4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_UART5_Init+0x4c>)
 8001fcc:	f001 fd43 	bl	8003a56 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001fd6:	f000 f9c5 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000284 	.word	0x20000284
 8001fe4:	40005000 	.word	0x40005000

08001fe8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	; (8002038 <MX_USART1_UART_Init+0x50>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_USART1_UART_Init+0x4c>)
 8002020:	f001 fd19 	bl	8003a56 <HAL_UART_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800202a:	f000 f99b 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002c8 	.word	0x200002c8
 8002038:	40013800 	.word	0x40013800

0800203c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
//
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <MX_USART3_UART_Init+0x50>)
 8002044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002048:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800204c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_USART3_UART_Init+0x4c>)
 8002074:	f001 fcef 	bl	8003a56 <HAL_UART_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800207e:	f000 f971 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
//
  /* USER CODE END USART3_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000030c 	.word	0x2000030c
 800208c:	40004800 	.word	0x40004800

08002090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <MX_GPIO_Init+0xcc>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	; (800215c <MX_GPIO_Init+0xcc>)
 80020aa:	f043 0310 	orr.w	r3, r3, #16
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <MX_GPIO_Init+0xcc>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <MX_GPIO_Init+0xcc>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a26      	ldr	r2, [pc, #152]	; (800215c <MX_GPIO_Init+0xcc>)
 80020c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <MX_GPIO_Init+0xcc>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <MX_GPIO_Init+0xcc>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <MX_GPIO_Init+0xcc>)
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <MX_GPIO_Init+0xcc>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <MX_GPIO_Init+0xcc>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <MX_GPIO_Init+0xcc>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b18      	ldr	r3, [pc, #96]	; (800215c <MX_GPIO_Init+0xcc>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002104:	2201      	movs	r2, #1
 8002106:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210a:	4815      	ldr	r0, [pc, #84]	; (8002160 <MX_GPIO_Init+0xd0>)
 800210c:	f001 f824 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2102      	movs	r1, #2
 8002114:	4813      	ldr	r0, [pc, #76]	; (8002164 <MX_GPIO_Init+0xd4>)
 8002116:	f001 f81f 	bl	8003158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	4619      	mov	r1, r3
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <MX_GPIO_Init+0xd0>)
 8002134:	f000 fe7c 	bl	8002e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002138:	2302      	movs	r3, #2
 800213a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213c:	2301      	movs	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_GPIO_Init+0xd4>)
 8002150:	f000 fe6e 	bl	8002e30 <HAL_GPIO_Init>

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	40011400 	.word	0x40011400
 8002164:	40011800 	.word	0x40011800

08002168 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
 800217c:	615a      	str	r2, [r3, #20]
 800217e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <MX_FSMC_Init+0xbc>)
 8002182:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002188:	4b26      	ldr	r3, [pc, #152]	; (8002224 <MX_FSMC_Init+0xbc>)
 800218a:	4a27      	ldr	r2, [pc, #156]	; (8002228 <MX_FSMC_Init+0xc0>)
 800218c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <MX_FSMC_Init+0xbc>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <MX_FSMC_Init+0xbc>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <MX_FSMC_Init+0xbc>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021a2:	2210      	movs	r2, #16
 80021a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_FSMC_Init+0xbc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80021de:	230f      	movs	r3, #15
 80021e0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80021e2:	230f      	movs	r3, #15
 80021e4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80021e6:	23ff      	movs	r3, #255	; 0xff
 80021e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80021ea:	230f      	movs	r3, #15
 80021ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80021ee:	2310      	movs	r3, #16
 80021f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80021f2:	2311      	movs	r3, #17
 80021f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	4808      	ldr	r0, [pc, #32]	; (8002224 <MX_FSMC_Init+0xbc>)
 8002202:	f001 fbdb 	bl	80039bc <HAL_SRAM_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 800220c:	f000 f8aa 	bl	8002364 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <MX_FSMC_Init+0xc4>)
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	4a05      	ldr	r2, [pc, #20]	; (800222c <MX_FSMC_Init+0xc4>)
 8002216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000350 	.word	0x20000350
 8002228:	a0000104 	.word	0xa0000104
 800222c:	40010000 	.word	0x40010000

08002230 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(Lindex > 198) Lindex = 1; // catch overflow
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2bc6      	cmp	r3, #198	; 0xc6
 800223e:	d902      	bls.n	8002246 <HAL_UART_RxCpltCallback+0x16>
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
	if(Pindex > 198) Pindex = 1; // catch overflow
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2bc6      	cmp	r3, #198	; 0xc6
 800224c:	d902      	bls.n	8002254 <HAL_UART_RxCpltCallback+0x24>
 800224e:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
	if (huart -> Instance == USART1){
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a37      	ldr	r2, [pc, #220]	; (8002338 <HAL_UART_RxCpltCallback+0x108>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d12b      	bne.n	80022b6 <HAL_UART_RxCpltCallback+0x86>
			if (PCInt == 10){
 800225e:	4b37      	ldr	r3, [pc, #220]	; (800233c <HAL_UART_RxCpltCallback+0x10c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b0a      	cmp	r3, #10
 8002264:	d112      	bne.n	800228c <HAL_UART_RxCpltCallback+0x5c>
				PCMsg[Pindex] =  huart->Instance->DR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	b2c9      	uxtb	r1, r1
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_UART_RxCpltCallback+0x110>)
 8002276:	5499      	strb	r1, [r3, r2]
				Pindex++;
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 8002282:	701a      	strb	r2, [r3, #0]
				FromPCMsgComplete = 1;
 8002284:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <HAL_UART_RxCpltCallback+0x114>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e00e      	b.n	80022aa <HAL_UART_RxCpltCallback+0x7a>
			} else {
				PCMsg[Pindex] =  huart->Instance->DR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	b2c9      	uxtb	r1, r1
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <HAL_UART_RxCpltCallback+0x110>)
 800229c:	5499      	strb	r1, [r3, r2]
				Pindex++;
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b23      	ldr	r3, [pc, #140]	; (8002334 <HAL_UART_RxCpltCallback+0x104>)
 80022a8:	701a      	strb	r2, [r3, #0]
			}
		    HAL_UART_Receive_IT (&huart1, &PCInt, 1);
 80022aa:	2201      	movs	r2, #1
 80022ac:	4923      	ldr	r1, [pc, #140]	; (800233c <HAL_UART_RxCpltCallback+0x10c>)
 80022ae:	4826      	ldr	r0, [pc, #152]	; (8002348 <HAL_UART_RxCpltCallback+0x118>)
 80022b0:	f001 fcb0 	bl	8003c14 <HAL_UART_Receive_IT>
					}
			HAL_UART_Receive_IT (&huart5, &LoraInt, 1);
	} else if(huart -> Instance == USART3){
			GPS_UART_CallBack();
	}
 }
 80022b4:	e037      	b.n	8002326 <HAL_UART_RxCpltCallback+0xf6>
	} else if(huart -> Instance == UART5){
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a24      	ldr	r2, [pc, #144]	; (800234c <HAL_UART_RxCpltCallback+0x11c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d12b      	bne.n	8002318 <HAL_UART_RxCpltCallback+0xe8>
			if (LoraInt == 10){
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_UART_RxCpltCallback+0x120>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b0a      	cmp	r3, #10
 80022c6:	d112      	bne.n	80022ee <HAL_UART_RxCpltCallback+0xbe>
				loraMsg[Lindex] =  huart->Instance->DR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6859      	ldr	r1, [r3, #4]
 80022ce:	4b18      	ldr	r3, [pc, #96]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	b2c9      	uxtb	r1, r1
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <HAL_UART_RxCpltCallback+0x124>)
 80022d8:	5499      	strb	r1, [r3, r2]
				Lindex++;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 80022e4:	701a      	strb	r2, [r3, #0]
				FromLoraMsgComplete = 1;
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_UART_RxCpltCallback+0x128>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
 80022ec:	e00e      	b.n	800230c <HAL_UART_RxCpltCallback+0xdc>
					loraMsg[Lindex] =  huart->Instance->DR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	b2c9      	uxtb	r1, r1
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_UART_RxCpltCallback+0x124>)
 80022fe:	5499      	strb	r1, [r3, r2]
					Lindex++;
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	b2da      	uxtb	r2, r3
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_UART_RxCpltCallback+0x100>)
 800230a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT (&huart5, &LoraInt, 1);
 800230c:	2201      	movs	r2, #1
 800230e:	4910      	ldr	r1, [pc, #64]	; (8002350 <HAL_UART_RxCpltCallback+0x120>)
 8002310:	4812      	ldr	r0, [pc, #72]	; (800235c <HAL_UART_RxCpltCallback+0x12c>)
 8002312:	f001 fc7f 	bl	8003c14 <HAL_UART_Receive_IT>
 }
 8002316:	e006      	b.n	8002326 <HAL_UART_RxCpltCallback+0xf6>
	} else if(huart -> Instance == USART3){
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_UART_RxCpltCallback+0x130>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_UART_RxCpltCallback+0xf6>
			GPS_UART_CallBack();
 8002322:	f7fe ff57 	bl	80011d4 <GPS_UART_CallBack>
 }
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000411 	.word	0x20000411
 8002334:	20000410 	.word	0x20000410
 8002338:	40013800 	.word	0x40013800
 800233c:	20000412 	.word	0x20000412
 8002340:	20000418 	.word	0x20000418
 8002344:	20000414 	.word	0x20000414
 8002348:	200002c8 	.word	0x200002c8
 800234c:	40005000 	.word	0x40005000
 8002350:	20000413 	.word	0x20000413
 8002354:	2000042c 	.word	0x2000042c
 8002358:	20000415 	.word	0x20000415
 800235c:	20000284 	.word	0x20000284
 8002360:	40004800 	.word	0x40004800

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>
	...

08002370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_MspInit+0x5c>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_MspInit+0x5c>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6193      	str	r3, [r2, #24]
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <HAL_MspInit+0x5c>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_MspInit+0x5c>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <HAL_MspInit+0x5c>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <HAL_MspInit+0x5c>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_MspInit+0x60>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <HAL_MspInit+0x60>)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000

080023d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08e      	sub	sp, #56	; 0x38
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <HAL_UART_MspInit+0x1d8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d145      	bne.n	8002480 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f4:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4a6d      	ldr	r2, [pc, #436]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 80023fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023fe:	61d3      	str	r3, [r2, #28]
 8002400:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002408:	623b      	str	r3, [r7, #32]
 800240a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240c:	4b68      	ldr	r3, [pc, #416]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a67      	ldr	r2, [pc, #412]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0310 	and.w	r3, r3, #16
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a61      	ldr	r2, [pc, #388]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	6193      	str	r3, [r2, #24]
 8002430:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	61bb      	str	r3, [r7, #24]
 800243a:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800243c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	4619      	mov	r1, r3
 8002450:	4858      	ldr	r0, [pc, #352]	; (80025b4 <HAL_UART_MspInit+0x1e0>)
 8002452:	f000 fced 	bl	8002e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002456:	2304      	movs	r3, #4
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	4619      	mov	r1, r3
 8002468:	4853      	ldr	r0, [pc, #332]	; (80025b8 <HAL_UART_MspInit+0x1e4>)
 800246a:	f000 fce1 	bl	8002e30 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	2035      	movs	r0, #53	; 0x35
 8002474:	f000 fb63 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002478:	2035      	movs	r0, #53	; 0x35
 800247a:	f000 fb7c 	bl	8002b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800247e:	e090      	b.n	80025a2 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_UART_MspInit+0x1e8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d13a      	bne.n	8002500 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4a48      	ldr	r2, [pc, #288]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002494:	6193      	str	r3, [r2, #24]
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6193      	str	r3, [r2, #24]
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024cc:	4619      	mov	r1, r3
 80024ce:	483c      	ldr	r0, [pc, #240]	; (80025c0 <HAL_UART_MspInit+0x1ec>)
 80024d0:	f000 fcae 	bl	8002e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4835      	ldr	r0, [pc, #212]	; (80025c0 <HAL_UART_MspInit+0x1ec>)
 80024ea:	f000 fca1 	bl	8002e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2025      	movs	r0, #37	; 0x25
 80024f4:	f000 fb23 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024f8:	2025      	movs	r0, #37	; 0x25
 80024fa:	f000 fb3c 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 80024fe:	e050      	b.n	80025a2 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <HAL_UART_MspInit+0x1f0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d14b      	bne.n	80025a2 <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6193      	str	r3, [r2, #24]
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_UART_MspInit+0x1dc>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800253a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800254c:	4619      	mov	r1, r3
 800254e:	4819      	ldr	r0, [pc, #100]	; (80025b4 <HAL_UART_MspInit+0x1e0>)
 8002550:	f000 fc6e 	bl	8002e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002554:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002566:	4619      	mov	r1, r3
 8002568:	4812      	ldr	r0, [pc, #72]	; (80025b4 <HAL_UART_MspInit+0x1e0>)
 800256a:	f000 fc61 	bl	8002e30 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_UART_MspInit+0x1f4>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
 800257c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	f043 0310 	orr.w	r3, r3, #16
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_UART_MspInit+0x1f4>)
 800258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002590:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2100      	movs	r1, #0
 8002596:	2027      	movs	r0, #39	; 0x27
 8002598:	f000 fad1 	bl	8002b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800259c:	2027      	movs	r0, #39	; 0x27
 800259e:	f000 faea 	bl	8002b76 <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3738      	adds	r7, #56	; 0x38
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40005000 	.word	0x40005000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40011000 	.word	0x40011000
 80025b8:	40011400 	.word	0x40011400
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40010800 	.word	0x40010800
 80025c4:	40004800 	.word	0x40004800
 80025c8:	40010000 	.word	0x40010000

080025cc <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025d2:	f107 0308 	add.w	r3, r7, #8
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_FSMC_MspInit+0x78>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d129      	bne.n	800263c <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_FSMC_MspInit+0x78>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_FSMC_MspInit+0x7c>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_FSMC_MspInit+0x7c>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6153      	str	r3, [r2, #20]
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_FSMC_MspInit+0x7c>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	607b      	str	r3, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002606:	f64f 7380 	movw	r3, #65408	; 0xff80
 800260a:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002614:	f107 0308 	add.w	r3, r7, #8
 8002618:	4619      	mov	r1, r3
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <HAL_FSMC_MspInit+0x80>)
 800261c:	f000 fc08 	bl	8002e30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002620:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002624:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f107 0308 	add.w	r3, r7, #8
 8002632:	4619      	mov	r1, r3
 8002634:	4806      	ldr	r0, [pc, #24]	; (8002650 <HAL_FSMC_MspInit+0x84>)
 8002636:	f000 fbfb 	bl	8002e30 <HAL_GPIO_Init>
 800263a:	e000      	b.n	800263e <HAL_FSMC_MspInit+0x72>
    return;
 800263c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200004f4 	.word	0x200004f4
 8002648:	40021000 	.word	0x40021000
 800264c:	40011800 	.word	0x40011800
 8002650:	40011400 	.word	0x40011400

08002654 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800265c:	f7ff ffb6 	bl	80025cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800266c:	e7fe      	b.n	800266c <NMI_Handler+0x4>

0800266e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <HardFault_Handler+0x4>

08002674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <MemManage_Handler+0x4>

0800267a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267e:	e7fe      	b.n	800267e <BusFault_Handler+0x4>

08002680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <UsageFault_Handler+0x4>

08002686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002692:	b480      	push	{r7}
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ae:	f000 f953 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <USART1_IRQHandler+0x10>)
 80026be:	f001 fad9 	bl	8003c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002c8 	.word	0x200002c8

080026cc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <USART3_IRQHandler+0x10>)
 80026d2:	f001 facf 	bl	8003c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000030c 	.word	0x2000030c

080026e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <UART5_IRQHandler+0x10>)
 80026e6:	f001 fac5 	bl	8003c74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000284 	.word	0x20000284

080026f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
	return 1;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <_kill>:

int _kill(int pid, int sig)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800270c:	f001 ffb0 	bl	8004670 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	2216      	movs	r2, #22
 8002714:	601a      	str	r2, [r3, #0]
	return -1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_exit>:

void _exit (int status)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800272a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffe7 	bl	8002702 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002734:	e7fe      	b.n	8002734 <_exit+0x12>

08002736 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b086      	sub	sp, #24
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e00a      	b.n	800275e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002748:	f3af 8000 	nop.w
 800274c:	4601      	mov	r1, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60ba      	str	r2, [r7, #8]
 8002754:	b2ca      	uxtb	r2, r1
 8002756:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3301      	adds	r3, #1
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbf0      	blt.n	8002748 <_read+0x12>
	}

return len;
 8002766:	687b      	ldr	r3, [r7, #4]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e009      	b.n	8002796 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	60ba      	str	r2, [r7, #8]
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	3301      	adds	r3, #1
 8002794:	617b      	str	r3, [r7, #20]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	dbf1      	blt.n	8002782 <_write+0x12>
	}
	return len;
 800279e:	687b      	ldr	r3, [r7, #4]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_close>:

int _close(int file)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	return -1;
 80027b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027ce:	605a      	str	r2, [r3, #4]
	return 0;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_isatty>:

int _isatty(int file)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
	return 0;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002810:	4a14      	ldr	r2, [pc, #80]	; (8002864 <_sbrk+0x5c>)
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <_sbrk+0x60>)
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <_sbrk+0x64>)
 8002826:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_sbrk+0x68>)
 8002828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <_sbrk+0x64>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4413      	add	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d207      	bcs.n	8002848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002838:	f001 ff1a 	bl	8004670 <__errno>
 800283c:	4603      	mov	r3, r0
 800283e:	220c      	movs	r2, #12
 8002840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002846:	e009      	b.n	800285c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <_sbrk+0x64>)
 8002858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800285a:	68fb      	ldr	r3, [r7, #12]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	20010000 	.word	0x20010000
 8002868:	00000400 	.word	0x00000400
 800286c:	200004f8 	.word	0x200004f8
 8002870:	20000510 	.word	0x20000510

08002874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002882:	490d      	ldr	r1, [pc, #52]	; (80028b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002888:	e002      	b.n	8002890 <LoopCopyDataInit>

0800288a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800288c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800288e:	3304      	adds	r3, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002894:	d3f9      	bcc.n	800288a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002898:	4c0a      	ldr	r4, [pc, #40]	; (80028c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800289c:	e001      	b.n	80028a2 <LoopFillZerobss>

0800289e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800289e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a0:	3204      	adds	r2, #4

080028a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a4:	d3fb      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028a6:	f7ff ffe5 	bl	8002874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028aa:	f001 fee7 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff fa37 	bl	8001d20 <main>
  bx lr
 80028b2:	4770      	bx	lr
  ldr r0, =_sdata
 80028b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028bc:	0800a3dc 	.word	0x0800a3dc
  ldr r2, =_sbss
 80028c0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028c4:	20000510 	.word	0x20000510

080028c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028c8:	e7fe      	b.n	80028c8 <ADC1_2_IRQHandler>
	...

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_Init+0x28>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <HAL_Init+0x28>)
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028dc:	2003      	movs	r0, #3
 80028de:	f000 f923 	bl	8002b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e2:	200f      	movs	r0, #15
 80028e4:	f000 f808 	bl	80028f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fd42 	bl	8002370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40022000 	.word	0x40022000

080028f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x54>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_InitTick+0x58>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f93b 	bl	8002b92 <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002934:	f000 f903 	bl	8002b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x5c>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000000 	.word	0x20000000
 8002950:	20000008 	.word	0x20000008
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_IncTick+0x1c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_IncTick+0x20>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a03      	ldr	r2, [pc, #12]	; (8002978 <HAL_IncTick+0x20>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000008 	.word	0x20000008
 8002978:	200004fc 	.word	0x200004fc

0800297c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <HAL_GetTick+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	200004fc 	.word	0x200004fc

08002990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	60d3      	str	r3, [r2, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <__NVIC_GetPriorityGrouping+0x18>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0a1b      	lsrs	r3, r3, #8
 80029e2:	f003 0307 	and.w	r3, r3, #7
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	db0b      	blt.n	8002a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	4906      	ldr	r1, [pc, #24]	; (8002a28 <__NVIC_EnableIRQ+0x34>)
 8002a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	2001      	movs	r0, #1
 8002a16:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	e000e100 	.word	0xe000e100

08002a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db0a      	blt.n	8002a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	490c      	ldr	r1, [pc, #48]	; (8002a78 <__NVIC_SetPriority+0x4c>)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	440b      	add	r3, r1
 8002a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a54:	e00a      	b.n	8002a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4908      	ldr	r1, [pc, #32]	; (8002a7c <__NVIC_SetPriority+0x50>)
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3b04      	subs	r3, #4
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	761a      	strb	r2, [r3, #24]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	; 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f1c3 0307 	rsb	r3, r3, #7
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	bf28      	it	cs
 8002a9e:	2304      	movcs	r3, #4
 8002aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d902      	bls.n	8002ab0 <NVIC_EncodePriority+0x30>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3b03      	subs	r3, #3
 8002aae:	e000      	b.n	8002ab2 <NVIC_EncodePriority+0x32>
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	4313      	orrs	r3, r2
         );
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3724      	adds	r7, #36	; 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002af4:	d301      	bcc.n	8002afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00f      	b.n	8002b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <SysTick_Config+0x40>)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b02:	210f      	movs	r1, #15
 8002b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b08:	f7ff ff90 	bl	8002a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <SysTick_Config+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b12:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <SysTick_Config+0x40>)
 8002b14:	2207      	movs	r2, #7
 8002b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff2d 	bl	8002990 <__NVIC_SetPriorityGrouping>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
 8002b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b50:	f7ff ff42 	bl	80029d8 <__NVIC_GetPriorityGrouping>
 8002b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	6978      	ldr	r0, [r7, #20]
 8002b5c:	f7ff ff90 	bl	8002a80 <NVIC_EncodePriority>
 8002b60:	4602      	mov	r2, r0
 8002b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff5f 	bl	8002a2c <__NVIC_SetPriority>
}
 8002b6e:	bf00      	nop
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff ff35 	bl	80029f4 <__NVIC_EnableIRQ>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ffa2 	bl	8002ae4 <SysTick_Config>
 8002ba0:	4603      	mov	r3, r0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d008      	beq.n	8002bd2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e020      	b.n	8002c14 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 020e 	bic.w	r2, r2, #14
 8002be0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d005      	beq.n	8002c42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e0d6      	b.n	8002df0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 020e 	bic.w	r2, r2, #14
 8002c50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b64      	ldr	r3, [pc, #400]	; (8002dfc <HAL_DMA_Abort_IT+0x1dc>)
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d958      	bls.n	8002d20 <HAL_DMA_Abort_IT+0x100>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_DMA_Abort_IT+0x1e0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d04f      	beq.n	8002d18 <HAL_DMA_Abort_IT+0xf8>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <HAL_DMA_Abort_IT+0x1e4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d048      	beq.n	8002d14 <HAL_DMA_Abort_IT+0xf4>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <HAL_DMA_Abort_IT+0x1e8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d040      	beq.n	8002d0e <HAL_DMA_Abort_IT+0xee>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a5e      	ldr	r2, [pc, #376]	; (8002e0c <HAL_DMA_Abort_IT+0x1ec>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d038      	beq.n	8002d08 <HAL_DMA_Abort_IT+0xe8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_DMA_Abort_IT+0x1f0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d030      	beq.n	8002d02 <HAL_DMA_Abort_IT+0xe2>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a5b      	ldr	r2, [pc, #364]	; (8002e14 <HAL_DMA_Abort_IT+0x1f4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d028      	beq.n	8002cfc <HAL_DMA_Abort_IT+0xdc>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a53      	ldr	r2, [pc, #332]	; (8002dfc <HAL_DMA_Abort_IT+0x1dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d020      	beq.n	8002cf6 <HAL_DMA_Abort_IT+0xd6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_DMA_Abort_IT+0x1f8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_DMA_Abort_IT+0xd2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a56      	ldr	r2, [pc, #344]	; (8002e1c <HAL_DMA_Abort_IT+0x1fc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d012      	beq.n	8002cee <HAL_DMA_Abort_IT+0xce>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a54      	ldr	r2, [pc, #336]	; (8002e20 <HAL_DMA_Abort_IT+0x200>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_DMA_Abort_IT+0xc8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a53      	ldr	r2, [pc, #332]	; (8002e24 <HAL_DMA_Abort_IT+0x204>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <HAL_DMA_Abort_IT+0xc2>
 8002cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce0:	e01b      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ce6:	e018      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cec:	e015      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002cee:	2310      	movs	r3, #16
 8002cf0:	e013      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e011      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfa:	e00e      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002cfc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d00:	e00b      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d06:	e008      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d0c:	e005      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d12:	e002      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002d14:	2310      	movs	r3, #16
 8002d16:	e000      	b.n	8002d1a <HAL_DMA_Abort_IT+0xfa>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	4a43      	ldr	r2, [pc, #268]	; (8002e28 <HAL_DMA_Abort_IT+0x208>)
 8002d1c:	6053      	str	r3, [r2, #4]
 8002d1e:	e057      	b.n	8002dd0 <HAL_DMA_Abort_IT+0x1b0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a36      	ldr	r2, [pc, #216]	; (8002e00 <HAL_DMA_Abort_IT+0x1e0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d04f      	beq.n	8002dca <HAL_DMA_Abort_IT+0x1aa>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a35      	ldr	r2, [pc, #212]	; (8002e04 <HAL_DMA_Abort_IT+0x1e4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d048      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x1a6>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_DMA_Abort_IT+0x1e8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d040      	beq.n	8002dc0 <HAL_DMA_Abort_IT+0x1a0>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <HAL_DMA_Abort_IT+0x1ec>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d038      	beq.n	8002dba <HAL_DMA_Abort_IT+0x19a>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <HAL_DMA_Abort_IT+0x1f0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d030      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x194>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <HAL_DMA_Abort_IT+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d028      	beq.n	8002dae <HAL_DMA_Abort_IT+0x18e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <HAL_DMA_Abort_IT+0x1dc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d020      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x188>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <HAL_DMA_Abort_IT+0x1f8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d019      	beq.n	8002da4 <HAL_DMA_Abort_IT+0x184>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <HAL_DMA_Abort_IT+0x1fc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d012      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x180>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <HAL_DMA_Abort_IT+0x200>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00a      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x17a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a26      	ldr	r2, [pc, #152]	; (8002e24 <HAL_DMA_Abort_IT+0x204>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d102      	bne.n	8002d94 <HAL_DMA_Abort_IT+0x174>
 8002d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d92:	e01b      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d98:	e018      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9e:	e015      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002da0:	2310      	movs	r3, #16
 8002da2:	e013      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e011      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002da8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dac:	e00e      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002dae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002db2:	e00b      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002db8:	e008      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dbe:	e005      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dc4:	e002      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_Abort_IT+0x1ac>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_DMA_Abort_IT+0x20c>)
 8002dce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
    } 
  }
  return status;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40020080 	.word	0x40020080
 8002e00:	40020008 	.word	0x40020008
 8002e04:	4002001c 	.word	0x4002001c
 8002e08:	40020030 	.word	0x40020030
 8002e0c:	40020044 	.word	0x40020044
 8002e10:	40020058 	.word	0x40020058
 8002e14:	4002006c 	.word	0x4002006c
 8002e18:	40020408 	.word	0x40020408
 8002e1c:	4002041c 	.word	0x4002041c
 8002e20:	40020430 	.word	0x40020430
 8002e24:	40020444 	.word	0x40020444
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	40020000 	.word	0x40020000

08002e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b08b      	sub	sp, #44	; 0x2c
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e42:	e179      	b.n	8003138 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e44:	2201      	movs	r2, #1
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	f040 8168 	bne.w	8003132 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4a96      	ldr	r2, [pc, #600]	; (80030c0 <HAL_GPIO_Init+0x290>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d05e      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
 8002e6c:	4a94      	ldr	r2, [pc, #592]	; (80030c0 <HAL_GPIO_Init+0x290>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d875      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002e72:	4a94      	ldr	r2, [pc, #592]	; (80030c4 <HAL_GPIO_Init+0x294>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d058      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
 8002e78:	4a92      	ldr	r2, [pc, #584]	; (80030c4 <HAL_GPIO_Init+0x294>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d86f      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002e7e:	4a92      	ldr	r2, [pc, #584]	; (80030c8 <HAL_GPIO_Init+0x298>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d052      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
 8002e84:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_GPIO_Init+0x298>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d869      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002e8a:	4a90      	ldr	r2, [pc, #576]	; (80030cc <HAL_GPIO_Init+0x29c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d04c      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
 8002e90:	4a8e      	ldr	r2, [pc, #568]	; (80030cc <HAL_GPIO_Init+0x29c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d863      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002e96:	4a8e      	ldr	r2, [pc, #568]	; (80030d0 <HAL_GPIO_Init+0x2a0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d046      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
 8002e9c:	4a8c      	ldr	r2, [pc, #560]	; (80030d0 <HAL_GPIO_Init+0x2a0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d85d      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002ea2:	2b12      	cmp	r3, #18
 8002ea4:	d82a      	bhi.n	8002efc <HAL_GPIO_Init+0xcc>
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d859      	bhi.n	8002f5e <HAL_GPIO_Init+0x12e>
 8002eaa:	a201      	add	r2, pc, #4	; (adr r2, 8002eb0 <HAL_GPIO_Init+0x80>)
 8002eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb0:	08002f2b 	.word	0x08002f2b
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08002f17 	.word	0x08002f17
 8002ebc:	08002f59 	.word	0x08002f59
 8002ec0:	08002f5f 	.word	0x08002f5f
 8002ec4:	08002f5f 	.word	0x08002f5f
 8002ec8:	08002f5f 	.word	0x08002f5f
 8002ecc:	08002f5f 	.word	0x08002f5f
 8002ed0:	08002f5f 	.word	0x08002f5f
 8002ed4:	08002f5f 	.word	0x08002f5f
 8002ed8:	08002f5f 	.word	0x08002f5f
 8002edc:	08002f5f 	.word	0x08002f5f
 8002ee0:	08002f5f 	.word	0x08002f5f
 8002ee4:	08002f5f 	.word	0x08002f5f
 8002ee8:	08002f5f 	.word	0x08002f5f
 8002eec:	08002f5f 	.word	0x08002f5f
 8002ef0:	08002f5f 	.word	0x08002f5f
 8002ef4:	08002f0d 	.word	0x08002f0d
 8002ef8:	08002f21 	.word	0x08002f21
 8002efc:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_GPIO_Init+0x2a4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f02:	e02c      	b.n	8002f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e029      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	3304      	adds	r3, #4
 8002f12:	623b      	str	r3, [r7, #32]
          break;
 8002f14:	e024      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	623b      	str	r3, [r7, #32]
          break;
 8002f1e:	e01f      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	330c      	adds	r3, #12
 8002f26:	623b      	str	r3, [r7, #32]
          break;
 8002f28:	e01a      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f32:	2304      	movs	r3, #4
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e013      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f40:	2308      	movs	r3, #8
 8002f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	611a      	str	r2, [r3, #16]
          break;
 8002f4a:	e009      	b.n	8002f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f4c:	2308      	movs	r3, #8
 8002f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	615a      	str	r2, [r3, #20]
          break;
 8002f56:	e003      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
          break;
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x130>
          break;
 8002f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2bff      	cmp	r3, #255	; 0xff
 8002f64:	d801      	bhi.n	8002f6a <HAL_GPIO_Init+0x13a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	e001      	b.n	8002f6e <HAL_GPIO_Init+0x13e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2bff      	cmp	r3, #255	; 0xff
 8002f74:	d802      	bhi.n	8002f7c <HAL_GPIO_Init+0x14c>
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	e002      	b.n	8002f82 <HAL_GPIO_Init+0x152>
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	3b08      	subs	r3, #8
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	210f      	movs	r1, #15
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	401a      	ands	r2, r3
 8002f94:	6a39      	ldr	r1, [r7, #32]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80c1 	beq.w	8003132 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb0:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_GPIO_Init+0x2a8>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4a48      	ldr	r2, [pc, #288]	; (80030d8 <HAL_GPIO_Init+0x2a8>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6193      	str	r3, [r2, #24]
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <HAL_GPIO_Init+0x2a8>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc8:	4a44      	ldr	r2, [pc, #272]	; (80030dc <HAL_GPIO_Init+0x2ac>)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	220f      	movs	r2, #15
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3c      	ldr	r2, [pc, #240]	; (80030e0 <HAL_GPIO_Init+0x2b0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d01f      	beq.n	8003034 <HAL_GPIO_Init+0x204>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_GPIO_Init+0x2b4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d019      	beq.n	8003030 <HAL_GPIO_Init+0x200>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_GPIO_Init+0x2b8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d013      	beq.n	800302c <HAL_GPIO_Init+0x1fc>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a39      	ldr	r2, [pc, #228]	; (80030ec <HAL_GPIO_Init+0x2bc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00d      	beq.n	8003028 <HAL_GPIO_Init+0x1f8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <HAL_GPIO_Init+0x2c0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <HAL_GPIO_Init+0x1f4>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a37      	ldr	r2, [pc, #220]	; (80030f4 <HAL_GPIO_Init+0x2c4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_GPIO_Init+0x1f0>
 800301c:	2305      	movs	r3, #5
 800301e:	e00a      	b.n	8003036 <HAL_GPIO_Init+0x206>
 8003020:	2306      	movs	r3, #6
 8003022:	e008      	b.n	8003036 <HAL_GPIO_Init+0x206>
 8003024:	2304      	movs	r3, #4
 8003026:	e006      	b.n	8003036 <HAL_GPIO_Init+0x206>
 8003028:	2303      	movs	r3, #3
 800302a:	e004      	b.n	8003036 <HAL_GPIO_Init+0x206>
 800302c:	2302      	movs	r3, #2
 800302e:	e002      	b.n	8003036 <HAL_GPIO_Init+0x206>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_GPIO_Init+0x206>
 8003034:	2300      	movs	r3, #0
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	f002 0203 	and.w	r2, r2, #3
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	4093      	lsls	r3, r2
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003046:	4925      	ldr	r1, [pc, #148]	; (80030dc <HAL_GPIO_Init+0x2ac>)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4924      	ldr	r1, [pc, #144]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	43db      	mvns	r3, r3
 8003076:	4920      	ldr	r1, [pc, #128]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 8003078:	4013      	ands	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003088:	4b1b      	ldr	r3, [pc, #108]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	491a      	ldr	r1, [pc, #104]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	43db      	mvns	r3, r3
 800309e:	4916      	ldr	r1, [pc, #88]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d025      	beq.n	80030fc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	4910      	ldr	r1, [pc, #64]	; (80030f8 <HAL_GPIO_Init+0x2c8>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
 80030bc:	e025      	b.n	800310a <HAL_GPIO_Init+0x2da>
 80030be:	bf00      	nop
 80030c0:	10320000 	.word	0x10320000
 80030c4:	10310000 	.word	0x10310000
 80030c8:	10220000 	.word	0x10220000
 80030cc:	10210000 	.word	0x10210000
 80030d0:	10120000 	.word	0x10120000
 80030d4:	10110000 	.word	0x10110000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40010800 	.word	0x40010800
 80030e4:	40010c00 	.word	0x40010c00
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40011400 	.word	0x40011400
 80030f0:	40011800 	.word	0x40011800
 80030f4:	40011c00 	.word	0x40011c00
 80030f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <HAL_GPIO_Init+0x324>)
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	43db      	mvns	r3, r3
 8003104:	4913      	ldr	r1, [pc, #76]	; (8003154 <HAL_GPIO_Init+0x324>)
 8003106:	4013      	ands	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_GPIO_Init+0x324>)
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	490e      	ldr	r1, [pc, #56]	; (8003154 <HAL_GPIO_Init+0x324>)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	60cb      	str	r3, [r1, #12]
 8003122:	e006      	b.n	8003132 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_GPIO_Init+0x324>)
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	43db      	mvns	r3, r3
 800312c:	4909      	ldr	r1, [pc, #36]	; (8003154 <HAL_GPIO_Init+0x324>)
 800312e:	4013      	ands	r3, r2
 8003130:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	3301      	adds	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f47f ae7e 	bne.w	8002e44 <HAL_GPIO_Init+0x14>
  }
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	372c      	adds	r7, #44	; 0x2c
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40010400 	.word	0x40010400

08003158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	807b      	strh	r3, [r7, #2]
 8003164:	4613      	mov	r3, r2
 8003166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003168:	787b      	ldrb	r3, [r7, #1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800316e:	887a      	ldrh	r2, [r7, #2]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003174:	e003      	b.n	800317e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e272      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031a8:	4b92      	ldr	r3, [pc, #584]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00c      	beq.n	80031ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b4:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d112      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
 80031c0:	4b8c      	ldr	r3, [pc, #560]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d06c      	beq.n	80032b4 <HAL_RCC_OscConfig+0x12c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d168      	bne.n	80032b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e24c      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x76>
 80031f0:	4b80      	ldr	r3, [pc, #512]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a7f      	ldr	r2, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e02e      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b7b      	ldr	r3, [pc, #492]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7a      	ldr	r2, [pc, #488]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b78      	ldr	r3, [pc, #480]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a77      	ldr	r2, [pc, #476]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xbc>
 800322a:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a71      	ldr	r2, [pc, #452]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b6f      	ldr	r3, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6e      	ldr	r2, [pc, #440]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xd4>
 8003244:	4b6b      	ldr	r3, [pc, #428]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7ff fb8a 	bl	800297c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7ff fb86 	bl	800297c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e200      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b5d      	ldr	r3, [pc, #372]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xe4>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7ff fb76 	bl	800297c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7ff fb72 	bl	800297c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1ec      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x10c>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d063      	beq.n	800338a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c2:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00b      	beq.n	80032e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032ce:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x18c>
 80032da:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d116      	bne.n	8003314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d005      	beq.n	80032fe <HAL_RCC_OscConfig+0x176>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d001      	beq.n	80032fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1c0      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fe:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4939      	ldr	r1, [pc, #228]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003312:	e03a      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d020      	beq.n	800335e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800331c:	4b36      	ldr	r3, [pc, #216]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7ff fb2b 	bl	800297c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332a:	f7ff fb27 	bl	800297c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1a1      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4927      	ldr	r1, [pc, #156]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
 800335c:	e015      	b.n	800338a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_RCC_OscConfig+0x270>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff fb0a 	bl	800297c <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336c:	f7ff fb06 	bl	800297c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e180      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d03a      	beq.n	800340c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d019      	beq.n	80033d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a4:	f7ff faea 	bl	800297c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ac:	f7ff fae6 	bl	800297c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e160      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ca:	2001      	movs	r0, #1
 80033cc:	f000 fad8 	bl	8003980 <RCC_Delay>
 80033d0:	e01c      	b.n	800340c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_OscConfig+0x274>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d8:	f7ff fad0 	bl	800297c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e0:	f7ff facc 	bl	800297c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e146      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	42420000 	.word	0x42420000
 80033fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b92      	ldr	r3, [pc, #584]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e9      	bne.n	80033e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a6 	beq.w	8003566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b8b      	ldr	r3, [pc, #556]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a87      	ldr	r2, [pc, #540]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	61d3      	str	r3, [r2, #28]
 8003436:	4b85      	ldr	r3, [pc, #532]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b82      	ldr	r3, [pc, #520]	; (8003650 <HAL_RCC_OscConfig+0x4c8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <HAL_RCC_OscConfig+0x4c8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7e      	ldr	r2, [pc, #504]	; (8003650 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7ff fa8d 	bl	800297c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7ff fa89 	bl	800297c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e103      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b75      	ldr	r3, [pc, #468]	; (8003650 <HAL_RCC_OscConfig+0x4c8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x312>
 800348c:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	4a6e      	ldr	r2, [pc, #440]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6213      	str	r3, [r2, #32]
 8003498:	e02d      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x334>
 80034a2:	4b6a      	ldr	r3, [pc, #424]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4a69      	ldr	r2, [pc, #420]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6213      	str	r3, [r2, #32]
 80034ae:	4b67      	ldr	r3, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	4a66      	ldr	r2, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	f023 0304 	bic.w	r3, r3, #4
 80034b8:	6213      	str	r3, [r2, #32]
 80034ba:	e01c      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_OscConfig+0x356>
 80034c4:	4b61      	ldr	r3, [pc, #388]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a60      	ldr	r2, [pc, #384]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6213      	str	r3, [r2, #32]
 80034d0:	4b5e      	ldr	r3, [pc, #376]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a5d      	ldr	r2, [pc, #372]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e00b      	b.n	80034f6 <HAL_RCC_OscConfig+0x36e>
 80034de:	4b5b      	ldr	r3, [pc, #364]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	4a5a      	ldr	r2, [pc, #360]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6213      	str	r3, [r2, #32]
 80034ea:	4b58      	ldr	r3, [pc, #352]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fe:	f7ff fa3d 	bl	800297c <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7ff fa39 	bl	800297c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0b1      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	4b4b      	ldr	r3, [pc, #300]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ee      	beq.n	8003506 <HAL_RCC_OscConfig+0x37e>
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352a:	f7ff fa27 	bl	800297c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7ff fa23 	bl	800297c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e09b      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ee      	bne.n	8003532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4b3c      	ldr	r3, [pc, #240]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4a3b      	ldr	r2, [pc, #236]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8087 	beq.w	800367e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003570:	4b36      	ldr	r3, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d061      	beq.n	8003640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d146      	bne.n	8003612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358a:	f7ff f9f7 	bl	800297c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003592:	f7ff f9f3 	bl	800297c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e06d      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d108      	bne.n	80035cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4921      	ldr	r1, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a19      	ldr	r1, [r3, #32]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	430b      	orrs	r3, r1
 80035de:	491b      	ldr	r1, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_RCC_OscConfig+0x4cc>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7ff f9c7 	bl	800297c <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f2:	f7ff f9c3 	bl	800297c <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e03d      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46a>
 8003610:	e035      	b.n	800367e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_RCC_OscConfig+0x4cc>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7ff f9b0 	bl	800297c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003620:	f7ff f9ac 	bl	800297c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e026      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x4c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x498>
 800363e:	e01e      	b.n	800367e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d107      	bne.n	8003658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e019      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
 800364c:	40021000 	.word	0x40021000
 8003650:	40007000 	.word	0x40007000
 8003654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x500>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	429a      	cmp	r2, r3
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000

0800368c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0d0      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4965      	ldr	r1, [pc, #404]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e8:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003700:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a52      	ldr	r2, [pc, #328]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800370a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494d      	ldr	r1, [pc, #308]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d040      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d115      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e073      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06b      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4936      	ldr	r1, [pc, #216]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7ff f8fe 	bl	800297c <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7ff f8fa 	bl	800297c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e053      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d210      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 0207 	bic.w	r2, r3, #7
 80037c2:	4922      	ldr	r1, [pc, #136]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4916      	ldr	r1, [pc, #88]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490e      	ldr	r1, [pc, #56]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381a:	f000 f821 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490a      	ldr	r1, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	4a09      	ldr	r2, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1cc>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1d0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff f85c 	bl	80028f8 <HAL_InitTick>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40022000 	.word	0x40022000
 8003850:	40021000 	.word	0x40021000
 8003854:	08009f04 	.word	0x08009f04
 8003858:	20000000 	.word	0x20000000
 800385c:	20000004 	.word	0x20000004

08003860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b490      	push	{r4, r7}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCC_GetSysClockFreq+0xac>)
 8003868:	1d3c      	adds	r4, r7, #4
 800386a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003870:	f240 2301 	movw	r3, #513	; 0x201
 8003874:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388a:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb0>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x40>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x46>
 800389e:	e02b      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a2:	623b      	str	r3, [r7, #32]
      break;
 80038a4:	e02b      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	3328      	adds	r3, #40	; 0x28
 80038b0:	443b      	add	r3, r7
 80038b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0c5b      	lsrs	r3, r3, #17
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	3328      	adds	r3, #40	; 0x28
 80038ce:	443b      	add	r3, r7
 80038d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038da:	fb03 f202 	mul.w	r2, r3, r2
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	e004      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	fb02 f303 	mul.w	r3, r2, r3
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	623b      	str	r3, [r7, #32]
      break;
 80038f6:	e002      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038fa:	623b      	str	r3, [r7, #32]
      break;
 80038fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038fe:	6a3b      	ldr	r3, [r7, #32]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3728      	adds	r7, #40	; 0x28
 8003904:	46bd      	mov	sp, r7
 8003906:	bc90      	pop	{r4, r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	080098f8 	.word	0x080098f8
 8003910:	40021000 	.word	0x40021000
 8003914:	007a1200 	.word	0x007a1200
 8003918:	003d0900 	.word	0x003d0900

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <HAL_RCC_GetHCLKFreq+0x10>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr
 800392c:	20000000 	.word	0x20000000

08003930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003934:	f7ff fff2 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	0a1b      	lsrs	r3, r3, #8
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021000 	.word	0x40021000
 8003954:	08009f14 	.word	0x08009f14

08003958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800395c:	f7ff ffde 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	0adb      	lsrs	r3, r3, #11
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	4903      	ldr	r1, [pc, #12]	; (800397c <HAL_RCC_GetPCLK2Freq+0x24>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	08009f14 	.word	0x08009f14

08003980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <RCC_Delay+0x34>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <RCC_Delay+0x38>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0a5b      	lsrs	r3, r3, #9
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800399c:	bf00      	nop
  }
  while (Delay --);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	60fa      	str	r2, [r7, #12]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f9      	bne.n	800399c <RCC_Delay+0x1c>
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr
 80039b4:	20000000 	.word	0x20000000
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d004      	beq.n	80039d8 <HAL_SRAM_Init+0x1c>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039d6:	d101      	bne.n	80039dc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e038      	b.n	8003a4e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7fe fe2f 	bl	8002654 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3308      	adds	r3, #8
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f000 fd5f 	bl	80044c4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6818      	ldr	r0, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	f000 fdc1 	bl	8004598 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6858      	ldr	r0, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	f000 fdec 	bl	8004600 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	6892      	ldr	r2, [r2, #8]
 8003a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	f041 0101 	orr.w	r1, r1, #1
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e03f      	b.n	8003ae8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fe fca9 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	; 0x24
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fc84 	bl	80043a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ace:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	; 0x28
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d17c      	bne.n	8003c0a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Transmit+0x2c>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e075      	b.n	8003c0c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Transmit+0x3e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e06e      	b.n	8003c0c <HAL_UART_Transmit+0x11c>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b44:	f7fe ff1a 	bl	800297c <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d108      	bne.n	8003b72 <HAL_UART_Transmit+0x82>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d104      	bne.n	8003b72 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	61bb      	str	r3, [r7, #24]
 8003b70:	e003      	b.n	8003b7a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b82:	e02a      	b.n	8003bda <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa37 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e036      	b.n	8003c0c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	61bb      	str	r3, [r7, #24]
 8003bba:	e007      	b.n	8003bcc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	781a      	ldrb	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1cf      	bne.n	8003b84 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2200      	movs	r2, #0
 8003bec:	2140      	movs	r1, #64	; 0x40
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 fa07 	bl	8004002 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d11d      	bne.n	8003c6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_UART_Receive_IT+0x26>
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e016      	b.n	8003c6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_UART_Receive_IT+0x38>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e00f      	b.n	8003c6c <HAL_UART_Receive_IT+0x58>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fa18 	bl	8004096 <UART_Start_Receive_IT>
 8003c66:	4603      	mov	r3, r0
 8003c68:	e000      	b.n	8003c6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x52>
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fac9 	bl	8004256 <UART_Receive_IT>
      return;
 8003cc4:	e17b      	b.n	8003fbe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80b1 	beq.w	8003e30 <HAL_UART_IRQHandler+0x1bc>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x70>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a6 	beq.w	8003e30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_UART_IRQHandler+0x90>
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_UART_IRQHandler+0xb0>
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f043 0202 	orr.w	r2, r3, #2
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_UART_IRQHandler+0xd0>
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <HAL_UART_IRQHandler+0xfa>
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	f003 0320 	and.w	r3, r3, #32
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <HAL_UART_IRQHandler+0xee>
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d005      	beq.n	8003d6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	f043 0208 	orr.w	r2, r3, #8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 811e 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_UART_IRQHandler+0x11e>
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fa62 	bl	8004256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <HAL_UART_IRQHandler+0x146>
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d031      	beq.n	8003e1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9a4 	bl	8004108 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d023      	beq.n	8003e16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ddc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	4a76      	ldr	r2, [pc, #472]	; (8003fc4 <HAL_UART_IRQHandler+0x350>)
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fe ff14 	bl	8002c20 <HAL_DMA_Abort_IT>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e08:	4610      	mov	r0, r2
 8003e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00e      	b.n	8003e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8e3 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e00a      	b.n	8003e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8df 	bl	8003fda <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1c:	e006      	b.n	8003e2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f8db 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e2a:	e0c3      	b.n	8003fb4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	bf00      	nop
    return;
 8003e2e:	e0c1      	b.n	8003fb4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	f040 80a1 	bne.w	8003f7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 809b 	beq.w	8003f7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 8095 	beq.w	8003f7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d04e      	beq.n	8003f14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e80:	8a3b      	ldrh	r3, [r7, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8098 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e8c:	8a3a      	ldrh	r2, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	f080 8092 	bcs.w	8003fb8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8a3a      	ldrh	r2, [r7, #16]
 8003e98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d02b      	beq.n	8003efc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eb2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0210 	bic.w	r2, r2, #16
 8003ef0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fe57 	bl	8002baa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f86d 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f12:	e051      	b.n	8003fb8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003f2c:	8a7b      	ldrh	r3, [r7, #18]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d044      	beq.n	8003fbc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0210 	bic.w	r2, r2, #16
 8003f6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f70:	8a7b      	ldrh	r3, [r7, #18]
 8003f72:	4619      	mov	r1, r3
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f839 	bl	8003fec <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f7a:	e01f      	b.n	8003fbc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d008      	beq.n	8003f98 <HAL_UART_IRQHandler+0x324>
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8f9 	bl	8004188 <UART_Transmit_IT>
    return;
 8003f96:	e012      	b.n	8003fbe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_UART_IRQHandler+0x34a>
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f93a 	bl	8004226 <UART_EndTransmit_IT>
    return;
 8003fb2:	e004      	b.n	8003fbe <HAL_UART_IRQHandler+0x34a>
    return;
 8003fb4:	bf00      	nop
 8003fb6:	e002      	b.n	8003fbe <HAL_UART_IRQHandler+0x34a>
      return;
 8003fb8:	bf00      	nop
 8003fba:	e000      	b.n	8003fbe <HAL_UART_IRQHandler+0x34a>
      return;
 8003fbc:	bf00      	nop
  }
}
 8003fbe:	3728      	adds	r7, #40	; 0x28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	08004161 	.word	0x08004161

08003fc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr

08003fda <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4613      	mov	r3, r2
 8004010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004012:	e02c      	b.n	800406e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800401a:	d028      	beq.n	800406e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x30>
 8004022:	f7fe fcab 	bl	800297c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	429a      	cmp	r2, r3
 8004030:	d21d      	bcs.n	800406e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004040:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2220      	movs	r2, #32
 8004056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e00f      	b.n	800408e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4013      	ands	r3, r2
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	bf0c      	ite	eq
 800407e:	2301      	moveq	r3, #1
 8004080:	2300      	movne	r3, #0
 8004082:	b2db      	uxtb	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	429a      	cmp	r2, r3
 800408a:	d0c3      	beq.n	8004014 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	88fa      	ldrh	r2, [r7, #6]
 80040b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2222      	movs	r2, #34	; 0x22
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040da:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695a      	ldr	r2, [r3, #20]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0220 	orr.w	r2, r2, #32
 80040fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800411e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	695a      	ldr	r2, [r3, #20]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0210 	bic.w	r2, r2, #16
 8004146:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff ff2d 	bl	8003fda <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b21      	cmp	r3, #33	; 0x21
 800419a:	d13e      	bne.n	800421a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d114      	bne.n	80041d0 <UART_Transmit_IT+0x48>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d110      	bne.n	80041d0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	1c9a      	adds	r2, r3, #2
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]
 80041ce:	e008      	b.n	80041e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	1c59      	adds	r1, r3, #1
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6211      	str	r1, [r2, #32]
 80041da:	781a      	ldrb	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4619      	mov	r1, r3
 80041f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004204:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004214:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	bc80      	pop	{r7}
 8004224:	4770      	bx	lr

08004226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800423c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff febe 	bl	8003fc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b22      	cmp	r3, #34	; 0x22
 8004268:	f040 8099 	bne.w	800439e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d117      	bne.n	80042a6 <UART_Receive_IT+0x50>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d113      	bne.n	80042a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004294:	b29a      	uxth	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	1c9a      	adds	r2, r3, #2
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
 80042a4:	e026      	b.n	80042f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d007      	beq.n	80042ca <UART_Receive_IT+0x74>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <UART_Receive_IT+0x82>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e008      	b.n	80042ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	4619      	mov	r1, r3
 8004302:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004304:	2b00      	cmp	r3, #0
 8004306:	d148      	bne.n	800439a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0220 	bic.w	r2, r2, #32
 8004316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	2b01      	cmp	r3, #1
 8004346:	d123      	bne.n	8004390 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0210 	bic.w	r2, r2, #16
 800435c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b10      	cmp	r3, #16
 800436a:	d10a      	bne.n	8004382 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fe2f 	bl	8003fec <HAL_UARTEx_RxEventCallback>
 800438e:	e002      	b.n	8004396 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fd ff4d 	bl	8002230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e002      	b.n	80043a0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043e2:	f023 030c 	bic.w	r3, r3, #12
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6812      	ldr	r2, [r2, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	430b      	orrs	r3, r1
 80043ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <UART_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d103      	bne.n	8004418 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004410:	f7ff faa2 	bl	8003958 <HAL_RCC_GetPCLK2Freq>
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	e002      	b.n	800441e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7ff fa8a 	bl	8003930 <HAL_RCC_GetPCLK1Freq>
 800441c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	441a      	add	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <UART_SetConfig+0x118>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	0119      	lsls	r1, r3, #4
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	441a      	add	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	fbb2 f2f3 	udiv	r2, r2, r3
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <UART_SetConfig+0x118>)
 8004456:	fba3 0302 	umull	r0, r3, r3, r2
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2064      	movs	r0, #100	; 0x64
 800445e:	fb00 f303 	mul.w	r3, r0, r3
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	3332      	adds	r3, #50	; 0x32
 8004468:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <UART_SetConfig+0x118>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004474:	4419      	add	r1, r3
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009a      	lsls	r2, r3, #2
 8004480:	441a      	add	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	fbb2 f2f3 	udiv	r2, r2, r3
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <UART_SetConfig+0x118>)
 800448e:	fba3 0302 	umull	r0, r3, r3, r2
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	2064      	movs	r0, #100	; 0x64
 8004496:	fb00 f303 	mul.w	r3, r0, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	3332      	adds	r3, #50	; 0x32
 80044a0:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <UART_SetConfig+0x118>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	f003 020f 	and.w	r2, r3, #15
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	440a      	add	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40013800 	.word	0x40013800
 80044c0:	51eb851f 	.word	0x51eb851f

080044c4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	f023 0101 	bic.w	r1, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	d102      	bne.n	80044f4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e001      	b.n	80044f8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004504:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800450a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004510:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004516:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800451c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004522:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004528:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800452e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004534:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <FSMC_NORSRAM_Init+0xd0>)
 8004554:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800455c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004564:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	43db      	mvns	r3, r3
 8004574:	ea02 0103 	and.w	r1, r2, r3
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4319      	orrs	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	bc80      	pop	{r7}
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	0008fb7f 	.word	0x0008fb7f

08004598 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ae:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	431a      	orrs	r2, r3
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	051b      	lsls	r3, r3, #20
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	3b02      	subs	r3, #2
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	431a      	orrs	r2, r3
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	3201      	adds	r2, #1
 80045ec:	4319      	orrs	r1, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004614:	d11d      	bne.n	8004652 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004620:	4013      	ands	r3, r2
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	6811      	ldr	r1, [r2, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	6852      	ldr	r2, [r2, #4]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	4311      	orrs	r1, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	6892      	ldr	r2, [r2, #8]
 8004632:	0212      	lsls	r2, r2, #8
 8004634:	4311      	orrs	r1, r2
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	6992      	ldr	r2, [r2, #24]
 800463a:	4311      	orrs	r1, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	68d2      	ldr	r2, [r2, #12]
 8004640:	0412      	lsls	r2, r2, #16
 8004642:	430a      	orrs	r2, r1
 8004644:	ea43 0102 	orr.w	r1, r3, r2
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004650:	e005      	b.n	800465e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800465a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	cff00000 	.word	0xcff00000

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	2000000c 	.word	0x2000000c

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	2600      	movs	r6, #0
 8004680:	4d0c      	ldr	r5, [pc, #48]	; (80046b4 <__libc_init_array+0x38>)
 8004682:	4c0d      	ldr	r4, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004684:	1b64      	subs	r4, r4, r5
 8004686:	10a4      	asrs	r4, r4, #2
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	f005 f884 	bl	8009798 <_init>
 8004690:	2600      	movs	r6, #0
 8004692:	4d0a      	ldr	r5, [pc, #40]	; (80046bc <__libc_init_array+0x40>)
 8004694:	4c0a      	ldr	r4, [pc, #40]	; (80046c0 <__libc_init_array+0x44>)
 8004696:	1b64      	subs	r4, r4, r5
 8004698:	10a4      	asrs	r4, r4, #2
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	0800a3d4 	.word	0x0800a3d4
 80046b8:	0800a3d4 	.word	0x0800a3d4
 80046bc:	0800a3d4 	.word	0x0800a3d4
 80046c0:	0800a3d8 	.word	0x0800a3d8

080046c4 <memset>:
 80046c4:	4603      	mov	r3, r0
 80046c6:	4402      	add	r2, r0
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d100      	bne.n	80046ce <memset+0xa>
 80046cc:	4770      	bx	lr
 80046ce:	f803 1b01 	strb.w	r1, [r3], #1
 80046d2:	e7f9      	b.n	80046c8 <memset+0x4>

080046d4 <__cvt>:
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046da:	461f      	mov	r7, r3
 80046dc:	bfbb      	ittet	lt
 80046de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80046e2:	461f      	movlt	r7, r3
 80046e4:	2300      	movge	r3, #0
 80046e6:	232d      	movlt	r3, #45	; 0x2d
 80046e8:	b088      	sub	sp, #32
 80046ea:	4614      	mov	r4, r2
 80046ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80046ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80046f0:	7013      	strb	r3, [r2, #0]
 80046f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80046f8:	f023 0820 	bic.w	r8, r3, #32
 80046fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004700:	d005      	beq.n	800470e <__cvt+0x3a>
 8004702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004706:	d100      	bne.n	800470a <__cvt+0x36>
 8004708:	3501      	adds	r5, #1
 800470a:	2302      	movs	r3, #2
 800470c:	e000      	b.n	8004710 <__cvt+0x3c>
 800470e:	2303      	movs	r3, #3
 8004710:	aa07      	add	r2, sp, #28
 8004712:	9204      	str	r2, [sp, #16]
 8004714:	aa06      	add	r2, sp, #24
 8004716:	e9cd a202 	strd	sl, r2, [sp, #8]
 800471a:	e9cd 3500 	strd	r3, r5, [sp]
 800471e:	4622      	mov	r2, r4
 8004720:	463b      	mov	r3, r7
 8004722:	f001 fe29 	bl	8006378 <_dtoa_r>
 8004726:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800472a:	4606      	mov	r6, r0
 800472c:	d102      	bne.n	8004734 <__cvt+0x60>
 800472e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004730:	07db      	lsls	r3, r3, #31
 8004732:	d522      	bpl.n	800477a <__cvt+0xa6>
 8004734:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004738:	eb06 0905 	add.w	r9, r6, r5
 800473c:	d110      	bne.n	8004760 <__cvt+0x8c>
 800473e:	7833      	ldrb	r3, [r6, #0]
 8004740:	2b30      	cmp	r3, #48	; 0x30
 8004742:	d10a      	bne.n	800475a <__cvt+0x86>
 8004744:	2200      	movs	r2, #0
 8004746:	2300      	movs	r3, #0
 8004748:	4620      	mov	r0, r4
 800474a:	4639      	mov	r1, r7
 800474c:	f7fc f998 	bl	8000a80 <__aeabi_dcmpeq>
 8004750:	b918      	cbnz	r0, 800475a <__cvt+0x86>
 8004752:	f1c5 0501 	rsb	r5, r5, #1
 8004756:	f8ca 5000 	str.w	r5, [sl]
 800475a:	f8da 3000 	ldr.w	r3, [sl]
 800475e:	4499      	add	r9, r3
 8004760:	2200      	movs	r2, #0
 8004762:	2300      	movs	r3, #0
 8004764:	4620      	mov	r0, r4
 8004766:	4639      	mov	r1, r7
 8004768:	f7fc f98a 	bl	8000a80 <__aeabi_dcmpeq>
 800476c:	b108      	cbz	r0, 8004772 <__cvt+0x9e>
 800476e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004772:	2230      	movs	r2, #48	; 0x30
 8004774:	9b07      	ldr	r3, [sp, #28]
 8004776:	454b      	cmp	r3, r9
 8004778:	d307      	bcc.n	800478a <__cvt+0xb6>
 800477a:	4630      	mov	r0, r6
 800477c:	9b07      	ldr	r3, [sp, #28]
 800477e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004780:	1b9b      	subs	r3, r3, r6
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	b008      	add	sp, #32
 8004786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	9107      	str	r1, [sp, #28]
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e7f0      	b.n	8004774 <__cvt+0xa0>

08004792 <__exponent>:
 8004792:	4603      	mov	r3, r0
 8004794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004796:	2900      	cmp	r1, #0
 8004798:	f803 2b02 	strb.w	r2, [r3], #2
 800479c:	bfb6      	itet	lt
 800479e:	222d      	movlt	r2, #45	; 0x2d
 80047a0:	222b      	movge	r2, #43	; 0x2b
 80047a2:	4249      	neglt	r1, r1
 80047a4:	2909      	cmp	r1, #9
 80047a6:	7042      	strb	r2, [r0, #1]
 80047a8:	dd2b      	ble.n	8004802 <__exponent+0x70>
 80047aa:	f10d 0407 	add.w	r4, sp, #7
 80047ae:	46a4      	mov	ip, r4
 80047b0:	270a      	movs	r7, #10
 80047b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80047b6:	460a      	mov	r2, r1
 80047b8:	46a6      	mov	lr, r4
 80047ba:	fb07 1516 	mls	r5, r7, r6, r1
 80047be:	2a63      	cmp	r2, #99	; 0x63
 80047c0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80047c4:	4631      	mov	r1, r6
 80047c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047ce:	dcf0      	bgt.n	80047b2 <__exponent+0x20>
 80047d0:	3130      	adds	r1, #48	; 0x30
 80047d2:	f1ae 0502 	sub.w	r5, lr, #2
 80047d6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047da:	4629      	mov	r1, r5
 80047dc:	1c44      	adds	r4, r0, #1
 80047de:	4561      	cmp	r1, ip
 80047e0:	d30a      	bcc.n	80047f8 <__exponent+0x66>
 80047e2:	f10d 0209 	add.w	r2, sp, #9
 80047e6:	eba2 020e 	sub.w	r2, r2, lr
 80047ea:	4565      	cmp	r5, ip
 80047ec:	bf88      	it	hi
 80047ee:	2200      	movhi	r2, #0
 80047f0:	4413      	add	r3, r2
 80047f2:	1a18      	subs	r0, r3, r0
 80047f4:	b003      	add	sp, #12
 80047f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047fc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004800:	e7ed      	b.n	80047de <__exponent+0x4c>
 8004802:	2330      	movs	r3, #48	; 0x30
 8004804:	3130      	adds	r1, #48	; 0x30
 8004806:	7083      	strb	r3, [r0, #2]
 8004808:	70c1      	strb	r1, [r0, #3]
 800480a:	1d03      	adds	r3, r0, #4
 800480c:	e7f1      	b.n	80047f2 <__exponent+0x60>
	...

08004810 <_printf_float>:
 8004810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	b091      	sub	sp, #68	; 0x44
 8004816:	460c      	mov	r4, r1
 8004818:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800481c:	4616      	mov	r6, r2
 800481e:	461f      	mov	r7, r3
 8004820:	4605      	mov	r5, r0
 8004822:	f002 fefd 	bl	8007620 <_localeconv_r>
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	9309      	str	r3, [sp, #36]	; 0x24
 800482c:	f7fb fcfc 	bl	8000228 <strlen>
 8004830:	2300      	movs	r3, #0
 8004832:	930e      	str	r3, [sp, #56]	; 0x38
 8004834:	f8d8 3000 	ldr.w	r3, [r8]
 8004838:	900a      	str	r0, [sp, #40]	; 0x28
 800483a:	3307      	adds	r3, #7
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	f103 0208 	add.w	r2, r3, #8
 8004844:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004848:	f8d4 b000 	ldr.w	fp, [r4]
 800484c:	f8c8 2000 	str.w	r2, [r8]
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004858:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800485c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004860:	930b      	str	r3, [sp, #44]	; 0x2c
 8004862:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004866:	4640      	mov	r0, r8
 8004868:	4b9c      	ldr	r3, [pc, #624]	; (8004adc <_printf_float+0x2cc>)
 800486a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800486c:	f7fc f93a 	bl	8000ae4 <__aeabi_dcmpun>
 8004870:	bb70      	cbnz	r0, 80048d0 <_printf_float+0xc0>
 8004872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004876:	4640      	mov	r0, r8
 8004878:	4b98      	ldr	r3, [pc, #608]	; (8004adc <_printf_float+0x2cc>)
 800487a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800487c:	f7fc f914 	bl	8000aa8 <__aeabi_dcmple>
 8004880:	bb30      	cbnz	r0, 80048d0 <_printf_float+0xc0>
 8004882:	2200      	movs	r2, #0
 8004884:	2300      	movs	r3, #0
 8004886:	4640      	mov	r0, r8
 8004888:	4651      	mov	r1, sl
 800488a:	f7fc f903 	bl	8000a94 <__aeabi_dcmplt>
 800488e:	b110      	cbz	r0, 8004896 <_printf_float+0x86>
 8004890:	232d      	movs	r3, #45	; 0x2d
 8004892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004896:	4b92      	ldr	r3, [pc, #584]	; (8004ae0 <_printf_float+0x2d0>)
 8004898:	4892      	ldr	r0, [pc, #584]	; (8004ae4 <_printf_float+0x2d4>)
 800489a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800489e:	bf94      	ite	ls
 80048a0:	4698      	movls	r8, r3
 80048a2:	4680      	movhi	r8, r0
 80048a4:	2303      	movs	r3, #3
 80048a6:	f04f 0a00 	mov.w	sl, #0
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	f02b 0304 	bic.w	r3, fp, #4
 80048b0:	6023      	str	r3, [r4, #0]
 80048b2:	4633      	mov	r3, r6
 80048b4:	4621      	mov	r1, r4
 80048b6:	4628      	mov	r0, r5
 80048b8:	9700      	str	r7, [sp, #0]
 80048ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80048bc:	f000 f9d4 	bl	8004c68 <_printf_common>
 80048c0:	3001      	adds	r0, #1
 80048c2:	f040 8090 	bne.w	80049e6 <_printf_float+0x1d6>
 80048c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ca:	b011      	add	sp, #68	; 0x44
 80048cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d0:	4642      	mov	r2, r8
 80048d2:	4653      	mov	r3, sl
 80048d4:	4640      	mov	r0, r8
 80048d6:	4651      	mov	r1, sl
 80048d8:	f7fc f904 	bl	8000ae4 <__aeabi_dcmpun>
 80048dc:	b148      	cbz	r0, 80048f2 <_printf_float+0xe2>
 80048de:	f1ba 0f00 	cmp.w	sl, #0
 80048e2:	bfb8      	it	lt
 80048e4:	232d      	movlt	r3, #45	; 0x2d
 80048e6:	4880      	ldr	r0, [pc, #512]	; (8004ae8 <_printf_float+0x2d8>)
 80048e8:	bfb8      	it	lt
 80048ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80048ee:	4b7f      	ldr	r3, [pc, #508]	; (8004aec <_printf_float+0x2dc>)
 80048f0:	e7d3      	b.n	800489a <_printf_float+0x8a>
 80048f2:	6863      	ldr	r3, [r4, #4]
 80048f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	d142      	bne.n	8004982 <_printf_float+0x172>
 80048fc:	2306      	movs	r3, #6
 80048fe:	6063      	str	r3, [r4, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	9206      	str	r2, [sp, #24]
 8004904:	aa0e      	add	r2, sp, #56	; 0x38
 8004906:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800490a:	aa0d      	add	r2, sp, #52	; 0x34
 800490c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004910:	9203      	str	r2, [sp, #12]
 8004912:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004916:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	6863      	ldr	r3, [r4, #4]
 800491e:	4642      	mov	r2, r8
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	4628      	mov	r0, r5
 8004924:	4653      	mov	r3, sl
 8004926:	910b      	str	r1, [sp, #44]	; 0x2c
 8004928:	f7ff fed4 	bl	80046d4 <__cvt>
 800492c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800492e:	4680      	mov	r8, r0
 8004930:	2947      	cmp	r1, #71	; 0x47
 8004932:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004934:	d108      	bne.n	8004948 <_printf_float+0x138>
 8004936:	1cc8      	adds	r0, r1, #3
 8004938:	db02      	blt.n	8004940 <_printf_float+0x130>
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	4299      	cmp	r1, r3
 800493e:	dd40      	ble.n	80049c2 <_printf_float+0x1b2>
 8004940:	f1a9 0902 	sub.w	r9, r9, #2
 8004944:	fa5f f989 	uxtb.w	r9, r9
 8004948:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800494c:	d81f      	bhi.n	800498e <_printf_float+0x17e>
 800494e:	464a      	mov	r2, r9
 8004950:	3901      	subs	r1, #1
 8004952:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004956:	910d      	str	r1, [sp, #52]	; 0x34
 8004958:	f7ff ff1b 	bl	8004792 <__exponent>
 800495c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800495e:	4682      	mov	sl, r0
 8004960:	1813      	adds	r3, r2, r0
 8004962:	2a01      	cmp	r2, #1
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	dc02      	bgt.n	800496e <_printf_float+0x15e>
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	07d2      	lsls	r2, r2, #31
 800496c:	d501      	bpl.n	8004972 <_printf_float+0x162>
 800496e:	3301      	adds	r3, #1
 8004970:	6123      	str	r3, [r4, #16]
 8004972:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004976:	2b00      	cmp	r3, #0
 8004978:	d09b      	beq.n	80048b2 <_printf_float+0xa2>
 800497a:	232d      	movs	r3, #45	; 0x2d
 800497c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004980:	e797      	b.n	80048b2 <_printf_float+0xa2>
 8004982:	2947      	cmp	r1, #71	; 0x47
 8004984:	d1bc      	bne.n	8004900 <_printf_float+0xf0>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ba      	bne.n	8004900 <_printf_float+0xf0>
 800498a:	2301      	movs	r3, #1
 800498c:	e7b7      	b.n	80048fe <_printf_float+0xee>
 800498e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004992:	d118      	bne.n	80049c6 <_printf_float+0x1b6>
 8004994:	2900      	cmp	r1, #0
 8004996:	6863      	ldr	r3, [r4, #4]
 8004998:	dd0b      	ble.n	80049b2 <_printf_float+0x1a2>
 800499a:	6121      	str	r1, [r4, #16]
 800499c:	b913      	cbnz	r3, 80049a4 <_printf_float+0x194>
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	07d0      	lsls	r0, r2, #31
 80049a2:	d502      	bpl.n	80049aa <_printf_float+0x19a>
 80049a4:	3301      	adds	r3, #1
 80049a6:	440b      	add	r3, r1
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	f04f 0a00 	mov.w	sl, #0
 80049ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80049b0:	e7df      	b.n	8004972 <_printf_float+0x162>
 80049b2:	b913      	cbnz	r3, 80049ba <_printf_float+0x1aa>
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	07d2      	lsls	r2, r2, #31
 80049b8:	d501      	bpl.n	80049be <_printf_float+0x1ae>
 80049ba:	3302      	adds	r3, #2
 80049bc:	e7f4      	b.n	80049a8 <_printf_float+0x198>
 80049be:	2301      	movs	r3, #1
 80049c0:	e7f2      	b.n	80049a8 <_printf_float+0x198>
 80049c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80049c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c8:	4299      	cmp	r1, r3
 80049ca:	db05      	blt.n	80049d8 <_printf_float+0x1c8>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	6121      	str	r1, [r4, #16]
 80049d0:	07d8      	lsls	r0, r3, #31
 80049d2:	d5ea      	bpl.n	80049aa <_printf_float+0x19a>
 80049d4:	1c4b      	adds	r3, r1, #1
 80049d6:	e7e7      	b.n	80049a8 <_printf_float+0x198>
 80049d8:	2900      	cmp	r1, #0
 80049da:	bfcc      	ite	gt
 80049dc:	2201      	movgt	r2, #1
 80049de:	f1c1 0202 	rsble	r2, r1, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	e7e0      	b.n	80049a8 <_printf_float+0x198>
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	055a      	lsls	r2, r3, #21
 80049ea:	d407      	bmi.n	80049fc <_printf_float+0x1ec>
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	4642      	mov	r2, r8
 80049f0:	4631      	mov	r1, r6
 80049f2:	4628      	mov	r0, r5
 80049f4:	47b8      	blx	r7
 80049f6:	3001      	adds	r0, #1
 80049f8:	d12b      	bne.n	8004a52 <_printf_float+0x242>
 80049fa:	e764      	b.n	80048c6 <_printf_float+0xb6>
 80049fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a00:	f240 80dd 	bls.w	8004bbe <_printf_float+0x3ae>
 8004a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f7fc f838 	bl	8000a80 <__aeabi_dcmpeq>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	d033      	beq.n	8004a7c <_printf_float+0x26c>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	4a35      	ldr	r2, [pc, #212]	; (8004af0 <_printf_float+0x2e0>)
 8004a1c:	47b8      	blx	r7
 8004a1e:	3001      	adds	r0, #1
 8004a20:	f43f af51 	beq.w	80048c6 <_printf_float+0xb6>
 8004a24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	db02      	blt.n	8004a32 <_printf_float+0x222>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	07d8      	lsls	r0, r3, #31
 8004a30:	d50f      	bpl.n	8004a52 <_printf_float+0x242>
 8004a32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	47b8      	blx	r7
 8004a3c:	3001      	adds	r0, #1
 8004a3e:	f43f af42 	beq.w	80048c6 <_printf_float+0xb6>
 8004a42:	f04f 0800 	mov.w	r8, #0
 8004a46:	f104 091a 	add.w	r9, r4, #26
 8004a4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4543      	cmp	r3, r8
 8004a50:	dc09      	bgt.n	8004a66 <_printf_float+0x256>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	079b      	lsls	r3, r3, #30
 8004a56:	f100 8102 	bmi.w	8004c5e <_printf_float+0x44e>
 8004a5a:	68e0      	ldr	r0, [r4, #12]
 8004a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a5e:	4298      	cmp	r0, r3
 8004a60:	bfb8      	it	lt
 8004a62:	4618      	movlt	r0, r3
 8004a64:	e731      	b.n	80048ca <_printf_float+0xba>
 8004a66:	2301      	movs	r3, #1
 8004a68:	464a      	mov	r2, r9
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f af28 	beq.w	80048c6 <_printf_float+0xb6>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	e7e6      	b.n	8004a4a <_printf_float+0x23a>
 8004a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dc38      	bgt.n	8004af4 <_printf_float+0x2e4>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4631      	mov	r1, r6
 8004a86:	4628      	mov	r0, r5
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <_printf_float+0x2e0>)
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f43f af1a 	beq.w	80048c6 <_printf_float+0xb6>
 8004a92:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d102      	bne.n	8004aa0 <_printf_float+0x290>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07d9      	lsls	r1, r3, #31
 8004a9e:	d5d8      	bpl.n	8004a52 <_printf_float+0x242>
 8004aa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa4:	4631      	mov	r1, r6
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	47b8      	blx	r7
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f43f af0b 	beq.w	80048c6 <_printf_float+0xb6>
 8004ab0:	f04f 0900 	mov.w	r9, #0
 8004ab4:	f104 0a1a 	add.w	sl, r4, #26
 8004ab8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aba:	425b      	negs	r3, r3
 8004abc:	454b      	cmp	r3, r9
 8004abe:	dc01      	bgt.n	8004ac4 <_printf_float+0x2b4>
 8004ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ac2:	e794      	b.n	80049ee <_printf_float+0x1de>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4652      	mov	r2, sl
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	47b8      	blx	r7
 8004ace:	3001      	adds	r0, #1
 8004ad0:	f43f aef9 	beq.w	80048c6 <_printf_float+0xb6>
 8004ad4:	f109 0901 	add.w	r9, r9, #1
 8004ad8:	e7ee      	b.n	8004ab8 <_printf_float+0x2a8>
 8004ada:	bf00      	nop
 8004adc:	7fefffff 	.word	0x7fefffff
 8004ae0:	08009f20 	.word	0x08009f20
 8004ae4:	08009f24 	.word	0x08009f24
 8004ae8:	08009f2c 	.word	0x08009f2c
 8004aec:	08009f28 	.word	0x08009f28
 8004af0:	0800a321 	.word	0x0800a321
 8004af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bfa8      	it	ge
 8004afc:	461a      	movge	r2, r3
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	4691      	mov	r9, r2
 8004b02:	dc37      	bgt.n	8004b74 <_printf_float+0x364>
 8004b04:	f04f 0b00 	mov.w	fp, #0
 8004b08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b0c:	f104 021a 	add.w	r2, r4, #26
 8004b10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b14:	ebaa 0309 	sub.w	r3, sl, r9
 8004b18:	455b      	cmp	r3, fp
 8004b1a:	dc33      	bgt.n	8004b84 <_printf_float+0x374>
 8004b1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b20:	429a      	cmp	r2, r3
 8004b22:	db3b      	blt.n	8004b9c <_printf_float+0x38c>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	07da      	lsls	r2, r3, #31
 8004b28:	d438      	bmi.n	8004b9c <_printf_float+0x38c>
 8004b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b2e:	eba3 020a 	sub.w	r2, r3, sl
 8004b32:	eba3 0901 	sub.w	r9, r3, r1
 8004b36:	4591      	cmp	r9, r2
 8004b38:	bfa8      	it	ge
 8004b3a:	4691      	movge	r9, r2
 8004b3c:	f1b9 0f00 	cmp.w	r9, #0
 8004b40:	dc34      	bgt.n	8004bac <_printf_float+0x39c>
 8004b42:	f04f 0800 	mov.w	r8, #0
 8004b46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b4a:	f104 0a1a 	add.w	sl, r4, #26
 8004b4e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	eba3 0309 	sub.w	r3, r3, r9
 8004b58:	4543      	cmp	r3, r8
 8004b5a:	f77f af7a 	ble.w	8004a52 <_printf_float+0x242>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	4652      	mov	r2, sl
 8004b62:	4631      	mov	r1, r6
 8004b64:	4628      	mov	r0, r5
 8004b66:	47b8      	blx	r7
 8004b68:	3001      	adds	r0, #1
 8004b6a:	f43f aeac 	beq.w	80048c6 <_printf_float+0xb6>
 8004b6e:	f108 0801 	add.w	r8, r8, #1
 8004b72:	e7ec      	b.n	8004b4e <_printf_float+0x33e>
 8004b74:	4613      	mov	r3, r2
 8004b76:	4631      	mov	r1, r6
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d1c0      	bne.n	8004b04 <_printf_float+0x2f4>
 8004b82:	e6a0      	b.n	80048c6 <_printf_float+0xb6>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b8c:	47b8      	blx	r7
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f43f ae99 	beq.w	80048c6 <_printf_float+0xb6>
 8004b94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004b96:	f10b 0b01 	add.w	fp, fp, #1
 8004b9a:	e7b9      	b.n	8004b10 <_printf_float+0x300>
 8004b9c:	4631      	mov	r1, r6
 8004b9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d1bf      	bne.n	8004b2a <_printf_float+0x31a>
 8004baa:	e68c      	b.n	80048c6 <_printf_float+0xb6>
 8004bac:	464b      	mov	r3, r9
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	eb08 020a 	add.w	r2, r8, sl
 8004bb6:	47b8      	blx	r7
 8004bb8:	3001      	adds	r0, #1
 8004bba:	d1c2      	bne.n	8004b42 <_printf_float+0x332>
 8004bbc:	e683      	b.n	80048c6 <_printf_float+0xb6>
 8004bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bc0:	2a01      	cmp	r2, #1
 8004bc2:	dc01      	bgt.n	8004bc8 <_printf_float+0x3b8>
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d537      	bpl.n	8004c38 <_printf_float+0x428>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4642      	mov	r2, r8
 8004bcc:	4631      	mov	r1, r6
 8004bce:	4628      	mov	r0, r5
 8004bd0:	47b8      	blx	r7
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	f43f ae77 	beq.w	80048c6 <_printf_float+0xb6>
 8004bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f ae6f 	beq.w	80048c6 <_printf_float+0xb6>
 8004be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bec:	2200      	movs	r2, #0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f7fb ff46 	bl	8000a80 <__aeabi_dcmpeq>
 8004bf4:	b9d8      	cbnz	r0, 8004c2e <_printf_float+0x41e>
 8004bf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bf8:	f108 0201 	add.w	r2, r8, #1
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	d10e      	bne.n	8004c26 <_printf_float+0x416>
 8004c08:	e65d      	b.n	80048c6 <_printf_float+0xb6>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	464a      	mov	r2, r9
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f ae56 	beq.w	80048c6 <_printf_float+0xb6>
 8004c1a:	f108 0801 	add.w	r8, r8, #1
 8004c1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c20:	3b01      	subs	r3, #1
 8004c22:	4543      	cmp	r3, r8
 8004c24:	dcf1      	bgt.n	8004c0a <_printf_float+0x3fa>
 8004c26:	4653      	mov	r3, sl
 8004c28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c2c:	e6e0      	b.n	80049f0 <_printf_float+0x1e0>
 8004c2e:	f04f 0800 	mov.w	r8, #0
 8004c32:	f104 091a 	add.w	r9, r4, #26
 8004c36:	e7f2      	b.n	8004c1e <_printf_float+0x40e>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	e7df      	b.n	8004bfe <_printf_float+0x3ee>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	464a      	mov	r2, r9
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f ae3c 	beq.w	80048c6 <_printf_float+0xb6>
 8004c4e:	f108 0801 	add.w	r8, r8, #1
 8004c52:	68e3      	ldr	r3, [r4, #12]
 8004c54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004c56:	1a5b      	subs	r3, r3, r1
 8004c58:	4543      	cmp	r3, r8
 8004c5a:	dcf0      	bgt.n	8004c3e <_printf_float+0x42e>
 8004c5c:	e6fd      	b.n	8004a5a <_printf_float+0x24a>
 8004c5e:	f04f 0800 	mov.w	r8, #0
 8004c62:	f104 0919 	add.w	r9, r4, #25
 8004c66:	e7f4      	b.n	8004c52 <_printf_float+0x442>

08004c68 <_printf_common>:
 8004c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c6c:	4616      	mov	r6, r2
 8004c6e:	4699      	mov	r9, r3
 8004c70:	688a      	ldr	r2, [r1, #8]
 8004c72:	690b      	ldr	r3, [r1, #16]
 8004c74:	4607      	mov	r7, r0
 8004c76:	4293      	cmp	r3, r2
 8004c78:	bfb8      	it	lt
 8004c7a:	4613      	movlt	r3, r2
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c82:	460c      	mov	r4, r1
 8004c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c88:	b10a      	cbz	r2, 8004c8e <_printf_common+0x26>
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	0699      	lsls	r1, r3, #26
 8004c92:	bf42      	ittt	mi
 8004c94:	6833      	ldrmi	r3, [r6, #0]
 8004c96:	3302      	addmi	r3, #2
 8004c98:	6033      	strmi	r3, [r6, #0]
 8004c9a:	6825      	ldr	r5, [r4, #0]
 8004c9c:	f015 0506 	ands.w	r5, r5, #6
 8004ca0:	d106      	bne.n	8004cb0 <_printf_common+0x48>
 8004ca2:	f104 0a19 	add.w	sl, r4, #25
 8004ca6:	68e3      	ldr	r3, [r4, #12]
 8004ca8:	6832      	ldr	r2, [r6, #0]
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	42ab      	cmp	r3, r5
 8004cae:	dc28      	bgt.n	8004d02 <_printf_common+0x9a>
 8004cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cb4:	1e13      	subs	r3, r2, #0
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	bf18      	it	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	0692      	lsls	r2, r2, #26
 8004cbe:	d42d      	bmi.n	8004d1c <_printf_common+0xb4>
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cc8:	47c0      	blx	r8
 8004cca:	3001      	adds	r0, #1
 8004ccc:	d020      	beq.n	8004d10 <_printf_common+0xa8>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	68e5      	ldr	r5, [r4, #12]
 8004cd2:	f003 0306 	and.w	r3, r3, #6
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	bf18      	it	ne
 8004cda:	2500      	movne	r5, #0
 8004cdc:	6832      	ldr	r2, [r6, #0]
 8004cde:	f04f 0600 	mov.w	r6, #0
 8004ce2:	68a3      	ldr	r3, [r4, #8]
 8004ce4:	bf08      	it	eq
 8004ce6:	1aad      	subeq	r5, r5, r2
 8004ce8:	6922      	ldr	r2, [r4, #16]
 8004cea:	bf08      	it	eq
 8004cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfc4      	itt	gt
 8004cf4:	1a9b      	subgt	r3, r3, r2
 8004cf6:	18ed      	addgt	r5, r5, r3
 8004cf8:	341a      	adds	r4, #26
 8004cfa:	42b5      	cmp	r5, r6
 8004cfc:	d11a      	bne.n	8004d34 <_printf_common+0xcc>
 8004cfe:	2000      	movs	r0, #0
 8004d00:	e008      	b.n	8004d14 <_printf_common+0xac>
 8004d02:	2301      	movs	r3, #1
 8004d04:	4652      	mov	r2, sl
 8004d06:	4649      	mov	r1, r9
 8004d08:	4638      	mov	r0, r7
 8004d0a:	47c0      	blx	r8
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d103      	bne.n	8004d18 <_printf_common+0xb0>
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7c4      	b.n	8004ca6 <_printf_common+0x3e>
 8004d1c:	2030      	movs	r0, #48	; 0x30
 8004d1e:	18e1      	adds	r1, r4, r3
 8004d20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d2a:	4422      	add	r2, r4
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d32:	e7c5      	b.n	8004cc0 <_printf_common+0x58>
 8004d34:	2301      	movs	r3, #1
 8004d36:	4622      	mov	r2, r4
 8004d38:	4649      	mov	r1, r9
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	47c0      	blx	r8
 8004d3e:	3001      	adds	r0, #1
 8004d40:	d0e6      	beq.n	8004d10 <_printf_common+0xa8>
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7d9      	b.n	8004cfa <_printf_common+0x92>
	...

08004d48 <_printf_i>:
 8004d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	7e0f      	ldrb	r7, [r1, #24]
 8004d4e:	4691      	mov	r9, r2
 8004d50:	2f78      	cmp	r7, #120	; 0x78
 8004d52:	4680      	mov	r8, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	469a      	mov	sl, r3
 8004d58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d5e:	d807      	bhi.n	8004d70 <_printf_i+0x28>
 8004d60:	2f62      	cmp	r7, #98	; 0x62
 8004d62:	d80a      	bhi.n	8004d7a <_printf_i+0x32>
 8004d64:	2f00      	cmp	r7, #0
 8004d66:	f000 80d9 	beq.w	8004f1c <_printf_i+0x1d4>
 8004d6a:	2f58      	cmp	r7, #88	; 0x58
 8004d6c:	f000 80a4 	beq.w	8004eb8 <_printf_i+0x170>
 8004d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d78:	e03a      	b.n	8004df0 <_printf_i+0xa8>
 8004d7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d7e:	2b15      	cmp	r3, #21
 8004d80:	d8f6      	bhi.n	8004d70 <_printf_i+0x28>
 8004d82:	a101      	add	r1, pc, #4	; (adr r1, 8004d88 <_printf_i+0x40>)
 8004d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	08004df5 	.word	0x08004df5
 8004d90:	08004d71 	.word	0x08004d71
 8004d94:	08004d71 	.word	0x08004d71
 8004d98:	08004d71 	.word	0x08004d71
 8004d9c:	08004d71 	.word	0x08004d71
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004d71 	.word	0x08004d71
 8004da8:	08004d71 	.word	0x08004d71
 8004dac:	08004d71 	.word	0x08004d71
 8004db0:	08004d71 	.word	0x08004d71
 8004db4:	08004f03 	.word	0x08004f03
 8004db8:	08004e25 	.word	0x08004e25
 8004dbc:	08004ee5 	.word	0x08004ee5
 8004dc0:	08004d71 	.word	0x08004d71
 8004dc4:	08004d71 	.word	0x08004d71
 8004dc8:	08004f25 	.word	0x08004f25
 8004dcc:	08004d71 	.word	0x08004d71
 8004dd0:	08004e25 	.word	0x08004e25
 8004dd4:	08004d71 	.word	0x08004d71
 8004dd8:	08004d71 	.word	0x08004d71
 8004ddc:	08004eed 	.word	0x08004eed
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	1d1a      	adds	r2, r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	602a      	str	r2, [r5, #0]
 8004de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0a4      	b.n	8004f3e <_printf_i+0x1f6>
 8004df4:	6820      	ldr	r0, [r4, #0]
 8004df6:	6829      	ldr	r1, [r5, #0]
 8004df8:	0606      	lsls	r6, r0, #24
 8004dfa:	f101 0304 	add.w	r3, r1, #4
 8004dfe:	d50a      	bpl.n	8004e16 <_printf_i+0xce>
 8004e00:	680e      	ldr	r6, [r1, #0]
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	da03      	bge.n	8004e10 <_printf_i+0xc8>
 8004e08:	232d      	movs	r3, #45	; 0x2d
 8004e0a:	4276      	negs	r6, r6
 8004e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e10:	230a      	movs	r3, #10
 8004e12:	485e      	ldr	r0, [pc, #376]	; (8004f8c <_printf_i+0x244>)
 8004e14:	e019      	b.n	8004e4a <_printf_i+0x102>
 8004e16:	680e      	ldr	r6, [r1, #0]
 8004e18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	bf18      	it	ne
 8004e20:	b236      	sxthne	r6, r6
 8004e22:	e7ef      	b.n	8004e04 <_printf_i+0xbc>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	6820      	ldr	r0, [r4, #0]
 8004e28:	1d19      	adds	r1, r3, #4
 8004e2a:	6029      	str	r1, [r5, #0]
 8004e2c:	0601      	lsls	r1, r0, #24
 8004e2e:	d501      	bpl.n	8004e34 <_printf_i+0xec>
 8004e30:	681e      	ldr	r6, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <_printf_i+0xf2>
 8004e34:	0646      	lsls	r6, r0, #25
 8004e36:	d5fb      	bpl.n	8004e30 <_printf_i+0xe8>
 8004e38:	881e      	ldrh	r6, [r3, #0]
 8004e3a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2308      	moveq	r3, #8
 8004e40:	230a      	movne	r3, #10
 8004e42:	4852      	ldr	r0, [pc, #328]	; (8004f8c <_printf_i+0x244>)
 8004e44:	2100      	movs	r1, #0
 8004e46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e4a:	6865      	ldr	r5, [r4, #4]
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	bfa8      	it	ge
 8004e50:	6821      	ldrge	r1, [r4, #0]
 8004e52:	60a5      	str	r5, [r4, #8]
 8004e54:	bfa4      	itt	ge
 8004e56:	f021 0104 	bicge.w	r1, r1, #4
 8004e5a:	6021      	strge	r1, [r4, #0]
 8004e5c:	b90e      	cbnz	r6, 8004e62 <_printf_i+0x11a>
 8004e5e:	2d00      	cmp	r5, #0
 8004e60:	d04d      	beq.n	8004efe <_printf_i+0x1b6>
 8004e62:	4615      	mov	r5, r2
 8004e64:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e68:	fb03 6711 	mls	r7, r3, r1, r6
 8004e6c:	5dc7      	ldrb	r7, [r0, r7]
 8004e6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e72:	4637      	mov	r7, r6
 8004e74:	42bb      	cmp	r3, r7
 8004e76:	460e      	mov	r6, r1
 8004e78:	d9f4      	bls.n	8004e64 <_printf_i+0x11c>
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d10b      	bne.n	8004e96 <_printf_i+0x14e>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	07de      	lsls	r6, r3, #31
 8004e82:	d508      	bpl.n	8004e96 <_printf_i+0x14e>
 8004e84:	6923      	ldr	r3, [r4, #16]
 8004e86:	6861      	ldr	r1, [r4, #4]
 8004e88:	4299      	cmp	r1, r3
 8004e8a:	bfde      	ittt	le
 8004e8c:	2330      	movle	r3, #48	; 0x30
 8004e8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e92:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e96:	1b52      	subs	r2, r2, r5
 8004e98:	6122      	str	r2, [r4, #16]
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f8cd a000 	str.w	sl, [sp]
 8004ea4:	aa03      	add	r2, sp, #12
 8004ea6:	f7ff fedf 	bl	8004c68 <_printf_common>
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d14c      	bne.n	8004f48 <_printf_i+0x200>
 8004eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eb2:	b004      	add	sp, #16
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	4834      	ldr	r0, [pc, #208]	; (8004f8c <_printf_i+0x244>)
 8004eba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ebe:	6829      	ldr	r1, [r5, #0]
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ec6:	6029      	str	r1, [r5, #0]
 8004ec8:	061d      	lsls	r5, r3, #24
 8004eca:	d514      	bpl.n	8004ef6 <_printf_i+0x1ae>
 8004ecc:	07df      	lsls	r7, r3, #31
 8004ece:	bf44      	itt	mi
 8004ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed4:	6023      	strmi	r3, [r4, #0]
 8004ed6:	b91e      	cbnz	r6, 8004ee0 <_printf_i+0x198>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	f023 0320 	bic.w	r3, r3, #32
 8004ede:	6023      	str	r3, [r4, #0]
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	e7af      	b.n	8004e44 <_printf_i+0xfc>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f043 0320 	orr.w	r3, r3, #32
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	2378      	movs	r3, #120	; 0x78
 8004eee:	4828      	ldr	r0, [pc, #160]	; (8004f90 <_printf_i+0x248>)
 8004ef0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ef4:	e7e3      	b.n	8004ebe <_printf_i+0x176>
 8004ef6:	0659      	lsls	r1, r3, #25
 8004ef8:	bf48      	it	mi
 8004efa:	b2b6      	uxthmi	r6, r6
 8004efc:	e7e6      	b.n	8004ecc <_printf_i+0x184>
 8004efe:	4615      	mov	r5, r2
 8004f00:	e7bb      	b.n	8004e7a <_printf_i+0x132>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	6826      	ldr	r6, [r4, #0]
 8004f06:	1d18      	adds	r0, r3, #4
 8004f08:	6961      	ldr	r1, [r4, #20]
 8004f0a:	6028      	str	r0, [r5, #0]
 8004f0c:	0635      	lsls	r5, r6, #24
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	d501      	bpl.n	8004f16 <_printf_i+0x1ce>
 8004f12:	6019      	str	r1, [r3, #0]
 8004f14:	e002      	b.n	8004f1c <_printf_i+0x1d4>
 8004f16:	0670      	lsls	r0, r6, #25
 8004f18:	d5fb      	bpl.n	8004f12 <_printf_i+0x1ca>
 8004f1a:	8019      	strh	r1, [r3, #0]
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4615      	mov	r5, r2
 8004f20:	6123      	str	r3, [r4, #16]
 8004f22:	e7ba      	b.n	8004e9a <_printf_i+0x152>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	2100      	movs	r1, #0
 8004f28:	1d1a      	adds	r2, r3, #4
 8004f2a:	602a      	str	r2, [r5, #0]
 8004f2c:	681d      	ldr	r5, [r3, #0]
 8004f2e:	6862      	ldr	r2, [r4, #4]
 8004f30:	4628      	mov	r0, r5
 8004f32:	f002 fba5 	bl	8007680 <memchr>
 8004f36:	b108      	cbz	r0, 8004f3c <_printf_i+0x1f4>
 8004f38:	1b40      	subs	r0, r0, r5
 8004f3a:	6060      	str	r0, [r4, #4]
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	6123      	str	r3, [r4, #16]
 8004f40:	2300      	movs	r3, #0
 8004f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f46:	e7a8      	b.n	8004e9a <_printf_i+0x152>
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	47d0      	blx	sl
 8004f52:	3001      	adds	r0, #1
 8004f54:	d0ab      	beq.n	8004eae <_printf_i+0x166>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	079b      	lsls	r3, r3, #30
 8004f5a:	d413      	bmi.n	8004f84 <_printf_i+0x23c>
 8004f5c:	68e0      	ldr	r0, [r4, #12]
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	4298      	cmp	r0, r3
 8004f62:	bfb8      	it	lt
 8004f64:	4618      	movlt	r0, r3
 8004f66:	e7a4      	b.n	8004eb2 <_printf_i+0x16a>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4640      	mov	r0, r8
 8004f70:	47d0      	blx	sl
 8004f72:	3001      	adds	r0, #1
 8004f74:	d09b      	beq.n	8004eae <_printf_i+0x166>
 8004f76:	3501      	adds	r5, #1
 8004f78:	68e3      	ldr	r3, [r4, #12]
 8004f7a:	9903      	ldr	r1, [sp, #12]
 8004f7c:	1a5b      	subs	r3, r3, r1
 8004f7e:	42ab      	cmp	r3, r5
 8004f80:	dcf2      	bgt.n	8004f68 <_printf_i+0x220>
 8004f82:	e7eb      	b.n	8004f5c <_printf_i+0x214>
 8004f84:	2500      	movs	r5, #0
 8004f86:	f104 0619 	add.w	r6, r4, #25
 8004f8a:	e7f5      	b.n	8004f78 <_printf_i+0x230>
 8004f8c:	08009f30 	.word	0x08009f30
 8004f90:	08009f41 	.word	0x08009f41

08004f94 <_scanf_float>:
 8004f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	688b      	ldr	r3, [r1, #8]
 8004f9e:	4617      	mov	r7, r2
 8004fa0:	1e5a      	subs	r2, r3, #1
 8004fa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004fa6:	bf85      	ittet	hi
 8004fa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004fac:	195b      	addhi	r3, r3, r5
 8004fae:	2300      	movls	r3, #0
 8004fb0:	9302      	strhi	r3, [sp, #8]
 8004fb2:	bf88      	it	hi
 8004fb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004fb8:	468b      	mov	fp, r1
 8004fba:	f04f 0500 	mov.w	r5, #0
 8004fbe:	bf8c      	ite	hi
 8004fc0:	608b      	strhi	r3, [r1, #8]
 8004fc2:	9302      	strls	r3, [sp, #8]
 8004fc4:	680b      	ldr	r3, [r1, #0]
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004fcc:	f84b 3b1c 	str.w	r3, [fp], #28
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	465e      	mov	r6, fp
 8004fd4:	46aa      	mov	sl, r5
 8004fd6:	46a9      	mov	r9, r5
 8004fd8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004fdc:	9501      	str	r5, [sp, #4]
 8004fde:	68a2      	ldr	r2, [r4, #8]
 8004fe0:	b152      	cbz	r2, 8004ff8 <_scanf_float+0x64>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b4e      	cmp	r3, #78	; 0x4e
 8004fe8:	d864      	bhi.n	80050b4 <_scanf_float+0x120>
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d83c      	bhi.n	8005068 <_scanf_float+0xd4>
 8004fee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004ff2:	b2c8      	uxtb	r0, r1
 8004ff4:	280e      	cmp	r0, #14
 8004ff6:	d93a      	bls.n	800506e <_scanf_float+0xda>
 8004ff8:	f1b9 0f00 	cmp.w	r9, #0
 8004ffc:	d003      	beq.n	8005006 <_scanf_float+0x72>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800500a:	f1ba 0f01 	cmp.w	sl, #1
 800500e:	f200 8113 	bhi.w	8005238 <_scanf_float+0x2a4>
 8005012:	455e      	cmp	r6, fp
 8005014:	f200 8105 	bhi.w	8005222 <_scanf_float+0x28e>
 8005018:	2501      	movs	r5, #1
 800501a:	4628      	mov	r0, r5
 800501c:	b007      	add	sp, #28
 800501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005026:	2a0d      	cmp	r2, #13
 8005028:	d8e6      	bhi.n	8004ff8 <_scanf_float+0x64>
 800502a:	a101      	add	r1, pc, #4	; (adr r1, 8005030 <_scanf_float+0x9c>)
 800502c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005030:	0800516f 	.word	0x0800516f
 8005034:	08004ff9 	.word	0x08004ff9
 8005038:	08004ff9 	.word	0x08004ff9
 800503c:	08004ff9 	.word	0x08004ff9
 8005040:	080051cf 	.word	0x080051cf
 8005044:	080051a7 	.word	0x080051a7
 8005048:	08004ff9 	.word	0x08004ff9
 800504c:	08004ff9 	.word	0x08004ff9
 8005050:	0800517d 	.word	0x0800517d
 8005054:	08004ff9 	.word	0x08004ff9
 8005058:	08004ff9 	.word	0x08004ff9
 800505c:	08004ff9 	.word	0x08004ff9
 8005060:	08004ff9 	.word	0x08004ff9
 8005064:	08005135 	.word	0x08005135
 8005068:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800506c:	e7db      	b.n	8005026 <_scanf_float+0x92>
 800506e:	290e      	cmp	r1, #14
 8005070:	d8c2      	bhi.n	8004ff8 <_scanf_float+0x64>
 8005072:	a001      	add	r0, pc, #4	; (adr r0, 8005078 <_scanf_float+0xe4>)
 8005074:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005078:	08005127 	.word	0x08005127
 800507c:	08004ff9 	.word	0x08004ff9
 8005080:	08005127 	.word	0x08005127
 8005084:	080051bb 	.word	0x080051bb
 8005088:	08004ff9 	.word	0x08004ff9
 800508c:	080050d5 	.word	0x080050d5
 8005090:	08005111 	.word	0x08005111
 8005094:	08005111 	.word	0x08005111
 8005098:	08005111 	.word	0x08005111
 800509c:	08005111 	.word	0x08005111
 80050a0:	08005111 	.word	0x08005111
 80050a4:	08005111 	.word	0x08005111
 80050a8:	08005111 	.word	0x08005111
 80050ac:	08005111 	.word	0x08005111
 80050b0:	08005111 	.word	0x08005111
 80050b4:	2b6e      	cmp	r3, #110	; 0x6e
 80050b6:	d809      	bhi.n	80050cc <_scanf_float+0x138>
 80050b8:	2b60      	cmp	r3, #96	; 0x60
 80050ba:	d8b2      	bhi.n	8005022 <_scanf_float+0x8e>
 80050bc:	2b54      	cmp	r3, #84	; 0x54
 80050be:	d077      	beq.n	80051b0 <_scanf_float+0x21c>
 80050c0:	2b59      	cmp	r3, #89	; 0x59
 80050c2:	d199      	bne.n	8004ff8 <_scanf_float+0x64>
 80050c4:	2d07      	cmp	r5, #7
 80050c6:	d197      	bne.n	8004ff8 <_scanf_float+0x64>
 80050c8:	2508      	movs	r5, #8
 80050ca:	e029      	b.n	8005120 <_scanf_float+0x18c>
 80050cc:	2b74      	cmp	r3, #116	; 0x74
 80050ce:	d06f      	beq.n	80051b0 <_scanf_float+0x21c>
 80050d0:	2b79      	cmp	r3, #121	; 0x79
 80050d2:	e7f6      	b.n	80050c2 <_scanf_float+0x12e>
 80050d4:	6821      	ldr	r1, [r4, #0]
 80050d6:	05c8      	lsls	r0, r1, #23
 80050d8:	d51a      	bpl.n	8005110 <_scanf_float+0x17c>
 80050da:	9b02      	ldr	r3, [sp, #8]
 80050dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80050e0:	6021      	str	r1, [r4, #0]
 80050e2:	f109 0901 	add.w	r9, r9, #1
 80050e6:	b11b      	cbz	r3, 80050f0 <_scanf_float+0x15c>
 80050e8:	3b01      	subs	r3, #1
 80050ea:	3201      	adds	r2, #1
 80050ec:	9302      	str	r3, [sp, #8]
 80050ee:	60a2      	str	r2, [r4, #8]
 80050f0:	68a3      	ldr	r3, [r4, #8]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	60a3      	str	r3, [r4, #8]
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	3301      	adds	r3, #1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3b01      	subs	r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	f340 8084 	ble.w	8005210 <_scanf_float+0x27c>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	e766      	b.n	8004fde <_scanf_float+0x4a>
 8005110:	eb1a 0f05 	cmn.w	sl, r5
 8005114:	f47f af70 	bne.w	8004ff8 <_scanf_float+0x64>
 8005118:	6822      	ldr	r2, [r4, #0]
 800511a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800511e:	6022      	str	r2, [r4, #0]
 8005120:	f806 3b01 	strb.w	r3, [r6], #1
 8005124:	e7e4      	b.n	80050f0 <_scanf_float+0x15c>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	0610      	lsls	r0, r2, #24
 800512a:	f57f af65 	bpl.w	8004ff8 <_scanf_float+0x64>
 800512e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005132:	e7f4      	b.n	800511e <_scanf_float+0x18a>
 8005134:	f1ba 0f00 	cmp.w	sl, #0
 8005138:	d10e      	bne.n	8005158 <_scanf_float+0x1c4>
 800513a:	f1b9 0f00 	cmp.w	r9, #0
 800513e:	d10e      	bne.n	800515e <_scanf_float+0x1ca>
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005146:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800514a:	d108      	bne.n	800515e <_scanf_float+0x1ca>
 800514c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005150:	f04f 0a01 	mov.w	sl, #1
 8005154:	6022      	str	r2, [r4, #0]
 8005156:	e7e3      	b.n	8005120 <_scanf_float+0x18c>
 8005158:	f1ba 0f02 	cmp.w	sl, #2
 800515c:	d055      	beq.n	800520a <_scanf_float+0x276>
 800515e:	2d01      	cmp	r5, #1
 8005160:	d002      	beq.n	8005168 <_scanf_float+0x1d4>
 8005162:	2d04      	cmp	r5, #4
 8005164:	f47f af48 	bne.w	8004ff8 <_scanf_float+0x64>
 8005168:	3501      	adds	r5, #1
 800516a:	b2ed      	uxtb	r5, r5
 800516c:	e7d8      	b.n	8005120 <_scanf_float+0x18c>
 800516e:	f1ba 0f01 	cmp.w	sl, #1
 8005172:	f47f af41 	bne.w	8004ff8 <_scanf_float+0x64>
 8005176:	f04f 0a02 	mov.w	sl, #2
 800517a:	e7d1      	b.n	8005120 <_scanf_float+0x18c>
 800517c:	b97d      	cbnz	r5, 800519e <_scanf_float+0x20a>
 800517e:	f1b9 0f00 	cmp.w	r9, #0
 8005182:	f47f af3c 	bne.w	8004ffe <_scanf_float+0x6a>
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800518c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005190:	f47f af39 	bne.w	8005006 <_scanf_float+0x72>
 8005194:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005198:	2501      	movs	r5, #1
 800519a:	6022      	str	r2, [r4, #0]
 800519c:	e7c0      	b.n	8005120 <_scanf_float+0x18c>
 800519e:	2d03      	cmp	r5, #3
 80051a0:	d0e2      	beq.n	8005168 <_scanf_float+0x1d4>
 80051a2:	2d05      	cmp	r5, #5
 80051a4:	e7de      	b.n	8005164 <_scanf_float+0x1d0>
 80051a6:	2d02      	cmp	r5, #2
 80051a8:	f47f af26 	bne.w	8004ff8 <_scanf_float+0x64>
 80051ac:	2503      	movs	r5, #3
 80051ae:	e7b7      	b.n	8005120 <_scanf_float+0x18c>
 80051b0:	2d06      	cmp	r5, #6
 80051b2:	f47f af21 	bne.w	8004ff8 <_scanf_float+0x64>
 80051b6:	2507      	movs	r5, #7
 80051b8:	e7b2      	b.n	8005120 <_scanf_float+0x18c>
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	0591      	lsls	r1, r2, #22
 80051be:	f57f af1b 	bpl.w	8004ff8 <_scanf_float+0x64>
 80051c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80051c6:	6022      	str	r2, [r4, #0]
 80051c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80051cc:	e7a8      	b.n	8005120 <_scanf_float+0x18c>
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80051d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051d8:	d006      	beq.n	80051e8 <_scanf_float+0x254>
 80051da:	0550      	lsls	r0, r2, #21
 80051dc:	f57f af0c 	bpl.w	8004ff8 <_scanf_float+0x64>
 80051e0:	f1b9 0f00 	cmp.w	r9, #0
 80051e4:	f43f af0f 	beq.w	8005006 <_scanf_float+0x72>
 80051e8:	0591      	lsls	r1, r2, #22
 80051ea:	bf58      	it	pl
 80051ec:	9901      	ldrpl	r1, [sp, #4]
 80051ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051f2:	bf58      	it	pl
 80051f4:	eba9 0101 	subpl.w	r1, r9, r1
 80051f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051fc:	f04f 0900 	mov.w	r9, #0
 8005200:	bf58      	it	pl
 8005202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	e78a      	b.n	8005120 <_scanf_float+0x18c>
 800520a:	f04f 0a03 	mov.w	sl, #3
 800520e:	e787      	b.n	8005120 <_scanf_float+0x18c>
 8005210:	4639      	mov	r1, r7
 8005212:	4640      	mov	r0, r8
 8005214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005218:	4798      	blx	r3
 800521a:	2800      	cmp	r0, #0
 800521c:	f43f aedf 	beq.w	8004fde <_scanf_float+0x4a>
 8005220:	e6ea      	b.n	8004ff8 <_scanf_float+0x64>
 8005222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005226:	463a      	mov	r2, r7
 8005228:	4640      	mov	r0, r8
 800522a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800522e:	4798      	blx	r3
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	3b01      	subs	r3, #1
 8005234:	6123      	str	r3, [r4, #16]
 8005236:	e6ec      	b.n	8005012 <_scanf_float+0x7e>
 8005238:	1e6b      	subs	r3, r5, #1
 800523a:	2b06      	cmp	r3, #6
 800523c:	d825      	bhi.n	800528a <_scanf_float+0x2f6>
 800523e:	2d02      	cmp	r5, #2
 8005240:	d836      	bhi.n	80052b0 <_scanf_float+0x31c>
 8005242:	455e      	cmp	r6, fp
 8005244:	f67f aee8 	bls.w	8005018 <_scanf_float+0x84>
 8005248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800524c:	463a      	mov	r2, r7
 800524e:	4640      	mov	r0, r8
 8005250:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005254:	4798      	blx	r3
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	3b01      	subs	r3, #1
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	e7f1      	b.n	8005242 <_scanf_float+0x2ae>
 800525e:	9802      	ldr	r0, [sp, #8]
 8005260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005264:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005268:	463a      	mov	r2, r7
 800526a:	9002      	str	r0, [sp, #8]
 800526c:	4640      	mov	r0, r8
 800526e:	4798      	blx	r3
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	3b01      	subs	r3, #1
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800527a:	fa5f fa8a 	uxtb.w	sl, sl
 800527e:	f1ba 0f02 	cmp.w	sl, #2
 8005282:	d1ec      	bne.n	800525e <_scanf_float+0x2ca>
 8005284:	3d03      	subs	r5, #3
 8005286:	b2ed      	uxtb	r5, r5
 8005288:	1b76      	subs	r6, r6, r5
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	05da      	lsls	r2, r3, #23
 800528e:	d52f      	bpl.n	80052f0 <_scanf_float+0x35c>
 8005290:	055b      	lsls	r3, r3, #21
 8005292:	d510      	bpl.n	80052b6 <_scanf_float+0x322>
 8005294:	455e      	cmp	r6, fp
 8005296:	f67f aebf 	bls.w	8005018 <_scanf_float+0x84>
 800529a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800529e:	463a      	mov	r2, r7
 80052a0:	4640      	mov	r0, r8
 80052a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052a6:	4798      	blx	r3
 80052a8:	6923      	ldr	r3, [r4, #16]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	6123      	str	r3, [r4, #16]
 80052ae:	e7f1      	b.n	8005294 <_scanf_float+0x300>
 80052b0:	46aa      	mov	sl, r5
 80052b2:	9602      	str	r6, [sp, #8]
 80052b4:	e7df      	b.n	8005276 <_scanf_float+0x2e2>
 80052b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80052ba:	6923      	ldr	r3, [r4, #16]
 80052bc:	2965      	cmp	r1, #101	; 0x65
 80052be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80052c2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80052c6:	6123      	str	r3, [r4, #16]
 80052c8:	d00c      	beq.n	80052e4 <_scanf_float+0x350>
 80052ca:	2945      	cmp	r1, #69	; 0x45
 80052cc:	d00a      	beq.n	80052e4 <_scanf_float+0x350>
 80052ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052d2:	463a      	mov	r2, r7
 80052d4:	4640      	mov	r0, r8
 80052d6:	4798      	blx	r3
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80052de:	3b01      	subs	r3, #1
 80052e0:	1eb5      	subs	r5, r6, #2
 80052e2:	6123      	str	r3, [r4, #16]
 80052e4:	463a      	mov	r2, r7
 80052e6:	4640      	mov	r0, r8
 80052e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ec:	4798      	blx	r3
 80052ee:	462e      	mov	r6, r5
 80052f0:	6825      	ldr	r5, [r4, #0]
 80052f2:	f015 0510 	ands.w	r5, r5, #16
 80052f6:	d155      	bne.n	80053a4 <_scanf_float+0x410>
 80052f8:	7035      	strb	r5, [r6, #0]
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005304:	d11b      	bne.n	800533e <_scanf_float+0x3aa>
 8005306:	9b01      	ldr	r3, [sp, #4]
 8005308:	454b      	cmp	r3, r9
 800530a:	eba3 0209 	sub.w	r2, r3, r9
 800530e:	d123      	bne.n	8005358 <_scanf_float+0x3c4>
 8005310:	2200      	movs	r2, #0
 8005312:	4659      	mov	r1, fp
 8005314:	4640      	mov	r0, r8
 8005316:	f000 fefb 	bl	8006110 <_strtod_r>
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	f012 0f02 	tst.w	r2, #2
 8005322:	4606      	mov	r6, r0
 8005324:	460f      	mov	r7, r1
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	d021      	beq.n	800536e <_scanf_float+0x3da>
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	9903      	ldr	r1, [sp, #12]
 800532e:	600a      	str	r2, [r1, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	e9c3 6700 	strd	r6, r7, [r3]
 8005336:	68e3      	ldr	r3, [r4, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60e3      	str	r3, [r4, #12]
 800533c:	e66d      	b.n	800501a <_scanf_float+0x86>
 800533e:	9b04      	ldr	r3, [sp, #16]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0e5      	beq.n	8005310 <_scanf_float+0x37c>
 8005344:	9905      	ldr	r1, [sp, #20]
 8005346:	230a      	movs	r3, #10
 8005348:	462a      	mov	r2, r5
 800534a:	4640      	mov	r0, r8
 800534c:	3101      	adds	r1, #1
 800534e:	f000 ff61 	bl	8006214 <_strtol_r>
 8005352:	9b04      	ldr	r3, [sp, #16]
 8005354:	9e05      	ldr	r6, [sp, #20]
 8005356:	1ac2      	subs	r2, r0, r3
 8005358:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800535c:	429e      	cmp	r6, r3
 800535e:	bf28      	it	cs
 8005360:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005364:	4630      	mov	r0, r6
 8005366:	4910      	ldr	r1, [pc, #64]	; (80053a8 <_scanf_float+0x414>)
 8005368:	f000 f826 	bl	80053b8 <siprintf>
 800536c:	e7d0      	b.n	8005310 <_scanf_float+0x37c>
 800536e:	f012 0f04 	tst.w	r2, #4
 8005372:	f103 0204 	add.w	r2, r3, #4
 8005376:	d1d9      	bne.n	800532c <_scanf_float+0x398>
 8005378:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800537c:	f8cc 2000 	str.w	r2, [ip]
 8005380:	f8d3 8000 	ldr.w	r8, [r3]
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	f7fb fbac 	bl	8000ae4 <__aeabi_dcmpun>
 800538c:	b128      	cbz	r0, 800539a <_scanf_float+0x406>
 800538e:	4807      	ldr	r0, [pc, #28]	; (80053ac <_scanf_float+0x418>)
 8005390:	f000 f80e 	bl	80053b0 <nanf>
 8005394:	f8c8 0000 	str.w	r0, [r8]
 8005398:	e7cd      	b.n	8005336 <_scanf_float+0x3a2>
 800539a:	4630      	mov	r0, r6
 800539c:	4639      	mov	r1, r7
 800539e:	f7fb fbff 	bl	8000ba0 <__aeabi_d2f>
 80053a2:	e7f7      	b.n	8005394 <_scanf_float+0x400>
 80053a4:	2500      	movs	r5, #0
 80053a6:	e638      	b.n	800501a <_scanf_float+0x86>
 80053a8:	08009f52 	.word	0x08009f52
 80053ac:	0800a373 	.word	0x0800a373

080053b0 <nanf>:
 80053b0:	4800      	ldr	r0, [pc, #0]	; (80053b4 <nanf+0x4>)
 80053b2:	4770      	bx	lr
 80053b4:	7fc00000 	.word	0x7fc00000

080053b8 <siprintf>:
 80053b8:	b40e      	push	{r1, r2, r3}
 80053ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053be:	b500      	push	{lr}
 80053c0:	b09c      	sub	sp, #112	; 0x70
 80053c2:	ab1d      	add	r3, sp, #116	; 0x74
 80053c4:	9002      	str	r0, [sp, #8]
 80053c6:	9006      	str	r0, [sp, #24]
 80053c8:	9107      	str	r1, [sp, #28]
 80053ca:	9104      	str	r1, [sp, #16]
 80053cc:	4808      	ldr	r0, [pc, #32]	; (80053f0 <siprintf+0x38>)
 80053ce:	4909      	ldr	r1, [pc, #36]	; (80053f4 <siprintf+0x3c>)
 80053d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053d4:	9105      	str	r1, [sp, #20]
 80053d6:	6800      	ldr	r0, [r0, #0]
 80053d8:	a902      	add	r1, sp, #8
 80053da:	9301      	str	r3, [sp, #4]
 80053dc:	f002 ff70 	bl	80082c0 <_svfiprintf_r>
 80053e0:	2200      	movs	r2, #0
 80053e2:	9b02      	ldr	r3, [sp, #8]
 80053e4:	701a      	strb	r2, [r3, #0]
 80053e6:	b01c      	add	sp, #112	; 0x70
 80053e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80053ec:	b003      	add	sp, #12
 80053ee:	4770      	bx	lr
 80053f0:	2000000c 	.word	0x2000000c
 80053f4:	ffff0208 	.word	0xffff0208

080053f8 <siscanf>:
 80053f8:	b40e      	push	{r1, r2, r3}
 80053fa:	f44f 7201 	mov.w	r2, #516	; 0x204
 80053fe:	b530      	push	{r4, r5, lr}
 8005400:	b09c      	sub	sp, #112	; 0x70
 8005402:	ac1f      	add	r4, sp, #124	; 0x7c
 8005404:	f854 5b04 	ldr.w	r5, [r4], #4
 8005408:	f8ad 2014 	strh.w	r2, [sp, #20]
 800540c:	9002      	str	r0, [sp, #8]
 800540e:	9006      	str	r0, [sp, #24]
 8005410:	f7fa ff0a 	bl	8000228 <strlen>
 8005414:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <siscanf+0x4c>)
 8005416:	9003      	str	r0, [sp, #12]
 8005418:	930b      	str	r3, [sp, #44]	; 0x2c
 800541a:	2300      	movs	r3, #0
 800541c:	930f      	str	r3, [sp, #60]	; 0x3c
 800541e:	9314      	str	r3, [sp, #80]	; 0x50
 8005420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005424:	9007      	str	r0, [sp, #28]
 8005426:	4808      	ldr	r0, [pc, #32]	; (8005448 <siscanf+0x50>)
 8005428:	f8ad 3016 	strh.w	r3, [sp, #22]
 800542c:	462a      	mov	r2, r5
 800542e:	4623      	mov	r3, r4
 8005430:	a902      	add	r1, sp, #8
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	9401      	str	r4, [sp, #4]
 8005436:	f003 f89d 	bl	8008574 <__ssvfiscanf_r>
 800543a:	b01c      	add	sp, #112	; 0x70
 800543c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005440:	b003      	add	sp, #12
 8005442:	4770      	bx	lr
 8005444:	0800546f 	.word	0x0800546f
 8005448:	2000000c 	.word	0x2000000c

0800544c <__sread>:
 800544c:	b510      	push	{r4, lr}
 800544e:	460c      	mov	r4, r1
 8005450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005454:	f003 fb5a 	bl	8008b0c <_read_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	bfab      	itete	ge
 800545c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800545e:	89a3      	ldrhlt	r3, [r4, #12]
 8005460:	181b      	addge	r3, r3, r0
 8005462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005466:	bfac      	ite	ge
 8005468:	6563      	strge	r3, [r4, #84]	; 0x54
 800546a:	81a3      	strhlt	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__seofread>:
 800546e:	2000      	movs	r0, #0
 8005470:	4770      	bx	lr

08005472 <__swrite>:
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	461f      	mov	r7, r3
 8005478:	898b      	ldrh	r3, [r1, #12]
 800547a:	4605      	mov	r5, r0
 800547c:	05db      	lsls	r3, r3, #23
 800547e:	460c      	mov	r4, r1
 8005480:	4616      	mov	r6, r2
 8005482:	d505      	bpl.n	8005490 <__swrite+0x1e>
 8005484:	2302      	movs	r3, #2
 8005486:	2200      	movs	r2, #0
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f002 f8cc 	bl	8007628 <_lseek_r>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	4632      	mov	r2, r6
 8005494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	4628      	mov	r0, r5
 800549c:	463b      	mov	r3, r7
 800549e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f000 beb7 	b.w	8006218 <_write_r>

080054aa <__sseek>:
 80054aa:	b510      	push	{r4, lr}
 80054ac:	460c      	mov	r4, r1
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f002 f8b9 	bl	8007628 <_lseek_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	bf15      	itete	ne
 80054bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054c6:	81a3      	strheq	r3, [r4, #12]
 80054c8:	bf18      	it	ne
 80054ca:	81a3      	strhne	r3, [r4, #12]
 80054cc:	bd10      	pop	{r4, pc}

080054ce <__sclose>:
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 beb3 	b.w	800623c <_close_r>

080054d6 <strncmp>:
 80054d6:	4603      	mov	r3, r0
 80054d8:	b510      	push	{r4, lr}
 80054da:	b172      	cbz	r2, 80054fa <strncmp+0x24>
 80054dc:	3901      	subs	r1, #1
 80054de:	1884      	adds	r4, r0, r2
 80054e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80054e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80054e8:	4290      	cmp	r0, r2
 80054ea:	d101      	bne.n	80054f0 <strncmp+0x1a>
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d101      	bne.n	80054f4 <strncmp+0x1e>
 80054f0:	1a80      	subs	r0, r0, r2
 80054f2:	bd10      	pop	{r4, pc}
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d1f3      	bne.n	80054e0 <strncmp+0xa>
 80054f8:	e7fa      	b.n	80054f0 <strncmp+0x1a>
 80054fa:	4610      	mov	r0, r2
 80054fc:	e7f9      	b.n	80054f2 <strncmp+0x1c>

080054fe <sulp>:
 80054fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005502:	460f      	mov	r7, r1
 8005504:	4690      	mov	r8, r2
 8005506:	f002 fc47 	bl	8007d98 <__ulp>
 800550a:	4604      	mov	r4, r0
 800550c:	460d      	mov	r5, r1
 800550e:	f1b8 0f00 	cmp.w	r8, #0
 8005512:	d011      	beq.n	8005538 <sulp+0x3a>
 8005514:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005518:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800551c:	2b00      	cmp	r3, #0
 800551e:	dd0b      	ble.n	8005538 <sulp+0x3a>
 8005520:	2400      	movs	r4, #0
 8005522:	051b      	lsls	r3, r3, #20
 8005524:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005528:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	f7fb f83e 	bl	80005b0 <__aeabi_dmul>
 8005534:	4604      	mov	r4, r0
 8005536:	460d      	mov	r5, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005540 <_strtod_l>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	469b      	mov	fp, r3
 8005546:	2300      	movs	r3, #0
 8005548:	b09f      	sub	sp, #124	; 0x7c
 800554a:	931a      	str	r3, [sp, #104]	; 0x68
 800554c:	4b9e      	ldr	r3, [pc, #632]	; (80057c8 <_strtod_l+0x288>)
 800554e:	4682      	mov	sl, r0
 8005550:	681f      	ldr	r7, [r3, #0]
 8005552:	460e      	mov	r6, r1
 8005554:	4638      	mov	r0, r7
 8005556:	9215      	str	r2, [sp, #84]	; 0x54
 8005558:	f7fa fe66 	bl	8000228 <strlen>
 800555c:	f04f 0800 	mov.w	r8, #0
 8005560:	4604      	mov	r4, r0
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	9619      	str	r6, [sp, #100]	; 0x64
 8005568:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	2a2b      	cmp	r2, #43	; 0x2b
 800556e:	d04c      	beq.n	800560a <_strtod_l+0xca>
 8005570:	d83a      	bhi.n	80055e8 <_strtod_l+0xa8>
 8005572:	2a0d      	cmp	r2, #13
 8005574:	d833      	bhi.n	80055de <_strtod_l+0x9e>
 8005576:	2a08      	cmp	r2, #8
 8005578:	d833      	bhi.n	80055e2 <_strtod_l+0xa2>
 800557a:	2a00      	cmp	r2, #0
 800557c:	d03d      	beq.n	80055fa <_strtod_l+0xba>
 800557e:	2300      	movs	r3, #0
 8005580:	930a      	str	r3, [sp, #40]	; 0x28
 8005582:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005584:	782b      	ldrb	r3, [r5, #0]
 8005586:	2b30      	cmp	r3, #48	; 0x30
 8005588:	f040 80aa 	bne.w	80056e0 <_strtod_l+0x1a0>
 800558c:	786b      	ldrb	r3, [r5, #1]
 800558e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005592:	2b58      	cmp	r3, #88	; 0x58
 8005594:	d166      	bne.n	8005664 <_strtod_l+0x124>
 8005596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005598:	4650      	mov	r0, sl
 800559a:	9301      	str	r3, [sp, #4]
 800559c:	ab1a      	add	r3, sp, #104	; 0x68
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4a8a      	ldr	r2, [pc, #552]	; (80057cc <_strtod_l+0x28c>)
 80055a2:	f8cd b008 	str.w	fp, [sp, #8]
 80055a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80055a8:	a919      	add	r1, sp, #100	; 0x64
 80055aa:	f001 fd3b 	bl	8007024 <__gethex>
 80055ae:	f010 0607 	ands.w	r6, r0, #7
 80055b2:	4604      	mov	r4, r0
 80055b4:	d005      	beq.n	80055c2 <_strtod_l+0x82>
 80055b6:	2e06      	cmp	r6, #6
 80055b8:	d129      	bne.n	800560e <_strtod_l+0xce>
 80055ba:	2300      	movs	r3, #0
 80055bc:	3501      	adds	r5, #1
 80055be:	9519      	str	r5, [sp, #100]	; 0x64
 80055c0:	930a      	str	r3, [sp, #40]	; 0x28
 80055c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f040 858a 	bne.w	80060de <_strtod_l+0xb9e>
 80055ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055cc:	b1d3      	cbz	r3, 8005604 <_strtod_l+0xc4>
 80055ce:	4642      	mov	r2, r8
 80055d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80055d4:	4610      	mov	r0, r2
 80055d6:	4619      	mov	r1, r3
 80055d8:	b01f      	add	sp, #124	; 0x7c
 80055da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055de:	2a20      	cmp	r2, #32
 80055e0:	d1cd      	bne.n	800557e <_strtod_l+0x3e>
 80055e2:	3301      	adds	r3, #1
 80055e4:	9319      	str	r3, [sp, #100]	; 0x64
 80055e6:	e7bf      	b.n	8005568 <_strtod_l+0x28>
 80055e8:	2a2d      	cmp	r2, #45	; 0x2d
 80055ea:	d1c8      	bne.n	800557e <_strtod_l+0x3e>
 80055ec:	2201      	movs	r2, #1
 80055ee:	920a      	str	r2, [sp, #40]	; 0x28
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	9219      	str	r2, [sp, #100]	; 0x64
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1c3      	bne.n	8005582 <_strtod_l+0x42>
 80055fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055fc:	9619      	str	r6, [sp, #100]	; 0x64
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f040 856b 	bne.w	80060da <_strtod_l+0xb9a>
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	e7e4      	b.n	80055d4 <_strtod_l+0x94>
 800560a:	2200      	movs	r2, #0
 800560c:	e7ef      	b.n	80055ee <_strtod_l+0xae>
 800560e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005610:	b13a      	cbz	r2, 8005622 <_strtod_l+0xe2>
 8005612:	2135      	movs	r1, #53	; 0x35
 8005614:	a81c      	add	r0, sp, #112	; 0x70
 8005616:	f002 fcc3 	bl	8007fa0 <__copybits>
 800561a:	4650      	mov	r0, sl
 800561c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800561e:	f002 f88b 	bl	8007738 <_Bfree>
 8005622:	3e01      	subs	r6, #1
 8005624:	2e04      	cmp	r6, #4
 8005626:	d806      	bhi.n	8005636 <_strtod_l+0xf6>
 8005628:	e8df f006 	tbb	[pc, r6]
 800562c:	1714030a 	.word	0x1714030a
 8005630:	0a          	.byte	0x0a
 8005631:	00          	.byte	0x00
 8005632:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005636:	0721      	lsls	r1, r4, #28
 8005638:	d5c3      	bpl.n	80055c2 <_strtod_l+0x82>
 800563a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800563e:	e7c0      	b.n	80055c2 <_strtod_l+0x82>
 8005640:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005642:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005646:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800564a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800564e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005652:	e7f0      	b.n	8005636 <_strtod_l+0xf6>
 8005654:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80057d0 <_strtod_l+0x290>
 8005658:	e7ed      	b.n	8005636 <_strtod_l+0xf6>
 800565a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800565e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005662:	e7e8      	b.n	8005636 <_strtod_l+0xf6>
 8005664:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	9219      	str	r2, [sp, #100]	; 0x64
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b30      	cmp	r3, #48	; 0x30
 800566e:	d0f9      	beq.n	8005664 <_strtod_l+0x124>
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0a6      	beq.n	80055c2 <_strtod_l+0x82>
 8005674:	2301      	movs	r3, #1
 8005676:	9307      	str	r3, [sp, #28]
 8005678:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800567a:	220a      	movs	r2, #10
 800567c:	9308      	str	r3, [sp, #32]
 800567e:	2300      	movs	r3, #0
 8005680:	469b      	mov	fp, r3
 8005682:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005686:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005688:	7805      	ldrb	r5, [r0, #0]
 800568a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800568e:	b2d9      	uxtb	r1, r3
 8005690:	2909      	cmp	r1, #9
 8005692:	d927      	bls.n	80056e4 <_strtod_l+0x1a4>
 8005694:	4622      	mov	r2, r4
 8005696:	4639      	mov	r1, r7
 8005698:	f7ff ff1d 	bl	80054d6 <strncmp>
 800569c:	2800      	cmp	r0, #0
 800569e:	d033      	beq.n	8005708 <_strtod_l+0x1c8>
 80056a0:	2000      	movs	r0, #0
 80056a2:	462a      	mov	r2, r5
 80056a4:	465c      	mov	r4, fp
 80056a6:	4603      	mov	r3, r0
 80056a8:	9004      	str	r0, [sp, #16]
 80056aa:	2a65      	cmp	r2, #101	; 0x65
 80056ac:	d001      	beq.n	80056b2 <_strtod_l+0x172>
 80056ae:	2a45      	cmp	r2, #69	; 0x45
 80056b0:	d114      	bne.n	80056dc <_strtod_l+0x19c>
 80056b2:	b91c      	cbnz	r4, 80056bc <_strtod_l+0x17c>
 80056b4:	9a07      	ldr	r2, [sp, #28]
 80056b6:	4302      	orrs	r2, r0
 80056b8:	d09f      	beq.n	80055fa <_strtod_l+0xba>
 80056ba:	2400      	movs	r4, #0
 80056bc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80056be:	1c72      	adds	r2, r6, #1
 80056c0:	9219      	str	r2, [sp, #100]	; 0x64
 80056c2:	7872      	ldrb	r2, [r6, #1]
 80056c4:	2a2b      	cmp	r2, #43	; 0x2b
 80056c6:	d079      	beq.n	80057bc <_strtod_l+0x27c>
 80056c8:	2a2d      	cmp	r2, #45	; 0x2d
 80056ca:	f000 8083 	beq.w	80057d4 <_strtod_l+0x294>
 80056ce:	2700      	movs	r7, #0
 80056d0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80056d4:	2909      	cmp	r1, #9
 80056d6:	f240 8083 	bls.w	80057e0 <_strtod_l+0x2a0>
 80056da:	9619      	str	r6, [sp, #100]	; 0x64
 80056dc:	2500      	movs	r5, #0
 80056de:	e09f      	b.n	8005820 <_strtod_l+0x2e0>
 80056e0:	2300      	movs	r3, #0
 80056e2:	e7c8      	b.n	8005676 <_strtod_l+0x136>
 80056e4:	f1bb 0f08 	cmp.w	fp, #8
 80056e8:	bfd5      	itete	le
 80056ea:	9906      	ldrle	r1, [sp, #24]
 80056ec:	9905      	ldrgt	r1, [sp, #20]
 80056ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80056f2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80056f6:	f100 0001 	add.w	r0, r0, #1
 80056fa:	bfd4      	ite	le
 80056fc:	9306      	strle	r3, [sp, #24]
 80056fe:	9305      	strgt	r3, [sp, #20]
 8005700:	f10b 0b01 	add.w	fp, fp, #1
 8005704:	9019      	str	r0, [sp, #100]	; 0x64
 8005706:	e7be      	b.n	8005686 <_strtod_l+0x146>
 8005708:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800570a:	191a      	adds	r2, r3, r4
 800570c:	9219      	str	r2, [sp, #100]	; 0x64
 800570e:	5d1a      	ldrb	r2, [r3, r4]
 8005710:	f1bb 0f00 	cmp.w	fp, #0
 8005714:	d036      	beq.n	8005784 <_strtod_l+0x244>
 8005716:	465c      	mov	r4, fp
 8005718:	9004      	str	r0, [sp, #16]
 800571a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800571e:	2b09      	cmp	r3, #9
 8005720:	d912      	bls.n	8005748 <_strtod_l+0x208>
 8005722:	2301      	movs	r3, #1
 8005724:	e7c1      	b.n	80056aa <_strtod_l+0x16a>
 8005726:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005728:	3001      	adds	r0, #1
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	9219      	str	r2, [sp, #100]	; 0x64
 800572e:	785a      	ldrb	r2, [r3, #1]
 8005730:	2a30      	cmp	r2, #48	; 0x30
 8005732:	d0f8      	beq.n	8005726 <_strtod_l+0x1e6>
 8005734:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005738:	2b08      	cmp	r3, #8
 800573a:	f200 84d5 	bhi.w	80060e8 <_strtod_l+0xba8>
 800573e:	9004      	str	r0, [sp, #16]
 8005740:	2000      	movs	r0, #0
 8005742:	4604      	mov	r4, r0
 8005744:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005746:	9308      	str	r3, [sp, #32]
 8005748:	3a30      	subs	r2, #48	; 0x30
 800574a:	f100 0301 	add.w	r3, r0, #1
 800574e:	d013      	beq.n	8005778 <_strtod_l+0x238>
 8005750:	9904      	ldr	r1, [sp, #16]
 8005752:	1905      	adds	r5, r0, r4
 8005754:	4419      	add	r1, r3
 8005756:	9104      	str	r1, [sp, #16]
 8005758:	4623      	mov	r3, r4
 800575a:	210a      	movs	r1, #10
 800575c:	42ab      	cmp	r3, r5
 800575e:	d113      	bne.n	8005788 <_strtod_l+0x248>
 8005760:	1823      	adds	r3, r4, r0
 8005762:	2b08      	cmp	r3, #8
 8005764:	f104 0401 	add.w	r4, r4, #1
 8005768:	4404      	add	r4, r0
 800576a:	dc1b      	bgt.n	80057a4 <_strtod_l+0x264>
 800576c:	230a      	movs	r3, #10
 800576e:	9906      	ldr	r1, [sp, #24]
 8005770:	fb03 2301 	mla	r3, r3, r1, r2
 8005774:	9306      	str	r3, [sp, #24]
 8005776:	2300      	movs	r3, #0
 8005778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800577a:	4618      	mov	r0, r3
 800577c:	1c51      	adds	r1, r2, #1
 800577e:	9119      	str	r1, [sp, #100]	; 0x64
 8005780:	7852      	ldrb	r2, [r2, #1]
 8005782:	e7ca      	b.n	800571a <_strtod_l+0x1da>
 8005784:	4658      	mov	r0, fp
 8005786:	e7d3      	b.n	8005730 <_strtod_l+0x1f0>
 8005788:	2b08      	cmp	r3, #8
 800578a:	dc04      	bgt.n	8005796 <_strtod_l+0x256>
 800578c:	9f06      	ldr	r7, [sp, #24]
 800578e:	434f      	muls	r7, r1
 8005790:	9706      	str	r7, [sp, #24]
 8005792:	3301      	adds	r3, #1
 8005794:	e7e2      	b.n	800575c <_strtod_l+0x21c>
 8005796:	1c5f      	adds	r7, r3, #1
 8005798:	2f10      	cmp	r7, #16
 800579a:	bfde      	ittt	le
 800579c:	9f05      	ldrle	r7, [sp, #20]
 800579e:	434f      	mulle	r7, r1
 80057a0:	9705      	strle	r7, [sp, #20]
 80057a2:	e7f6      	b.n	8005792 <_strtod_l+0x252>
 80057a4:	2c10      	cmp	r4, #16
 80057a6:	bfdf      	itttt	le
 80057a8:	230a      	movle	r3, #10
 80057aa:	9905      	ldrle	r1, [sp, #20]
 80057ac:	fb03 2301 	mlale	r3, r3, r1, r2
 80057b0:	9305      	strle	r3, [sp, #20]
 80057b2:	e7e0      	b.n	8005776 <_strtod_l+0x236>
 80057b4:	2300      	movs	r3, #0
 80057b6:	9304      	str	r3, [sp, #16]
 80057b8:	2301      	movs	r3, #1
 80057ba:	e77b      	b.n	80056b4 <_strtod_l+0x174>
 80057bc:	2700      	movs	r7, #0
 80057be:	1cb2      	adds	r2, r6, #2
 80057c0:	9219      	str	r2, [sp, #100]	; 0x64
 80057c2:	78b2      	ldrb	r2, [r6, #2]
 80057c4:	e784      	b.n	80056d0 <_strtod_l+0x190>
 80057c6:	bf00      	nop
 80057c8:	0800a1a0 	.word	0x0800a1a0
 80057cc:	08009f58 	.word	0x08009f58
 80057d0:	7ff00000 	.word	0x7ff00000
 80057d4:	2701      	movs	r7, #1
 80057d6:	e7f2      	b.n	80057be <_strtod_l+0x27e>
 80057d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057da:	1c51      	adds	r1, r2, #1
 80057dc:	9119      	str	r1, [sp, #100]	; 0x64
 80057de:	7852      	ldrb	r2, [r2, #1]
 80057e0:	2a30      	cmp	r2, #48	; 0x30
 80057e2:	d0f9      	beq.n	80057d8 <_strtod_l+0x298>
 80057e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80057e8:	2908      	cmp	r1, #8
 80057ea:	f63f af77 	bhi.w	80056dc <_strtod_l+0x19c>
 80057ee:	f04f 0e0a 	mov.w	lr, #10
 80057f2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80057f6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057f8:	9209      	str	r2, [sp, #36]	; 0x24
 80057fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80057fc:	1c51      	adds	r1, r2, #1
 80057fe:	9119      	str	r1, [sp, #100]	; 0x64
 8005800:	7852      	ldrb	r2, [r2, #1]
 8005802:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005806:	2d09      	cmp	r5, #9
 8005808:	d935      	bls.n	8005876 <_strtod_l+0x336>
 800580a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800580c:	1b49      	subs	r1, r1, r5
 800580e:	2908      	cmp	r1, #8
 8005810:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005814:	dc02      	bgt.n	800581c <_strtod_l+0x2dc>
 8005816:	4565      	cmp	r5, ip
 8005818:	bfa8      	it	ge
 800581a:	4665      	movge	r5, ip
 800581c:	b107      	cbz	r7, 8005820 <_strtod_l+0x2e0>
 800581e:	426d      	negs	r5, r5
 8005820:	2c00      	cmp	r4, #0
 8005822:	d14c      	bne.n	80058be <_strtod_l+0x37e>
 8005824:	9907      	ldr	r1, [sp, #28]
 8005826:	4301      	orrs	r1, r0
 8005828:	f47f aecb 	bne.w	80055c2 <_strtod_l+0x82>
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f aee4 	bne.w	80055fa <_strtod_l+0xba>
 8005832:	2a69      	cmp	r2, #105	; 0x69
 8005834:	d026      	beq.n	8005884 <_strtod_l+0x344>
 8005836:	dc23      	bgt.n	8005880 <_strtod_l+0x340>
 8005838:	2a49      	cmp	r2, #73	; 0x49
 800583a:	d023      	beq.n	8005884 <_strtod_l+0x344>
 800583c:	2a4e      	cmp	r2, #78	; 0x4e
 800583e:	f47f aedc 	bne.w	80055fa <_strtod_l+0xba>
 8005842:	499d      	ldr	r1, [pc, #628]	; (8005ab8 <_strtod_l+0x578>)
 8005844:	a819      	add	r0, sp, #100	; 0x64
 8005846:	f001 fe3b 	bl	80074c0 <__match>
 800584a:	2800      	cmp	r0, #0
 800584c:	f43f aed5 	beq.w	80055fa <_strtod_l+0xba>
 8005850:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b28      	cmp	r3, #40	; 0x28
 8005856:	d12c      	bne.n	80058b2 <_strtod_l+0x372>
 8005858:	4998      	ldr	r1, [pc, #608]	; (8005abc <_strtod_l+0x57c>)
 800585a:	aa1c      	add	r2, sp, #112	; 0x70
 800585c:	a819      	add	r0, sp, #100	; 0x64
 800585e:	f001 fe43 	bl	80074e8 <__hexnan>
 8005862:	2805      	cmp	r0, #5
 8005864:	d125      	bne.n	80058b2 <_strtod_l+0x372>
 8005866:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005868:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800586c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005870:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005874:	e6a5      	b.n	80055c2 <_strtod_l+0x82>
 8005876:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800587a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800587e:	e7bc      	b.n	80057fa <_strtod_l+0x2ba>
 8005880:	2a6e      	cmp	r2, #110	; 0x6e
 8005882:	e7dc      	b.n	800583e <_strtod_l+0x2fe>
 8005884:	498e      	ldr	r1, [pc, #568]	; (8005ac0 <_strtod_l+0x580>)
 8005886:	a819      	add	r0, sp, #100	; 0x64
 8005888:	f001 fe1a 	bl	80074c0 <__match>
 800588c:	2800      	cmp	r0, #0
 800588e:	f43f aeb4 	beq.w	80055fa <_strtod_l+0xba>
 8005892:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005894:	498b      	ldr	r1, [pc, #556]	; (8005ac4 <_strtod_l+0x584>)
 8005896:	3b01      	subs	r3, #1
 8005898:	a819      	add	r0, sp, #100	; 0x64
 800589a:	9319      	str	r3, [sp, #100]	; 0x64
 800589c:	f001 fe10 	bl	80074c0 <__match>
 80058a0:	b910      	cbnz	r0, 80058a8 <_strtod_l+0x368>
 80058a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058a4:	3301      	adds	r3, #1
 80058a6:	9319      	str	r3, [sp, #100]	; 0x64
 80058a8:	f04f 0800 	mov.w	r8, #0
 80058ac:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005ac8 <_strtod_l+0x588>
 80058b0:	e687      	b.n	80055c2 <_strtod_l+0x82>
 80058b2:	4886      	ldr	r0, [pc, #536]	; (8005acc <_strtod_l+0x58c>)
 80058b4:	f003 f93c 	bl	8008b30 <nan>
 80058b8:	4680      	mov	r8, r0
 80058ba:	4689      	mov	r9, r1
 80058bc:	e681      	b.n	80055c2 <_strtod_l+0x82>
 80058be:	9b04      	ldr	r3, [sp, #16]
 80058c0:	f1bb 0f00 	cmp.w	fp, #0
 80058c4:	bf08      	it	eq
 80058c6:	46a3      	moveq	fp, r4
 80058c8:	1aeb      	subs	r3, r5, r3
 80058ca:	2c10      	cmp	r4, #16
 80058cc:	9806      	ldr	r0, [sp, #24]
 80058ce:	4626      	mov	r6, r4
 80058d0:	9307      	str	r3, [sp, #28]
 80058d2:	bfa8      	it	ge
 80058d4:	2610      	movge	r6, #16
 80058d6:	f7fa fdf1 	bl	80004bc <__aeabi_ui2d>
 80058da:	2c09      	cmp	r4, #9
 80058dc:	4680      	mov	r8, r0
 80058de:	4689      	mov	r9, r1
 80058e0:	dd13      	ble.n	800590a <_strtod_l+0x3ca>
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <_strtod_l+0x590>)
 80058e4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058e8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80058ec:	f7fa fe60 	bl	80005b0 <__aeabi_dmul>
 80058f0:	4680      	mov	r8, r0
 80058f2:	9805      	ldr	r0, [sp, #20]
 80058f4:	4689      	mov	r9, r1
 80058f6:	f7fa fde1 	bl	80004bc <__aeabi_ui2d>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4640      	mov	r0, r8
 8005900:	4649      	mov	r1, r9
 8005902:	f7fa fc9f 	bl	8000244 <__adddf3>
 8005906:	4680      	mov	r8, r0
 8005908:	4689      	mov	r9, r1
 800590a:	2c0f      	cmp	r4, #15
 800590c:	dc36      	bgt.n	800597c <_strtod_l+0x43c>
 800590e:	9b07      	ldr	r3, [sp, #28]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f43f ae56 	beq.w	80055c2 <_strtod_l+0x82>
 8005916:	dd22      	ble.n	800595e <_strtod_l+0x41e>
 8005918:	2b16      	cmp	r3, #22
 800591a:	dc09      	bgt.n	8005930 <_strtod_l+0x3f0>
 800591c:	496c      	ldr	r1, [pc, #432]	; (8005ad0 <_strtod_l+0x590>)
 800591e:	4642      	mov	r2, r8
 8005920:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005924:	464b      	mov	r3, r9
 8005926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800592a:	f7fa fe41 	bl	80005b0 <__aeabi_dmul>
 800592e:	e7c3      	b.n	80058b8 <_strtod_l+0x378>
 8005930:	9a07      	ldr	r2, [sp, #28]
 8005932:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005936:	4293      	cmp	r3, r2
 8005938:	db20      	blt.n	800597c <_strtod_l+0x43c>
 800593a:	4d65      	ldr	r5, [pc, #404]	; (8005ad0 <_strtod_l+0x590>)
 800593c:	f1c4 040f 	rsb	r4, r4, #15
 8005940:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005944:	4642      	mov	r2, r8
 8005946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800594a:	464b      	mov	r3, r9
 800594c:	f7fa fe30 	bl	80005b0 <__aeabi_dmul>
 8005950:	9b07      	ldr	r3, [sp, #28]
 8005952:	1b1c      	subs	r4, r3, r4
 8005954:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005958:	e9d5 2300 	ldrd	r2, r3, [r5]
 800595c:	e7e5      	b.n	800592a <_strtod_l+0x3ea>
 800595e:	9b07      	ldr	r3, [sp, #28]
 8005960:	3316      	adds	r3, #22
 8005962:	db0b      	blt.n	800597c <_strtod_l+0x43c>
 8005964:	9b04      	ldr	r3, [sp, #16]
 8005966:	4640      	mov	r0, r8
 8005968:	1b5d      	subs	r5, r3, r5
 800596a:	4b59      	ldr	r3, [pc, #356]	; (8005ad0 <_strtod_l+0x590>)
 800596c:	4649      	mov	r1, r9
 800596e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005972:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005976:	f7fa ff45 	bl	8000804 <__aeabi_ddiv>
 800597a:	e79d      	b.n	80058b8 <_strtod_l+0x378>
 800597c:	9b07      	ldr	r3, [sp, #28]
 800597e:	1ba6      	subs	r6, r4, r6
 8005980:	441e      	add	r6, r3
 8005982:	2e00      	cmp	r6, #0
 8005984:	dd74      	ble.n	8005a70 <_strtod_l+0x530>
 8005986:	f016 030f 	ands.w	r3, r6, #15
 800598a:	d00a      	beq.n	80059a2 <_strtod_l+0x462>
 800598c:	4950      	ldr	r1, [pc, #320]	; (8005ad0 <_strtod_l+0x590>)
 800598e:	4642      	mov	r2, r8
 8005990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005998:	464b      	mov	r3, r9
 800599a:	f7fa fe09 	bl	80005b0 <__aeabi_dmul>
 800599e:	4680      	mov	r8, r0
 80059a0:	4689      	mov	r9, r1
 80059a2:	f036 060f 	bics.w	r6, r6, #15
 80059a6:	d052      	beq.n	8005a4e <_strtod_l+0x50e>
 80059a8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80059ac:	dd27      	ble.n	80059fe <_strtod_l+0x4be>
 80059ae:	f04f 0b00 	mov.w	fp, #0
 80059b2:	f8cd b010 	str.w	fp, [sp, #16]
 80059b6:	f8cd b020 	str.w	fp, [sp, #32]
 80059ba:	f8cd b018 	str.w	fp, [sp, #24]
 80059be:	2322      	movs	r3, #34	; 0x22
 80059c0:	f04f 0800 	mov.w	r8, #0
 80059c4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005ac8 <_strtod_l+0x588>
 80059c8:	f8ca 3000 	str.w	r3, [sl]
 80059cc:	9b08      	ldr	r3, [sp, #32]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f43f adf7 	beq.w	80055c2 <_strtod_l+0x82>
 80059d4:	4650      	mov	r0, sl
 80059d6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80059d8:	f001 feae 	bl	8007738 <_Bfree>
 80059dc:	4650      	mov	r0, sl
 80059de:	9906      	ldr	r1, [sp, #24]
 80059e0:	f001 feaa 	bl	8007738 <_Bfree>
 80059e4:	4650      	mov	r0, sl
 80059e6:	9904      	ldr	r1, [sp, #16]
 80059e8:	f001 fea6 	bl	8007738 <_Bfree>
 80059ec:	4650      	mov	r0, sl
 80059ee:	9908      	ldr	r1, [sp, #32]
 80059f0:	f001 fea2 	bl	8007738 <_Bfree>
 80059f4:	4659      	mov	r1, fp
 80059f6:	4650      	mov	r0, sl
 80059f8:	f001 fe9e 	bl	8007738 <_Bfree>
 80059fc:	e5e1      	b.n	80055c2 <_strtod_l+0x82>
 80059fe:	4b35      	ldr	r3, [pc, #212]	; (8005ad4 <_strtod_l+0x594>)
 8005a00:	4640      	mov	r0, r8
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	2300      	movs	r3, #0
 8005a06:	4649      	mov	r1, r9
 8005a08:	461f      	mov	r7, r3
 8005a0a:	1136      	asrs	r6, r6, #4
 8005a0c:	2e01      	cmp	r6, #1
 8005a0e:	dc21      	bgt.n	8005a54 <_strtod_l+0x514>
 8005a10:	b10b      	cbz	r3, 8005a16 <_strtod_l+0x4d6>
 8005a12:	4680      	mov	r8, r0
 8005a14:	4689      	mov	r9, r1
 8005a16:	4b2f      	ldr	r3, [pc, #188]	; (8005ad4 <_strtod_l+0x594>)
 8005a18:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005a1c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005a20:	4642      	mov	r2, r8
 8005a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a26:	464b      	mov	r3, r9
 8005a28:	f7fa fdc2 	bl	80005b0 <__aeabi_dmul>
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <_strtod_l+0x588>)
 8005a2e:	460a      	mov	r2, r1
 8005a30:	400b      	ands	r3, r1
 8005a32:	4929      	ldr	r1, [pc, #164]	; (8005ad8 <_strtod_l+0x598>)
 8005a34:	4680      	mov	r8, r0
 8005a36:	428b      	cmp	r3, r1
 8005a38:	d8b9      	bhi.n	80059ae <_strtod_l+0x46e>
 8005a3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005a3e:	428b      	cmp	r3, r1
 8005a40:	bf86      	itte	hi
 8005a42:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005a46:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005adc <_strtod_l+0x59c>
 8005a4a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9305      	str	r3, [sp, #20]
 8005a52:	e07f      	b.n	8005b54 <_strtod_l+0x614>
 8005a54:	07f2      	lsls	r2, r6, #31
 8005a56:	d505      	bpl.n	8005a64 <_strtod_l+0x524>
 8005a58:	9b05      	ldr	r3, [sp, #20]
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa fda7 	bl	80005b0 <__aeabi_dmul>
 8005a62:	2301      	movs	r3, #1
 8005a64:	9a05      	ldr	r2, [sp, #20]
 8005a66:	3701      	adds	r7, #1
 8005a68:	3208      	adds	r2, #8
 8005a6a:	1076      	asrs	r6, r6, #1
 8005a6c:	9205      	str	r2, [sp, #20]
 8005a6e:	e7cd      	b.n	8005a0c <_strtod_l+0x4cc>
 8005a70:	d0ed      	beq.n	8005a4e <_strtod_l+0x50e>
 8005a72:	4276      	negs	r6, r6
 8005a74:	f016 020f 	ands.w	r2, r6, #15
 8005a78:	d00a      	beq.n	8005a90 <_strtod_l+0x550>
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <_strtod_l+0x590>)
 8005a7c:	4640      	mov	r0, r8
 8005a7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a82:	4649      	mov	r1, r9
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f7fa febc 	bl	8000804 <__aeabi_ddiv>
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	4689      	mov	r9, r1
 8005a90:	1136      	asrs	r6, r6, #4
 8005a92:	d0dc      	beq.n	8005a4e <_strtod_l+0x50e>
 8005a94:	2e1f      	cmp	r6, #31
 8005a96:	dd23      	ble.n	8005ae0 <_strtod_l+0x5a0>
 8005a98:	f04f 0b00 	mov.w	fp, #0
 8005a9c:	f8cd b010 	str.w	fp, [sp, #16]
 8005aa0:	f8cd b020 	str.w	fp, [sp, #32]
 8005aa4:	f8cd b018 	str.w	fp, [sp, #24]
 8005aa8:	2322      	movs	r3, #34	; 0x22
 8005aaa:	f04f 0800 	mov.w	r8, #0
 8005aae:	f04f 0900 	mov.w	r9, #0
 8005ab2:	f8ca 3000 	str.w	r3, [sl]
 8005ab6:	e789      	b.n	80059cc <_strtod_l+0x48c>
 8005ab8:	08009f2d 	.word	0x08009f2d
 8005abc:	08009f6c 	.word	0x08009f6c
 8005ac0:	08009f25 	.word	0x08009f25
 8005ac4:	0800a0ac 	.word	0x0800a0ac
 8005ac8:	7ff00000 	.word	0x7ff00000
 8005acc:	0800a373 	.word	0x0800a373
 8005ad0:	0800a238 	.word	0x0800a238
 8005ad4:	0800a210 	.word	0x0800a210
 8005ad8:	7ca00000 	.word	0x7ca00000
 8005adc:	7fefffff 	.word	0x7fefffff
 8005ae0:	f016 0310 	ands.w	r3, r6, #16
 8005ae4:	bf18      	it	ne
 8005ae6:	236a      	movne	r3, #106	; 0x6a
 8005ae8:	4640      	mov	r0, r8
 8005aea:	9305      	str	r3, [sp, #20]
 8005aec:	4649      	mov	r1, r9
 8005aee:	2300      	movs	r3, #0
 8005af0:	4fb0      	ldr	r7, [pc, #704]	; (8005db4 <_strtod_l+0x874>)
 8005af2:	07f2      	lsls	r2, r6, #31
 8005af4:	d504      	bpl.n	8005b00 <_strtod_l+0x5c0>
 8005af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005afa:	f7fa fd59 	bl	80005b0 <__aeabi_dmul>
 8005afe:	2301      	movs	r3, #1
 8005b00:	1076      	asrs	r6, r6, #1
 8005b02:	f107 0708 	add.w	r7, r7, #8
 8005b06:	d1f4      	bne.n	8005af2 <_strtod_l+0x5b2>
 8005b08:	b10b      	cbz	r3, 8005b0e <_strtod_l+0x5ce>
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	4689      	mov	r9, r1
 8005b0e:	9b05      	ldr	r3, [sp, #20]
 8005b10:	b1c3      	cbz	r3, 8005b44 <_strtod_l+0x604>
 8005b12:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005b16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	dd11      	ble.n	8005b44 <_strtod_l+0x604>
 8005b20:	2b1f      	cmp	r3, #31
 8005b22:	f340 8127 	ble.w	8005d74 <_strtod_l+0x834>
 8005b26:	2b34      	cmp	r3, #52	; 0x34
 8005b28:	bfd8      	it	le
 8005b2a:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	bfcf      	iteee	gt
 8005b34:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005b38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005b3c:	fa03 f202 	lslle.w	r2, r3, r2
 8005b40:	ea02 0901 	andle.w	r9, r2, r1
 8005b44:	2200      	movs	r2, #0
 8005b46:	2300      	movs	r3, #0
 8005b48:	4640      	mov	r0, r8
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	f7fa ff98 	bl	8000a80 <__aeabi_dcmpeq>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d1a1      	bne.n	8005a98 <_strtod_l+0x558>
 8005b54:	9b06      	ldr	r3, [sp, #24]
 8005b56:	465a      	mov	r2, fp
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	9908      	ldr	r1, [sp, #32]
 8005b60:	f001 fe52 	bl	8007808 <__s2b>
 8005b64:	9008      	str	r0, [sp, #32]
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f43f af21 	beq.w	80059ae <_strtod_l+0x46e>
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	f04f 0b00 	mov.w	fp, #0
 8005b72:	1b5d      	subs	r5, r3, r5
 8005b74:	9b07      	ldr	r3, [sp, #28]
 8005b76:	f8cd b010 	str.w	fp, [sp, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bfb4      	ite	lt
 8005b7e:	462b      	movlt	r3, r5
 8005b80:	2300      	movge	r3, #0
 8005b82:	930e      	str	r3, [sp, #56]	; 0x38
 8005b84:	9b07      	ldr	r3, [sp, #28]
 8005b86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b8a:	9314      	str	r3, [sp, #80]	; 0x50
 8005b8c:	9b08      	ldr	r3, [sp, #32]
 8005b8e:	4650      	mov	r0, sl
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	f001 fd91 	bl	80076b8 <_Balloc>
 8005b96:	9006      	str	r0, [sp, #24]
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	f43f af10 	beq.w	80059be <_strtod_l+0x47e>
 8005b9e:	9b08      	ldr	r3, [sp, #32]
 8005ba0:	300c      	adds	r0, #12
 8005ba2:	691a      	ldr	r2, [r3, #16]
 8005ba4:	f103 010c 	add.w	r1, r3, #12
 8005ba8:	3202      	adds	r2, #2
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	f001 fd76 	bl	800769c <memcpy>
 8005bb0:	ab1c      	add	r3, sp, #112	; 0x70
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	ab1b      	add	r3, sp, #108	; 0x6c
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4642      	mov	r2, r8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8005bc2:	f002 f963 	bl	8007e8c <__d2b>
 8005bc6:	901a      	str	r0, [sp, #104]	; 0x68
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	f43f aef8 	beq.w	80059be <_strtod_l+0x47e>
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4650      	mov	r0, sl
 8005bd2:	f001 feb1 	bl	8007938 <__i2b>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	9004      	str	r0, [sp, #16]
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f43f aeef 	beq.w	80059be <_strtod_l+0x47e>
 8005be0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005be2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	bfab      	itete	ge
 8005be8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005bea:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005bec:	18ee      	addge	r6, r5, r3
 8005bee:	1b5c      	sublt	r4, r3, r5
 8005bf0:	9b05      	ldr	r3, [sp, #20]
 8005bf2:	bfa8      	it	ge
 8005bf4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8005bf6:	eba5 0503 	sub.w	r5, r5, r3
 8005bfa:	4415      	add	r5, r2
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <_strtod_l+0x878>)
 8005bfe:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005c02:	bfb8      	it	lt
 8005c04:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005c06:	429d      	cmp	r5, r3
 8005c08:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005c0c:	f280 80c4 	bge.w	8005d98 <_strtod_l+0x858>
 8005c10:	1b5b      	subs	r3, r3, r5
 8005c12:	2b1f      	cmp	r3, #31
 8005c14:	f04f 0701 	mov.w	r7, #1
 8005c18:	eba2 0203 	sub.w	r2, r2, r3
 8005c1c:	f300 80b1 	bgt.w	8005d82 <_strtod_l+0x842>
 8005c20:	2500      	movs	r5, #0
 8005c22:	fa07 f303 	lsl.w	r3, r7, r3
 8005c26:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c28:	18b7      	adds	r7, r6, r2
 8005c2a:	9b05      	ldr	r3, [sp, #20]
 8005c2c:	42be      	cmp	r6, r7
 8005c2e:	4414      	add	r4, r2
 8005c30:	441c      	add	r4, r3
 8005c32:	4633      	mov	r3, r6
 8005c34:	bfa8      	it	ge
 8005c36:	463b      	movge	r3, r7
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	bfa8      	it	ge
 8005c3c:	4623      	movge	r3, r4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bfc2      	ittt	gt
 8005c42:	1aff      	subgt	r7, r7, r3
 8005c44:	1ae4      	subgt	r4, r4, r3
 8005c46:	1af6      	subgt	r6, r6, r3
 8005c48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	dd17      	ble.n	8005c7e <_strtod_l+0x73e>
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4650      	mov	r0, sl
 8005c52:	9904      	ldr	r1, [sp, #16]
 8005c54:	f001 ff2e 	bl	8007ab4 <__pow5mult>
 8005c58:	9004      	str	r0, [sp, #16]
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f43f aeaf 	beq.w	80059be <_strtod_l+0x47e>
 8005c60:	4601      	mov	r1, r0
 8005c62:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005c64:	4650      	mov	r0, sl
 8005c66:	f001 fe7d 	bl	8007964 <__multiply>
 8005c6a:	9009      	str	r0, [sp, #36]	; 0x24
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	f43f aea6 	beq.w	80059be <_strtod_l+0x47e>
 8005c72:	4650      	mov	r0, sl
 8005c74:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005c76:	f001 fd5f 	bl	8007738 <_Bfree>
 8005c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	f300 808e 	bgt.w	8005da0 <_strtod_l+0x860>
 8005c84:	9b07      	ldr	r3, [sp, #28]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd08      	ble.n	8005c9c <_strtod_l+0x75c>
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c8e:	9906      	ldr	r1, [sp, #24]
 8005c90:	f001 ff10 	bl	8007ab4 <__pow5mult>
 8005c94:	9006      	str	r0, [sp, #24]
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f ae91 	beq.w	80059be <_strtod_l+0x47e>
 8005c9c:	2c00      	cmp	r4, #0
 8005c9e:	dd08      	ble.n	8005cb2 <_strtod_l+0x772>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4650      	mov	r0, sl
 8005ca4:	9906      	ldr	r1, [sp, #24]
 8005ca6:	f001 ff5f 	bl	8007b68 <__lshift>
 8005caa:	9006      	str	r0, [sp, #24]
 8005cac:	2800      	cmp	r0, #0
 8005cae:	f43f ae86 	beq.w	80059be <_strtod_l+0x47e>
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	dd08      	ble.n	8005cc8 <_strtod_l+0x788>
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	4650      	mov	r0, sl
 8005cba:	9904      	ldr	r1, [sp, #16]
 8005cbc:	f001 ff54 	bl	8007b68 <__lshift>
 8005cc0:	9004      	str	r0, [sp, #16]
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f43f ae7b 	beq.w	80059be <_strtod_l+0x47e>
 8005cc8:	4650      	mov	r0, sl
 8005cca:	9a06      	ldr	r2, [sp, #24]
 8005ccc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005cce:	f001 ffd7 	bl	8007c80 <__mdiff>
 8005cd2:	4683      	mov	fp, r0
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f43f ae72 	beq.w	80059be <_strtod_l+0x47e>
 8005cda:	2400      	movs	r4, #0
 8005cdc:	68c3      	ldr	r3, [r0, #12]
 8005cde:	9904      	ldr	r1, [sp, #16]
 8005ce0:	60c4      	str	r4, [r0, #12]
 8005ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce4:	f001 ffb0 	bl	8007c48 <__mcmp>
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	da6b      	bge.n	8005dc4 <_strtod_l+0x884>
 8005cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cee:	ea53 0308 	orrs.w	r3, r3, r8
 8005cf2:	f040 8091 	bne.w	8005e18 <_strtod_l+0x8d8>
 8005cf6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 808c 	bne.w	8005e18 <_strtod_l+0x8d8>
 8005d00:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d04:	0d1b      	lsrs	r3, r3, #20
 8005d06:	051b      	lsls	r3, r3, #20
 8005d08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005d0c:	f240 8084 	bls.w	8005e18 <_strtod_l+0x8d8>
 8005d10:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005d14:	b91b      	cbnz	r3, 8005d1e <_strtod_l+0x7de>
 8005d16:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	dd7c      	ble.n	8005e18 <_strtod_l+0x8d8>
 8005d1e:	4659      	mov	r1, fp
 8005d20:	2201      	movs	r2, #1
 8005d22:	4650      	mov	r0, sl
 8005d24:	f001 ff20 	bl	8007b68 <__lshift>
 8005d28:	9904      	ldr	r1, [sp, #16]
 8005d2a:	4683      	mov	fp, r0
 8005d2c:	f001 ff8c 	bl	8007c48 <__mcmp>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	dd71      	ble.n	8005e18 <_strtod_l+0x8d8>
 8005d34:	9905      	ldr	r1, [sp, #20]
 8005d36:	464b      	mov	r3, r9
 8005d38:	4a20      	ldr	r2, [pc, #128]	; (8005dbc <_strtod_l+0x87c>)
 8005d3a:	2900      	cmp	r1, #0
 8005d3c:	f000 808c 	beq.w	8005e58 <_strtod_l+0x918>
 8005d40:	ea02 0109 	and.w	r1, r2, r9
 8005d44:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d48:	f300 8086 	bgt.w	8005e58 <_strtod_l+0x918>
 8005d4c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d50:	f77f aeaa 	ble.w	8005aa8 <_strtod_l+0x568>
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <_strtod_l+0x880>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f7fa fc28 	bl	80005b0 <__aeabi_dmul>
 8005d60:	460b      	mov	r3, r1
 8005d62:	4303      	orrs	r3, r0
 8005d64:	bf08      	it	eq
 8005d66:	2322      	moveq	r3, #34	; 0x22
 8005d68:	4680      	mov	r8, r0
 8005d6a:	4689      	mov	r9, r1
 8005d6c:	bf08      	it	eq
 8005d6e:	f8ca 3000 	streq.w	r3, [sl]
 8005d72:	e62f      	b.n	80059d4 <_strtod_l+0x494>
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	ea03 0808 	and.w	r8, r3, r8
 8005d80:	e6e0      	b.n	8005b44 <_strtod_l+0x604>
 8005d82:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005d86:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005d8a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005d8e:	35e2      	adds	r5, #226	; 0xe2
 8005d90:	fa07 f505 	lsl.w	r5, r7, r5
 8005d94:	970f      	str	r7, [sp, #60]	; 0x3c
 8005d96:	e747      	b.n	8005c28 <_strtod_l+0x6e8>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	2500      	movs	r5, #0
 8005d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d9e:	e743      	b.n	8005c28 <_strtod_l+0x6e8>
 8005da0:	463a      	mov	r2, r7
 8005da2:	4650      	mov	r0, sl
 8005da4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005da6:	f001 fedf 	bl	8007b68 <__lshift>
 8005daa:	901a      	str	r0, [sp, #104]	; 0x68
 8005dac:	2800      	cmp	r0, #0
 8005dae:	f47f af69 	bne.w	8005c84 <_strtod_l+0x744>
 8005db2:	e604      	b.n	80059be <_strtod_l+0x47e>
 8005db4:	08009f80 	.word	0x08009f80
 8005db8:	fffffc02 	.word	0xfffffc02
 8005dbc:	7ff00000 	.word	0x7ff00000
 8005dc0:	39500000 	.word	0x39500000
 8005dc4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005dc8:	d165      	bne.n	8005e96 <_strtod_l+0x956>
 8005dca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dd0:	b35a      	cbz	r2, 8005e2a <_strtod_l+0x8ea>
 8005dd2:	4a99      	ldr	r2, [pc, #612]	; (8006038 <_strtod_l+0xaf8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d12b      	bne.n	8005e30 <_strtod_l+0x8f0>
 8005dd8:	9b05      	ldr	r3, [sp, #20]
 8005dda:	4641      	mov	r1, r8
 8005ddc:	b303      	cbz	r3, 8005e20 <_strtod_l+0x8e0>
 8005dde:	464a      	mov	r2, r9
 8005de0:	4b96      	ldr	r3, [pc, #600]	; (800603c <_strtod_l+0xafc>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dec:	d81b      	bhi.n	8005e26 <_strtod_l+0x8e6>
 8005dee:	0d1b      	lsrs	r3, r3, #20
 8005df0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	4299      	cmp	r1, r3
 8005dfa:	d119      	bne.n	8005e30 <_strtod_l+0x8f0>
 8005dfc:	4b90      	ldr	r3, [pc, #576]	; (8006040 <_strtod_l+0xb00>)
 8005dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d102      	bne.n	8005e0a <_strtod_l+0x8ca>
 8005e04:	3101      	adds	r1, #1
 8005e06:	f43f adda 	beq.w	80059be <_strtod_l+0x47e>
 8005e0a:	f04f 0800 	mov.w	r8, #0
 8005e0e:	4b8b      	ldr	r3, [pc, #556]	; (800603c <_strtod_l+0xafc>)
 8005e10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e12:	401a      	ands	r2, r3
 8005e14:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005e18:	9b05      	ldr	r3, [sp, #20]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d19a      	bne.n	8005d54 <_strtod_l+0x814>
 8005e1e:	e5d9      	b.n	80059d4 <_strtod_l+0x494>
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e24:	e7e8      	b.n	8005df8 <_strtod_l+0x8b8>
 8005e26:	4613      	mov	r3, r2
 8005e28:	e7e6      	b.n	8005df8 <_strtod_l+0x8b8>
 8005e2a:	ea53 0308 	orrs.w	r3, r3, r8
 8005e2e:	d081      	beq.n	8005d34 <_strtod_l+0x7f4>
 8005e30:	b1e5      	cbz	r5, 8005e6c <_strtod_l+0x92c>
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	421d      	tst	r5, r3
 8005e36:	d0ef      	beq.n	8005e18 <_strtod_l+0x8d8>
 8005e38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	9a05      	ldr	r2, [sp, #20]
 8005e40:	b1c3      	cbz	r3, 8005e74 <_strtod_l+0x934>
 8005e42:	f7ff fb5c 	bl	80054fe <sulp>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e4e:	f7fa f9f9 	bl	8000244 <__adddf3>
 8005e52:	4680      	mov	r8, r0
 8005e54:	4689      	mov	r9, r1
 8005e56:	e7df      	b.n	8005e18 <_strtod_l+0x8d8>
 8005e58:	4013      	ands	r3, r2
 8005e5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e5e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005e62:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005e66:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005e6a:	e7d5      	b.n	8005e18 <_strtod_l+0x8d8>
 8005e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6e:	ea13 0f08 	tst.w	r3, r8
 8005e72:	e7e0      	b.n	8005e36 <_strtod_l+0x8f6>
 8005e74:	f7ff fb43 	bl	80054fe <sulp>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e80:	f7fa f9de 	bl	8000240 <__aeabi_dsub>
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4689      	mov	r9, r1
 8005e8c:	f7fa fdf8 	bl	8000a80 <__aeabi_dcmpeq>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0c1      	beq.n	8005e18 <_strtod_l+0x8d8>
 8005e94:	e608      	b.n	8005aa8 <_strtod_l+0x568>
 8005e96:	4658      	mov	r0, fp
 8005e98:	9904      	ldr	r1, [sp, #16]
 8005e9a:	f002 f853 	bl	8007f44 <__ratio>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	460f      	mov	r7, r1
 8005ea8:	f7fa fdfe 	bl	8000aa8 <__aeabi_dcmple>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	d070      	beq.n	8005f92 <_strtod_l+0xa52>
 8005eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d042      	beq.n	8005f3c <_strtod_l+0x9fc>
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	4f62      	ldr	r7, [pc, #392]	; (8006044 <_strtod_l+0xb04>)
 8005eba:	4d62      	ldr	r5, [pc, #392]	; (8006044 <_strtod_l+0xb04>)
 8005ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	0d1b      	lsrs	r3, r3, #20
 8005ec4:	051b      	lsls	r3, r3, #20
 8005ec6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <_strtod_l+0xb08>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	f040 80c3 	bne.w	8006058 <_strtod_l+0xb18>
 8005ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005eda:	4649      	mov	r1, r9
 8005edc:	f001 ff5c 	bl	8007d98 <__ulp>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	4639      	mov	r1, r7
 8005ee8:	f7fa fb62 	bl	80005b0 <__aeabi_dmul>
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	f7fa f9a8 	bl	8000244 <__adddf3>
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4951      	ldr	r1, [pc, #324]	; (800603c <_strtod_l+0xafc>)
 8005ef8:	4a54      	ldr	r2, [pc, #336]	; (800604c <_strtod_l+0xb0c>)
 8005efa:	4019      	ands	r1, r3
 8005efc:	4291      	cmp	r1, r2
 8005efe:	4680      	mov	r8, r0
 8005f00:	d95d      	bls.n	8005fbe <_strtod_l+0xa7e>
 8005f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f04:	4b4e      	ldr	r3, [pc, #312]	; (8006040 <_strtod_l+0xb00>)
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d103      	bne.n	8005f12 <_strtod_l+0x9d2>
 8005f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f43f ad56 	beq.w	80059be <_strtod_l+0x47e>
 8005f12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005f16:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006040 <_strtod_l+0xb00>
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005f1e:	f001 fc0b 	bl	8007738 <_Bfree>
 8005f22:	4650      	mov	r0, sl
 8005f24:	9906      	ldr	r1, [sp, #24]
 8005f26:	f001 fc07 	bl	8007738 <_Bfree>
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	9904      	ldr	r1, [sp, #16]
 8005f2e:	f001 fc03 	bl	8007738 <_Bfree>
 8005f32:	4659      	mov	r1, fp
 8005f34:	4650      	mov	r0, sl
 8005f36:	f001 fbff 	bl	8007738 <_Bfree>
 8005f3a:	e627      	b.n	8005b8c <_strtod_l+0x64c>
 8005f3c:	f1b8 0f00 	cmp.w	r8, #0
 8005f40:	d119      	bne.n	8005f76 <_strtod_l+0xa36>
 8005f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f48:	b9e3      	cbnz	r3, 8005f84 <_strtod_l+0xa44>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	4b3c      	ldr	r3, [pc, #240]	; (8006044 <_strtod_l+0xb04>)
 8005f52:	f7fa fd9f 	bl	8000a94 <__aeabi_dcmplt>
 8005f56:	b9c8      	cbnz	r0, 8005f8c <_strtod_l+0xa4c>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4b3c      	ldr	r3, [pc, #240]	; (8006050 <_strtod_l+0xb10>)
 8005f60:	f7fa fb26 	bl	80005b0 <__aeabi_dmul>
 8005f64:	4604      	mov	r4, r0
 8005f66:	460d      	mov	r5, r1
 8005f68:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005f6c:	9416      	str	r4, [sp, #88]	; 0x58
 8005f6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f70:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005f74:	e7a2      	b.n	8005ebc <_strtod_l+0x97c>
 8005f76:	f1b8 0f01 	cmp.w	r8, #1
 8005f7a:	d103      	bne.n	8005f84 <_strtod_l+0xa44>
 8005f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f43f ad92 	beq.w	8005aa8 <_strtod_l+0x568>
 8005f84:	2600      	movs	r6, #0
 8005f86:	2400      	movs	r4, #0
 8005f88:	4f32      	ldr	r7, [pc, #200]	; (8006054 <_strtod_l+0xb14>)
 8005f8a:	e796      	b.n	8005eba <_strtod_l+0x97a>
 8005f8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005f8e:	4d30      	ldr	r5, [pc, #192]	; (8006050 <_strtod_l+0xb10>)
 8005f90:	e7ea      	b.n	8005f68 <_strtod_l+0xa28>
 8005f92:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <_strtod_l+0xb10>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	4639      	mov	r1, r7
 8005f9a:	f7fa fb09 	bl	80005b0 <__aeabi_dmul>
 8005f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	b933      	cbnz	r3, 8005fb4 <_strtod_l+0xa74>
 8005fa6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005faa:	9010      	str	r0, [sp, #64]	; 0x40
 8005fac:	9311      	str	r3, [sp, #68]	; 0x44
 8005fae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005fb2:	e783      	b.n	8005ebc <_strtod_l+0x97c>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005fbc:	e7f7      	b.n	8005fae <_strtod_l+0xa6e>
 8005fbe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005fc2:	9b05      	ldr	r3, [sp, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1a8      	bne.n	8005f1a <_strtod_l+0x9da>
 8005fc8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fce:	0d1b      	lsrs	r3, r3, #20
 8005fd0:	051b      	lsls	r3, r3, #20
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d1a1      	bne.n	8005f1a <_strtod_l+0x9da>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fb f8b5 	bl	8001148 <__aeabi_d2lz>
 8005fde:	f7fa fab9 	bl	8000554 <__aeabi_l2d>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4629      	mov	r1, r5
 8005fea:	f7fa f929 	bl	8000240 <__aeabi_dsub>
 8005fee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ff4:	ea43 0308 	orr.w	r3, r3, r8
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	d066      	beq.n	80060ce <_strtod_l+0xb8e>
 8006000:	a309      	add	r3, pc, #36	; (adr r3, 8006028 <_strtod_l+0xae8>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa fd45 	bl	8000a94 <__aeabi_dcmplt>
 800600a:	2800      	cmp	r0, #0
 800600c:	f47f ace2 	bne.w	80059d4 <_strtod_l+0x494>
 8006010:	a307      	add	r3, pc, #28	; (adr r3, 8006030 <_strtod_l+0xaf0>)
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fd59 	bl	8000ad0 <__aeabi_dcmpgt>
 800601e:	2800      	cmp	r0, #0
 8006020:	f43f af7b 	beq.w	8005f1a <_strtod_l+0x9da>
 8006024:	e4d6      	b.n	80059d4 <_strtod_l+0x494>
 8006026:	bf00      	nop
 8006028:	94a03595 	.word	0x94a03595
 800602c:	3fdfffff 	.word	0x3fdfffff
 8006030:	35afe535 	.word	0x35afe535
 8006034:	3fe00000 	.word	0x3fe00000
 8006038:	000fffff 	.word	0x000fffff
 800603c:	7ff00000 	.word	0x7ff00000
 8006040:	7fefffff 	.word	0x7fefffff
 8006044:	3ff00000 	.word	0x3ff00000
 8006048:	7fe00000 	.word	0x7fe00000
 800604c:	7c9fffff 	.word	0x7c9fffff
 8006050:	3fe00000 	.word	0x3fe00000
 8006054:	bff00000 	.word	0xbff00000
 8006058:	9b05      	ldr	r3, [sp, #20]
 800605a:	b313      	cbz	r3, 80060a2 <_strtod_l+0xb62>
 800605c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800605e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006062:	d81e      	bhi.n	80060a2 <_strtod_l+0xb62>
 8006064:	a326      	add	r3, pc, #152	; (adr r3, 8006100 <_strtod_l+0xbc0>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	4620      	mov	r0, r4
 800606c:	4629      	mov	r1, r5
 800606e:	f7fa fd1b 	bl	8000aa8 <__aeabi_dcmple>
 8006072:	b190      	cbz	r0, 800609a <_strtod_l+0xb5a>
 8006074:	4629      	mov	r1, r5
 8006076:	4620      	mov	r0, r4
 8006078:	f7fa fd72 	bl	8000b60 <__aeabi_d2uiz>
 800607c:	2801      	cmp	r0, #1
 800607e:	bf38      	it	cc
 8006080:	2001      	movcc	r0, #1
 8006082:	f7fa fa1b 	bl	80004bc <__aeabi_ui2d>
 8006086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006088:	4604      	mov	r4, r0
 800608a:	460d      	mov	r5, r1
 800608c:	b9d3      	cbnz	r3, 80060c4 <_strtod_l+0xb84>
 800608e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006092:	9012      	str	r0, [sp, #72]	; 0x48
 8006094:	9313      	str	r3, [sp, #76]	; 0x4c
 8006096:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800609a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800609c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80060a0:	1a9f      	subs	r7, r3, r2
 80060a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060a6:	f001 fe77 	bl	8007d98 <__ulp>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa fa7d 	bl	80005b0 <__aeabi_dmul>
 80060b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060ba:	f7fa f8c3 	bl	8000244 <__adddf3>
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	e77e      	b.n	8005fc2 <_strtod_l+0xa82>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80060cc:	e7e3      	b.n	8006096 <_strtod_l+0xb56>
 80060ce:	a30e      	add	r3, pc, #56	; (adr r3, 8006108 <_strtod_l+0xbc8>)
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f7fa fcde 	bl	8000a94 <__aeabi_dcmplt>
 80060d8:	e7a1      	b.n	800601e <_strtod_l+0xade>
 80060da:	2300      	movs	r3, #0
 80060dc:	930a      	str	r3, [sp, #40]	; 0x28
 80060de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	f7ff ba71 	b.w	80055ca <_strtod_l+0x8a>
 80060e8:	2a65      	cmp	r2, #101	; 0x65
 80060ea:	f43f ab63 	beq.w	80057b4 <_strtod_l+0x274>
 80060ee:	2a45      	cmp	r2, #69	; 0x45
 80060f0:	f43f ab60 	beq.w	80057b4 <_strtod_l+0x274>
 80060f4:	2301      	movs	r3, #1
 80060f6:	f7ff bb95 	b.w	8005824 <_strtod_l+0x2e4>
 80060fa:	bf00      	nop
 80060fc:	f3af 8000 	nop.w
 8006100:	ffc00000 	.word	0xffc00000
 8006104:	41dfffff 	.word	0x41dfffff
 8006108:	94a03595 	.word	0x94a03595
 800610c:	3fcfffff 	.word	0x3fcfffff

08006110 <_strtod_r>:
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <_strtod_r+0x8>)
 8006112:	f7ff ba15 	b.w	8005540 <_strtod_l>
 8006116:	bf00      	nop
 8006118:	20000074 	.word	0x20000074

0800611c <_strtol_l.constprop.0>:
 800611c:	2b01      	cmp	r3, #1
 800611e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006122:	4680      	mov	r8, r0
 8006124:	d001      	beq.n	800612a <_strtol_l.constprop.0+0xe>
 8006126:	2b24      	cmp	r3, #36	; 0x24
 8006128:	d906      	bls.n	8006138 <_strtol_l.constprop.0+0x1c>
 800612a:	f7fe faa1 	bl	8004670 <__errno>
 800612e:	2316      	movs	r3, #22
 8006130:	6003      	str	r3, [r0, #0]
 8006132:	2000      	movs	r0, #0
 8006134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006138:	460d      	mov	r5, r1
 800613a:	4f35      	ldr	r7, [pc, #212]	; (8006210 <_strtol_l.constprop.0+0xf4>)
 800613c:	4628      	mov	r0, r5
 800613e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006142:	5de6      	ldrb	r6, [r4, r7]
 8006144:	f016 0608 	ands.w	r6, r6, #8
 8006148:	d1f8      	bne.n	800613c <_strtol_l.constprop.0+0x20>
 800614a:	2c2d      	cmp	r4, #45	; 0x2d
 800614c:	d12f      	bne.n	80061ae <_strtol_l.constprop.0+0x92>
 800614e:	2601      	movs	r6, #1
 8006150:	782c      	ldrb	r4, [r5, #0]
 8006152:	1c85      	adds	r5, r0, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d057      	beq.n	8006208 <_strtol_l.constprop.0+0xec>
 8006158:	2b10      	cmp	r3, #16
 800615a:	d109      	bne.n	8006170 <_strtol_l.constprop.0+0x54>
 800615c:	2c30      	cmp	r4, #48	; 0x30
 800615e:	d107      	bne.n	8006170 <_strtol_l.constprop.0+0x54>
 8006160:	7828      	ldrb	r0, [r5, #0]
 8006162:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006166:	2858      	cmp	r0, #88	; 0x58
 8006168:	d149      	bne.n	80061fe <_strtol_l.constprop.0+0xe2>
 800616a:	2310      	movs	r3, #16
 800616c:	786c      	ldrb	r4, [r5, #1]
 800616e:	3502      	adds	r5, #2
 8006170:	2700      	movs	r7, #0
 8006172:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006176:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800617a:	fbbe f9f3 	udiv	r9, lr, r3
 800617e:	4638      	mov	r0, r7
 8006180:	fb03 ea19 	mls	sl, r3, r9, lr
 8006184:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006188:	f1bc 0f09 	cmp.w	ip, #9
 800618c:	d814      	bhi.n	80061b8 <_strtol_l.constprop.0+0x9c>
 800618e:	4664      	mov	r4, ip
 8006190:	42a3      	cmp	r3, r4
 8006192:	dd22      	ble.n	80061da <_strtol_l.constprop.0+0xbe>
 8006194:	2f00      	cmp	r7, #0
 8006196:	db1d      	blt.n	80061d4 <_strtol_l.constprop.0+0xb8>
 8006198:	4581      	cmp	r9, r0
 800619a:	d31b      	bcc.n	80061d4 <_strtol_l.constprop.0+0xb8>
 800619c:	d101      	bne.n	80061a2 <_strtol_l.constprop.0+0x86>
 800619e:	45a2      	cmp	sl, r4
 80061a0:	db18      	blt.n	80061d4 <_strtol_l.constprop.0+0xb8>
 80061a2:	2701      	movs	r7, #1
 80061a4:	fb00 4003 	mla	r0, r0, r3, r4
 80061a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061ac:	e7ea      	b.n	8006184 <_strtol_l.constprop.0+0x68>
 80061ae:	2c2b      	cmp	r4, #43	; 0x2b
 80061b0:	bf04      	itt	eq
 80061b2:	782c      	ldrbeq	r4, [r5, #0]
 80061b4:	1c85      	addeq	r5, r0, #2
 80061b6:	e7cd      	b.n	8006154 <_strtol_l.constprop.0+0x38>
 80061b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80061bc:	f1bc 0f19 	cmp.w	ip, #25
 80061c0:	d801      	bhi.n	80061c6 <_strtol_l.constprop.0+0xaa>
 80061c2:	3c37      	subs	r4, #55	; 0x37
 80061c4:	e7e4      	b.n	8006190 <_strtol_l.constprop.0+0x74>
 80061c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80061ca:	f1bc 0f19 	cmp.w	ip, #25
 80061ce:	d804      	bhi.n	80061da <_strtol_l.constprop.0+0xbe>
 80061d0:	3c57      	subs	r4, #87	; 0x57
 80061d2:	e7dd      	b.n	8006190 <_strtol_l.constprop.0+0x74>
 80061d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80061d8:	e7e6      	b.n	80061a8 <_strtol_l.constprop.0+0x8c>
 80061da:	2f00      	cmp	r7, #0
 80061dc:	da07      	bge.n	80061ee <_strtol_l.constprop.0+0xd2>
 80061de:	2322      	movs	r3, #34	; 0x22
 80061e0:	4670      	mov	r0, lr
 80061e2:	f8c8 3000 	str.w	r3, [r8]
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	d0a4      	beq.n	8006134 <_strtol_l.constprop.0+0x18>
 80061ea:	1e69      	subs	r1, r5, #1
 80061ec:	e005      	b.n	80061fa <_strtol_l.constprop.0+0xde>
 80061ee:	b106      	cbz	r6, 80061f2 <_strtol_l.constprop.0+0xd6>
 80061f0:	4240      	negs	r0, r0
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d09e      	beq.n	8006134 <_strtol_l.constprop.0+0x18>
 80061f6:	2f00      	cmp	r7, #0
 80061f8:	d1f7      	bne.n	80061ea <_strtol_l.constprop.0+0xce>
 80061fa:	6011      	str	r1, [r2, #0]
 80061fc:	e79a      	b.n	8006134 <_strtol_l.constprop.0+0x18>
 80061fe:	2430      	movs	r4, #48	; 0x30
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1b5      	bne.n	8006170 <_strtol_l.constprop.0+0x54>
 8006204:	2308      	movs	r3, #8
 8006206:	e7b3      	b.n	8006170 <_strtol_l.constprop.0+0x54>
 8006208:	2c30      	cmp	r4, #48	; 0x30
 800620a:	d0a9      	beq.n	8006160 <_strtol_l.constprop.0+0x44>
 800620c:	230a      	movs	r3, #10
 800620e:	e7af      	b.n	8006170 <_strtol_l.constprop.0+0x54>
 8006210:	08009fa9 	.word	0x08009fa9

08006214 <_strtol_r>:
 8006214:	f7ff bf82 	b.w	800611c <_strtol_l.constprop.0>

08006218 <_write_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4604      	mov	r4, r0
 800621c:	4608      	mov	r0, r1
 800621e:	4611      	mov	r1, r2
 8006220:	2200      	movs	r2, #0
 8006222:	4d05      	ldr	r5, [pc, #20]	; (8006238 <_write_r+0x20>)
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f7fc faa2 	bl	8002770 <_write>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_write_r+0x1e>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_write_r+0x1e>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	20000508 	.word	0x20000508

0800623c <_close_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	2300      	movs	r3, #0
 8006240:	4d05      	ldr	r5, [pc, #20]	; (8006258 <_close_r+0x1c>)
 8006242:	4604      	mov	r4, r0
 8006244:	4608      	mov	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fc faae 	bl	80027a8 <_close>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d102      	bne.n	8006256 <_close_r+0x1a>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	b103      	cbz	r3, 8006256 <_close_r+0x1a>
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	bd38      	pop	{r3, r4, r5, pc}
 8006258:	20000508 	.word	0x20000508

0800625c <quorem>:
 800625c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	6903      	ldr	r3, [r0, #16]
 8006262:	690c      	ldr	r4, [r1, #16]
 8006264:	4607      	mov	r7, r0
 8006266:	42a3      	cmp	r3, r4
 8006268:	f2c0 8082 	blt.w	8006370 <quorem+0x114>
 800626c:	3c01      	subs	r4, #1
 800626e:	f100 0514 	add.w	r5, r0, #20
 8006272:	f101 0814 	add.w	r8, r1, #20
 8006276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006284:	3301      	adds	r3, #1
 8006286:	429a      	cmp	r2, r3
 8006288:	fbb2 f6f3 	udiv	r6, r2, r3
 800628c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006294:	d331      	bcc.n	80062fa <quorem+0x9e>
 8006296:	f04f 0e00 	mov.w	lr, #0
 800629a:	4640      	mov	r0, r8
 800629c:	46ac      	mov	ip, r5
 800629e:	46f2      	mov	sl, lr
 80062a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80062a4:	b293      	uxth	r3, r2
 80062a6:	fb06 e303 	mla	r3, r6, r3, lr
 80062aa:	0c12      	lsrs	r2, r2, #16
 80062ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	fb06 e202 	mla	r2, r6, r2, lr
 80062b6:	ebaa 0303 	sub.w	r3, sl, r3
 80062ba:	f8dc a000 	ldr.w	sl, [ip]
 80062be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062c2:	fa1f fa8a 	uxth.w	sl, sl
 80062c6:	4453      	add	r3, sl
 80062c8:	f8dc a000 	ldr.w	sl, [ip]
 80062cc:	b292      	uxth	r2, r2
 80062ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062dc:	4581      	cmp	r9, r0
 80062de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062e2:	f84c 3b04 	str.w	r3, [ip], #4
 80062e6:	d2db      	bcs.n	80062a0 <quorem+0x44>
 80062e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80062ec:	b92b      	cbnz	r3, 80062fa <quorem+0x9e>
 80062ee:	9b01      	ldr	r3, [sp, #4]
 80062f0:	3b04      	subs	r3, #4
 80062f2:	429d      	cmp	r5, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	d32f      	bcc.n	8006358 <quorem+0xfc>
 80062f8:	613c      	str	r4, [r7, #16]
 80062fa:	4638      	mov	r0, r7
 80062fc:	f001 fca4 	bl	8007c48 <__mcmp>
 8006300:	2800      	cmp	r0, #0
 8006302:	db25      	blt.n	8006350 <quorem+0xf4>
 8006304:	4628      	mov	r0, r5
 8006306:	f04f 0c00 	mov.w	ip, #0
 800630a:	3601      	adds	r6, #1
 800630c:	f858 1b04 	ldr.w	r1, [r8], #4
 8006310:	f8d0 e000 	ldr.w	lr, [r0]
 8006314:	b28b      	uxth	r3, r1
 8006316:	ebac 0303 	sub.w	r3, ip, r3
 800631a:	fa1f f28e 	uxth.w	r2, lr
 800631e:	4413      	add	r3, r2
 8006320:	0c0a      	lsrs	r2, r1, #16
 8006322:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006330:	45c1      	cmp	r9, r8
 8006332:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006336:	f840 3b04 	str.w	r3, [r0], #4
 800633a:	d2e7      	bcs.n	800630c <quorem+0xb0>
 800633c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006344:	b922      	cbnz	r2, 8006350 <quorem+0xf4>
 8006346:	3b04      	subs	r3, #4
 8006348:	429d      	cmp	r5, r3
 800634a:	461a      	mov	r2, r3
 800634c:	d30a      	bcc.n	8006364 <quorem+0x108>
 800634e:	613c      	str	r4, [r7, #16]
 8006350:	4630      	mov	r0, r6
 8006352:	b003      	add	sp, #12
 8006354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	3b04      	subs	r3, #4
 800635c:	2a00      	cmp	r2, #0
 800635e:	d1cb      	bne.n	80062f8 <quorem+0x9c>
 8006360:	3c01      	subs	r4, #1
 8006362:	e7c6      	b.n	80062f2 <quorem+0x96>
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	3b04      	subs	r3, #4
 8006368:	2a00      	cmp	r2, #0
 800636a:	d1f0      	bne.n	800634e <quorem+0xf2>
 800636c:	3c01      	subs	r4, #1
 800636e:	e7eb      	b.n	8006348 <quorem+0xec>
 8006370:	2000      	movs	r0, #0
 8006372:	e7ee      	b.n	8006352 <quorem+0xf6>
 8006374:	0000      	movs	r0, r0
	...

08006378 <_dtoa_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4616      	mov	r6, r2
 800637e:	461f      	mov	r7, r3
 8006380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006382:	b099      	sub	sp, #100	; 0x64
 8006384:	4605      	mov	r5, r0
 8006386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800638a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800638e:	b974      	cbnz	r4, 80063ae <_dtoa_r+0x36>
 8006390:	2010      	movs	r0, #16
 8006392:	f001 f95b 	bl	800764c <malloc>
 8006396:	4602      	mov	r2, r0
 8006398:	6268      	str	r0, [r5, #36]	; 0x24
 800639a:	b920      	cbnz	r0, 80063a6 <_dtoa_r+0x2e>
 800639c:	21ea      	movs	r1, #234	; 0xea
 800639e:	4ba8      	ldr	r3, [pc, #672]	; (8006640 <_dtoa_r+0x2c8>)
 80063a0:	48a8      	ldr	r0, [pc, #672]	; (8006644 <_dtoa_r+0x2cc>)
 80063a2:	f002 fccd 	bl	8008d40 <__assert_func>
 80063a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063aa:	6004      	str	r4, [r0, #0]
 80063ac:	60c4      	str	r4, [r0, #12]
 80063ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	b151      	cbz	r1, 80063ca <_dtoa_r+0x52>
 80063b4:	685a      	ldr	r2, [r3, #4]
 80063b6:	2301      	movs	r3, #1
 80063b8:	4093      	lsls	r3, r2
 80063ba:	604a      	str	r2, [r1, #4]
 80063bc:	608b      	str	r3, [r1, #8]
 80063be:	4628      	mov	r0, r5
 80063c0:	f001 f9ba 	bl	8007738 <_Bfree>
 80063c4:	2200      	movs	r2, #0
 80063c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063c8:	601a      	str	r2, [r3, #0]
 80063ca:	1e3b      	subs	r3, r7, #0
 80063cc:	bfaf      	iteee	ge
 80063ce:	2300      	movge	r3, #0
 80063d0:	2201      	movlt	r2, #1
 80063d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063d6:	9305      	strlt	r3, [sp, #20]
 80063d8:	bfa8      	it	ge
 80063da:	f8c8 3000 	strge.w	r3, [r8]
 80063de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063e2:	4b99      	ldr	r3, [pc, #612]	; (8006648 <_dtoa_r+0x2d0>)
 80063e4:	bfb8      	it	lt
 80063e6:	f8c8 2000 	strlt.w	r2, [r8]
 80063ea:	ea33 0309 	bics.w	r3, r3, r9
 80063ee:	d119      	bne.n	8006424 <_dtoa_r+0xac>
 80063f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80063f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063fc:	4333      	orrs	r3, r6
 80063fe:	f000 857f 	beq.w	8006f00 <_dtoa_r+0xb88>
 8006402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006404:	b953      	cbnz	r3, 800641c <_dtoa_r+0xa4>
 8006406:	4b91      	ldr	r3, [pc, #580]	; (800664c <_dtoa_r+0x2d4>)
 8006408:	e022      	b.n	8006450 <_dtoa_r+0xd8>
 800640a:	4b91      	ldr	r3, [pc, #580]	; (8006650 <_dtoa_r+0x2d8>)
 800640c:	9303      	str	r3, [sp, #12]
 800640e:	3308      	adds	r3, #8
 8006410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	9803      	ldr	r0, [sp, #12]
 8006416:	b019      	add	sp, #100	; 0x64
 8006418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641c:	4b8b      	ldr	r3, [pc, #556]	; (800664c <_dtoa_r+0x2d4>)
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	3303      	adds	r3, #3
 8006422:	e7f5      	b.n	8006410 <_dtoa_r+0x98>
 8006424:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006428:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800642c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	f7fa fb24 	bl	8000a80 <__aeabi_dcmpeq>
 8006438:	4680      	mov	r8, r0
 800643a:	b158      	cbz	r0, 8006454 <_dtoa_r+0xdc>
 800643c:	2301      	movs	r3, #1
 800643e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006440:	6013      	str	r3, [r2, #0]
 8006442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8558 	beq.w	8006efa <_dtoa_r+0xb82>
 800644a:	4882      	ldr	r0, [pc, #520]	; (8006654 <_dtoa_r+0x2dc>)
 800644c:	6018      	str	r0, [r3, #0]
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	e7df      	b.n	8006414 <_dtoa_r+0x9c>
 8006454:	ab16      	add	r3, sp, #88	; 0x58
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	ab17      	add	r3, sp, #92	; 0x5c
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	4628      	mov	r0, r5
 800645e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006462:	f001 fd13 	bl	8007e8c <__d2b>
 8006466:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800646a:	4683      	mov	fp, r0
 800646c:	2c00      	cmp	r4, #0
 800646e:	d07f      	beq.n	8006570 <_dtoa_r+0x1f8>
 8006470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006476:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800647a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800647e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006482:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006486:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800648a:	2200      	movs	r2, #0
 800648c:	4b72      	ldr	r3, [pc, #456]	; (8006658 <_dtoa_r+0x2e0>)
 800648e:	f7f9 fed7 	bl	8000240 <__aeabi_dsub>
 8006492:	a365      	add	r3, pc, #404	; (adr r3, 8006628 <_dtoa_r+0x2b0>)
 8006494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006498:	f7fa f88a 	bl	80005b0 <__aeabi_dmul>
 800649c:	a364      	add	r3, pc, #400	; (adr r3, 8006630 <_dtoa_r+0x2b8>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7f9 fecf 	bl	8000244 <__adddf3>
 80064a6:	4606      	mov	r6, r0
 80064a8:	4620      	mov	r0, r4
 80064aa:	460f      	mov	r7, r1
 80064ac:	f7fa f816 	bl	80004dc <__aeabi_i2d>
 80064b0:	a361      	add	r3, pc, #388	; (adr r3, 8006638 <_dtoa_r+0x2c0>)
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	f7fa f87b 	bl	80005b0 <__aeabi_dmul>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7f9 febf 	bl	8000244 <__adddf3>
 80064c6:	4606      	mov	r6, r0
 80064c8:	460f      	mov	r7, r1
 80064ca:	f7fa fb21 	bl	8000b10 <__aeabi_d2iz>
 80064ce:	2200      	movs	r2, #0
 80064d0:	4682      	mov	sl, r0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7fa fadc 	bl	8000a94 <__aeabi_dcmplt>
 80064dc:	b148      	cbz	r0, 80064f2 <_dtoa_r+0x17a>
 80064de:	4650      	mov	r0, sl
 80064e0:	f7f9 fffc 	bl	80004dc <__aeabi_i2d>
 80064e4:	4632      	mov	r2, r6
 80064e6:	463b      	mov	r3, r7
 80064e8:	f7fa faca 	bl	8000a80 <__aeabi_dcmpeq>
 80064ec:	b908      	cbnz	r0, 80064f2 <_dtoa_r+0x17a>
 80064ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064f2:	f1ba 0f16 	cmp.w	sl, #22
 80064f6:	d858      	bhi.n	80065aa <_dtoa_r+0x232>
 80064f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064fc:	4b57      	ldr	r3, [pc, #348]	; (800665c <_dtoa_r+0x2e4>)
 80064fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	f7fa fac5 	bl	8000a94 <__aeabi_dcmplt>
 800650a:	2800      	cmp	r0, #0
 800650c:	d04f      	beq.n	80065ae <_dtoa_r+0x236>
 800650e:	2300      	movs	r3, #0
 8006510:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006514:	930f      	str	r3, [sp, #60]	; 0x3c
 8006516:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006518:	1b1c      	subs	r4, r3, r4
 800651a:	1e63      	subs	r3, r4, #1
 800651c:	9309      	str	r3, [sp, #36]	; 0x24
 800651e:	bf49      	itett	mi
 8006520:	f1c4 0301 	rsbmi	r3, r4, #1
 8006524:	2300      	movpl	r3, #0
 8006526:	9306      	strmi	r3, [sp, #24]
 8006528:	2300      	movmi	r3, #0
 800652a:	bf54      	ite	pl
 800652c:	9306      	strpl	r3, [sp, #24]
 800652e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006530:	f1ba 0f00 	cmp.w	sl, #0
 8006534:	db3d      	blt.n	80065b2 <_dtoa_r+0x23a>
 8006536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006538:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800653c:	4453      	add	r3, sl
 800653e:	9309      	str	r3, [sp, #36]	; 0x24
 8006540:	2300      	movs	r3, #0
 8006542:	930a      	str	r3, [sp, #40]	; 0x28
 8006544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006546:	2b09      	cmp	r3, #9
 8006548:	f200 808c 	bhi.w	8006664 <_dtoa_r+0x2ec>
 800654c:	2b05      	cmp	r3, #5
 800654e:	bfc4      	itt	gt
 8006550:	3b04      	subgt	r3, #4
 8006552:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006556:	bfc8      	it	gt
 8006558:	2400      	movgt	r4, #0
 800655a:	f1a3 0302 	sub.w	r3, r3, #2
 800655e:	bfd8      	it	le
 8006560:	2401      	movle	r4, #1
 8006562:	2b03      	cmp	r3, #3
 8006564:	f200 808a 	bhi.w	800667c <_dtoa_r+0x304>
 8006568:	e8df f003 	tbb	[pc, r3]
 800656c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006570:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006574:	441c      	add	r4, r3
 8006576:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800657a:	2b20      	cmp	r3, #32
 800657c:	bfc3      	ittte	gt
 800657e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006582:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006586:	fa09 f303 	lslgt.w	r3, r9, r3
 800658a:	f1c3 0320 	rsble	r3, r3, #32
 800658e:	bfc6      	itte	gt
 8006590:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006594:	4318      	orrgt	r0, r3
 8006596:	fa06 f003 	lslle.w	r0, r6, r3
 800659a:	f7f9 ff8f 	bl	80004bc <__aeabi_ui2d>
 800659e:	2301      	movs	r3, #1
 80065a0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80065a4:	3c01      	subs	r4, #1
 80065a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80065a8:	e76f      	b.n	800648a <_dtoa_r+0x112>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7b2      	b.n	8006514 <_dtoa_r+0x19c>
 80065ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80065b0:	e7b1      	b.n	8006516 <_dtoa_r+0x19e>
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	eba3 030a 	sub.w	r3, r3, sl
 80065b8:	9306      	str	r3, [sp, #24]
 80065ba:	f1ca 0300 	rsb	r3, sl, #0
 80065be:	930a      	str	r3, [sp, #40]	; 0x28
 80065c0:	2300      	movs	r3, #0
 80065c2:	930e      	str	r3, [sp, #56]	; 0x38
 80065c4:	e7be      	b.n	8006544 <_dtoa_r+0x1cc>
 80065c6:	2300      	movs	r3, #0
 80065c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dc58      	bgt.n	8006682 <_dtoa_r+0x30a>
 80065d0:	f04f 0901 	mov.w	r9, #1
 80065d4:	464b      	mov	r3, r9
 80065d6:	f8cd 9020 	str.w	r9, [sp, #32]
 80065da:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80065de:	2200      	movs	r2, #0
 80065e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80065e2:	6042      	str	r2, [r0, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	f102 0614 	add.w	r6, r2, #20
 80065ea:	429e      	cmp	r6, r3
 80065ec:	6841      	ldr	r1, [r0, #4]
 80065ee:	d94e      	bls.n	800668e <_dtoa_r+0x316>
 80065f0:	4628      	mov	r0, r5
 80065f2:	f001 f861 	bl	80076b8 <_Balloc>
 80065f6:	9003      	str	r0, [sp, #12]
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d14c      	bne.n	8006696 <_dtoa_r+0x31e>
 80065fc:	4602      	mov	r2, r0
 80065fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006602:	4b17      	ldr	r3, [pc, #92]	; (8006660 <_dtoa_r+0x2e8>)
 8006604:	e6cc      	b.n	80063a0 <_dtoa_r+0x28>
 8006606:	2301      	movs	r3, #1
 8006608:	e7de      	b.n	80065c8 <_dtoa_r+0x250>
 800660a:	2300      	movs	r3, #0
 800660c:	930b      	str	r3, [sp, #44]	; 0x2c
 800660e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006610:	eb0a 0903 	add.w	r9, sl, r3
 8006614:	f109 0301 	add.w	r3, r9, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	9308      	str	r3, [sp, #32]
 800661c:	bfb8      	it	lt
 800661e:	2301      	movlt	r3, #1
 8006620:	e7dd      	b.n	80065de <_dtoa_r+0x266>
 8006622:	2301      	movs	r3, #1
 8006624:	e7f2      	b.n	800660c <_dtoa_r+0x294>
 8006626:	bf00      	nop
 8006628:	636f4361 	.word	0x636f4361
 800662c:	3fd287a7 	.word	0x3fd287a7
 8006630:	8b60c8b3 	.word	0x8b60c8b3
 8006634:	3fc68a28 	.word	0x3fc68a28
 8006638:	509f79fb 	.word	0x509f79fb
 800663c:	3fd34413 	.word	0x3fd34413
 8006640:	0800a0b6 	.word	0x0800a0b6
 8006644:	0800a0cd 	.word	0x0800a0cd
 8006648:	7ff00000 	.word	0x7ff00000
 800664c:	0800a0b2 	.word	0x0800a0b2
 8006650:	0800a0a9 	.word	0x0800a0a9
 8006654:	0800a322 	.word	0x0800a322
 8006658:	3ff80000 	.word	0x3ff80000
 800665c:	0800a238 	.word	0x0800a238
 8006660:	0800a128 	.word	0x0800a128
 8006664:	2401      	movs	r4, #1
 8006666:	2300      	movs	r3, #0
 8006668:	940b      	str	r4, [sp, #44]	; 0x2c
 800666a:	9322      	str	r3, [sp, #136]	; 0x88
 800666c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006670:	2200      	movs	r2, #0
 8006672:	2312      	movs	r3, #18
 8006674:	f8cd 9020 	str.w	r9, [sp, #32]
 8006678:	9223      	str	r2, [sp, #140]	; 0x8c
 800667a:	e7b0      	b.n	80065de <_dtoa_r+0x266>
 800667c:	2301      	movs	r3, #1
 800667e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006680:	e7f4      	b.n	800666c <_dtoa_r+0x2f4>
 8006682:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006686:	464b      	mov	r3, r9
 8006688:	f8cd 9020 	str.w	r9, [sp, #32]
 800668c:	e7a7      	b.n	80065de <_dtoa_r+0x266>
 800668e:	3101      	adds	r1, #1
 8006690:	6041      	str	r1, [r0, #4]
 8006692:	0052      	lsls	r2, r2, #1
 8006694:	e7a7      	b.n	80065e6 <_dtoa_r+0x26e>
 8006696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006698:	9a03      	ldr	r2, [sp, #12]
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	2b0e      	cmp	r3, #14
 80066a0:	f200 80a8 	bhi.w	80067f4 <_dtoa_r+0x47c>
 80066a4:	2c00      	cmp	r4, #0
 80066a6:	f000 80a5 	beq.w	80067f4 <_dtoa_r+0x47c>
 80066aa:	f1ba 0f00 	cmp.w	sl, #0
 80066ae:	dd34      	ble.n	800671a <_dtoa_r+0x3a2>
 80066b0:	4a9a      	ldr	r2, [pc, #616]	; (800691c <_dtoa_r+0x5a4>)
 80066b2:	f00a 030f 	and.w	r3, sl, #15
 80066b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066ba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80066be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066c6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80066ca:	d016      	beq.n	80066fa <_dtoa_r+0x382>
 80066cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d0:	4b93      	ldr	r3, [pc, #588]	; (8006920 <_dtoa_r+0x5a8>)
 80066d2:	2703      	movs	r7, #3
 80066d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d8:	f7fa f894 	bl	8000804 <__aeabi_ddiv>
 80066dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e0:	f004 040f 	and.w	r4, r4, #15
 80066e4:	4e8e      	ldr	r6, [pc, #568]	; (8006920 <_dtoa_r+0x5a8>)
 80066e6:	b954      	cbnz	r4, 80066fe <_dtoa_r+0x386>
 80066e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066f0:	f7fa f888 	bl	8000804 <__aeabi_ddiv>
 80066f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f8:	e029      	b.n	800674e <_dtoa_r+0x3d6>
 80066fa:	2702      	movs	r7, #2
 80066fc:	e7f2      	b.n	80066e4 <_dtoa_r+0x36c>
 80066fe:	07e1      	lsls	r1, r4, #31
 8006700:	d508      	bpl.n	8006714 <_dtoa_r+0x39c>
 8006702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800670a:	f7f9 ff51 	bl	80005b0 <__aeabi_dmul>
 800670e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006712:	3701      	adds	r7, #1
 8006714:	1064      	asrs	r4, r4, #1
 8006716:	3608      	adds	r6, #8
 8006718:	e7e5      	b.n	80066e6 <_dtoa_r+0x36e>
 800671a:	f000 80a5 	beq.w	8006868 <_dtoa_r+0x4f0>
 800671e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006722:	f1ca 0400 	rsb	r4, sl, #0
 8006726:	4b7d      	ldr	r3, [pc, #500]	; (800691c <_dtoa_r+0x5a4>)
 8006728:	f004 020f 	and.w	r2, r4, #15
 800672c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f7f9 ff3c 	bl	80005b0 <__aeabi_dmul>
 8006738:	2702      	movs	r7, #2
 800673a:	2300      	movs	r3, #0
 800673c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006740:	4e77      	ldr	r6, [pc, #476]	; (8006920 <_dtoa_r+0x5a8>)
 8006742:	1124      	asrs	r4, r4, #4
 8006744:	2c00      	cmp	r4, #0
 8006746:	f040 8084 	bne.w	8006852 <_dtoa_r+0x4da>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1d2      	bne.n	80066f4 <_dtoa_r+0x37c>
 800674e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 808b 	beq.w	800686c <_dtoa_r+0x4f4>
 8006756:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800675a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800675e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006762:	2200      	movs	r2, #0
 8006764:	4b6f      	ldr	r3, [pc, #444]	; (8006924 <_dtoa_r+0x5ac>)
 8006766:	f7fa f995 	bl	8000a94 <__aeabi_dcmplt>
 800676a:	2800      	cmp	r0, #0
 800676c:	d07e      	beq.n	800686c <_dtoa_r+0x4f4>
 800676e:	9b08      	ldr	r3, [sp, #32]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d07b      	beq.n	800686c <_dtoa_r+0x4f4>
 8006774:	f1b9 0f00 	cmp.w	r9, #0
 8006778:	dd38      	ble.n	80067ec <_dtoa_r+0x474>
 800677a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800677e:	2200      	movs	r2, #0
 8006780:	4b69      	ldr	r3, [pc, #420]	; (8006928 <_dtoa_r+0x5b0>)
 8006782:	f7f9 ff15 	bl	80005b0 <__aeabi_dmul>
 8006786:	464c      	mov	r4, r9
 8006788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800678c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8006790:	3701      	adds	r7, #1
 8006792:	4638      	mov	r0, r7
 8006794:	f7f9 fea2 	bl	80004dc <__aeabi_i2d>
 8006798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800679c:	f7f9 ff08 	bl	80005b0 <__aeabi_dmul>
 80067a0:	2200      	movs	r2, #0
 80067a2:	4b62      	ldr	r3, [pc, #392]	; (800692c <_dtoa_r+0x5b4>)
 80067a4:	f7f9 fd4e 	bl	8000244 <__adddf3>
 80067a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80067ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b0:	9611      	str	r6, [sp, #68]	; 0x44
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	d15d      	bne.n	8006872 <_dtoa_r+0x4fa>
 80067b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ba:	2200      	movs	r2, #0
 80067bc:	4b5c      	ldr	r3, [pc, #368]	; (8006930 <_dtoa_r+0x5b8>)
 80067be:	f7f9 fd3f 	bl	8000240 <__aeabi_dsub>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067ca:	4633      	mov	r3, r6
 80067cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ce:	f7fa f97f 	bl	8000ad0 <__aeabi_dcmpgt>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	f040 829c 	bne.w	8006d10 <_dtoa_r+0x998>
 80067d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067e2:	f7fa f957 	bl	8000a94 <__aeabi_dcmplt>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	f040 8290 	bne.w	8006d0c <_dtoa_r+0x994>
 80067ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80067f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f2c0 8152 	blt.w	8006aa0 <_dtoa_r+0x728>
 80067fc:	f1ba 0f0e 	cmp.w	sl, #14
 8006800:	f300 814e 	bgt.w	8006aa0 <_dtoa_r+0x728>
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <_dtoa_r+0x5a4>)
 8006806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800680a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800680e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006814:	2b00      	cmp	r3, #0
 8006816:	f280 80db 	bge.w	80069d0 <_dtoa_r+0x658>
 800681a:	9b08      	ldr	r3, [sp, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f300 80d7 	bgt.w	80069d0 <_dtoa_r+0x658>
 8006822:	f040 8272 	bne.w	8006d0a <_dtoa_r+0x992>
 8006826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800682a:	2200      	movs	r2, #0
 800682c:	4b40      	ldr	r3, [pc, #256]	; (8006930 <_dtoa_r+0x5b8>)
 800682e:	f7f9 febf 	bl	80005b0 <__aeabi_dmul>
 8006832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006836:	f7fa f941 	bl	8000abc <__aeabi_dcmpge>
 800683a:	9c08      	ldr	r4, [sp, #32]
 800683c:	4626      	mov	r6, r4
 800683e:	2800      	cmp	r0, #0
 8006840:	f040 8248 	bne.w	8006cd4 <_dtoa_r+0x95c>
 8006844:	2331      	movs	r3, #49	; 0x31
 8006846:	9f03      	ldr	r7, [sp, #12]
 8006848:	f10a 0a01 	add.w	sl, sl, #1
 800684c:	f807 3b01 	strb.w	r3, [r7], #1
 8006850:	e244      	b.n	8006cdc <_dtoa_r+0x964>
 8006852:	07e2      	lsls	r2, r4, #31
 8006854:	d505      	bpl.n	8006862 <_dtoa_r+0x4ea>
 8006856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800685a:	f7f9 fea9 	bl	80005b0 <__aeabi_dmul>
 800685e:	2301      	movs	r3, #1
 8006860:	3701      	adds	r7, #1
 8006862:	1064      	asrs	r4, r4, #1
 8006864:	3608      	adds	r6, #8
 8006866:	e76d      	b.n	8006744 <_dtoa_r+0x3cc>
 8006868:	2702      	movs	r7, #2
 800686a:	e770      	b.n	800674e <_dtoa_r+0x3d6>
 800686c:	46d0      	mov	r8, sl
 800686e:	9c08      	ldr	r4, [sp, #32]
 8006870:	e78f      	b.n	8006792 <_dtoa_r+0x41a>
 8006872:	9903      	ldr	r1, [sp, #12]
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <_dtoa_r+0x5a4>)
 8006876:	4421      	add	r1, r4
 8006878:	9112      	str	r1, [sp, #72]	; 0x48
 800687a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800687c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006880:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006884:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006888:	2900      	cmp	r1, #0
 800688a:	d055      	beq.n	8006938 <_dtoa_r+0x5c0>
 800688c:	2000      	movs	r0, #0
 800688e:	4929      	ldr	r1, [pc, #164]	; (8006934 <_dtoa_r+0x5bc>)
 8006890:	f7f9 ffb8 	bl	8000804 <__aeabi_ddiv>
 8006894:	463b      	mov	r3, r7
 8006896:	4632      	mov	r2, r6
 8006898:	f7f9 fcd2 	bl	8000240 <__aeabi_dsub>
 800689c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068a0:	9f03      	ldr	r7, [sp, #12]
 80068a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068a6:	f7fa f933 	bl	8000b10 <__aeabi_d2iz>
 80068aa:	4604      	mov	r4, r0
 80068ac:	f7f9 fe16 	bl	80004dc <__aeabi_i2d>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b8:	f7f9 fcc2 	bl	8000240 <__aeabi_dsub>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	3430      	adds	r4, #48	; 0x30
 80068c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068ca:	f807 4b01 	strb.w	r4, [r7], #1
 80068ce:	f7fa f8e1 	bl	8000a94 <__aeabi_dcmplt>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d174      	bne.n	80069c0 <_dtoa_r+0x648>
 80068d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068da:	2000      	movs	r0, #0
 80068dc:	4911      	ldr	r1, [pc, #68]	; (8006924 <_dtoa_r+0x5ac>)
 80068de:	f7f9 fcaf 	bl	8000240 <__aeabi_dsub>
 80068e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e6:	f7fa f8d5 	bl	8000a94 <__aeabi_dcmplt>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f040 80b7 	bne.w	8006a5e <_dtoa_r+0x6e6>
 80068f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068f2:	429f      	cmp	r7, r3
 80068f4:	f43f af7a 	beq.w	80067ec <_dtoa_r+0x474>
 80068f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068fc:	2200      	movs	r2, #0
 80068fe:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <_dtoa_r+0x5b0>)
 8006900:	f7f9 fe56 	bl	80005b0 <__aeabi_dmul>
 8006904:	2200      	movs	r2, #0
 8006906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800690a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <_dtoa_r+0x5b0>)
 8006910:	f7f9 fe4e 	bl	80005b0 <__aeabi_dmul>
 8006914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006918:	e7c3      	b.n	80068a2 <_dtoa_r+0x52a>
 800691a:	bf00      	nop
 800691c:	0800a238 	.word	0x0800a238
 8006920:	0800a210 	.word	0x0800a210
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	40240000 	.word	0x40240000
 800692c:	401c0000 	.word	0x401c0000
 8006930:	40140000 	.word	0x40140000
 8006934:	3fe00000 	.word	0x3fe00000
 8006938:	4630      	mov	r0, r6
 800693a:	4639      	mov	r1, r7
 800693c:	f7f9 fe38 	bl	80005b0 <__aeabi_dmul>
 8006940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006942:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006946:	9c03      	ldr	r4, [sp, #12]
 8006948:	9314      	str	r3, [sp, #80]	; 0x50
 800694a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694e:	f7fa f8df 	bl	8000b10 <__aeabi_d2iz>
 8006952:	9015      	str	r0, [sp, #84]	; 0x54
 8006954:	f7f9 fdc2 	bl	80004dc <__aeabi_i2d>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006960:	f7f9 fc6e 	bl	8000240 <__aeabi_dsub>
 8006964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006966:	4606      	mov	r6, r0
 8006968:	3330      	adds	r3, #48	; 0x30
 800696a:	f804 3b01 	strb.w	r3, [r4], #1
 800696e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006970:	460f      	mov	r7, r1
 8006972:	429c      	cmp	r4, r3
 8006974:	f04f 0200 	mov.w	r2, #0
 8006978:	d124      	bne.n	80069c4 <_dtoa_r+0x64c>
 800697a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800697e:	4bb0      	ldr	r3, [pc, #704]	; (8006c40 <_dtoa_r+0x8c8>)
 8006980:	f7f9 fc60 	bl	8000244 <__adddf3>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4630      	mov	r0, r6
 800698a:	4639      	mov	r1, r7
 800698c:	f7fa f8a0 	bl	8000ad0 <__aeabi_dcmpgt>
 8006990:	2800      	cmp	r0, #0
 8006992:	d163      	bne.n	8006a5c <_dtoa_r+0x6e4>
 8006994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006998:	2000      	movs	r0, #0
 800699a:	49a9      	ldr	r1, [pc, #676]	; (8006c40 <_dtoa_r+0x8c8>)
 800699c:	f7f9 fc50 	bl	8000240 <__aeabi_dsub>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7fa f874 	bl	8000a94 <__aeabi_dcmplt>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	f43f af1d 	beq.w	80067ec <_dtoa_r+0x474>
 80069b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80069b4:	1e7b      	subs	r3, r7, #1
 80069b6:	9314      	str	r3, [sp, #80]	; 0x50
 80069b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80069bc:	2b30      	cmp	r3, #48	; 0x30
 80069be:	d0f8      	beq.n	80069b2 <_dtoa_r+0x63a>
 80069c0:	46c2      	mov	sl, r8
 80069c2:	e03b      	b.n	8006a3c <_dtoa_r+0x6c4>
 80069c4:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <_dtoa_r+0x8cc>)
 80069c6:	f7f9 fdf3 	bl	80005b0 <__aeabi_dmul>
 80069ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ce:	e7bc      	b.n	800694a <_dtoa_r+0x5d2>
 80069d0:	9f03      	ldr	r7, [sp, #12]
 80069d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 ff11 	bl	8000804 <__aeabi_ddiv>
 80069e2:	f7fa f895 	bl	8000b10 <__aeabi_d2iz>
 80069e6:	4604      	mov	r4, r0
 80069e8:	f7f9 fd78 	bl	80004dc <__aeabi_i2d>
 80069ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069f0:	f7f9 fdde 	bl	80005b0 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	f7f9 fc20 	bl	8000240 <__aeabi_dsub>
 8006a00:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006a04:	f807 6b01 	strb.w	r6, [r7], #1
 8006a08:	9e03      	ldr	r6, [sp, #12]
 8006a0a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006a0e:	1bbe      	subs	r6, r7, r6
 8006a10:	45b4      	cmp	ip, r6
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	d136      	bne.n	8006a86 <_dtoa_r+0x70e>
 8006a18:	f7f9 fc14 	bl	8000244 <__adddf3>
 8006a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a20:	4680      	mov	r8, r0
 8006a22:	4689      	mov	r9, r1
 8006a24:	f7fa f854 	bl	8000ad0 <__aeabi_dcmpgt>
 8006a28:	bb58      	cbnz	r0, 8006a82 <_dtoa_r+0x70a>
 8006a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4649      	mov	r1, r9
 8006a32:	f7fa f825 	bl	8000a80 <__aeabi_dcmpeq>
 8006a36:	b108      	cbz	r0, 8006a3c <_dtoa_r+0x6c4>
 8006a38:	07e1      	lsls	r1, r4, #31
 8006a3a:	d422      	bmi.n	8006a82 <_dtoa_r+0x70a>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	4659      	mov	r1, fp
 8006a40:	f000 fe7a 	bl	8007738 <_Bfree>
 8006a44:	2300      	movs	r3, #0
 8006a46:	703b      	strb	r3, [r7, #0]
 8006a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a4a:	f10a 0001 	add.w	r0, sl, #1
 8006a4e:	6018      	str	r0, [r3, #0]
 8006a50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f acde 	beq.w	8006414 <_dtoa_r+0x9c>
 8006a58:	601f      	str	r7, [r3, #0]
 8006a5a:	e4db      	b.n	8006414 <_dtoa_r+0x9c>
 8006a5c:	4627      	mov	r7, r4
 8006a5e:	463b      	mov	r3, r7
 8006a60:	461f      	mov	r7, r3
 8006a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a66:	2a39      	cmp	r2, #57	; 0x39
 8006a68:	d107      	bne.n	8006a7a <_dtoa_r+0x702>
 8006a6a:	9a03      	ldr	r2, [sp, #12]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1f7      	bne.n	8006a60 <_dtoa_r+0x6e8>
 8006a70:	2230      	movs	r2, #48	; 0x30
 8006a72:	9903      	ldr	r1, [sp, #12]
 8006a74:	f108 0801 	add.w	r8, r8, #1
 8006a78:	700a      	strb	r2, [r1, #0]
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	3201      	adds	r2, #1
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	e79e      	b.n	80069c0 <_dtoa_r+0x648>
 8006a82:	46d0      	mov	r8, sl
 8006a84:	e7eb      	b.n	8006a5e <_dtoa_r+0x6e6>
 8006a86:	2200      	movs	r2, #0
 8006a88:	4b6e      	ldr	r3, [pc, #440]	; (8006c44 <_dtoa_r+0x8cc>)
 8006a8a:	f7f9 fd91 	bl	80005b0 <__aeabi_dmul>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2300      	movs	r3, #0
 8006a92:	4680      	mov	r8, r0
 8006a94:	4689      	mov	r9, r1
 8006a96:	f7f9 fff3 	bl	8000a80 <__aeabi_dcmpeq>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d09b      	beq.n	80069d6 <_dtoa_r+0x65e>
 8006a9e:	e7cd      	b.n	8006a3c <_dtoa_r+0x6c4>
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	2a00      	cmp	r2, #0
 8006aa4:	f000 80d0 	beq.w	8006c48 <_dtoa_r+0x8d0>
 8006aa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006aaa:	2a01      	cmp	r2, #1
 8006aac:	f300 80ae 	bgt.w	8006c0c <_dtoa_r+0x894>
 8006ab0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	f000 80a6 	beq.w	8006c04 <_dtoa_r+0x88c>
 8006ab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006abc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006abe:	9f06      	ldr	r7, [sp, #24]
 8006ac0:	9a06      	ldr	r2, [sp, #24]
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	441a      	add	r2, r3
 8006ac6:	9206      	str	r2, [sp, #24]
 8006ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aca:	4628      	mov	r0, r5
 8006acc:	441a      	add	r2, r3
 8006ace:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad0:	f000 ff32 	bl	8007938 <__i2b>
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	2f00      	cmp	r7, #0
 8006ad8:	dd0c      	ble.n	8006af4 <_dtoa_r+0x77c>
 8006ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dd09      	ble.n	8006af4 <_dtoa_r+0x77c>
 8006ae0:	42bb      	cmp	r3, r7
 8006ae2:	bfa8      	it	ge
 8006ae4:	463b      	movge	r3, r7
 8006ae6:	9a06      	ldr	r2, [sp, #24]
 8006ae8:	1aff      	subs	r7, r7, r3
 8006aea:	1ad2      	subs	r2, r2, r3
 8006aec:	9206      	str	r2, [sp, #24]
 8006aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	9309      	str	r3, [sp, #36]	; 0x24
 8006af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006af6:	b1f3      	cbz	r3, 8006b36 <_dtoa_r+0x7be>
 8006af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a8 	beq.w	8006c50 <_dtoa_r+0x8d8>
 8006b00:	2c00      	cmp	r4, #0
 8006b02:	dd10      	ble.n	8006b26 <_dtoa_r+0x7ae>
 8006b04:	4631      	mov	r1, r6
 8006b06:	4622      	mov	r2, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 ffd3 	bl	8007ab4 <__pow5mult>
 8006b0e:	465a      	mov	r2, fp
 8006b10:	4601      	mov	r1, r0
 8006b12:	4606      	mov	r6, r0
 8006b14:	4628      	mov	r0, r5
 8006b16:	f000 ff25 	bl	8007964 <__multiply>
 8006b1a:	4680      	mov	r8, r0
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 fe0a 	bl	8007738 <_Bfree>
 8006b24:	46c3      	mov	fp, r8
 8006b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b28:	1b1a      	subs	r2, r3, r4
 8006b2a:	d004      	beq.n	8006b36 <_dtoa_r+0x7be>
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 ffc0 	bl	8007ab4 <__pow5mult>
 8006b34:	4683      	mov	fp, r0
 8006b36:	2101      	movs	r1, #1
 8006b38:	4628      	mov	r0, r5
 8006b3a:	f000 fefd 	bl	8007938 <__i2b>
 8006b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b40:	4604      	mov	r4, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f340 8086 	ble.w	8006c54 <_dtoa_r+0x8dc>
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 ffb1 	bl	8007ab4 <__pow5mult>
 8006b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b54:	4604      	mov	r4, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	dd7f      	ble.n	8006c5a <_dtoa_r+0x8e2>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b64:	6918      	ldr	r0, [r3, #16]
 8006b66:	f000 fe99 	bl	800789c <__hi0bits>
 8006b6a:	f1c0 0020 	rsb	r0, r0, #32
 8006b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b70:	4418      	add	r0, r3
 8006b72:	f010 001f 	ands.w	r0, r0, #31
 8006b76:	f000 8092 	beq.w	8006c9e <_dtoa_r+0x926>
 8006b7a:	f1c0 0320 	rsb	r3, r0, #32
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	f340 808a 	ble.w	8006c98 <_dtoa_r+0x920>
 8006b84:	f1c0 001c 	rsb	r0, r0, #28
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	4407      	add	r7, r0
 8006b8c:	4403      	add	r3, r0
 8006b8e:	9306      	str	r3, [sp, #24]
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	4403      	add	r3, r0
 8006b94:	9309      	str	r3, [sp, #36]	; 0x24
 8006b96:	9b06      	ldr	r3, [sp, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	dd05      	ble.n	8006ba8 <_dtoa_r+0x830>
 8006b9c:	4659      	mov	r1, fp
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 ffe1 	bl	8007b68 <__lshift>
 8006ba6:	4683      	mov	fp, r0
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dd05      	ble.n	8006bba <_dtoa_r+0x842>
 8006bae:	4621      	mov	r1, r4
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 ffd8 	bl	8007b68 <__lshift>
 8006bb8:	4604      	mov	r4, r0
 8006bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d070      	beq.n	8006ca2 <_dtoa_r+0x92a>
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4658      	mov	r0, fp
 8006bc4:	f001 f840 	bl	8007c48 <__mcmp>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	da6a      	bge.n	8006ca2 <_dtoa_r+0x92a>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4659      	mov	r1, fp
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 fdd2 	bl	800777c <__multadd>
 8006bd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bda:	4683      	mov	fp, r0
 8006bdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8194 	beq.w	8006f0e <_dtoa_r+0xb96>
 8006be6:	4631      	mov	r1, r6
 8006be8:	2300      	movs	r3, #0
 8006bea:	220a      	movs	r2, #10
 8006bec:	4628      	mov	r0, r5
 8006bee:	f000 fdc5 	bl	800777c <__multadd>
 8006bf2:	f1b9 0f00 	cmp.w	r9, #0
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	f300 8093 	bgt.w	8006d22 <_dtoa_r+0x9aa>
 8006bfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	dc57      	bgt.n	8006cb2 <_dtoa_r+0x93a>
 8006c02:	e08e      	b.n	8006d22 <_dtoa_r+0x9aa>
 8006c04:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c0a:	e757      	b.n	8006abc <_dtoa_r+0x744>
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	1e5c      	subs	r4, r3, #1
 8006c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c12:	42a3      	cmp	r3, r4
 8006c14:	bfb7      	itett	lt
 8006c16:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c18:	1b1c      	subge	r4, r3, r4
 8006c1a:	1ae2      	sublt	r2, r4, r3
 8006c1c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006c1e:	bfbe      	ittt	lt
 8006c20:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c22:	189b      	addlt	r3, r3, r2
 8006c24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	bfb8      	it	lt
 8006c2a:	2400      	movlt	r4, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	bfbb      	ittet	lt
 8006c30:	9b06      	ldrlt	r3, [sp, #24]
 8006c32:	9a08      	ldrlt	r2, [sp, #32]
 8006c34:	9f06      	ldrge	r7, [sp, #24]
 8006c36:	1a9f      	sublt	r7, r3, r2
 8006c38:	bfac      	ite	ge
 8006c3a:	9b08      	ldrge	r3, [sp, #32]
 8006c3c:	2300      	movlt	r3, #0
 8006c3e:	e73f      	b.n	8006ac0 <_dtoa_r+0x748>
 8006c40:	3fe00000 	.word	0x3fe00000
 8006c44:	40240000 	.word	0x40240000
 8006c48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c4a:	9f06      	ldr	r7, [sp, #24]
 8006c4c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c4e:	e742      	b.n	8006ad6 <_dtoa_r+0x75e>
 8006c50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c52:	e76b      	b.n	8006b2c <_dtoa_r+0x7b4>
 8006c54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	dc19      	bgt.n	8006c8e <_dtoa_r+0x916>
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	b9bb      	cbnz	r3, 8006c8e <_dtoa_r+0x916>
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c64:	b99b      	cbnz	r3, 8006c8e <_dtoa_r+0x916>
 8006c66:	9b05      	ldr	r3, [sp, #20]
 8006c68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c6c:	0d1b      	lsrs	r3, r3, #20
 8006c6e:	051b      	lsls	r3, r3, #20
 8006c70:	b183      	cbz	r3, 8006c94 <_dtoa_r+0x91c>
 8006c72:	f04f 0801 	mov.w	r8, #1
 8006c76:	9b06      	ldr	r3, [sp, #24]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	9306      	str	r3, [sp, #24]
 8006c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f47f af6a 	bne.w	8006b5e <_dtoa_r+0x7e6>
 8006c8a:	2001      	movs	r0, #1
 8006c8c:	e76f      	b.n	8006b6e <_dtoa_r+0x7f6>
 8006c8e:	f04f 0800 	mov.w	r8, #0
 8006c92:	e7f6      	b.n	8006c82 <_dtoa_r+0x90a>
 8006c94:	4698      	mov	r8, r3
 8006c96:	e7f4      	b.n	8006c82 <_dtoa_r+0x90a>
 8006c98:	f43f af7d 	beq.w	8006b96 <_dtoa_r+0x81e>
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	301c      	adds	r0, #28
 8006ca0:	e772      	b.n	8006b88 <_dtoa_r+0x810>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	dc36      	bgt.n	8006d16 <_dtoa_r+0x99e>
 8006ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	dd33      	ble.n	8006d16 <_dtoa_r+0x99e>
 8006cae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cb2:	f1b9 0f00 	cmp.w	r9, #0
 8006cb6:	d10d      	bne.n	8006cd4 <_dtoa_r+0x95c>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	464b      	mov	r3, r9
 8006cbc:	2205      	movs	r2, #5
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fd5c 	bl	800777c <__multadd>
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f000 ffbd 	bl	8007c48 <__mcmp>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	f73f adb8 	bgt.w	8006844 <_dtoa_r+0x4cc>
 8006cd4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cd6:	9f03      	ldr	r7, [sp, #12]
 8006cd8:	ea6f 0a03 	mvn.w	sl, r3
 8006cdc:	f04f 0800 	mov.w	r8, #0
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 fd28 	bl	8007738 <_Bfree>
 8006ce8:	2e00      	cmp	r6, #0
 8006cea:	f43f aea7 	beq.w	8006a3c <_dtoa_r+0x6c4>
 8006cee:	f1b8 0f00 	cmp.w	r8, #0
 8006cf2:	d005      	beq.n	8006d00 <_dtoa_r+0x988>
 8006cf4:	45b0      	cmp	r8, r6
 8006cf6:	d003      	beq.n	8006d00 <_dtoa_r+0x988>
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 fd1c 	bl	8007738 <_Bfree>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fd18 	bl	8007738 <_Bfree>
 8006d08:	e698      	b.n	8006a3c <_dtoa_r+0x6c4>
 8006d0a:	2400      	movs	r4, #0
 8006d0c:	4626      	mov	r6, r4
 8006d0e:	e7e1      	b.n	8006cd4 <_dtoa_r+0x95c>
 8006d10:	46c2      	mov	sl, r8
 8006d12:	4626      	mov	r6, r4
 8006d14:	e596      	b.n	8006844 <_dtoa_r+0x4cc>
 8006d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80fd 	beq.w	8006f1c <_dtoa_r+0xba4>
 8006d22:	2f00      	cmp	r7, #0
 8006d24:	dd05      	ble.n	8006d32 <_dtoa_r+0x9ba>
 8006d26:	4631      	mov	r1, r6
 8006d28:	463a      	mov	r2, r7
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 ff1c 	bl	8007b68 <__lshift>
 8006d30:	4606      	mov	r6, r0
 8006d32:	f1b8 0f00 	cmp.w	r8, #0
 8006d36:	d05c      	beq.n	8006df2 <_dtoa_r+0xa7a>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	6871      	ldr	r1, [r6, #4]
 8006d3c:	f000 fcbc 	bl	80076b8 <_Balloc>
 8006d40:	4607      	mov	r7, r0
 8006d42:	b928      	cbnz	r0, 8006d50 <_dtoa_r+0x9d8>
 8006d44:	4602      	mov	r2, r0
 8006d46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d4a:	4b7f      	ldr	r3, [pc, #508]	; (8006f48 <_dtoa_r+0xbd0>)
 8006d4c:	f7ff bb28 	b.w	80063a0 <_dtoa_r+0x28>
 8006d50:	6932      	ldr	r2, [r6, #16]
 8006d52:	f106 010c 	add.w	r1, r6, #12
 8006d56:	3202      	adds	r2, #2
 8006d58:	0092      	lsls	r2, r2, #2
 8006d5a:	300c      	adds	r0, #12
 8006d5c:	f000 fc9e 	bl	800769c <memcpy>
 8006d60:	2201      	movs	r2, #1
 8006d62:	4639      	mov	r1, r7
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 feff 	bl	8007b68 <__lshift>
 8006d6a:	46b0      	mov	r8, r6
 8006d6c:	4606      	mov	r6, r0
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	9308      	str	r3, [sp, #32]
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	444b      	add	r3, r9
 8006d78:	930a      	str	r3, [sp, #40]	; 0x28
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	9309      	str	r3, [sp, #36]	; 0x24
 8006d82:	9b08      	ldr	r3, [sp, #32]
 8006d84:	4621      	mov	r1, r4
 8006d86:	3b01      	subs	r3, #1
 8006d88:	4658      	mov	r0, fp
 8006d8a:	9304      	str	r3, [sp, #16]
 8006d8c:	f7ff fa66 	bl	800625c <quorem>
 8006d90:	4603      	mov	r3, r0
 8006d92:	4641      	mov	r1, r8
 8006d94:	3330      	adds	r3, #48	; 0x30
 8006d96:	9006      	str	r0, [sp, #24]
 8006d98:	4658      	mov	r0, fp
 8006d9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d9c:	f000 ff54 	bl	8007c48 <__mcmp>
 8006da0:	4632      	mov	r2, r6
 8006da2:	4681      	mov	r9, r0
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 ff6a 	bl	8007c80 <__mdiff>
 8006dac:	68c2      	ldr	r2, [r0, #12]
 8006dae:	4607      	mov	r7, r0
 8006db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db2:	bb02      	cbnz	r2, 8006df6 <_dtoa_r+0xa7e>
 8006db4:	4601      	mov	r1, r0
 8006db6:	4658      	mov	r0, fp
 8006db8:	f000 ff46 	bl	8007c48 <__mcmp>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006dc8:	f000 fcb6 	bl	8007738 <_Bfree>
 8006dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd0:	9f08      	ldr	r7, [sp, #32]
 8006dd2:	ea43 0102 	orr.w	r1, r3, r2
 8006dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ddc:	d10d      	bne.n	8006dfa <_dtoa_r+0xa82>
 8006dde:	2b39      	cmp	r3, #57	; 0x39
 8006de0:	d029      	beq.n	8006e36 <_dtoa_r+0xabe>
 8006de2:	f1b9 0f00 	cmp.w	r9, #0
 8006de6:	dd01      	ble.n	8006dec <_dtoa_r+0xa74>
 8006de8:	9b06      	ldr	r3, [sp, #24]
 8006dea:	3331      	adds	r3, #49	; 0x31
 8006dec:	9a04      	ldr	r2, [sp, #16]
 8006dee:	7013      	strb	r3, [r2, #0]
 8006df0:	e776      	b.n	8006ce0 <_dtoa_r+0x968>
 8006df2:	4630      	mov	r0, r6
 8006df4:	e7b9      	b.n	8006d6a <_dtoa_r+0x9f2>
 8006df6:	2201      	movs	r2, #1
 8006df8:	e7e2      	b.n	8006dc0 <_dtoa_r+0xa48>
 8006dfa:	f1b9 0f00 	cmp.w	r9, #0
 8006dfe:	db06      	blt.n	8006e0e <_dtoa_r+0xa96>
 8006e00:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006e02:	ea41 0909 	orr.w	r9, r1, r9
 8006e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e08:	ea59 0101 	orrs.w	r1, r9, r1
 8006e0c:	d120      	bne.n	8006e50 <_dtoa_r+0xad8>
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	ddec      	ble.n	8006dec <_dtoa_r+0xa74>
 8006e12:	4659      	mov	r1, fp
 8006e14:	2201      	movs	r2, #1
 8006e16:	4628      	mov	r0, r5
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	f000 fea5 	bl	8007b68 <__lshift>
 8006e1e:	4621      	mov	r1, r4
 8006e20:	4683      	mov	fp, r0
 8006e22:	f000 ff11 	bl	8007c48 <__mcmp>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	9b08      	ldr	r3, [sp, #32]
 8006e2a:	dc02      	bgt.n	8006e32 <_dtoa_r+0xaba>
 8006e2c:	d1de      	bne.n	8006dec <_dtoa_r+0xa74>
 8006e2e:	07da      	lsls	r2, r3, #31
 8006e30:	d5dc      	bpl.n	8006dec <_dtoa_r+0xa74>
 8006e32:	2b39      	cmp	r3, #57	; 0x39
 8006e34:	d1d8      	bne.n	8006de8 <_dtoa_r+0xa70>
 8006e36:	2339      	movs	r3, #57	; 0x39
 8006e38:	9a04      	ldr	r2, [sp, #16]
 8006e3a:	7013      	strb	r3, [r2, #0]
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	461f      	mov	r7, r3
 8006e40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	2a39      	cmp	r2, #57	; 0x39
 8006e48:	d050      	beq.n	8006eec <_dtoa_r+0xb74>
 8006e4a:	3201      	adds	r2, #1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	e747      	b.n	8006ce0 <_dtoa_r+0x968>
 8006e50:	2a00      	cmp	r2, #0
 8006e52:	dd03      	ble.n	8006e5c <_dtoa_r+0xae4>
 8006e54:	2b39      	cmp	r3, #57	; 0x39
 8006e56:	d0ee      	beq.n	8006e36 <_dtoa_r+0xabe>
 8006e58:	3301      	adds	r3, #1
 8006e5a:	e7c7      	b.n	8006dec <_dtoa_r+0xa74>
 8006e5c:	9a08      	ldr	r2, [sp, #32]
 8006e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e64:	428a      	cmp	r2, r1
 8006e66:	d02a      	beq.n	8006ebe <_dtoa_r+0xb46>
 8006e68:	4659      	mov	r1, fp
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	4628      	mov	r0, r5
 8006e70:	f000 fc84 	bl	800777c <__multadd>
 8006e74:	45b0      	cmp	r8, r6
 8006e76:	4683      	mov	fp, r0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	f04f 020a 	mov.w	r2, #10
 8006e80:	4641      	mov	r1, r8
 8006e82:	4628      	mov	r0, r5
 8006e84:	d107      	bne.n	8006e96 <_dtoa_r+0xb1e>
 8006e86:	f000 fc79 	bl	800777c <__multadd>
 8006e8a:	4680      	mov	r8, r0
 8006e8c:	4606      	mov	r6, r0
 8006e8e:	9b08      	ldr	r3, [sp, #32]
 8006e90:	3301      	adds	r3, #1
 8006e92:	9308      	str	r3, [sp, #32]
 8006e94:	e775      	b.n	8006d82 <_dtoa_r+0xa0a>
 8006e96:	f000 fc71 	bl	800777c <__multadd>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	220a      	movs	r2, #10
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fc6a 	bl	800777c <__multadd>
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	e7f0      	b.n	8006e8e <_dtoa_r+0xb16>
 8006eac:	f1b9 0f00 	cmp.w	r9, #0
 8006eb0:	bfcc      	ite	gt
 8006eb2:	464f      	movgt	r7, r9
 8006eb4:	2701      	movle	r7, #1
 8006eb6:	f04f 0800 	mov.w	r8, #0
 8006eba:	9a03      	ldr	r2, [sp, #12]
 8006ebc:	4417      	add	r7, r2
 8006ebe:	4659      	mov	r1, fp
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	9308      	str	r3, [sp, #32]
 8006ec6:	f000 fe4f 	bl	8007b68 <__lshift>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4683      	mov	fp, r0
 8006ece:	f000 febb 	bl	8007c48 <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	dcb2      	bgt.n	8006e3c <_dtoa_r+0xac4>
 8006ed6:	d102      	bne.n	8006ede <_dtoa_r+0xb66>
 8006ed8:	9b08      	ldr	r3, [sp, #32]
 8006eda:	07db      	lsls	r3, r3, #31
 8006edc:	d4ae      	bmi.n	8006e3c <_dtoa_r+0xac4>
 8006ede:	463b      	mov	r3, r7
 8006ee0:	461f      	mov	r7, r3
 8006ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ee6:	2a30      	cmp	r2, #48	; 0x30
 8006ee8:	d0fa      	beq.n	8006ee0 <_dtoa_r+0xb68>
 8006eea:	e6f9      	b.n	8006ce0 <_dtoa_r+0x968>
 8006eec:	9a03      	ldr	r2, [sp, #12]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d1a5      	bne.n	8006e3e <_dtoa_r+0xac6>
 8006ef2:	2331      	movs	r3, #49	; 0x31
 8006ef4:	f10a 0a01 	add.w	sl, sl, #1
 8006ef8:	e779      	b.n	8006dee <_dtoa_r+0xa76>
 8006efa:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <_dtoa_r+0xbd4>)
 8006efc:	f7ff baa8 	b.w	8006450 <_dtoa_r+0xd8>
 8006f00:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f47f aa81 	bne.w	800640a <_dtoa_r+0x92>
 8006f08:	4b11      	ldr	r3, [pc, #68]	; (8006f50 <_dtoa_r+0xbd8>)
 8006f0a:	f7ff baa1 	b.w	8006450 <_dtoa_r+0xd8>
 8006f0e:	f1b9 0f00 	cmp.w	r9, #0
 8006f12:	dc03      	bgt.n	8006f1c <_dtoa_r+0xba4>
 8006f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	f73f aecb 	bgt.w	8006cb2 <_dtoa_r+0x93a>
 8006f1c:	9f03      	ldr	r7, [sp, #12]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4658      	mov	r0, fp
 8006f22:	f7ff f99b 	bl	800625c <quorem>
 8006f26:	9a03      	ldr	r2, [sp, #12]
 8006f28:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f2c:	f807 3b01 	strb.w	r3, [r7], #1
 8006f30:	1aba      	subs	r2, r7, r2
 8006f32:	4591      	cmp	r9, r2
 8006f34:	ddba      	ble.n	8006eac <_dtoa_r+0xb34>
 8006f36:	4659      	mov	r1, fp
 8006f38:	2300      	movs	r3, #0
 8006f3a:	220a      	movs	r2, #10
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	f000 fc1d 	bl	800777c <__multadd>
 8006f42:	4683      	mov	fp, r0
 8006f44:	e7eb      	b.n	8006f1e <_dtoa_r+0xba6>
 8006f46:	bf00      	nop
 8006f48:	0800a128 	.word	0x0800a128
 8006f4c:	0800a321 	.word	0x0800a321
 8006f50:	0800a0a9 	.word	0x0800a0a9

08006f54 <rshift>:
 8006f54:	6903      	ldr	r3, [r0, #16]
 8006f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006f5e:	f100 0414 	add.w	r4, r0, #20
 8006f62:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006f66:	dd46      	ble.n	8006ff6 <rshift+0xa2>
 8006f68:	f011 011f 	ands.w	r1, r1, #31
 8006f6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006f70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006f74:	d10c      	bne.n	8006f90 <rshift+0x3c>
 8006f76:	4629      	mov	r1, r5
 8006f78:	f100 0710 	add.w	r7, r0, #16
 8006f7c:	42b1      	cmp	r1, r6
 8006f7e:	d335      	bcc.n	8006fec <rshift+0x98>
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	1eea      	subs	r2, r5, #3
 8006f86:	4296      	cmp	r6, r2
 8006f88:	bf38      	it	cc
 8006f8a:	2300      	movcc	r3, #0
 8006f8c:	4423      	add	r3, r4
 8006f8e:	e015      	b.n	8006fbc <rshift+0x68>
 8006f90:	46a1      	mov	r9, r4
 8006f92:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006f96:	f1c1 0820 	rsb	r8, r1, #32
 8006f9a:	40cf      	lsrs	r7, r1
 8006f9c:	f105 0e04 	add.w	lr, r5, #4
 8006fa0:	4576      	cmp	r6, lr
 8006fa2:	46f4      	mov	ip, lr
 8006fa4:	d816      	bhi.n	8006fd4 <rshift+0x80>
 8006fa6:	1a9a      	subs	r2, r3, r2
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	3a04      	subs	r2, #4
 8006fac:	3501      	adds	r5, #1
 8006fae:	42ae      	cmp	r6, r5
 8006fb0:	bf38      	it	cc
 8006fb2:	2200      	movcc	r2, #0
 8006fb4:	18a3      	adds	r3, r4, r2
 8006fb6:	50a7      	str	r7, [r4, r2]
 8006fb8:	b107      	cbz	r7, 8006fbc <rshift+0x68>
 8006fba:	3304      	adds	r3, #4
 8006fbc:	42a3      	cmp	r3, r4
 8006fbe:	eba3 0204 	sub.w	r2, r3, r4
 8006fc2:	bf08      	it	eq
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006fca:	6102      	str	r2, [r0, #16]
 8006fcc:	bf08      	it	eq
 8006fce:	6143      	streq	r3, [r0, #20]
 8006fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fd4:	f8dc c000 	ldr.w	ip, [ip]
 8006fd8:	fa0c fc08 	lsl.w	ip, ip, r8
 8006fdc:	ea4c 0707 	orr.w	r7, ip, r7
 8006fe0:	f849 7b04 	str.w	r7, [r9], #4
 8006fe4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fe8:	40cf      	lsrs	r7, r1
 8006fea:	e7d9      	b.n	8006fa0 <rshift+0x4c>
 8006fec:	f851 cb04 	ldr.w	ip, [r1], #4
 8006ff0:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ff4:	e7c2      	b.n	8006f7c <rshift+0x28>
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	e7e0      	b.n	8006fbc <rshift+0x68>

08006ffa <__hexdig_fun>:
 8006ffa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006ffe:	2b09      	cmp	r3, #9
 8007000:	d802      	bhi.n	8007008 <__hexdig_fun+0xe>
 8007002:	3820      	subs	r0, #32
 8007004:	b2c0      	uxtb	r0, r0
 8007006:	4770      	bx	lr
 8007008:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800700c:	2b05      	cmp	r3, #5
 800700e:	d801      	bhi.n	8007014 <__hexdig_fun+0x1a>
 8007010:	3847      	subs	r0, #71	; 0x47
 8007012:	e7f7      	b.n	8007004 <__hexdig_fun+0xa>
 8007014:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007018:	2b05      	cmp	r3, #5
 800701a:	d801      	bhi.n	8007020 <__hexdig_fun+0x26>
 800701c:	3827      	subs	r0, #39	; 0x27
 800701e:	e7f1      	b.n	8007004 <__hexdig_fun+0xa>
 8007020:	2000      	movs	r0, #0
 8007022:	4770      	bx	lr

08007024 <__gethex>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	b08b      	sub	sp, #44	; 0x2c
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	4bb2      	ldr	r3, [pc, #712]	; (80072f8 <__gethex+0x2d4>)
 800702e:	9002      	str	r0, [sp, #8]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	468b      	mov	fp, r1
 8007034:	4618      	mov	r0, r3
 8007036:	4690      	mov	r8, r2
 8007038:	9303      	str	r3, [sp, #12]
 800703a:	f7f9 f8f5 	bl	8000228 <strlen>
 800703e:	4682      	mov	sl, r0
 8007040:	9b03      	ldr	r3, [sp, #12]
 8007042:	f8db 2000 	ldr.w	r2, [fp]
 8007046:	4403      	add	r3, r0
 8007048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	1c93      	adds	r3, r2, #2
 8007050:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007054:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007058:	32fe      	adds	r2, #254	; 0xfe
 800705a:	18d1      	adds	r1, r2, r3
 800705c:	461f      	mov	r7, r3
 800705e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007062:	9101      	str	r1, [sp, #4]
 8007064:	2830      	cmp	r0, #48	; 0x30
 8007066:	d0f8      	beq.n	800705a <__gethex+0x36>
 8007068:	f7ff ffc7 	bl	8006ffa <__hexdig_fun>
 800706c:	4604      	mov	r4, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d13a      	bne.n	80070e8 <__gethex+0xc4>
 8007072:	4652      	mov	r2, sl
 8007074:	4638      	mov	r0, r7
 8007076:	9903      	ldr	r1, [sp, #12]
 8007078:	f7fe fa2d 	bl	80054d6 <strncmp>
 800707c:	4605      	mov	r5, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d166      	bne.n	8007150 <__gethex+0x12c>
 8007082:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007086:	eb07 060a 	add.w	r6, r7, sl
 800708a:	f7ff ffb6 	bl	8006ffa <__hexdig_fun>
 800708e:	2800      	cmp	r0, #0
 8007090:	d060      	beq.n	8007154 <__gethex+0x130>
 8007092:	4633      	mov	r3, r6
 8007094:	7818      	ldrb	r0, [r3, #0]
 8007096:	461f      	mov	r7, r3
 8007098:	2830      	cmp	r0, #48	; 0x30
 800709a:	f103 0301 	add.w	r3, r3, #1
 800709e:	d0f9      	beq.n	8007094 <__gethex+0x70>
 80070a0:	f7ff ffab 	bl	8006ffa <__hexdig_fun>
 80070a4:	2301      	movs	r3, #1
 80070a6:	fab0 f480 	clz	r4, r0
 80070aa:	4635      	mov	r5, r6
 80070ac:	0964      	lsrs	r4, r4, #5
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	463a      	mov	r2, r7
 80070b2:	4616      	mov	r6, r2
 80070b4:	7830      	ldrb	r0, [r6, #0]
 80070b6:	3201      	adds	r2, #1
 80070b8:	f7ff ff9f 	bl	8006ffa <__hexdig_fun>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d1f8      	bne.n	80070b2 <__gethex+0x8e>
 80070c0:	4652      	mov	r2, sl
 80070c2:	4630      	mov	r0, r6
 80070c4:	9903      	ldr	r1, [sp, #12]
 80070c6:	f7fe fa06 	bl	80054d6 <strncmp>
 80070ca:	b980      	cbnz	r0, 80070ee <__gethex+0xca>
 80070cc:	b94d      	cbnz	r5, 80070e2 <__gethex+0xbe>
 80070ce:	eb06 050a 	add.w	r5, r6, sl
 80070d2:	462a      	mov	r2, r5
 80070d4:	4616      	mov	r6, r2
 80070d6:	7830      	ldrb	r0, [r6, #0]
 80070d8:	3201      	adds	r2, #1
 80070da:	f7ff ff8e 	bl	8006ffa <__hexdig_fun>
 80070de:	2800      	cmp	r0, #0
 80070e0:	d1f8      	bne.n	80070d4 <__gethex+0xb0>
 80070e2:	1bad      	subs	r5, r5, r6
 80070e4:	00ad      	lsls	r5, r5, #2
 80070e6:	e004      	b.n	80070f2 <__gethex+0xce>
 80070e8:	2400      	movs	r4, #0
 80070ea:	4625      	mov	r5, r4
 80070ec:	e7e0      	b.n	80070b0 <__gethex+0x8c>
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	d1f7      	bne.n	80070e2 <__gethex+0xbe>
 80070f2:	7833      	ldrb	r3, [r6, #0]
 80070f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070f8:	2b50      	cmp	r3, #80	; 0x50
 80070fa:	d139      	bne.n	8007170 <__gethex+0x14c>
 80070fc:	7873      	ldrb	r3, [r6, #1]
 80070fe:	2b2b      	cmp	r3, #43	; 0x2b
 8007100:	d02a      	beq.n	8007158 <__gethex+0x134>
 8007102:	2b2d      	cmp	r3, #45	; 0x2d
 8007104:	d02c      	beq.n	8007160 <__gethex+0x13c>
 8007106:	f04f 0900 	mov.w	r9, #0
 800710a:	1c71      	adds	r1, r6, #1
 800710c:	7808      	ldrb	r0, [r1, #0]
 800710e:	f7ff ff74 	bl	8006ffa <__hexdig_fun>
 8007112:	1e43      	subs	r3, r0, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b18      	cmp	r3, #24
 8007118:	d82a      	bhi.n	8007170 <__gethex+0x14c>
 800711a:	f1a0 0210 	sub.w	r2, r0, #16
 800711e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007122:	f7ff ff6a 	bl	8006ffa <__hexdig_fun>
 8007126:	1e43      	subs	r3, r0, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b18      	cmp	r3, #24
 800712c:	d91b      	bls.n	8007166 <__gethex+0x142>
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	d000      	beq.n	8007136 <__gethex+0x112>
 8007134:	4252      	negs	r2, r2
 8007136:	4415      	add	r5, r2
 8007138:	f8cb 1000 	str.w	r1, [fp]
 800713c:	b1d4      	cbz	r4, 8007174 <__gethex+0x150>
 800713e:	9b01      	ldr	r3, [sp, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	bf14      	ite	ne
 8007144:	2700      	movne	r7, #0
 8007146:	2706      	moveq	r7, #6
 8007148:	4638      	mov	r0, r7
 800714a:	b00b      	add	sp, #44	; 0x2c
 800714c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007150:	463e      	mov	r6, r7
 8007152:	4625      	mov	r5, r4
 8007154:	2401      	movs	r4, #1
 8007156:	e7cc      	b.n	80070f2 <__gethex+0xce>
 8007158:	f04f 0900 	mov.w	r9, #0
 800715c:	1cb1      	adds	r1, r6, #2
 800715e:	e7d5      	b.n	800710c <__gethex+0xe8>
 8007160:	f04f 0901 	mov.w	r9, #1
 8007164:	e7fa      	b.n	800715c <__gethex+0x138>
 8007166:	230a      	movs	r3, #10
 8007168:	fb03 0202 	mla	r2, r3, r2, r0
 800716c:	3a10      	subs	r2, #16
 800716e:	e7d6      	b.n	800711e <__gethex+0xfa>
 8007170:	4631      	mov	r1, r6
 8007172:	e7e1      	b.n	8007138 <__gethex+0x114>
 8007174:	4621      	mov	r1, r4
 8007176:	1bf3      	subs	r3, r6, r7
 8007178:	3b01      	subs	r3, #1
 800717a:	2b07      	cmp	r3, #7
 800717c:	dc0a      	bgt.n	8007194 <__gethex+0x170>
 800717e:	9802      	ldr	r0, [sp, #8]
 8007180:	f000 fa9a 	bl	80076b8 <_Balloc>
 8007184:	4604      	mov	r4, r0
 8007186:	b940      	cbnz	r0, 800719a <__gethex+0x176>
 8007188:	4602      	mov	r2, r0
 800718a:	21de      	movs	r1, #222	; 0xde
 800718c:	4b5b      	ldr	r3, [pc, #364]	; (80072fc <__gethex+0x2d8>)
 800718e:	485c      	ldr	r0, [pc, #368]	; (8007300 <__gethex+0x2dc>)
 8007190:	f001 fdd6 	bl	8008d40 <__assert_func>
 8007194:	3101      	adds	r1, #1
 8007196:	105b      	asrs	r3, r3, #1
 8007198:	e7ef      	b.n	800717a <__gethex+0x156>
 800719a:	f04f 0b00 	mov.w	fp, #0
 800719e:	f100 0914 	add.w	r9, r0, #20
 80071a2:	f1ca 0301 	rsb	r3, sl, #1
 80071a6:	f8cd 9010 	str.w	r9, [sp, #16]
 80071aa:	f8cd b004 	str.w	fp, [sp, #4]
 80071ae:	9308      	str	r3, [sp, #32]
 80071b0:	42b7      	cmp	r7, r6
 80071b2:	d33f      	bcc.n	8007234 <__gethex+0x210>
 80071b4:	9f04      	ldr	r7, [sp, #16]
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	f847 3b04 	str.w	r3, [r7], #4
 80071bc:	eba7 0709 	sub.w	r7, r7, r9
 80071c0:	10bf      	asrs	r7, r7, #2
 80071c2:	6127      	str	r7, [r4, #16]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f000 fb69 	bl	800789c <__hi0bits>
 80071ca:	017f      	lsls	r7, r7, #5
 80071cc:	f8d8 6000 	ldr.w	r6, [r8]
 80071d0:	1a3f      	subs	r7, r7, r0
 80071d2:	42b7      	cmp	r7, r6
 80071d4:	dd62      	ble.n	800729c <__gethex+0x278>
 80071d6:	1bbf      	subs	r7, r7, r6
 80071d8:	4639      	mov	r1, r7
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 ff03 	bl	8007fe6 <__any_on>
 80071e0:	4682      	mov	sl, r0
 80071e2:	b1a8      	cbz	r0, 8007210 <__gethex+0x1ec>
 80071e4:	f04f 0a01 	mov.w	sl, #1
 80071e8:	1e7b      	subs	r3, r7, #1
 80071ea:	1159      	asrs	r1, r3, #5
 80071ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80071f0:	f003 021f 	and.w	r2, r3, #31
 80071f4:	fa0a f202 	lsl.w	r2, sl, r2
 80071f8:	420a      	tst	r2, r1
 80071fa:	d009      	beq.n	8007210 <__gethex+0x1ec>
 80071fc:	4553      	cmp	r3, sl
 80071fe:	dd05      	ble.n	800720c <__gethex+0x1e8>
 8007200:	4620      	mov	r0, r4
 8007202:	1eb9      	subs	r1, r7, #2
 8007204:	f000 feef 	bl	8007fe6 <__any_on>
 8007208:	2800      	cmp	r0, #0
 800720a:	d144      	bne.n	8007296 <__gethex+0x272>
 800720c:	f04f 0a02 	mov.w	sl, #2
 8007210:	4639      	mov	r1, r7
 8007212:	4620      	mov	r0, r4
 8007214:	f7ff fe9e 	bl	8006f54 <rshift>
 8007218:	443d      	add	r5, r7
 800721a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800721e:	42ab      	cmp	r3, r5
 8007220:	da4a      	bge.n	80072b8 <__gethex+0x294>
 8007222:	4621      	mov	r1, r4
 8007224:	9802      	ldr	r0, [sp, #8]
 8007226:	f000 fa87 	bl	8007738 <_Bfree>
 800722a:	2300      	movs	r3, #0
 800722c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800722e:	27a3      	movs	r7, #163	; 0xa3
 8007230:	6013      	str	r3, [r2, #0]
 8007232:	e789      	b.n	8007148 <__gethex+0x124>
 8007234:	1e73      	subs	r3, r6, #1
 8007236:	9a06      	ldr	r2, [sp, #24]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800723e:	4293      	cmp	r3, r2
 8007240:	d019      	beq.n	8007276 <__gethex+0x252>
 8007242:	f1bb 0f20 	cmp.w	fp, #32
 8007246:	d107      	bne.n	8007258 <__gethex+0x234>
 8007248:	9b04      	ldr	r3, [sp, #16]
 800724a:	9a01      	ldr	r2, [sp, #4]
 800724c:	f843 2b04 	str.w	r2, [r3], #4
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	2300      	movs	r3, #0
 8007254:	469b      	mov	fp, r3
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800725c:	f7ff fecd 	bl	8006ffa <__hexdig_fun>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f000 000f 	and.w	r0, r0, #15
 8007266:	fa00 f00b 	lsl.w	r0, r0, fp
 800726a:	4303      	orrs	r3, r0
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	f10b 0b04 	add.w	fp, fp, #4
 8007272:	9b07      	ldr	r3, [sp, #28]
 8007274:	e00d      	b.n	8007292 <__gethex+0x26e>
 8007276:	9a08      	ldr	r2, [sp, #32]
 8007278:	1e73      	subs	r3, r6, #1
 800727a:	4413      	add	r3, r2
 800727c:	42bb      	cmp	r3, r7
 800727e:	d3e0      	bcc.n	8007242 <__gethex+0x21e>
 8007280:	4618      	mov	r0, r3
 8007282:	4652      	mov	r2, sl
 8007284:	9903      	ldr	r1, [sp, #12]
 8007286:	9309      	str	r3, [sp, #36]	; 0x24
 8007288:	f7fe f925 	bl	80054d6 <strncmp>
 800728c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728e:	2800      	cmp	r0, #0
 8007290:	d1d7      	bne.n	8007242 <__gethex+0x21e>
 8007292:	461e      	mov	r6, r3
 8007294:	e78c      	b.n	80071b0 <__gethex+0x18c>
 8007296:	f04f 0a03 	mov.w	sl, #3
 800729a:	e7b9      	b.n	8007210 <__gethex+0x1ec>
 800729c:	da09      	bge.n	80072b2 <__gethex+0x28e>
 800729e:	1bf7      	subs	r7, r6, r7
 80072a0:	4621      	mov	r1, r4
 80072a2:	463a      	mov	r2, r7
 80072a4:	9802      	ldr	r0, [sp, #8]
 80072a6:	f000 fc5f 	bl	8007b68 <__lshift>
 80072aa:	4604      	mov	r4, r0
 80072ac:	1bed      	subs	r5, r5, r7
 80072ae:	f100 0914 	add.w	r9, r0, #20
 80072b2:	f04f 0a00 	mov.w	sl, #0
 80072b6:	e7b0      	b.n	800721a <__gethex+0x1f6>
 80072b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80072bc:	42a8      	cmp	r0, r5
 80072be:	dd72      	ble.n	80073a6 <__gethex+0x382>
 80072c0:	1b45      	subs	r5, r0, r5
 80072c2:	42ae      	cmp	r6, r5
 80072c4:	dc35      	bgt.n	8007332 <__gethex+0x30e>
 80072c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d029      	beq.n	8007322 <__gethex+0x2fe>
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d02b      	beq.n	800732a <__gethex+0x306>
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d11c      	bne.n	8007310 <__gethex+0x2ec>
 80072d6:	42ae      	cmp	r6, r5
 80072d8:	d11a      	bne.n	8007310 <__gethex+0x2ec>
 80072da:	2e01      	cmp	r6, #1
 80072dc:	d112      	bne.n	8007304 <__gethex+0x2e0>
 80072de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80072e2:	9a05      	ldr	r2, [sp, #20]
 80072e4:	2762      	movs	r7, #98	; 0x62
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	2301      	movs	r3, #1
 80072ea:	6123      	str	r3, [r4, #16]
 80072ec:	f8c9 3000 	str.w	r3, [r9]
 80072f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f2:	601c      	str	r4, [r3, #0]
 80072f4:	e728      	b.n	8007148 <__gethex+0x124>
 80072f6:	bf00      	nop
 80072f8:	0800a1a0 	.word	0x0800a1a0
 80072fc:	0800a128 	.word	0x0800a128
 8007300:	0800a139 	.word	0x0800a139
 8007304:	4620      	mov	r0, r4
 8007306:	1e71      	subs	r1, r6, #1
 8007308:	f000 fe6d 	bl	8007fe6 <__any_on>
 800730c:	2800      	cmp	r0, #0
 800730e:	d1e6      	bne.n	80072de <__gethex+0x2ba>
 8007310:	4621      	mov	r1, r4
 8007312:	9802      	ldr	r0, [sp, #8]
 8007314:	f000 fa10 	bl	8007738 <_Bfree>
 8007318:	2300      	movs	r3, #0
 800731a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800731c:	2750      	movs	r7, #80	; 0x50
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	e712      	b.n	8007148 <__gethex+0x124>
 8007322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f3      	bne.n	8007310 <__gethex+0x2ec>
 8007328:	e7d9      	b.n	80072de <__gethex+0x2ba>
 800732a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1d6      	bne.n	80072de <__gethex+0x2ba>
 8007330:	e7ee      	b.n	8007310 <__gethex+0x2ec>
 8007332:	1e6f      	subs	r7, r5, #1
 8007334:	f1ba 0f00 	cmp.w	sl, #0
 8007338:	d132      	bne.n	80073a0 <__gethex+0x37c>
 800733a:	b127      	cbz	r7, 8007346 <__gethex+0x322>
 800733c:	4639      	mov	r1, r7
 800733e:	4620      	mov	r0, r4
 8007340:	f000 fe51 	bl	8007fe6 <__any_on>
 8007344:	4682      	mov	sl, r0
 8007346:	2101      	movs	r1, #1
 8007348:	117b      	asrs	r3, r7, #5
 800734a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800734e:	f007 071f 	and.w	r7, r7, #31
 8007352:	fa01 f707 	lsl.w	r7, r1, r7
 8007356:	421f      	tst	r7, r3
 8007358:	f04f 0702 	mov.w	r7, #2
 800735c:	4629      	mov	r1, r5
 800735e:	4620      	mov	r0, r4
 8007360:	bf18      	it	ne
 8007362:	f04a 0a02 	orrne.w	sl, sl, #2
 8007366:	1b76      	subs	r6, r6, r5
 8007368:	f7ff fdf4 	bl	8006f54 <rshift>
 800736c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007370:	f1ba 0f00 	cmp.w	sl, #0
 8007374:	d048      	beq.n	8007408 <__gethex+0x3e4>
 8007376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d015      	beq.n	80073aa <__gethex+0x386>
 800737e:	2b03      	cmp	r3, #3
 8007380:	d017      	beq.n	80073b2 <__gethex+0x38e>
 8007382:	2b01      	cmp	r3, #1
 8007384:	d109      	bne.n	800739a <__gethex+0x376>
 8007386:	f01a 0f02 	tst.w	sl, #2
 800738a:	d006      	beq.n	800739a <__gethex+0x376>
 800738c:	f8d9 0000 	ldr.w	r0, [r9]
 8007390:	ea4a 0a00 	orr.w	sl, sl, r0
 8007394:	f01a 0f01 	tst.w	sl, #1
 8007398:	d10e      	bne.n	80073b8 <__gethex+0x394>
 800739a:	f047 0710 	orr.w	r7, r7, #16
 800739e:	e033      	b.n	8007408 <__gethex+0x3e4>
 80073a0:	f04f 0a01 	mov.w	sl, #1
 80073a4:	e7cf      	b.n	8007346 <__gethex+0x322>
 80073a6:	2701      	movs	r7, #1
 80073a8:	e7e2      	b.n	8007370 <__gethex+0x34c>
 80073aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ac:	f1c3 0301 	rsb	r3, r3, #1
 80073b0:	9315      	str	r3, [sp, #84]	; 0x54
 80073b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0f0      	beq.n	800739a <__gethex+0x376>
 80073b8:	f04f 0c00 	mov.w	ip, #0
 80073bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80073c0:	f104 0314 	add.w	r3, r4, #20
 80073c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80073c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80073d6:	d01c      	beq.n	8007412 <__gethex+0x3ee>
 80073d8:	3201      	adds	r2, #1
 80073da:	6002      	str	r2, [r0, #0]
 80073dc:	2f02      	cmp	r7, #2
 80073de:	f104 0314 	add.w	r3, r4, #20
 80073e2:	d13d      	bne.n	8007460 <__gethex+0x43c>
 80073e4:	f8d8 2000 	ldr.w	r2, [r8]
 80073e8:	3a01      	subs	r2, #1
 80073ea:	42b2      	cmp	r2, r6
 80073ec:	d10a      	bne.n	8007404 <__gethex+0x3e0>
 80073ee:	2201      	movs	r2, #1
 80073f0:	1171      	asrs	r1, r6, #5
 80073f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80073f6:	f006 061f 	and.w	r6, r6, #31
 80073fa:	fa02 f606 	lsl.w	r6, r2, r6
 80073fe:	421e      	tst	r6, r3
 8007400:	bf18      	it	ne
 8007402:	4617      	movne	r7, r2
 8007404:	f047 0720 	orr.w	r7, r7, #32
 8007408:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800740a:	601c      	str	r4, [r3, #0]
 800740c:	9b05      	ldr	r3, [sp, #20]
 800740e:	601d      	str	r5, [r3, #0]
 8007410:	e69a      	b.n	8007148 <__gethex+0x124>
 8007412:	4299      	cmp	r1, r3
 8007414:	f843 cc04 	str.w	ip, [r3, #-4]
 8007418:	d8d8      	bhi.n	80073cc <__gethex+0x3a8>
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	459b      	cmp	fp, r3
 800741e:	db17      	blt.n	8007450 <__gethex+0x42c>
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	9802      	ldr	r0, [sp, #8]
 8007424:	3101      	adds	r1, #1
 8007426:	f000 f947 	bl	80076b8 <_Balloc>
 800742a:	4681      	mov	r9, r0
 800742c:	b918      	cbnz	r0, 8007436 <__gethex+0x412>
 800742e:	4602      	mov	r2, r0
 8007430:	2184      	movs	r1, #132	; 0x84
 8007432:	4b19      	ldr	r3, [pc, #100]	; (8007498 <__gethex+0x474>)
 8007434:	e6ab      	b.n	800718e <__gethex+0x16a>
 8007436:	6922      	ldr	r2, [r4, #16]
 8007438:	f104 010c 	add.w	r1, r4, #12
 800743c:	3202      	adds	r2, #2
 800743e:	0092      	lsls	r2, r2, #2
 8007440:	300c      	adds	r0, #12
 8007442:	f000 f92b 	bl	800769c <memcpy>
 8007446:	4621      	mov	r1, r4
 8007448:	9802      	ldr	r0, [sp, #8]
 800744a:	f000 f975 	bl	8007738 <_Bfree>
 800744e:	464c      	mov	r4, r9
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	6122      	str	r2, [r4, #16]
 8007456:	2201      	movs	r2, #1
 8007458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800745c:	615a      	str	r2, [r3, #20]
 800745e:	e7bd      	b.n	80073dc <__gethex+0x3b8>
 8007460:	6922      	ldr	r2, [r4, #16]
 8007462:	455a      	cmp	r2, fp
 8007464:	dd0b      	ble.n	800747e <__gethex+0x45a>
 8007466:	2101      	movs	r1, #1
 8007468:	4620      	mov	r0, r4
 800746a:	f7ff fd73 	bl	8006f54 <rshift>
 800746e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007472:	3501      	adds	r5, #1
 8007474:	42ab      	cmp	r3, r5
 8007476:	f6ff aed4 	blt.w	8007222 <__gethex+0x1fe>
 800747a:	2701      	movs	r7, #1
 800747c:	e7c2      	b.n	8007404 <__gethex+0x3e0>
 800747e:	f016 061f 	ands.w	r6, r6, #31
 8007482:	d0fa      	beq.n	800747a <__gethex+0x456>
 8007484:	4453      	add	r3, sl
 8007486:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800748a:	f000 fa07 	bl	800789c <__hi0bits>
 800748e:	f1c6 0620 	rsb	r6, r6, #32
 8007492:	42b0      	cmp	r0, r6
 8007494:	dbe7      	blt.n	8007466 <__gethex+0x442>
 8007496:	e7f0      	b.n	800747a <__gethex+0x456>
 8007498:	0800a128 	.word	0x0800a128

0800749c <L_shift>:
 800749c:	f1c2 0208 	rsb	r2, r2, #8
 80074a0:	0092      	lsls	r2, r2, #2
 80074a2:	b570      	push	{r4, r5, r6, lr}
 80074a4:	f1c2 0620 	rsb	r6, r2, #32
 80074a8:	6843      	ldr	r3, [r0, #4]
 80074aa:	6804      	ldr	r4, [r0, #0]
 80074ac:	fa03 f506 	lsl.w	r5, r3, r6
 80074b0:	432c      	orrs	r4, r5
 80074b2:	40d3      	lsrs	r3, r2
 80074b4:	6004      	str	r4, [r0, #0]
 80074b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80074ba:	4288      	cmp	r0, r1
 80074bc:	d3f4      	bcc.n	80074a8 <L_shift+0xc>
 80074be:	bd70      	pop	{r4, r5, r6, pc}

080074c0 <__match>:
 80074c0:	b530      	push	{r4, r5, lr}
 80074c2:	6803      	ldr	r3, [r0, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ca:	b914      	cbnz	r4, 80074d2 <__match+0x12>
 80074cc:	6003      	str	r3, [r0, #0]
 80074ce:	2001      	movs	r0, #1
 80074d0:	bd30      	pop	{r4, r5, pc}
 80074d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80074da:	2d19      	cmp	r5, #25
 80074dc:	bf98      	it	ls
 80074de:	3220      	addls	r2, #32
 80074e0:	42a2      	cmp	r2, r4
 80074e2:	d0f0      	beq.n	80074c6 <__match+0x6>
 80074e4:	2000      	movs	r0, #0
 80074e6:	e7f3      	b.n	80074d0 <__match+0x10>

080074e8 <__hexnan>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	2500      	movs	r5, #0
 80074ee:	680b      	ldr	r3, [r1, #0]
 80074f0:	4682      	mov	sl, r0
 80074f2:	115e      	asrs	r6, r3, #5
 80074f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80074f8:	f013 031f 	ands.w	r3, r3, #31
 80074fc:	bf18      	it	ne
 80074fe:	3604      	addne	r6, #4
 8007500:	1f37      	subs	r7, r6, #4
 8007502:	46b9      	mov	r9, r7
 8007504:	463c      	mov	r4, r7
 8007506:	46ab      	mov	fp, r5
 8007508:	b087      	sub	sp, #28
 800750a:	4690      	mov	r8, r2
 800750c:	6802      	ldr	r2, [r0, #0]
 800750e:	9301      	str	r3, [sp, #4]
 8007510:	f846 5c04 	str.w	r5, [r6, #-4]
 8007514:	9502      	str	r5, [sp, #8]
 8007516:	7851      	ldrb	r1, [r2, #1]
 8007518:	1c53      	adds	r3, r2, #1
 800751a:	9303      	str	r3, [sp, #12]
 800751c:	b341      	cbz	r1, 8007570 <__hexnan+0x88>
 800751e:	4608      	mov	r0, r1
 8007520:	9205      	str	r2, [sp, #20]
 8007522:	9104      	str	r1, [sp, #16]
 8007524:	f7ff fd69 	bl	8006ffa <__hexdig_fun>
 8007528:	2800      	cmp	r0, #0
 800752a:	d14f      	bne.n	80075cc <__hexnan+0xe4>
 800752c:	9904      	ldr	r1, [sp, #16]
 800752e:	9a05      	ldr	r2, [sp, #20]
 8007530:	2920      	cmp	r1, #32
 8007532:	d818      	bhi.n	8007566 <__hexnan+0x7e>
 8007534:	9b02      	ldr	r3, [sp, #8]
 8007536:	459b      	cmp	fp, r3
 8007538:	dd13      	ble.n	8007562 <__hexnan+0x7a>
 800753a:	454c      	cmp	r4, r9
 800753c:	d206      	bcs.n	800754c <__hexnan+0x64>
 800753e:	2d07      	cmp	r5, #7
 8007540:	dc04      	bgt.n	800754c <__hexnan+0x64>
 8007542:	462a      	mov	r2, r5
 8007544:	4649      	mov	r1, r9
 8007546:	4620      	mov	r0, r4
 8007548:	f7ff ffa8 	bl	800749c <L_shift>
 800754c:	4544      	cmp	r4, r8
 800754e:	d950      	bls.n	80075f2 <__hexnan+0x10a>
 8007550:	2300      	movs	r3, #0
 8007552:	f1a4 0904 	sub.w	r9, r4, #4
 8007556:	f844 3c04 	str.w	r3, [r4, #-4]
 800755a:	461d      	mov	r5, r3
 800755c:	464c      	mov	r4, r9
 800755e:	f8cd b008 	str.w	fp, [sp, #8]
 8007562:	9a03      	ldr	r2, [sp, #12]
 8007564:	e7d7      	b.n	8007516 <__hexnan+0x2e>
 8007566:	2929      	cmp	r1, #41	; 0x29
 8007568:	d156      	bne.n	8007618 <__hexnan+0x130>
 800756a:	3202      	adds	r2, #2
 800756c:	f8ca 2000 	str.w	r2, [sl]
 8007570:	f1bb 0f00 	cmp.w	fp, #0
 8007574:	d050      	beq.n	8007618 <__hexnan+0x130>
 8007576:	454c      	cmp	r4, r9
 8007578:	d206      	bcs.n	8007588 <__hexnan+0xa0>
 800757a:	2d07      	cmp	r5, #7
 800757c:	dc04      	bgt.n	8007588 <__hexnan+0xa0>
 800757e:	462a      	mov	r2, r5
 8007580:	4649      	mov	r1, r9
 8007582:	4620      	mov	r0, r4
 8007584:	f7ff ff8a 	bl	800749c <L_shift>
 8007588:	4544      	cmp	r4, r8
 800758a:	d934      	bls.n	80075f6 <__hexnan+0x10e>
 800758c:	4623      	mov	r3, r4
 800758e:	f1a8 0204 	sub.w	r2, r8, #4
 8007592:	f853 1b04 	ldr.w	r1, [r3], #4
 8007596:	429f      	cmp	r7, r3
 8007598:	f842 1f04 	str.w	r1, [r2, #4]!
 800759c:	d2f9      	bcs.n	8007592 <__hexnan+0xaa>
 800759e:	1b3b      	subs	r3, r7, r4
 80075a0:	f023 0303 	bic.w	r3, r3, #3
 80075a4:	3304      	adds	r3, #4
 80075a6:	3401      	adds	r4, #1
 80075a8:	3e03      	subs	r6, #3
 80075aa:	42b4      	cmp	r4, r6
 80075ac:	bf88      	it	hi
 80075ae:	2304      	movhi	r3, #4
 80075b0:	2200      	movs	r2, #0
 80075b2:	4443      	add	r3, r8
 80075b4:	f843 2b04 	str.w	r2, [r3], #4
 80075b8:	429f      	cmp	r7, r3
 80075ba:	d2fb      	bcs.n	80075b4 <__hexnan+0xcc>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	b91b      	cbnz	r3, 80075c8 <__hexnan+0xe0>
 80075c0:	4547      	cmp	r7, r8
 80075c2:	d127      	bne.n	8007614 <__hexnan+0x12c>
 80075c4:	2301      	movs	r3, #1
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	2005      	movs	r0, #5
 80075ca:	e026      	b.n	800761a <__hexnan+0x132>
 80075cc:	3501      	adds	r5, #1
 80075ce:	2d08      	cmp	r5, #8
 80075d0:	f10b 0b01 	add.w	fp, fp, #1
 80075d4:	dd06      	ble.n	80075e4 <__hexnan+0xfc>
 80075d6:	4544      	cmp	r4, r8
 80075d8:	d9c3      	bls.n	8007562 <__hexnan+0x7a>
 80075da:	2300      	movs	r3, #0
 80075dc:	2501      	movs	r5, #1
 80075de:	f844 3c04 	str.w	r3, [r4, #-4]
 80075e2:	3c04      	subs	r4, #4
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	f000 000f 	and.w	r0, r0, #15
 80075ea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	e7b7      	b.n	8007562 <__hexnan+0x7a>
 80075f2:	2508      	movs	r5, #8
 80075f4:	e7b5      	b.n	8007562 <__hexnan+0x7a>
 80075f6:	9b01      	ldr	r3, [sp, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0df      	beq.n	80075bc <__hexnan+0xd4>
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007600:	f1c3 0320 	rsb	r3, r3, #32
 8007604:	fa22 f303 	lsr.w	r3, r2, r3
 8007608:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800760c:	401a      	ands	r2, r3
 800760e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007612:	e7d3      	b.n	80075bc <__hexnan+0xd4>
 8007614:	3f04      	subs	r7, #4
 8007616:	e7d1      	b.n	80075bc <__hexnan+0xd4>
 8007618:	2004      	movs	r0, #4
 800761a:	b007      	add	sp, #28
 800761c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007620 <_localeconv_r>:
 8007620:	4800      	ldr	r0, [pc, #0]	; (8007624 <_localeconv_r+0x4>)
 8007622:	4770      	bx	lr
 8007624:	20000164 	.word	0x20000164

08007628 <_lseek_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	2200      	movs	r2, #0
 8007632:	4d05      	ldr	r5, [pc, #20]	; (8007648 <_lseek_r+0x20>)
 8007634:	602a      	str	r2, [r5, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f7fb f8da 	bl	80027f0 <_lseek>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_lseek_r+0x1e>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_lseek_r+0x1e>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	20000508 	.word	0x20000508

0800764c <malloc>:
 800764c:	4b02      	ldr	r3, [pc, #8]	; (8007658 <malloc+0xc>)
 800764e:	4601      	mov	r1, r0
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	f000 bd65 	b.w	8008120 <_malloc_r>
 8007656:	bf00      	nop
 8007658:	2000000c 	.word	0x2000000c

0800765c <__ascii_mbtowc>:
 800765c:	b082      	sub	sp, #8
 800765e:	b901      	cbnz	r1, 8007662 <__ascii_mbtowc+0x6>
 8007660:	a901      	add	r1, sp, #4
 8007662:	b142      	cbz	r2, 8007676 <__ascii_mbtowc+0x1a>
 8007664:	b14b      	cbz	r3, 800767a <__ascii_mbtowc+0x1e>
 8007666:	7813      	ldrb	r3, [r2, #0]
 8007668:	600b      	str	r3, [r1, #0]
 800766a:	7812      	ldrb	r2, [r2, #0]
 800766c:	1e10      	subs	r0, r2, #0
 800766e:	bf18      	it	ne
 8007670:	2001      	movne	r0, #1
 8007672:	b002      	add	sp, #8
 8007674:	4770      	bx	lr
 8007676:	4610      	mov	r0, r2
 8007678:	e7fb      	b.n	8007672 <__ascii_mbtowc+0x16>
 800767a:	f06f 0001 	mvn.w	r0, #1
 800767e:	e7f8      	b.n	8007672 <__ascii_mbtowc+0x16>

08007680 <memchr>:
 8007680:	4603      	mov	r3, r0
 8007682:	b510      	push	{r4, lr}
 8007684:	b2c9      	uxtb	r1, r1
 8007686:	4402      	add	r2, r0
 8007688:	4293      	cmp	r3, r2
 800768a:	4618      	mov	r0, r3
 800768c:	d101      	bne.n	8007692 <memchr+0x12>
 800768e:	2000      	movs	r0, #0
 8007690:	e003      	b.n	800769a <memchr+0x1a>
 8007692:	7804      	ldrb	r4, [r0, #0]
 8007694:	3301      	adds	r3, #1
 8007696:	428c      	cmp	r4, r1
 8007698:	d1f6      	bne.n	8007688 <memchr+0x8>
 800769a:	bd10      	pop	{r4, pc}

0800769c <memcpy>:
 800769c:	440a      	add	r2, r1
 800769e:	4291      	cmp	r1, r2
 80076a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076a4:	d100      	bne.n	80076a8 <memcpy+0xc>
 80076a6:	4770      	bx	lr
 80076a8:	b510      	push	{r4, lr}
 80076aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ae:	4291      	cmp	r1, r2
 80076b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076b4:	d1f9      	bne.n	80076aa <memcpy+0xe>
 80076b6:	bd10      	pop	{r4, pc}

080076b8 <_Balloc>:
 80076b8:	b570      	push	{r4, r5, r6, lr}
 80076ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076bc:	4604      	mov	r4, r0
 80076be:	460d      	mov	r5, r1
 80076c0:	b976      	cbnz	r6, 80076e0 <_Balloc+0x28>
 80076c2:	2010      	movs	r0, #16
 80076c4:	f7ff ffc2 	bl	800764c <malloc>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6260      	str	r0, [r4, #36]	; 0x24
 80076cc:	b920      	cbnz	r0, 80076d8 <_Balloc+0x20>
 80076ce:	2166      	movs	r1, #102	; 0x66
 80076d0:	4b17      	ldr	r3, [pc, #92]	; (8007730 <_Balloc+0x78>)
 80076d2:	4818      	ldr	r0, [pc, #96]	; (8007734 <_Balloc+0x7c>)
 80076d4:	f001 fb34 	bl	8008d40 <__assert_func>
 80076d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076dc:	6006      	str	r6, [r0, #0]
 80076de:	60c6      	str	r6, [r0, #12]
 80076e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076e2:	68f3      	ldr	r3, [r6, #12]
 80076e4:	b183      	cbz	r3, 8007708 <_Balloc+0x50>
 80076e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076ee:	b9b8      	cbnz	r0, 8007720 <_Balloc+0x68>
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f605 	lsl.w	r6, r1, r5
 80076f6:	1d72      	adds	r2, r6, #5
 80076f8:	4620      	mov	r0, r4
 80076fa:	0092      	lsls	r2, r2, #2
 80076fc:	f000 fc94 	bl	8008028 <_calloc_r>
 8007700:	b160      	cbz	r0, 800771c <_Balloc+0x64>
 8007702:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007706:	e00e      	b.n	8007726 <_Balloc+0x6e>
 8007708:	2221      	movs	r2, #33	; 0x21
 800770a:	2104      	movs	r1, #4
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fc8b 	bl	8008028 <_calloc_r>
 8007712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007714:	60f0      	str	r0, [r6, #12]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e4      	bne.n	80076e6 <_Balloc+0x2e>
 800771c:	2000      	movs	r0, #0
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	6802      	ldr	r2, [r0, #0]
 8007722:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007726:	2300      	movs	r3, #0
 8007728:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800772c:	e7f7      	b.n	800771e <_Balloc+0x66>
 800772e:	bf00      	nop
 8007730:	0800a0b6 	.word	0x0800a0b6
 8007734:	0800a1b4 	.word	0x0800a1b4

08007738 <_Bfree>:
 8007738:	b570      	push	{r4, r5, r6, lr}
 800773a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	b976      	cbnz	r6, 8007760 <_Bfree+0x28>
 8007742:	2010      	movs	r0, #16
 8007744:	f7ff ff82 	bl	800764c <malloc>
 8007748:	4602      	mov	r2, r0
 800774a:	6268      	str	r0, [r5, #36]	; 0x24
 800774c:	b920      	cbnz	r0, 8007758 <_Bfree+0x20>
 800774e:	218a      	movs	r1, #138	; 0x8a
 8007750:	4b08      	ldr	r3, [pc, #32]	; (8007774 <_Bfree+0x3c>)
 8007752:	4809      	ldr	r0, [pc, #36]	; (8007778 <_Bfree+0x40>)
 8007754:	f001 faf4 	bl	8008d40 <__assert_func>
 8007758:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800775c:	6006      	str	r6, [r0, #0]
 800775e:	60c6      	str	r6, [r0, #12]
 8007760:	b13c      	cbz	r4, 8007772 <_Bfree+0x3a>
 8007762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800776c:	6021      	str	r1, [r4, #0]
 800776e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007772:	bd70      	pop	{r4, r5, r6, pc}
 8007774:	0800a0b6 	.word	0x0800a0b6
 8007778:	0800a1b4 	.word	0x0800a1b4

0800777c <__multadd>:
 800777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4607      	mov	r7, r0
 8007782:	460c      	mov	r4, r1
 8007784:	461e      	mov	r6, r3
 8007786:	2000      	movs	r0, #0
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	f101 0c14 	add.w	ip, r1, #20
 800778e:	f8dc 3000 	ldr.w	r3, [ip]
 8007792:	3001      	adds	r0, #1
 8007794:	b299      	uxth	r1, r3
 8007796:	fb02 6101 	mla	r1, r2, r1, r6
 800779a:	0c1e      	lsrs	r6, r3, #16
 800779c:	0c0b      	lsrs	r3, r1, #16
 800779e:	fb02 3306 	mla	r3, r2, r6, r3
 80077a2:	b289      	uxth	r1, r1
 80077a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077a8:	4285      	cmp	r5, r0
 80077aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ae:	f84c 1b04 	str.w	r1, [ip], #4
 80077b2:	dcec      	bgt.n	800778e <__multadd+0x12>
 80077b4:	b30e      	cbz	r6, 80077fa <__multadd+0x7e>
 80077b6:	68a3      	ldr	r3, [r4, #8]
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc19      	bgt.n	80077f0 <__multadd+0x74>
 80077bc:	6861      	ldr	r1, [r4, #4]
 80077be:	4638      	mov	r0, r7
 80077c0:	3101      	adds	r1, #1
 80077c2:	f7ff ff79 	bl	80076b8 <_Balloc>
 80077c6:	4680      	mov	r8, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <__multadd+0x5a>
 80077ca:	4602      	mov	r2, r0
 80077cc:	21b5      	movs	r1, #181	; 0xb5
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <__multadd+0x84>)
 80077d0:	480c      	ldr	r0, [pc, #48]	; (8007804 <__multadd+0x88>)
 80077d2:	f001 fab5 	bl	8008d40 <__assert_func>
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	f104 010c 	add.w	r1, r4, #12
 80077dc:	3202      	adds	r2, #2
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	300c      	adds	r0, #12
 80077e2:	f7ff ff5b 	bl	800769c <memcpy>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4638      	mov	r0, r7
 80077ea:	f7ff ffa5 	bl	8007738 <_Bfree>
 80077ee:	4644      	mov	r4, r8
 80077f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077f4:	3501      	adds	r5, #1
 80077f6:	615e      	str	r6, [r3, #20]
 80077f8:	6125      	str	r5, [r4, #16]
 80077fa:	4620      	mov	r0, r4
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	0800a128 	.word	0x0800a128
 8007804:	0800a1b4 	.word	0x0800a1b4

08007808 <__s2b>:
 8007808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800780c:	4615      	mov	r5, r2
 800780e:	2209      	movs	r2, #9
 8007810:	461f      	mov	r7, r3
 8007812:	3308      	adds	r3, #8
 8007814:	460c      	mov	r4, r1
 8007816:	fb93 f3f2 	sdiv	r3, r3, r2
 800781a:	4606      	mov	r6, r0
 800781c:	2201      	movs	r2, #1
 800781e:	2100      	movs	r1, #0
 8007820:	429a      	cmp	r2, r3
 8007822:	db09      	blt.n	8007838 <__s2b+0x30>
 8007824:	4630      	mov	r0, r6
 8007826:	f7ff ff47 	bl	80076b8 <_Balloc>
 800782a:	b940      	cbnz	r0, 800783e <__s2b+0x36>
 800782c:	4602      	mov	r2, r0
 800782e:	21ce      	movs	r1, #206	; 0xce
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <__s2b+0x8c>)
 8007832:	4819      	ldr	r0, [pc, #100]	; (8007898 <__s2b+0x90>)
 8007834:	f001 fa84 	bl	8008d40 <__assert_func>
 8007838:	0052      	lsls	r2, r2, #1
 800783a:	3101      	adds	r1, #1
 800783c:	e7f0      	b.n	8007820 <__s2b+0x18>
 800783e:	9b08      	ldr	r3, [sp, #32]
 8007840:	2d09      	cmp	r5, #9
 8007842:	6143      	str	r3, [r0, #20]
 8007844:	f04f 0301 	mov.w	r3, #1
 8007848:	6103      	str	r3, [r0, #16]
 800784a:	dd16      	ble.n	800787a <__s2b+0x72>
 800784c:	f104 0909 	add.w	r9, r4, #9
 8007850:	46c8      	mov	r8, r9
 8007852:	442c      	add	r4, r5
 8007854:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007858:	4601      	mov	r1, r0
 800785a:	220a      	movs	r2, #10
 800785c:	4630      	mov	r0, r6
 800785e:	3b30      	subs	r3, #48	; 0x30
 8007860:	f7ff ff8c 	bl	800777c <__multadd>
 8007864:	45a0      	cmp	r8, r4
 8007866:	d1f5      	bne.n	8007854 <__s2b+0x4c>
 8007868:	f1a5 0408 	sub.w	r4, r5, #8
 800786c:	444c      	add	r4, r9
 800786e:	1b2d      	subs	r5, r5, r4
 8007870:	1963      	adds	r3, r4, r5
 8007872:	42bb      	cmp	r3, r7
 8007874:	db04      	blt.n	8007880 <__s2b+0x78>
 8007876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787a:	2509      	movs	r5, #9
 800787c:	340a      	adds	r4, #10
 800787e:	e7f6      	b.n	800786e <__s2b+0x66>
 8007880:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007884:	4601      	mov	r1, r0
 8007886:	220a      	movs	r2, #10
 8007888:	4630      	mov	r0, r6
 800788a:	3b30      	subs	r3, #48	; 0x30
 800788c:	f7ff ff76 	bl	800777c <__multadd>
 8007890:	e7ee      	b.n	8007870 <__s2b+0x68>
 8007892:	bf00      	nop
 8007894:	0800a128 	.word	0x0800a128
 8007898:	0800a1b4 	.word	0x0800a1b4

0800789c <__hi0bits>:
 800789c:	0c02      	lsrs	r2, r0, #16
 800789e:	0412      	lsls	r2, r2, #16
 80078a0:	4603      	mov	r3, r0
 80078a2:	b9ca      	cbnz	r2, 80078d8 <__hi0bits+0x3c>
 80078a4:	0403      	lsls	r3, r0, #16
 80078a6:	2010      	movs	r0, #16
 80078a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078ac:	bf04      	itt	eq
 80078ae:	021b      	lsleq	r3, r3, #8
 80078b0:	3008      	addeq	r0, #8
 80078b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078b6:	bf04      	itt	eq
 80078b8:	011b      	lsleq	r3, r3, #4
 80078ba:	3004      	addeq	r0, #4
 80078bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078c0:	bf04      	itt	eq
 80078c2:	009b      	lsleq	r3, r3, #2
 80078c4:	3002      	addeq	r0, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db05      	blt.n	80078d6 <__hi0bits+0x3a>
 80078ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078ce:	f100 0001 	add.w	r0, r0, #1
 80078d2:	bf08      	it	eq
 80078d4:	2020      	moveq	r0, #32
 80078d6:	4770      	bx	lr
 80078d8:	2000      	movs	r0, #0
 80078da:	e7e5      	b.n	80078a8 <__hi0bits+0xc>

080078dc <__lo0bits>:
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	4602      	mov	r2, r0
 80078e0:	f013 0007 	ands.w	r0, r3, #7
 80078e4:	d00b      	beq.n	80078fe <__lo0bits+0x22>
 80078e6:	07d9      	lsls	r1, r3, #31
 80078e8:	d421      	bmi.n	800792e <__lo0bits+0x52>
 80078ea:	0798      	lsls	r0, r3, #30
 80078ec:	bf49      	itett	mi
 80078ee:	085b      	lsrmi	r3, r3, #1
 80078f0:	089b      	lsrpl	r3, r3, #2
 80078f2:	2001      	movmi	r0, #1
 80078f4:	6013      	strmi	r3, [r2, #0]
 80078f6:	bf5c      	itt	pl
 80078f8:	2002      	movpl	r0, #2
 80078fa:	6013      	strpl	r3, [r2, #0]
 80078fc:	4770      	bx	lr
 80078fe:	b299      	uxth	r1, r3
 8007900:	b909      	cbnz	r1, 8007906 <__lo0bits+0x2a>
 8007902:	2010      	movs	r0, #16
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	b2d9      	uxtb	r1, r3
 8007908:	b909      	cbnz	r1, 800790e <__lo0bits+0x32>
 800790a:	3008      	adds	r0, #8
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	0719      	lsls	r1, r3, #28
 8007910:	bf04      	itt	eq
 8007912:	091b      	lsreq	r3, r3, #4
 8007914:	3004      	addeq	r0, #4
 8007916:	0799      	lsls	r1, r3, #30
 8007918:	bf04      	itt	eq
 800791a:	089b      	lsreq	r3, r3, #2
 800791c:	3002      	addeq	r0, #2
 800791e:	07d9      	lsls	r1, r3, #31
 8007920:	d403      	bmi.n	800792a <__lo0bits+0x4e>
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	f100 0001 	add.w	r0, r0, #1
 8007928:	d003      	beq.n	8007932 <__lo0bits+0x56>
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	4770      	bx	lr
 800792e:	2000      	movs	r0, #0
 8007930:	4770      	bx	lr
 8007932:	2020      	movs	r0, #32
 8007934:	4770      	bx	lr
	...

08007938 <__i2b>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	2101      	movs	r1, #1
 800793e:	f7ff febb 	bl	80076b8 <_Balloc>
 8007942:	4602      	mov	r2, r0
 8007944:	b928      	cbnz	r0, 8007952 <__i2b+0x1a>
 8007946:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <__i2b+0x24>)
 800794c:	4804      	ldr	r0, [pc, #16]	; (8007960 <__i2b+0x28>)
 800794e:	f001 f9f7 	bl	8008d40 <__assert_func>
 8007952:	2301      	movs	r3, #1
 8007954:	6144      	str	r4, [r0, #20]
 8007956:	6103      	str	r3, [r0, #16]
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	0800a128 	.word	0x0800a128
 8007960:	0800a1b4 	.word	0x0800a1b4

08007964 <__multiply>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4691      	mov	r9, r2
 800796a:	690a      	ldr	r2, [r1, #16]
 800796c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007970:	460c      	mov	r4, r1
 8007972:	429a      	cmp	r2, r3
 8007974:	bfbe      	ittt	lt
 8007976:	460b      	movlt	r3, r1
 8007978:	464c      	movlt	r4, r9
 800797a:	4699      	movlt	r9, r3
 800797c:	6927      	ldr	r7, [r4, #16]
 800797e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	eb07 060a 	add.w	r6, r7, sl
 800798a:	42b3      	cmp	r3, r6
 800798c:	b085      	sub	sp, #20
 800798e:	bfb8      	it	lt
 8007990:	3101      	addlt	r1, #1
 8007992:	f7ff fe91 	bl	80076b8 <_Balloc>
 8007996:	b930      	cbnz	r0, 80079a6 <__multiply+0x42>
 8007998:	4602      	mov	r2, r0
 800799a:	f240 115d 	movw	r1, #349	; 0x15d
 800799e:	4b43      	ldr	r3, [pc, #268]	; (8007aac <__multiply+0x148>)
 80079a0:	4843      	ldr	r0, [pc, #268]	; (8007ab0 <__multiply+0x14c>)
 80079a2:	f001 f9cd 	bl	8008d40 <__assert_func>
 80079a6:	f100 0514 	add.w	r5, r0, #20
 80079aa:	462b      	mov	r3, r5
 80079ac:	2200      	movs	r2, #0
 80079ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b2:	4543      	cmp	r3, r8
 80079b4:	d321      	bcc.n	80079fa <__multiply+0x96>
 80079b6:	f104 0314 	add.w	r3, r4, #20
 80079ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079be:	f109 0314 	add.w	r3, r9, #20
 80079c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c6:	9202      	str	r2, [sp, #8]
 80079c8:	1b3a      	subs	r2, r7, r4
 80079ca:	3a15      	subs	r2, #21
 80079cc:	f022 0203 	bic.w	r2, r2, #3
 80079d0:	3204      	adds	r2, #4
 80079d2:	f104 0115 	add.w	r1, r4, #21
 80079d6:	428f      	cmp	r7, r1
 80079d8:	bf38      	it	cc
 80079da:	2204      	movcc	r2, #4
 80079dc:	9201      	str	r2, [sp, #4]
 80079de:	9a02      	ldr	r2, [sp, #8]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d80c      	bhi.n	8007a00 <__multiply+0x9c>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	dd03      	ble.n	80079f2 <__multiply+0x8e>
 80079ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d059      	beq.n	8007aa6 <__multiply+0x142>
 80079f2:	6106      	str	r6, [r0, #16]
 80079f4:	b005      	add	sp, #20
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	f843 2b04 	str.w	r2, [r3], #4
 80079fe:	e7d8      	b.n	80079b2 <__multiply+0x4e>
 8007a00:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a04:	f1ba 0f00 	cmp.w	sl, #0
 8007a08:	d023      	beq.n	8007a52 <__multiply+0xee>
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	f04f 0c00 	mov.w	ip, #0
 8007a10:	f104 0e14 	add.w	lr, r4, #20
 8007a14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a18:	f8d9 1000 	ldr.w	r1, [r9]
 8007a1c:	fa1f fb82 	uxth.w	fp, r2
 8007a20:	b289      	uxth	r1, r1
 8007a22:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a26:	4461      	add	r1, ip
 8007a28:	f8d9 c000 	ldr.w	ip, [r9]
 8007a2c:	0c12      	lsrs	r2, r2, #16
 8007a2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a32:	fb0a c202 	mla	r2, sl, r2, ip
 8007a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3a:	b289      	uxth	r1, r1
 8007a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a40:	4577      	cmp	r7, lr
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	f849 1b04 	str.w	r1, [r9], #4
 8007a4a:	d8e3      	bhi.n	8007a14 <__multiply+0xb0>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f845 c002 	str.w	ip, [r5, r2]
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	3304      	adds	r3, #4
 8007a56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	d020      	beq.n	8007aa2 <__multiply+0x13e>
 8007a60:	46ae      	mov	lr, r5
 8007a62:	f04f 0a00 	mov.w	sl, #0
 8007a66:	6829      	ldr	r1, [r5, #0]
 8007a68:	f104 0c14 	add.w	ip, r4, #20
 8007a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a74:	b289      	uxth	r1, r1
 8007a76:	fb09 220b 	mla	r2, r9, fp, r2
 8007a7a:	4492      	add	sl, r2
 8007a7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a80:	f84e 1b04 	str.w	r1, [lr], #4
 8007a84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a88:	f8be 1000 	ldrh.w	r1, [lr]
 8007a8c:	0c12      	lsrs	r2, r2, #16
 8007a8e:	fb09 1102 	mla	r1, r9, r2, r1
 8007a92:	4567      	cmp	r7, ip
 8007a94:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a9c:	d8e6      	bhi.n	8007a6c <__multiply+0x108>
 8007a9e:	9a01      	ldr	r2, [sp, #4]
 8007aa0:	50a9      	str	r1, [r5, r2]
 8007aa2:	3504      	adds	r5, #4
 8007aa4:	e79b      	b.n	80079de <__multiply+0x7a>
 8007aa6:	3e01      	subs	r6, #1
 8007aa8:	e79d      	b.n	80079e6 <__multiply+0x82>
 8007aaa:	bf00      	nop
 8007aac:	0800a128 	.word	0x0800a128
 8007ab0:	0800a1b4 	.word	0x0800a1b4

08007ab4 <__pow5mult>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4615      	mov	r5, r2
 8007aba:	f012 0203 	ands.w	r2, r2, #3
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	d007      	beq.n	8007ad4 <__pow5mult+0x20>
 8007ac4:	4c25      	ldr	r4, [pc, #148]	; (8007b5c <__pow5mult+0xa8>)
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ace:	f7ff fe55 	bl	800777c <__multadd>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	10ad      	asrs	r5, r5, #2
 8007ad6:	d03d      	beq.n	8007b54 <__pow5mult+0xa0>
 8007ad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ada:	b97c      	cbnz	r4, 8007afc <__pow5mult+0x48>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f7ff fdb5 	bl	800764c <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ae6:	b928      	cbnz	r0, 8007af4 <__pow5mult+0x40>
 8007ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007aec:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <__pow5mult+0xac>)
 8007aee:	481d      	ldr	r0, [pc, #116]	; (8007b64 <__pow5mult+0xb0>)
 8007af0:	f001 f926 	bl	8008d40 <__assert_func>
 8007af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af8:	6004      	str	r4, [r0, #0]
 8007afa:	60c4      	str	r4, [r0, #12]
 8007afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b04:	b94c      	cbnz	r4, 8007b1a <__pow5mult+0x66>
 8007b06:	f240 2171 	movw	r1, #625	; 0x271
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff14 	bl	8007938 <__i2b>
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	07eb      	lsls	r3, r5, #31
 8007b20:	d50a      	bpl.n	8007b38 <__pow5mult+0x84>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff1c 	bl	8007964 <__multiply>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe01 	bl	8007738 <_Bfree>
 8007b36:	4647      	mov	r7, r8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	d00b      	beq.n	8007b54 <__pow5mult+0xa0>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	b938      	cbnz	r0, 8007b50 <__pow5mult+0x9c>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ff0d 	bl	8007964 <__multiply>
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f8c0 9000 	str.w	r9, [r0]
 8007b50:	4604      	mov	r4, r0
 8007b52:	e7e4      	b.n	8007b1e <__pow5mult+0x6a>
 8007b54:	4638      	mov	r0, r7
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	bf00      	nop
 8007b5c:	0800a300 	.word	0x0800a300
 8007b60:	0800a0b6 	.word	0x0800a0b6
 8007b64:	0800a1b4 	.word	0x0800a1b4

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4607      	mov	r7, r0
 8007b70:	4691      	mov	r9, r2
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6849      	ldr	r1, [r1, #4]
 8007b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b80:	f108 0601 	add.w	r6, r8, #1
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	db0b      	blt.n	8007ba0 <__lshift+0x38>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fd95 	bl	80076b8 <_Balloc>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b948      	cbnz	r0, 8007ba6 <__lshift+0x3e>
 8007b92:	4602      	mov	r2, r0
 8007b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b98:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <__lshift+0xd8>)
 8007b9a:	482a      	ldr	r0, [pc, #168]	; (8007c44 <__lshift+0xdc>)
 8007b9c:	f001 f8d0 	bl	8008d40 <__assert_func>
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	e7ee      	b.n	8007b84 <__lshift+0x1c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f100 0114 	add.w	r1, r0, #20
 8007bac:	f100 0210 	add.w	r2, r0, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4553      	cmp	r3, sl
 8007bb4:	db37      	blt.n	8007c26 <__lshift+0xbe>
 8007bb6:	6920      	ldr	r0, [r4, #16]
 8007bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bbc:	f104 0314 	add.w	r3, r4, #20
 8007bc0:	f019 091f 	ands.w	r9, r9, #31
 8007bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bcc:	d02f      	beq.n	8007c2e <__lshift+0xc6>
 8007bce:	468a      	mov	sl, r1
 8007bd0:	f04f 0c00 	mov.w	ip, #0
 8007bd4:	f1c9 0e20 	rsb	lr, r9, #32
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	fa02 f209 	lsl.w	r2, r2, r9
 8007bde:	ea42 020c 	orr.w	r2, r2, ip
 8007be2:	f84a 2b04 	str.w	r2, [sl], #4
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	4298      	cmp	r0, r3
 8007bec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bf0:	d8f2      	bhi.n	8007bd8 <__lshift+0x70>
 8007bf2:	1b03      	subs	r3, r0, r4
 8007bf4:	3b15      	subs	r3, #21
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	f104 0215 	add.w	r2, r4, #21
 8007c00:	4290      	cmp	r0, r2
 8007c02:	bf38      	it	cc
 8007c04:	2304      	movcc	r3, #4
 8007c06:	f841 c003 	str.w	ip, [r1, r3]
 8007c0a:	f1bc 0f00 	cmp.w	ip, #0
 8007c0e:	d001      	beq.n	8007c14 <__lshift+0xac>
 8007c10:	f108 0602 	add.w	r6, r8, #2
 8007c14:	3e01      	subs	r6, #1
 8007c16:	4638      	mov	r0, r7
 8007c18:	4621      	mov	r1, r4
 8007c1a:	612e      	str	r6, [r5, #16]
 8007c1c:	f7ff fd8c 	bl	8007738 <_Bfree>
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	e7c1      	b.n	8007bb2 <__lshift+0x4a>
 8007c2e:	3904      	subs	r1, #4
 8007c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c34:	4298      	cmp	r0, r3
 8007c36:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c3a:	d8f9      	bhi.n	8007c30 <__lshift+0xc8>
 8007c3c:	e7ea      	b.n	8007c14 <__lshift+0xac>
 8007c3e:	bf00      	nop
 8007c40:	0800a128 	.word	0x0800a128
 8007c44:	0800a1b4 	.word	0x0800a1b4

08007c48 <__mcmp>:
 8007c48:	4603      	mov	r3, r0
 8007c4a:	690a      	ldr	r2, [r1, #16]
 8007c4c:	6900      	ldr	r0, [r0, #16]
 8007c4e:	b530      	push	{r4, r5, lr}
 8007c50:	1a80      	subs	r0, r0, r2
 8007c52:	d10d      	bne.n	8007c70 <__mcmp+0x28>
 8007c54:	3314      	adds	r3, #20
 8007c56:	3114      	adds	r1, #20
 8007c58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c68:	4295      	cmp	r5, r2
 8007c6a:	d002      	beq.n	8007c72 <__mcmp+0x2a>
 8007c6c:	d304      	bcc.n	8007c78 <__mcmp+0x30>
 8007c6e:	2001      	movs	r0, #1
 8007c70:	bd30      	pop	{r4, r5, pc}
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	d3f4      	bcc.n	8007c60 <__mcmp+0x18>
 8007c76:	e7fb      	b.n	8007c70 <__mcmp+0x28>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7c:	e7f8      	b.n	8007c70 <__mcmp+0x28>
	...

08007c80 <__mdiff>:
 8007c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	4607      	mov	r7, r0
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	f7ff ffdb 	bl	8007c48 <__mcmp>
 8007c92:	1e06      	subs	r6, r0, #0
 8007c94:	d111      	bne.n	8007cba <__mdiff+0x3a>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fd0d 	bl	80076b8 <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__mdiff+0x2e>
 8007ca2:	f240 2132 	movw	r1, #562	; 0x232
 8007ca6:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <__mdiff+0x110>)
 8007ca8:	483a      	ldr	r0, [pc, #232]	; (8007d94 <__mdiff+0x114>)
 8007caa:	f001 f849 	bl	8008d40 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	bfa4      	itt	ge
 8007cbc:	4623      	movge	r3, r4
 8007cbe:	462c      	movge	r4, r5
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	6861      	ldr	r1, [r4, #4]
 8007cc4:	bfa6      	itte	ge
 8007cc6:	461d      	movge	r5, r3
 8007cc8:	2600      	movge	r6, #0
 8007cca:	2601      	movlt	r6, #1
 8007ccc:	f7ff fcf4 	bl	80076b8 <_Balloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	b918      	cbnz	r0, 8007cdc <__mdiff+0x5c>
 8007cd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <__mdiff+0x110>)
 8007cda:	e7e5      	b.n	8007ca8 <__mdiff+0x28>
 8007cdc:	f102 0814 	add.w	r8, r2, #20
 8007ce0:	46c2      	mov	sl, r8
 8007ce2:	f04f 0c00 	mov.w	ip, #0
 8007ce6:	6927      	ldr	r7, [r4, #16]
 8007ce8:	60c6      	str	r6, [r0, #12]
 8007cea:	692e      	ldr	r6, [r5, #16]
 8007cec:	f104 0014 	add.w	r0, r4, #20
 8007cf0:	f105 0914 	add.w	r9, r5, #20
 8007cf4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cfc:	3410      	adds	r4, #16
 8007cfe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d02:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d06:	fa1f f18b 	uxth.w	r1, fp
 8007d0a:	448c      	add	ip, r1
 8007d0c:	b299      	uxth	r1, r3
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	ebac 0101 	sub.w	r1, ip, r1
 8007d14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d22:	454e      	cmp	r6, r9
 8007d24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d28:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2c:	d8e7      	bhi.n	8007cfe <__mdiff+0x7e>
 8007d2e:	1b73      	subs	r3, r6, r5
 8007d30:	3b15      	subs	r3, #21
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	3515      	adds	r5, #21
 8007d38:	3304      	adds	r3, #4
 8007d3a:	42ae      	cmp	r6, r5
 8007d3c:	bf38      	it	cc
 8007d3e:	2304      	movcc	r3, #4
 8007d40:	4418      	add	r0, r3
 8007d42:	4443      	add	r3, r8
 8007d44:	461e      	mov	r6, r3
 8007d46:	4605      	mov	r5, r0
 8007d48:	4575      	cmp	r5, lr
 8007d4a:	d30e      	bcc.n	8007d6a <__mdiff+0xea>
 8007d4c:	f10e 0103 	add.w	r1, lr, #3
 8007d50:	1a09      	subs	r1, r1, r0
 8007d52:	f021 0103 	bic.w	r1, r1, #3
 8007d56:	3803      	subs	r0, #3
 8007d58:	4586      	cmp	lr, r0
 8007d5a:	bf38      	it	cc
 8007d5c:	2100      	movcc	r1, #0
 8007d5e:	4419      	add	r1, r3
 8007d60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d64:	b18b      	cbz	r3, 8007d8a <__mdiff+0x10a>
 8007d66:	6117      	str	r7, [r2, #16]
 8007d68:	e7a4      	b.n	8007cb4 <__mdiff+0x34>
 8007d6a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d6e:	fa1f f188 	uxth.w	r1, r8
 8007d72:	4461      	add	r1, ip
 8007d74:	140c      	asrs	r4, r1, #16
 8007d76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d7a:	b289      	uxth	r1, r1
 8007d7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d80:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d84:	f846 1b04 	str.w	r1, [r6], #4
 8007d88:	e7de      	b.n	8007d48 <__mdiff+0xc8>
 8007d8a:	3f01      	subs	r7, #1
 8007d8c:	e7e8      	b.n	8007d60 <__mdiff+0xe0>
 8007d8e:	bf00      	nop
 8007d90:	0800a128 	.word	0x0800a128
 8007d94:	0800a1b4 	.word	0x0800a1b4

08007d98 <__ulp>:
 8007d98:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <__ulp+0x48>)
 8007d9a:	400b      	ands	r3, r1
 8007d9c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	dd02      	ble.n	8007daa <__ulp+0x12>
 8007da4:	2000      	movs	r0, #0
 8007da6:	4619      	mov	r1, r3
 8007da8:	4770      	bx	lr
 8007daa:	425b      	negs	r3, r3
 8007dac:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007db0:	f04f 0000 	mov.w	r0, #0
 8007db4:	f04f 0100 	mov.w	r1, #0
 8007db8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007dbc:	da04      	bge.n	8007dc8 <__ulp+0x30>
 8007dbe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007dc2:	fa43 f102 	asr.w	r1, r3, r2
 8007dc6:	4770      	bx	lr
 8007dc8:	f1a2 0314 	sub.w	r3, r2, #20
 8007dcc:	2b1e      	cmp	r3, #30
 8007dce:	bfd6      	itet	le
 8007dd0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007dd4:	2301      	movgt	r3, #1
 8007dd6:	fa22 f303 	lsrle.w	r3, r2, r3
 8007dda:	4618      	mov	r0, r3
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	7ff00000 	.word	0x7ff00000

08007de4 <__b2d>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	6907      	ldr	r7, [r0, #16]
 8007dea:	f100 0914 	add.w	r9, r0, #20
 8007dee:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007df2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007df6:	f1a7 0804 	sub.w	r8, r7, #4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff fd4e 	bl	800789c <__hi0bits>
 8007e00:	f1c0 0320 	rsb	r3, r0, #32
 8007e04:	280a      	cmp	r0, #10
 8007e06:	600b      	str	r3, [r1, #0]
 8007e08:	491f      	ldr	r1, [pc, #124]	; (8007e88 <__b2d+0xa4>)
 8007e0a:	dc17      	bgt.n	8007e3c <__b2d+0x58>
 8007e0c:	45c1      	cmp	r9, r8
 8007e0e:	bf28      	it	cs
 8007e10:	2200      	movcs	r2, #0
 8007e12:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e16:	fa26 f30c 	lsr.w	r3, r6, ip
 8007e1a:	bf38      	it	cc
 8007e1c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e20:	ea43 0501 	orr.w	r5, r3, r1
 8007e24:	f100 0315 	add.w	r3, r0, #21
 8007e28:	fa06 f303 	lsl.w	r3, r6, r3
 8007e2c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007e30:	ea43 0402 	orr.w	r4, r3, r2
 8007e34:	4620      	mov	r0, r4
 8007e36:	4629      	mov	r1, r5
 8007e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3c:	45c1      	cmp	r9, r8
 8007e3e:	bf2e      	itee	cs
 8007e40:	2200      	movcs	r2, #0
 8007e42:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007e46:	f1a7 0808 	subcc.w	r8, r7, #8
 8007e4a:	f1b0 030b 	subs.w	r3, r0, #11
 8007e4e:	d016      	beq.n	8007e7e <__b2d+0x9a>
 8007e50:	f1c3 0720 	rsb	r7, r3, #32
 8007e54:	fa22 f107 	lsr.w	r1, r2, r7
 8007e58:	45c8      	cmp	r8, r9
 8007e5a:	fa06 f603 	lsl.w	r6, r6, r3
 8007e5e:	ea46 0601 	orr.w	r6, r6, r1
 8007e62:	bf94      	ite	ls
 8007e64:	2100      	movls	r1, #0
 8007e66:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007e6a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007e6e:	fa02 f003 	lsl.w	r0, r2, r3
 8007e72:	40f9      	lsrs	r1, r7
 8007e74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e78:	ea40 0401 	orr.w	r4, r0, r1
 8007e7c:	e7da      	b.n	8007e34 <__b2d+0x50>
 8007e7e:	4614      	mov	r4, r2
 8007e80:	ea46 0501 	orr.w	r5, r6, r1
 8007e84:	e7d6      	b.n	8007e34 <__b2d+0x50>
 8007e86:	bf00      	nop
 8007e88:	3ff00000 	.word	0x3ff00000

08007e8c <__d2b>:
 8007e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e90:	2101      	movs	r1, #1
 8007e92:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007e96:	4690      	mov	r8, r2
 8007e98:	461d      	mov	r5, r3
 8007e9a:	f7ff fc0d 	bl	80076b8 <_Balloc>
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b930      	cbnz	r0, 8007eb0 <__d2b+0x24>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	f240 310a 	movw	r1, #778	; 0x30a
 8007ea8:	4b24      	ldr	r3, [pc, #144]	; (8007f3c <__d2b+0xb0>)
 8007eaa:	4825      	ldr	r0, [pc, #148]	; (8007f40 <__d2b+0xb4>)
 8007eac:	f000 ff48 	bl	8008d40 <__assert_func>
 8007eb0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007eb4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007eb8:	bb2d      	cbnz	r5, 8007f06 <__d2b+0x7a>
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8007ec0:	d026      	beq.n	8007f10 <__d2b+0x84>
 8007ec2:	4668      	mov	r0, sp
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	f7ff fd09 	bl	80078dc <__lo0bits>
 8007eca:	9900      	ldr	r1, [sp, #0]
 8007ecc:	b1f0      	cbz	r0, 8007f0c <__d2b+0x80>
 8007ece:	9a01      	ldr	r2, [sp, #4]
 8007ed0:	f1c0 0320 	rsb	r3, r0, #32
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	40c2      	lsrs	r2, r0
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf14      	ite	ne
 8007ee6:	2102      	movne	r1, #2
 8007ee8:	2101      	moveq	r1, #1
 8007eea:	61a3      	str	r3, [r4, #24]
 8007eec:	6121      	str	r1, [r4, #16]
 8007eee:	b1c5      	cbz	r5, 8007f22 <__d2b+0x96>
 8007ef0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ef4:	4405      	add	r5, r0
 8007ef6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007efa:	603d      	str	r5, [r7, #0]
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4620      	mov	r0, r4
 8007f00:	b002      	add	sp, #8
 8007f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0a:	e7d6      	b.n	8007eba <__d2b+0x2e>
 8007f0c:	6161      	str	r1, [r4, #20]
 8007f0e:	e7e7      	b.n	8007ee0 <__d2b+0x54>
 8007f10:	a801      	add	r0, sp, #4
 8007f12:	f7ff fce3 	bl	80078dc <__lo0bits>
 8007f16:	2101      	movs	r1, #1
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	6121      	str	r1, [r4, #16]
 8007f1c:	6163      	str	r3, [r4, #20]
 8007f1e:	3020      	adds	r0, #32
 8007f20:	e7e5      	b.n	8007eee <__d2b+0x62>
 8007f22:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007f26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f2a:	6038      	str	r0, [r7, #0]
 8007f2c:	6918      	ldr	r0, [r3, #16]
 8007f2e:	f7ff fcb5 	bl	800789c <__hi0bits>
 8007f32:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007f36:	6031      	str	r1, [r6, #0]
 8007f38:	e7e1      	b.n	8007efe <__d2b+0x72>
 8007f3a:	bf00      	nop
 8007f3c:	0800a128 	.word	0x0800a128
 8007f40:	0800a1b4 	.word	0x0800a1b4

08007f44 <__ratio>:
 8007f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f48:	4688      	mov	r8, r1
 8007f4a:	4669      	mov	r1, sp
 8007f4c:	4681      	mov	r9, r0
 8007f4e:	f7ff ff49 	bl	8007de4 <__b2d>
 8007f52:	460f      	mov	r7, r1
 8007f54:	4604      	mov	r4, r0
 8007f56:	460d      	mov	r5, r1
 8007f58:	4640      	mov	r0, r8
 8007f5a:	a901      	add	r1, sp, #4
 8007f5c:	f7ff ff42 	bl	8007de4 <__b2d>
 8007f60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f64:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007f68:	468b      	mov	fp, r1
 8007f6a:	eba3 0c02 	sub.w	ip, r3, r2
 8007f6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	bfd5      	itete	le
 8007f7c:	460a      	movle	r2, r1
 8007f7e:	462a      	movgt	r2, r5
 8007f80:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007f84:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007f88:	bfd8      	it	le
 8007f8a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4602      	mov	r2, r0
 8007f92:	4639      	mov	r1, r7
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7f8 fc35 	bl	8000804 <__aeabi_ddiv>
 8007f9a:	b003      	add	sp, #12
 8007f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007fa0 <__copybits>:
 8007fa0:	3901      	subs	r1, #1
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	1149      	asrs	r1, r1, #5
 8007fa6:	6914      	ldr	r4, [r2, #16]
 8007fa8:	3101      	adds	r1, #1
 8007faa:	f102 0314 	add.w	r3, r2, #20
 8007fae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007fb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007fb6:	1f05      	subs	r5, r0, #4
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d30c      	bcc.n	8007fd6 <__copybits+0x36>
 8007fbc:	1aa3      	subs	r3, r4, r2
 8007fbe:	3b11      	subs	r3, #17
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3211      	adds	r2, #17
 8007fc6:	42a2      	cmp	r2, r4
 8007fc8:	bf88      	it	hi
 8007fca:	2300      	movhi	r3, #0
 8007fcc:	4418      	add	r0, r3
 8007fce:	2300      	movs	r3, #0
 8007fd0:	4288      	cmp	r0, r1
 8007fd2:	d305      	bcc.n	8007fe0 <__copybits+0x40>
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007fda:	f845 6f04 	str.w	r6, [r5, #4]!
 8007fde:	e7eb      	b.n	8007fb8 <__copybits+0x18>
 8007fe0:	f840 3b04 	str.w	r3, [r0], #4
 8007fe4:	e7f4      	b.n	8007fd0 <__copybits+0x30>

08007fe6 <__any_on>:
 8007fe6:	f100 0214 	add.w	r2, r0, #20
 8007fea:	6900      	ldr	r0, [r0, #16]
 8007fec:	114b      	asrs	r3, r1, #5
 8007fee:	4298      	cmp	r0, r3
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	db11      	blt.n	8008018 <__any_on+0x32>
 8007ff4:	dd0a      	ble.n	800800c <__any_on+0x26>
 8007ff6:	f011 011f 	ands.w	r1, r1, #31
 8007ffa:	d007      	beq.n	800800c <__any_on+0x26>
 8007ffc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008000:	fa24 f001 	lsr.w	r0, r4, r1
 8008004:	fa00 f101 	lsl.w	r1, r0, r1
 8008008:	428c      	cmp	r4, r1
 800800a:	d10b      	bne.n	8008024 <__any_on+0x3e>
 800800c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008010:	4293      	cmp	r3, r2
 8008012:	d803      	bhi.n	800801c <__any_on+0x36>
 8008014:	2000      	movs	r0, #0
 8008016:	bd10      	pop	{r4, pc}
 8008018:	4603      	mov	r3, r0
 800801a:	e7f7      	b.n	800800c <__any_on+0x26>
 800801c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008020:	2900      	cmp	r1, #0
 8008022:	d0f5      	beq.n	8008010 <__any_on+0x2a>
 8008024:	2001      	movs	r0, #1
 8008026:	e7f6      	b.n	8008016 <__any_on+0x30>

08008028 <_calloc_r>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	fba1 5402 	umull	r5, r4, r1, r2
 800802e:	b934      	cbnz	r4, 800803e <_calloc_r+0x16>
 8008030:	4629      	mov	r1, r5
 8008032:	f000 f875 	bl	8008120 <_malloc_r>
 8008036:	4606      	mov	r6, r0
 8008038:	b928      	cbnz	r0, 8008046 <_calloc_r+0x1e>
 800803a:	4630      	mov	r0, r6
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	220c      	movs	r2, #12
 8008040:	2600      	movs	r6, #0
 8008042:	6002      	str	r2, [r0, #0]
 8008044:	e7f9      	b.n	800803a <_calloc_r+0x12>
 8008046:	462a      	mov	r2, r5
 8008048:	4621      	mov	r1, r4
 800804a:	f7fc fb3b 	bl	80046c4 <memset>
 800804e:	e7f4      	b.n	800803a <_calloc_r+0x12>

08008050 <_free_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4605      	mov	r5, r0
 8008054:	2900      	cmp	r1, #0
 8008056:	d040      	beq.n	80080da <_free_r+0x8a>
 8008058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800805c:	1f0c      	subs	r4, r1, #4
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfb8      	it	lt
 8008062:	18e4      	addlt	r4, r4, r3
 8008064:	f001 f86c 	bl	8009140 <__malloc_lock>
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <_free_r+0x8c>)
 800806a:	6813      	ldr	r3, [r2, #0]
 800806c:	b933      	cbnz	r3, 800807c <_free_r+0x2c>
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	6014      	str	r4, [r2, #0]
 8008072:	4628      	mov	r0, r5
 8008074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008078:	f001 b868 	b.w	800914c <__malloc_unlock>
 800807c:	42a3      	cmp	r3, r4
 800807e:	d908      	bls.n	8008092 <_free_r+0x42>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	1821      	adds	r1, r4, r0
 8008084:	428b      	cmp	r3, r1
 8008086:	bf01      	itttt	eq
 8008088:	6819      	ldreq	r1, [r3, #0]
 800808a:	685b      	ldreq	r3, [r3, #4]
 800808c:	1809      	addeq	r1, r1, r0
 800808e:	6021      	streq	r1, [r4, #0]
 8008090:	e7ed      	b.n	800806e <_free_r+0x1e>
 8008092:	461a      	mov	r2, r3
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	b10b      	cbz	r3, 800809c <_free_r+0x4c>
 8008098:	42a3      	cmp	r3, r4
 800809a:	d9fa      	bls.n	8008092 <_free_r+0x42>
 800809c:	6811      	ldr	r1, [r2, #0]
 800809e:	1850      	adds	r0, r2, r1
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d10b      	bne.n	80080bc <_free_r+0x6c>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	4401      	add	r1, r0
 80080a8:	1850      	adds	r0, r2, r1
 80080aa:	4283      	cmp	r3, r0
 80080ac:	6011      	str	r1, [r2, #0]
 80080ae:	d1e0      	bne.n	8008072 <_free_r+0x22>
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	4401      	add	r1, r0
 80080b6:	6011      	str	r1, [r2, #0]
 80080b8:	6053      	str	r3, [r2, #4]
 80080ba:	e7da      	b.n	8008072 <_free_r+0x22>
 80080bc:	d902      	bls.n	80080c4 <_free_r+0x74>
 80080be:	230c      	movs	r3, #12
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	e7d6      	b.n	8008072 <_free_r+0x22>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	1821      	adds	r1, r4, r0
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf01      	itttt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	1809      	addeq	r1, r1, r0
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	6063      	str	r3, [r4, #4]
 80080d6:	6054      	str	r4, [r2, #4]
 80080d8:	e7cb      	b.n	8008072 <_free_r+0x22>
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20000500 	.word	0x20000500

080080e0 <sbrk_aligned>:
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	4e0e      	ldr	r6, [pc, #56]	; (800811c <sbrk_aligned+0x3c>)
 80080e4:	460c      	mov	r4, r1
 80080e6:	6831      	ldr	r1, [r6, #0]
 80080e8:	4605      	mov	r5, r0
 80080ea:	b911      	cbnz	r1, 80080f2 <sbrk_aligned+0x12>
 80080ec:	f000 fd26 	bl	8008b3c <_sbrk_r>
 80080f0:	6030      	str	r0, [r6, #0]
 80080f2:	4621      	mov	r1, r4
 80080f4:	4628      	mov	r0, r5
 80080f6:	f000 fd21 	bl	8008b3c <_sbrk_r>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d00a      	beq.n	8008114 <sbrk_aligned+0x34>
 80080fe:	1cc4      	adds	r4, r0, #3
 8008100:	f024 0403 	bic.w	r4, r4, #3
 8008104:	42a0      	cmp	r0, r4
 8008106:	d007      	beq.n	8008118 <sbrk_aligned+0x38>
 8008108:	1a21      	subs	r1, r4, r0
 800810a:	4628      	mov	r0, r5
 800810c:	f000 fd16 	bl	8008b3c <_sbrk_r>
 8008110:	3001      	adds	r0, #1
 8008112:	d101      	bne.n	8008118 <sbrk_aligned+0x38>
 8008114:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008118:	4620      	mov	r0, r4
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	20000504 	.word	0x20000504

08008120 <_malloc_r>:
 8008120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008124:	1ccd      	adds	r5, r1, #3
 8008126:	f025 0503 	bic.w	r5, r5, #3
 800812a:	3508      	adds	r5, #8
 800812c:	2d0c      	cmp	r5, #12
 800812e:	bf38      	it	cc
 8008130:	250c      	movcc	r5, #12
 8008132:	2d00      	cmp	r5, #0
 8008134:	4607      	mov	r7, r0
 8008136:	db01      	blt.n	800813c <_malloc_r+0x1c>
 8008138:	42a9      	cmp	r1, r5
 800813a:	d905      	bls.n	8008148 <_malloc_r+0x28>
 800813c:	230c      	movs	r3, #12
 800813e:	2600      	movs	r6, #0
 8008140:	603b      	str	r3, [r7, #0]
 8008142:	4630      	mov	r0, r6
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	4e2e      	ldr	r6, [pc, #184]	; (8008204 <_malloc_r+0xe4>)
 800814a:	f000 fff9 	bl	8009140 <__malloc_lock>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	461c      	mov	r4, r3
 8008152:	bb34      	cbnz	r4, 80081a2 <_malloc_r+0x82>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ffc2 	bl	80080e0 <sbrk_aligned>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	4604      	mov	r4, r0
 8008160:	d14d      	bne.n	80081fe <_malloc_r+0xde>
 8008162:	6834      	ldr	r4, [r6, #0]
 8008164:	4626      	mov	r6, r4
 8008166:	2e00      	cmp	r6, #0
 8008168:	d140      	bne.n	80081ec <_malloc_r+0xcc>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	4631      	mov	r1, r6
 800816e:	4638      	mov	r0, r7
 8008170:	eb04 0803 	add.w	r8, r4, r3
 8008174:	f000 fce2 	bl	8008b3c <_sbrk_r>
 8008178:	4580      	cmp	r8, r0
 800817a:	d13a      	bne.n	80081f2 <_malloc_r+0xd2>
 800817c:	6821      	ldr	r1, [r4, #0]
 800817e:	3503      	adds	r5, #3
 8008180:	1a6d      	subs	r5, r5, r1
 8008182:	f025 0503 	bic.w	r5, r5, #3
 8008186:	3508      	adds	r5, #8
 8008188:	2d0c      	cmp	r5, #12
 800818a:	bf38      	it	cc
 800818c:	250c      	movcc	r5, #12
 800818e:	4638      	mov	r0, r7
 8008190:	4629      	mov	r1, r5
 8008192:	f7ff ffa5 	bl	80080e0 <sbrk_aligned>
 8008196:	3001      	adds	r0, #1
 8008198:	d02b      	beq.n	80081f2 <_malloc_r+0xd2>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	442b      	add	r3, r5
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	e00e      	b.n	80081c0 <_malloc_r+0xa0>
 80081a2:	6822      	ldr	r2, [r4, #0]
 80081a4:	1b52      	subs	r2, r2, r5
 80081a6:	d41e      	bmi.n	80081e6 <_malloc_r+0xc6>
 80081a8:	2a0b      	cmp	r2, #11
 80081aa:	d916      	bls.n	80081da <_malloc_r+0xba>
 80081ac:	1961      	adds	r1, r4, r5
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	6025      	str	r5, [r4, #0]
 80081b2:	bf18      	it	ne
 80081b4:	6059      	strne	r1, [r3, #4]
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	bf08      	it	eq
 80081ba:	6031      	streq	r1, [r6, #0]
 80081bc:	5162      	str	r2, [r4, r5]
 80081be:	604b      	str	r3, [r1, #4]
 80081c0:	4638      	mov	r0, r7
 80081c2:	f104 060b 	add.w	r6, r4, #11
 80081c6:	f000 ffc1 	bl	800914c <__malloc_unlock>
 80081ca:	f026 0607 	bic.w	r6, r6, #7
 80081ce:	1d23      	adds	r3, r4, #4
 80081d0:	1af2      	subs	r2, r6, r3
 80081d2:	d0b6      	beq.n	8008142 <_malloc_r+0x22>
 80081d4:	1b9b      	subs	r3, r3, r6
 80081d6:	50a3      	str	r3, [r4, r2]
 80081d8:	e7b3      	b.n	8008142 <_malloc_r+0x22>
 80081da:	6862      	ldr	r2, [r4, #4]
 80081dc:	42a3      	cmp	r3, r4
 80081de:	bf0c      	ite	eq
 80081e0:	6032      	streq	r2, [r6, #0]
 80081e2:	605a      	strne	r2, [r3, #4]
 80081e4:	e7ec      	b.n	80081c0 <_malloc_r+0xa0>
 80081e6:	4623      	mov	r3, r4
 80081e8:	6864      	ldr	r4, [r4, #4]
 80081ea:	e7b2      	b.n	8008152 <_malloc_r+0x32>
 80081ec:	4634      	mov	r4, r6
 80081ee:	6876      	ldr	r6, [r6, #4]
 80081f0:	e7b9      	b.n	8008166 <_malloc_r+0x46>
 80081f2:	230c      	movs	r3, #12
 80081f4:	4638      	mov	r0, r7
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	f000 ffa8 	bl	800914c <__malloc_unlock>
 80081fc:	e7a1      	b.n	8008142 <_malloc_r+0x22>
 80081fe:	6025      	str	r5, [r4, #0]
 8008200:	e7de      	b.n	80081c0 <_malloc_r+0xa0>
 8008202:	bf00      	nop
 8008204:	20000500 	.word	0x20000500

08008208 <__ssputs_r>:
 8008208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800820c:	688e      	ldr	r6, [r1, #8]
 800820e:	4682      	mov	sl, r0
 8008210:	429e      	cmp	r6, r3
 8008212:	460c      	mov	r4, r1
 8008214:	4690      	mov	r8, r2
 8008216:	461f      	mov	r7, r3
 8008218:	d838      	bhi.n	800828c <__ssputs_r+0x84>
 800821a:	898a      	ldrh	r2, [r1, #12]
 800821c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008220:	d032      	beq.n	8008288 <__ssputs_r+0x80>
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	6909      	ldr	r1, [r1, #16]
 8008226:	3301      	adds	r3, #1
 8008228:	eba5 0901 	sub.w	r9, r5, r1
 800822c:	6965      	ldr	r5, [r4, #20]
 800822e:	444b      	add	r3, r9
 8008230:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008238:	106d      	asrs	r5, r5, #1
 800823a:	429d      	cmp	r5, r3
 800823c:	bf38      	it	cc
 800823e:	461d      	movcc	r5, r3
 8008240:	0553      	lsls	r3, r2, #21
 8008242:	d531      	bpl.n	80082a8 <__ssputs_r+0xa0>
 8008244:	4629      	mov	r1, r5
 8008246:	f7ff ff6b 	bl	8008120 <_malloc_r>
 800824a:	4606      	mov	r6, r0
 800824c:	b950      	cbnz	r0, 8008264 <__ssputs_r+0x5c>
 800824e:	230c      	movs	r3, #12
 8008250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008254:	f8ca 3000 	str.w	r3, [sl]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800825e:	81a3      	strh	r3, [r4, #12]
 8008260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008264:	464a      	mov	r2, r9
 8008266:	6921      	ldr	r1, [r4, #16]
 8008268:	f7ff fa18 	bl	800769c <memcpy>
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008276:	81a3      	strh	r3, [r4, #12]
 8008278:	6126      	str	r6, [r4, #16]
 800827a:	444e      	add	r6, r9
 800827c:	6026      	str	r6, [r4, #0]
 800827e:	463e      	mov	r6, r7
 8008280:	6165      	str	r5, [r4, #20]
 8008282:	eba5 0509 	sub.w	r5, r5, r9
 8008286:	60a5      	str	r5, [r4, #8]
 8008288:	42be      	cmp	r6, r7
 800828a:	d900      	bls.n	800828e <__ssputs_r+0x86>
 800828c:	463e      	mov	r6, r7
 800828e:	4632      	mov	r2, r6
 8008290:	4641      	mov	r1, r8
 8008292:	6820      	ldr	r0, [r4, #0]
 8008294:	f000 ff3a 	bl	800910c <memmove>
 8008298:	68a3      	ldr	r3, [r4, #8]
 800829a:	2000      	movs	r0, #0
 800829c:	1b9b      	subs	r3, r3, r6
 800829e:	60a3      	str	r3, [r4, #8]
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	4433      	add	r3, r6
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	e7db      	b.n	8008260 <__ssputs_r+0x58>
 80082a8:	462a      	mov	r2, r5
 80082aa:	f000 ff55 	bl	8009158 <_realloc_r>
 80082ae:	4606      	mov	r6, r0
 80082b0:	2800      	cmp	r0, #0
 80082b2:	d1e1      	bne.n	8008278 <__ssputs_r+0x70>
 80082b4:	4650      	mov	r0, sl
 80082b6:	6921      	ldr	r1, [r4, #16]
 80082b8:	f7ff feca 	bl	8008050 <_free_r>
 80082bc:	e7c7      	b.n	800824e <__ssputs_r+0x46>
	...

080082c0 <_svfiprintf_r>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	4698      	mov	r8, r3
 80082c6:	898b      	ldrh	r3, [r1, #12]
 80082c8:	4607      	mov	r7, r0
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	460d      	mov	r5, r1
 80082ce:	4614      	mov	r4, r2
 80082d0:	b09d      	sub	sp, #116	; 0x74
 80082d2:	d50e      	bpl.n	80082f2 <_svfiprintf_r+0x32>
 80082d4:	690b      	ldr	r3, [r1, #16]
 80082d6:	b963      	cbnz	r3, 80082f2 <_svfiprintf_r+0x32>
 80082d8:	2140      	movs	r1, #64	; 0x40
 80082da:	f7ff ff21 	bl	8008120 <_malloc_r>
 80082de:	6028      	str	r0, [r5, #0]
 80082e0:	6128      	str	r0, [r5, #16]
 80082e2:	b920      	cbnz	r0, 80082ee <_svfiprintf_r+0x2e>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ec:	e0d1      	b.n	8008492 <_svfiprintf_r+0x1d2>
 80082ee:	2340      	movs	r3, #64	; 0x40
 80082f0:	616b      	str	r3, [r5, #20]
 80082f2:	2300      	movs	r3, #0
 80082f4:	9309      	str	r3, [sp, #36]	; 0x24
 80082f6:	2320      	movs	r3, #32
 80082f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082fc:	2330      	movs	r3, #48	; 0x30
 80082fe:	f04f 0901 	mov.w	r9, #1
 8008302:	f8cd 800c 	str.w	r8, [sp, #12]
 8008306:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80084ac <_svfiprintf_r+0x1ec>
 800830a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800830e:	4623      	mov	r3, r4
 8008310:	469a      	mov	sl, r3
 8008312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008316:	b10a      	cbz	r2, 800831c <_svfiprintf_r+0x5c>
 8008318:	2a25      	cmp	r2, #37	; 0x25
 800831a:	d1f9      	bne.n	8008310 <_svfiprintf_r+0x50>
 800831c:	ebba 0b04 	subs.w	fp, sl, r4
 8008320:	d00b      	beq.n	800833a <_svfiprintf_r+0x7a>
 8008322:	465b      	mov	r3, fp
 8008324:	4622      	mov	r2, r4
 8008326:	4629      	mov	r1, r5
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff ff6d 	bl	8008208 <__ssputs_r>
 800832e:	3001      	adds	r0, #1
 8008330:	f000 80aa 	beq.w	8008488 <_svfiprintf_r+0x1c8>
 8008334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008336:	445a      	add	r2, fp
 8008338:	9209      	str	r2, [sp, #36]	; 0x24
 800833a:	f89a 3000 	ldrb.w	r3, [sl]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 80a2 	beq.w	8008488 <_svfiprintf_r+0x1c8>
 8008344:	2300      	movs	r3, #0
 8008346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800834a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800834e:	f10a 0a01 	add.w	sl, sl, #1
 8008352:	9304      	str	r3, [sp, #16]
 8008354:	9307      	str	r3, [sp, #28]
 8008356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800835a:	931a      	str	r3, [sp, #104]	; 0x68
 800835c:	4654      	mov	r4, sl
 800835e:	2205      	movs	r2, #5
 8008360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008364:	4851      	ldr	r0, [pc, #324]	; (80084ac <_svfiprintf_r+0x1ec>)
 8008366:	f7ff f98b 	bl	8007680 <memchr>
 800836a:	9a04      	ldr	r2, [sp, #16]
 800836c:	b9d8      	cbnz	r0, 80083a6 <_svfiprintf_r+0xe6>
 800836e:	06d0      	lsls	r0, r2, #27
 8008370:	bf44      	itt	mi
 8008372:	2320      	movmi	r3, #32
 8008374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008378:	0711      	lsls	r1, r2, #28
 800837a:	bf44      	itt	mi
 800837c:	232b      	movmi	r3, #43	; 0x2b
 800837e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008382:	f89a 3000 	ldrb.w	r3, [sl]
 8008386:	2b2a      	cmp	r3, #42	; 0x2a
 8008388:	d015      	beq.n	80083b6 <_svfiprintf_r+0xf6>
 800838a:	4654      	mov	r4, sl
 800838c:	2000      	movs	r0, #0
 800838e:	f04f 0c0a 	mov.w	ip, #10
 8008392:	9a07      	ldr	r2, [sp, #28]
 8008394:	4621      	mov	r1, r4
 8008396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800839a:	3b30      	subs	r3, #48	; 0x30
 800839c:	2b09      	cmp	r3, #9
 800839e:	d94e      	bls.n	800843e <_svfiprintf_r+0x17e>
 80083a0:	b1b0      	cbz	r0, 80083d0 <_svfiprintf_r+0x110>
 80083a2:	9207      	str	r2, [sp, #28]
 80083a4:	e014      	b.n	80083d0 <_svfiprintf_r+0x110>
 80083a6:	eba0 0308 	sub.w	r3, r0, r8
 80083aa:	fa09 f303 	lsl.w	r3, r9, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	46a2      	mov	sl, r4
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	e7d2      	b.n	800835c <_svfiprintf_r+0x9c>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	1d19      	adds	r1, r3, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	9103      	str	r1, [sp, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bfbb      	ittet	lt
 80083c2:	425b      	neglt	r3, r3
 80083c4:	f042 0202 	orrlt.w	r2, r2, #2
 80083c8:	9307      	strge	r3, [sp, #28]
 80083ca:	9307      	strlt	r3, [sp, #28]
 80083cc:	bfb8      	it	lt
 80083ce:	9204      	strlt	r2, [sp, #16]
 80083d0:	7823      	ldrb	r3, [r4, #0]
 80083d2:	2b2e      	cmp	r3, #46	; 0x2e
 80083d4:	d10c      	bne.n	80083f0 <_svfiprintf_r+0x130>
 80083d6:	7863      	ldrb	r3, [r4, #1]
 80083d8:	2b2a      	cmp	r3, #42	; 0x2a
 80083da:	d135      	bne.n	8008448 <_svfiprintf_r+0x188>
 80083dc:	9b03      	ldr	r3, [sp, #12]
 80083de:	3402      	adds	r4, #2
 80083e0:	1d1a      	adds	r2, r3, #4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	9203      	str	r2, [sp, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfb8      	it	lt
 80083ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80083ee:	9305      	str	r3, [sp, #20]
 80083f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80084b0 <_svfiprintf_r+0x1f0>
 80083f4:	2203      	movs	r2, #3
 80083f6:	4650      	mov	r0, sl
 80083f8:	7821      	ldrb	r1, [r4, #0]
 80083fa:	f7ff f941 	bl	8007680 <memchr>
 80083fe:	b140      	cbz	r0, 8008412 <_svfiprintf_r+0x152>
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	eba0 000a 	sub.w	r0, r0, sl
 8008406:	fa03 f000 	lsl.w	r0, r3, r0
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	3401      	adds	r4, #1
 800840e:	4303      	orrs	r3, r0
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008416:	2206      	movs	r2, #6
 8008418:	4826      	ldr	r0, [pc, #152]	; (80084b4 <_svfiprintf_r+0x1f4>)
 800841a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800841e:	f7ff f92f 	bl	8007680 <memchr>
 8008422:	2800      	cmp	r0, #0
 8008424:	d038      	beq.n	8008498 <_svfiprintf_r+0x1d8>
 8008426:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <_svfiprintf_r+0x1f8>)
 8008428:	bb1b      	cbnz	r3, 8008472 <_svfiprintf_r+0x1b2>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	3307      	adds	r3, #7
 800842e:	f023 0307 	bic.w	r3, r3, #7
 8008432:	3308      	adds	r3, #8
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008438:	4433      	add	r3, r6
 800843a:	9309      	str	r3, [sp, #36]	; 0x24
 800843c:	e767      	b.n	800830e <_svfiprintf_r+0x4e>
 800843e:	460c      	mov	r4, r1
 8008440:	2001      	movs	r0, #1
 8008442:	fb0c 3202 	mla	r2, ip, r2, r3
 8008446:	e7a5      	b.n	8008394 <_svfiprintf_r+0xd4>
 8008448:	2300      	movs	r3, #0
 800844a:	f04f 0c0a 	mov.w	ip, #10
 800844e:	4619      	mov	r1, r3
 8008450:	3401      	adds	r4, #1
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	4620      	mov	r0, r4
 8008456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800845a:	3a30      	subs	r2, #48	; 0x30
 800845c:	2a09      	cmp	r2, #9
 800845e:	d903      	bls.n	8008468 <_svfiprintf_r+0x1a8>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d0c5      	beq.n	80083f0 <_svfiprintf_r+0x130>
 8008464:	9105      	str	r1, [sp, #20]
 8008466:	e7c3      	b.n	80083f0 <_svfiprintf_r+0x130>
 8008468:	4604      	mov	r4, r0
 800846a:	2301      	movs	r3, #1
 800846c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008470:	e7f0      	b.n	8008454 <_svfiprintf_r+0x194>
 8008472:	ab03      	add	r3, sp, #12
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	462a      	mov	r2, r5
 8008478:	4638      	mov	r0, r7
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <_svfiprintf_r+0x1fc>)
 800847c:	a904      	add	r1, sp, #16
 800847e:	f7fc f9c7 	bl	8004810 <_printf_float>
 8008482:	1c42      	adds	r2, r0, #1
 8008484:	4606      	mov	r6, r0
 8008486:	d1d6      	bne.n	8008436 <_svfiprintf_r+0x176>
 8008488:	89ab      	ldrh	r3, [r5, #12]
 800848a:	065b      	lsls	r3, r3, #25
 800848c:	f53f af2c 	bmi.w	80082e8 <_svfiprintf_r+0x28>
 8008490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008492:	b01d      	add	sp, #116	; 0x74
 8008494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	462a      	mov	r2, r5
 800849e:	4638      	mov	r0, r7
 80084a0:	4b06      	ldr	r3, [pc, #24]	; (80084bc <_svfiprintf_r+0x1fc>)
 80084a2:	a904      	add	r1, sp, #16
 80084a4:	f7fc fc50 	bl	8004d48 <_printf_i>
 80084a8:	e7eb      	b.n	8008482 <_svfiprintf_r+0x1c2>
 80084aa:	bf00      	nop
 80084ac:	0800a30c 	.word	0x0800a30c
 80084b0:	0800a312 	.word	0x0800a312
 80084b4:	0800a316 	.word	0x0800a316
 80084b8:	08004811 	.word	0x08004811
 80084bc:	08008209 	.word	0x08008209

080084c0 <_sungetc_r>:
 80084c0:	b538      	push	{r3, r4, r5, lr}
 80084c2:	1c4b      	adds	r3, r1, #1
 80084c4:	4614      	mov	r4, r2
 80084c6:	d103      	bne.n	80084d0 <_sungetc_r+0x10>
 80084c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80084cc:	4628      	mov	r0, r5
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	8993      	ldrh	r3, [r2, #12]
 80084d2:	b2cd      	uxtb	r5, r1
 80084d4:	f023 0320 	bic.w	r3, r3, #32
 80084d8:	8193      	strh	r3, [r2, #12]
 80084da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084dc:	6852      	ldr	r2, [r2, #4]
 80084de:	b18b      	cbz	r3, 8008504 <_sungetc_r+0x44>
 80084e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084e2:	4293      	cmp	r3, r2
 80084e4:	dd08      	ble.n	80084f8 <_sungetc_r+0x38>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	1e5a      	subs	r2, r3, #1
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80084f0:	6863      	ldr	r3, [r4, #4]
 80084f2:	3301      	adds	r3, #1
 80084f4:	6063      	str	r3, [r4, #4]
 80084f6:	e7e9      	b.n	80084cc <_sungetc_r+0xc>
 80084f8:	4621      	mov	r1, r4
 80084fa:	f000 fbdb 	bl	8008cb4 <__submore>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d0f1      	beq.n	80084e6 <_sungetc_r+0x26>
 8008502:	e7e1      	b.n	80084c8 <_sungetc_r+0x8>
 8008504:	6921      	ldr	r1, [r4, #16]
 8008506:	6823      	ldr	r3, [r4, #0]
 8008508:	b151      	cbz	r1, 8008520 <_sungetc_r+0x60>
 800850a:	4299      	cmp	r1, r3
 800850c:	d208      	bcs.n	8008520 <_sungetc_r+0x60>
 800850e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008512:	42a9      	cmp	r1, r5
 8008514:	d104      	bne.n	8008520 <_sungetc_r+0x60>
 8008516:	3b01      	subs	r3, #1
 8008518:	3201      	adds	r2, #1
 800851a:	6023      	str	r3, [r4, #0]
 800851c:	6062      	str	r2, [r4, #4]
 800851e:	e7d5      	b.n	80084cc <_sungetc_r+0xc>
 8008520:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008528:	6363      	str	r3, [r4, #52]	; 0x34
 800852a:	2303      	movs	r3, #3
 800852c:	63a3      	str	r3, [r4, #56]	; 0x38
 800852e:	4623      	mov	r3, r4
 8008530:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	2301      	movs	r3, #1
 8008538:	e7dc      	b.n	80084f4 <_sungetc_r+0x34>

0800853a <__ssrefill_r>:
 800853a:	b510      	push	{r4, lr}
 800853c:	460c      	mov	r4, r1
 800853e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008540:	b169      	cbz	r1, 800855e <__ssrefill_r+0x24>
 8008542:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008546:	4299      	cmp	r1, r3
 8008548:	d001      	beq.n	800854e <__ssrefill_r+0x14>
 800854a:	f7ff fd81 	bl	8008050 <_free_r>
 800854e:	2000      	movs	r0, #0
 8008550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008552:	6360      	str	r0, [r4, #52]	; 0x34
 8008554:	6063      	str	r3, [r4, #4]
 8008556:	b113      	cbz	r3, 800855e <__ssrefill_r+0x24>
 8008558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	bd10      	pop	{r4, pc}
 800855e:	6923      	ldr	r3, [r4, #16]
 8008560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	6063      	str	r3, [r4, #4]
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f043 0320 	orr.w	r3, r3, #32
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	e7f3      	b.n	800855c <__ssrefill_r+0x22>

08008574 <__ssvfiscanf_r>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	2100      	movs	r1, #0
 800857c:	4606      	mov	r6, r0
 800857e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008582:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008586:	49a7      	ldr	r1, [pc, #668]	; (8008824 <__ssvfiscanf_r+0x2b0>)
 8008588:	f10d 0804 	add.w	r8, sp, #4
 800858c:	91a0      	str	r1, [sp, #640]	; 0x280
 800858e:	49a6      	ldr	r1, [pc, #664]	; (8008828 <__ssvfiscanf_r+0x2b4>)
 8008590:	4fa6      	ldr	r7, [pc, #664]	; (800882c <__ssvfiscanf_r+0x2b8>)
 8008592:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8008830 <__ssvfiscanf_r+0x2bc>
 8008596:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800859a:	91a1      	str	r1, [sp, #644]	; 0x284
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	7813      	ldrb	r3, [r2, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 815c 	beq.w	800885e <__ssvfiscanf_r+0x2ea>
 80085a6:	5dd9      	ldrb	r1, [r3, r7]
 80085a8:	1c55      	adds	r5, r2, #1
 80085aa:	f011 0108 	ands.w	r1, r1, #8
 80085ae:	d019      	beq.n	80085e4 <__ssvfiscanf_r+0x70>
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd0f      	ble.n	80085d6 <__ssvfiscanf_r+0x62>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	5cba      	ldrb	r2, [r7, r2]
 80085bc:	0712      	lsls	r2, r2, #28
 80085be:	d401      	bmi.n	80085c4 <__ssvfiscanf_r+0x50>
 80085c0:	462a      	mov	r2, r5
 80085c2:	e7ec      	b.n	800859e <__ssvfiscanf_r+0x2a>
 80085c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085c6:	3301      	adds	r3, #1
 80085c8:	3201      	adds	r2, #1
 80085ca:	9245      	str	r2, [sp, #276]	; 0x114
 80085cc:	6862      	ldr	r2, [r4, #4]
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	3a01      	subs	r2, #1
 80085d2:	6062      	str	r2, [r4, #4]
 80085d4:	e7ec      	b.n	80085b0 <__ssvfiscanf_r+0x3c>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4630      	mov	r0, r6
 80085da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085dc:	4798      	blx	r3
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0e9      	beq.n	80085b6 <__ssvfiscanf_r+0x42>
 80085e2:	e7ed      	b.n	80085c0 <__ssvfiscanf_r+0x4c>
 80085e4:	2b25      	cmp	r3, #37	; 0x25
 80085e6:	d012      	beq.n	800860e <__ssvfiscanf_r+0x9a>
 80085e8:	469a      	mov	sl, r3
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f340 8094 	ble.w	800871a <__ssvfiscanf_r+0x1a6>
 80085f2:	6822      	ldr	r2, [r4, #0]
 80085f4:	7813      	ldrb	r3, [r2, #0]
 80085f6:	4553      	cmp	r3, sl
 80085f8:	f040 8131 	bne.w	800885e <__ssvfiscanf_r+0x2ea>
 80085fc:	6863      	ldr	r3, [r4, #4]
 80085fe:	3201      	adds	r2, #1
 8008600:	3b01      	subs	r3, #1
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008606:	6022      	str	r2, [r4, #0]
 8008608:	3301      	adds	r3, #1
 800860a:	9345      	str	r3, [sp, #276]	; 0x114
 800860c:	e7d8      	b.n	80085c0 <__ssvfiscanf_r+0x4c>
 800860e:	9141      	str	r1, [sp, #260]	; 0x104
 8008610:	9143      	str	r1, [sp, #268]	; 0x10c
 8008612:	7853      	ldrb	r3, [r2, #1]
 8008614:	2b2a      	cmp	r3, #42	; 0x2a
 8008616:	bf04      	itt	eq
 8008618:	2310      	moveq	r3, #16
 800861a:	1c95      	addeq	r5, r2, #2
 800861c:	f04f 020a 	mov.w	r2, #10
 8008620:	bf08      	it	eq
 8008622:	9341      	streq	r3, [sp, #260]	; 0x104
 8008624:	46aa      	mov	sl, r5
 8008626:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800862a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800862e:	2b09      	cmp	r3, #9
 8008630:	d91d      	bls.n	800866e <__ssvfiscanf_r+0xfa>
 8008632:	2203      	movs	r2, #3
 8008634:	487e      	ldr	r0, [pc, #504]	; (8008830 <__ssvfiscanf_r+0x2bc>)
 8008636:	f7ff f823 	bl	8007680 <memchr>
 800863a:	b140      	cbz	r0, 800864e <__ssvfiscanf_r+0xda>
 800863c:	2301      	movs	r3, #1
 800863e:	4655      	mov	r5, sl
 8008640:	eba0 0009 	sub.w	r0, r0, r9
 8008644:	fa03 f000 	lsl.w	r0, r3, r0
 8008648:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800864a:	4318      	orrs	r0, r3
 800864c:	9041      	str	r0, [sp, #260]	; 0x104
 800864e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008652:	2b78      	cmp	r3, #120	; 0x78
 8008654:	d806      	bhi.n	8008664 <__ssvfiscanf_r+0xf0>
 8008656:	2b57      	cmp	r3, #87	; 0x57
 8008658:	d810      	bhi.n	800867c <__ssvfiscanf_r+0x108>
 800865a:	2b25      	cmp	r3, #37	; 0x25
 800865c:	d0c4      	beq.n	80085e8 <__ssvfiscanf_r+0x74>
 800865e:	d857      	bhi.n	8008710 <__ssvfiscanf_r+0x19c>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d065      	beq.n	8008730 <__ssvfiscanf_r+0x1bc>
 8008664:	2303      	movs	r3, #3
 8008666:	9347      	str	r3, [sp, #284]	; 0x11c
 8008668:	230a      	movs	r3, #10
 800866a:	9342      	str	r3, [sp, #264]	; 0x108
 800866c:	e072      	b.n	8008754 <__ssvfiscanf_r+0x1e0>
 800866e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008670:	4655      	mov	r5, sl
 8008672:	fb02 1103 	mla	r1, r2, r3, r1
 8008676:	3930      	subs	r1, #48	; 0x30
 8008678:	9143      	str	r1, [sp, #268]	; 0x10c
 800867a:	e7d3      	b.n	8008624 <__ssvfiscanf_r+0xb0>
 800867c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008680:	2a20      	cmp	r2, #32
 8008682:	d8ef      	bhi.n	8008664 <__ssvfiscanf_r+0xf0>
 8008684:	a101      	add	r1, pc, #4	; (adr r1, 800868c <__ssvfiscanf_r+0x118>)
 8008686:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800868a:	bf00      	nop
 800868c:	0800873f 	.word	0x0800873f
 8008690:	08008665 	.word	0x08008665
 8008694:	08008665 	.word	0x08008665
 8008698:	0800879d 	.word	0x0800879d
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	08008665 	.word	0x08008665
 80086ac:	08008665 	.word	0x08008665
 80086b0:	08008665 	.word	0x08008665
 80086b4:	08008665 	.word	0x08008665
 80086b8:	080087b3 	.word	0x080087b3
 80086bc:	08008789 	.word	0x08008789
 80086c0:	08008717 	.word	0x08008717
 80086c4:	08008717 	.word	0x08008717
 80086c8:	08008717 	.word	0x08008717
 80086cc:	08008665 	.word	0x08008665
 80086d0:	0800878d 	.word	0x0800878d
 80086d4:	08008665 	.word	0x08008665
 80086d8:	08008665 	.word	0x08008665
 80086dc:	08008665 	.word	0x08008665
 80086e0:	08008665 	.word	0x08008665
 80086e4:	080087c3 	.word	0x080087c3
 80086e8:	08008795 	.word	0x08008795
 80086ec:	08008737 	.word	0x08008737
 80086f0:	08008665 	.word	0x08008665
 80086f4:	08008665 	.word	0x08008665
 80086f8:	080087bf 	.word	0x080087bf
 80086fc:	08008665 	.word	0x08008665
 8008700:	08008789 	.word	0x08008789
 8008704:	08008665 	.word	0x08008665
 8008708:	08008665 	.word	0x08008665
 800870c:	0800873f 	.word	0x0800873f
 8008710:	3b45      	subs	r3, #69	; 0x45
 8008712:	2b02      	cmp	r3, #2
 8008714:	d8a6      	bhi.n	8008664 <__ssvfiscanf_r+0xf0>
 8008716:	2305      	movs	r3, #5
 8008718:	e01b      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 800871a:	4621      	mov	r1, r4
 800871c:	4630      	mov	r0, r6
 800871e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008720:	4798      	blx	r3
 8008722:	2800      	cmp	r0, #0
 8008724:	f43f af65 	beq.w	80085f2 <__ssvfiscanf_r+0x7e>
 8008728:	9844      	ldr	r0, [sp, #272]	; 0x110
 800872a:	2800      	cmp	r0, #0
 800872c:	f040 808d 	bne.w	800884a <__ssvfiscanf_r+0x2d6>
 8008730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008734:	e08f      	b.n	8008856 <__ssvfiscanf_r+0x2e2>
 8008736:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008738:	f042 0220 	orr.w	r2, r2, #32
 800873c:	9241      	str	r2, [sp, #260]	; 0x104
 800873e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008744:	9241      	str	r2, [sp, #260]	; 0x104
 8008746:	2210      	movs	r2, #16
 8008748:	2b6f      	cmp	r3, #111	; 0x6f
 800874a:	bf34      	ite	cc
 800874c:	2303      	movcc	r3, #3
 800874e:	2304      	movcs	r3, #4
 8008750:	9242      	str	r2, [sp, #264]	; 0x108
 8008752:	9347      	str	r3, [sp, #284]	; 0x11c
 8008754:	6863      	ldr	r3, [r4, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	dd42      	ble.n	80087e0 <__ssvfiscanf_r+0x26c>
 800875a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800875c:	0659      	lsls	r1, r3, #25
 800875e:	d404      	bmi.n	800876a <__ssvfiscanf_r+0x1f6>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	5cba      	ldrb	r2, [r7, r2]
 8008766:	0712      	lsls	r2, r2, #28
 8008768:	d441      	bmi.n	80087ee <__ssvfiscanf_r+0x27a>
 800876a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800876c:	2b02      	cmp	r3, #2
 800876e:	dc50      	bgt.n	8008812 <__ssvfiscanf_r+0x29e>
 8008770:	466b      	mov	r3, sp
 8008772:	4622      	mov	r2, r4
 8008774:	4630      	mov	r0, r6
 8008776:	a941      	add	r1, sp, #260	; 0x104
 8008778:	f000 f876 	bl	8008868 <_scanf_chars>
 800877c:	2801      	cmp	r0, #1
 800877e:	d06e      	beq.n	800885e <__ssvfiscanf_r+0x2ea>
 8008780:	2802      	cmp	r0, #2
 8008782:	f47f af1d 	bne.w	80085c0 <__ssvfiscanf_r+0x4c>
 8008786:	e7cf      	b.n	8008728 <__ssvfiscanf_r+0x1b4>
 8008788:	220a      	movs	r2, #10
 800878a:	e7dd      	b.n	8008748 <__ssvfiscanf_r+0x1d4>
 800878c:	2300      	movs	r3, #0
 800878e:	9342      	str	r3, [sp, #264]	; 0x108
 8008790:	2303      	movs	r3, #3
 8008792:	e7de      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 8008794:	2308      	movs	r3, #8
 8008796:	9342      	str	r3, [sp, #264]	; 0x108
 8008798:	2304      	movs	r3, #4
 800879a:	e7da      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 800879c:	4629      	mov	r1, r5
 800879e:	4640      	mov	r0, r8
 80087a0:	f000 f9dc 	bl	8008b5c <__sccl>
 80087a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087a6:	4605      	mov	r5, r0
 80087a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087ac:	9341      	str	r3, [sp, #260]	; 0x104
 80087ae:	2301      	movs	r3, #1
 80087b0:	e7cf      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 80087b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b8:	9341      	str	r3, [sp, #260]	; 0x104
 80087ba:	2300      	movs	r3, #0
 80087bc:	e7c9      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 80087be:	2302      	movs	r3, #2
 80087c0:	e7c7      	b.n	8008752 <__ssvfiscanf_r+0x1de>
 80087c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80087c4:	06c3      	lsls	r3, r0, #27
 80087c6:	f53f aefb 	bmi.w	80085c0 <__ssvfiscanf_r+0x4c>
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80087ce:	1d19      	adds	r1, r3, #4
 80087d0:	9100      	str	r1, [sp, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f010 0f01 	tst.w	r0, #1
 80087d8:	bf14      	ite	ne
 80087da:	801a      	strhne	r2, [r3, #0]
 80087dc:	601a      	streq	r2, [r3, #0]
 80087de:	e6ef      	b.n	80085c0 <__ssvfiscanf_r+0x4c>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087e6:	4798      	blx	r3
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0b6      	beq.n	800875a <__ssvfiscanf_r+0x1e6>
 80087ec:	e79c      	b.n	8008728 <__ssvfiscanf_r+0x1b4>
 80087ee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80087f0:	3201      	adds	r2, #1
 80087f2:	9245      	str	r2, [sp, #276]	; 0x114
 80087f4:	6862      	ldr	r2, [r4, #4]
 80087f6:	3a01      	subs	r2, #1
 80087f8:	2a00      	cmp	r2, #0
 80087fa:	6062      	str	r2, [r4, #4]
 80087fc:	dd02      	ble.n	8008804 <__ssvfiscanf_r+0x290>
 80087fe:	3301      	adds	r3, #1
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	e7ad      	b.n	8008760 <__ssvfiscanf_r+0x1ec>
 8008804:	4621      	mov	r1, r4
 8008806:	4630      	mov	r0, r6
 8008808:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800880a:	4798      	blx	r3
 800880c:	2800      	cmp	r0, #0
 800880e:	d0a7      	beq.n	8008760 <__ssvfiscanf_r+0x1ec>
 8008810:	e78a      	b.n	8008728 <__ssvfiscanf_r+0x1b4>
 8008812:	2b04      	cmp	r3, #4
 8008814:	dc0e      	bgt.n	8008834 <__ssvfiscanf_r+0x2c0>
 8008816:	466b      	mov	r3, sp
 8008818:	4622      	mov	r2, r4
 800881a:	4630      	mov	r0, r6
 800881c:	a941      	add	r1, sp, #260	; 0x104
 800881e:	f000 f87d 	bl	800891c <_scanf_i>
 8008822:	e7ab      	b.n	800877c <__ssvfiscanf_r+0x208>
 8008824:	080084c1 	.word	0x080084c1
 8008828:	0800853b 	.word	0x0800853b
 800882c:	08009fa9 	.word	0x08009fa9
 8008830:	0800a312 	.word	0x0800a312
 8008834:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <__ssvfiscanf_r+0x2f0>)
 8008836:	2b00      	cmp	r3, #0
 8008838:	f43f aec2 	beq.w	80085c0 <__ssvfiscanf_r+0x4c>
 800883c:	466b      	mov	r3, sp
 800883e:	4622      	mov	r2, r4
 8008840:	4630      	mov	r0, r6
 8008842:	a941      	add	r1, sp, #260	; 0x104
 8008844:	f7fc fba6 	bl	8004f94 <_scanf_float>
 8008848:	e798      	b.n	800877c <__ssvfiscanf_r+0x208>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008850:	bf18      	it	ne
 8008852:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008856:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008860:	e7f9      	b.n	8008856 <__ssvfiscanf_r+0x2e2>
 8008862:	bf00      	nop
 8008864:	08004f95 	.word	0x08004f95

08008868 <_scanf_chars>:
 8008868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800886c:	4615      	mov	r5, r2
 800886e:	688a      	ldr	r2, [r1, #8]
 8008870:	4680      	mov	r8, r0
 8008872:	460c      	mov	r4, r1
 8008874:	b932      	cbnz	r2, 8008884 <_scanf_chars+0x1c>
 8008876:	698a      	ldr	r2, [r1, #24]
 8008878:	2a00      	cmp	r2, #0
 800887a:	bf0c      	ite	eq
 800887c:	2201      	moveq	r2, #1
 800887e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008882:	608a      	str	r2, [r1, #8]
 8008884:	2700      	movs	r7, #0
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008918 <_scanf_chars+0xb0>
 800888c:	06d1      	lsls	r1, r2, #27
 800888e:	bf5f      	itttt	pl
 8008890:	681a      	ldrpl	r2, [r3, #0]
 8008892:	1d11      	addpl	r1, r2, #4
 8008894:	6019      	strpl	r1, [r3, #0]
 8008896:	6816      	ldrpl	r6, [r2, #0]
 8008898:	69a0      	ldr	r0, [r4, #24]
 800889a:	b188      	cbz	r0, 80088c0 <_scanf_chars+0x58>
 800889c:	2801      	cmp	r0, #1
 800889e:	d107      	bne.n	80088b0 <_scanf_chars+0x48>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	781a      	ldrb	r2, [r3, #0]
 80088a4:	6963      	ldr	r3, [r4, #20]
 80088a6:	5c9b      	ldrb	r3, [r3, r2]
 80088a8:	b953      	cbnz	r3, 80088c0 <_scanf_chars+0x58>
 80088aa:	2f00      	cmp	r7, #0
 80088ac:	d031      	beq.n	8008912 <_scanf_chars+0xaa>
 80088ae:	e022      	b.n	80088f6 <_scanf_chars+0x8e>
 80088b0:	2802      	cmp	r0, #2
 80088b2:	d120      	bne.n	80088f6 <_scanf_chars+0x8e>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80088bc:	071b      	lsls	r3, r3, #28
 80088be:	d41a      	bmi.n	80088f6 <_scanf_chars+0x8e>
 80088c0:	6823      	ldr	r3, [r4, #0]
 80088c2:	3701      	adds	r7, #1
 80088c4:	06da      	lsls	r2, r3, #27
 80088c6:	bf5e      	ittt	pl
 80088c8:	682b      	ldrpl	r3, [r5, #0]
 80088ca:	781b      	ldrbpl	r3, [r3, #0]
 80088cc:	f806 3b01 	strbpl.w	r3, [r6], #1
 80088d0:	682a      	ldr	r2, [r5, #0]
 80088d2:	686b      	ldr	r3, [r5, #4]
 80088d4:	3201      	adds	r2, #1
 80088d6:	602a      	str	r2, [r5, #0]
 80088d8:	68a2      	ldr	r2, [r4, #8]
 80088da:	3b01      	subs	r3, #1
 80088dc:	3a01      	subs	r2, #1
 80088de:	606b      	str	r3, [r5, #4]
 80088e0:	60a2      	str	r2, [r4, #8]
 80088e2:	b142      	cbz	r2, 80088f6 <_scanf_chars+0x8e>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dcd7      	bgt.n	8008898 <_scanf_chars+0x30>
 80088e8:	4629      	mov	r1, r5
 80088ea:	4640      	mov	r0, r8
 80088ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80088f0:	4798      	blx	r3
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d0d0      	beq.n	8008898 <_scanf_chars+0x30>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	f013 0310 	ands.w	r3, r3, #16
 80088fc:	d105      	bne.n	800890a <_scanf_chars+0xa2>
 80088fe:	68e2      	ldr	r2, [r4, #12]
 8008900:	3201      	adds	r2, #1
 8008902:	60e2      	str	r2, [r4, #12]
 8008904:	69a2      	ldr	r2, [r4, #24]
 8008906:	b102      	cbz	r2, 800890a <_scanf_chars+0xa2>
 8008908:	7033      	strb	r3, [r6, #0]
 800890a:	2000      	movs	r0, #0
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	443b      	add	r3, r7
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008916:	bf00      	nop
 8008918:	08009fa9 	.word	0x08009fa9

0800891c <_scanf_i>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	4698      	mov	r8, r3
 8008924:	4b75      	ldr	r3, [pc, #468]	; (8008afc <_scanf_i+0x1e0>)
 8008926:	b087      	sub	sp, #28
 8008928:	4682      	mov	sl, r0
 800892a:	4616      	mov	r6, r2
 800892c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008930:	ab03      	add	r3, sp, #12
 8008932:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008936:	4b72      	ldr	r3, [pc, #456]	; (8008b00 <_scanf_i+0x1e4>)
 8008938:	69a1      	ldr	r1, [r4, #24]
 800893a:	4a72      	ldr	r2, [pc, #456]	; (8008b04 <_scanf_i+0x1e8>)
 800893c:	4627      	mov	r7, r4
 800893e:	2903      	cmp	r1, #3
 8008940:	bf18      	it	ne
 8008942:	461a      	movne	r2, r3
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	9201      	str	r2, [sp, #4]
 8008948:	1e5a      	subs	r2, r3, #1
 800894a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800894e:	bf81      	itttt	hi
 8008950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008954:	eb03 0905 	addhi.w	r9, r3, r5
 8008958:	f240 135d 	movwhi	r3, #349	; 0x15d
 800895c:	60a3      	strhi	r3, [r4, #8]
 800895e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008962:	bf98      	it	ls
 8008964:	f04f 0900 	movls.w	r9, #0
 8008968:	463d      	mov	r5, r7
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	6831      	ldr	r1, [r6, #0]
 8008976:	ab03      	add	r3, sp, #12
 8008978:	2202      	movs	r2, #2
 800897a:	7809      	ldrb	r1, [r1, #0]
 800897c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008980:	f7fe fe7e 	bl	8007680 <memchr>
 8008984:	b328      	cbz	r0, 80089d2 <_scanf_i+0xb6>
 8008986:	f1bb 0f01 	cmp.w	fp, #1
 800898a:	d159      	bne.n	8008a40 <_scanf_i+0x124>
 800898c:	6862      	ldr	r2, [r4, #4]
 800898e:	b92a      	cbnz	r2, 800899c <_scanf_i+0x80>
 8008990:	2308      	movs	r3, #8
 8008992:	6822      	ldr	r2, [r4, #0]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	68a2      	ldr	r2, [r4, #8]
 80089a6:	1e51      	subs	r1, r2, #1
 80089a8:	60a1      	str	r1, [r4, #8]
 80089aa:	b192      	cbz	r2, 80089d2 <_scanf_i+0xb6>
 80089ac:	6832      	ldr	r2, [r6, #0]
 80089ae:	1c51      	adds	r1, r2, #1
 80089b0:	6031      	str	r1, [r6, #0]
 80089b2:	7812      	ldrb	r2, [r2, #0]
 80089b4:	f805 2b01 	strb.w	r2, [r5], #1
 80089b8:	6872      	ldr	r2, [r6, #4]
 80089ba:	3a01      	subs	r2, #1
 80089bc:	2a00      	cmp	r2, #0
 80089be:	6072      	str	r2, [r6, #4]
 80089c0:	dc07      	bgt.n	80089d2 <_scanf_i+0xb6>
 80089c2:	4631      	mov	r1, r6
 80089c4:	4650      	mov	r0, sl
 80089c6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80089ca:	4790      	blx	r2
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f040 8085 	bne.w	8008adc <_scanf_i+0x1c0>
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	f1bb 0f03 	cmp.w	fp, #3
 80089da:	d1cb      	bne.n	8008974 <_scanf_i+0x58>
 80089dc:	6863      	ldr	r3, [r4, #4]
 80089de:	b90b      	cbnz	r3, 80089e4 <_scanf_i+0xc8>
 80089e0:	230a      	movs	r3, #10
 80089e2:	6063      	str	r3, [r4, #4]
 80089e4:	6863      	ldr	r3, [r4, #4]
 80089e6:	4948      	ldr	r1, [pc, #288]	; (8008b08 <_scanf_i+0x1ec>)
 80089e8:	6960      	ldr	r0, [r4, #20]
 80089ea:	1ac9      	subs	r1, r1, r3
 80089ec:	f000 f8b6 	bl	8008b5c <__sccl>
 80089f0:	f04f 0b00 	mov.w	fp, #0
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d03d      	beq.n	8008a78 <_scanf_i+0x15c>
 80089fc:	6831      	ldr	r1, [r6, #0]
 80089fe:	6960      	ldr	r0, [r4, #20]
 8008a00:	f891 c000 	ldrb.w	ip, [r1]
 8008a04:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d035      	beq.n	8008a78 <_scanf_i+0x15c>
 8008a0c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a10:	d124      	bne.n	8008a5c <_scanf_i+0x140>
 8008a12:	0510      	lsls	r0, r2, #20
 8008a14:	d522      	bpl.n	8008a5c <_scanf_i+0x140>
 8008a16:	f10b 0b01 	add.w	fp, fp, #1
 8008a1a:	f1b9 0f00 	cmp.w	r9, #0
 8008a1e:	d003      	beq.n	8008a28 <_scanf_i+0x10c>
 8008a20:	3301      	adds	r3, #1
 8008a22:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008a26:	60a3      	str	r3, [r4, #8]
 8008a28:	6873      	ldr	r3, [r6, #4]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	6073      	str	r3, [r6, #4]
 8008a30:	dd1b      	ble.n	8008a6a <_scanf_i+0x14e>
 8008a32:	6833      	ldr	r3, [r6, #0]
 8008a34:	3301      	adds	r3, #1
 8008a36:	6033      	str	r3, [r6, #0]
 8008a38:	68a3      	ldr	r3, [r4, #8]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	e7d9      	b.n	80089f4 <_scanf_i+0xd8>
 8008a40:	f1bb 0f02 	cmp.w	fp, #2
 8008a44:	d1ae      	bne.n	80089a4 <_scanf_i+0x88>
 8008a46:	6822      	ldr	r2, [r4, #0]
 8008a48:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008a4c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008a50:	d1bf      	bne.n	80089d2 <_scanf_i+0xb6>
 8008a52:	2310      	movs	r3, #16
 8008a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	e7a2      	b.n	80089a2 <_scanf_i+0x86>
 8008a5c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	780b      	ldrb	r3, [r1, #0]
 8008a64:	f805 3b01 	strb.w	r3, [r5], #1
 8008a68:	e7de      	b.n	8008a28 <_scanf_i+0x10c>
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a72:	4798      	blx	r3
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d0df      	beq.n	8008a38 <_scanf_i+0x11c>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	05db      	lsls	r3, r3, #23
 8008a7c:	d50d      	bpl.n	8008a9a <_scanf_i+0x17e>
 8008a7e:	42bd      	cmp	r5, r7
 8008a80:	d909      	bls.n	8008a96 <_scanf_i+0x17a>
 8008a82:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008a86:	4632      	mov	r2, r6
 8008a88:	4650      	mov	r0, sl
 8008a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a8e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008a92:	4798      	blx	r3
 8008a94:	464d      	mov	r5, r9
 8008a96:	42bd      	cmp	r5, r7
 8008a98:	d02d      	beq.n	8008af6 <_scanf_i+0x1da>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	f012 0210 	ands.w	r2, r2, #16
 8008aa0:	d113      	bne.n	8008aca <_scanf_i+0x1ae>
 8008aa2:	702a      	strb	r2, [r5, #0]
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	6863      	ldr	r3, [r4, #4]
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	9e01      	ldr	r6, [sp, #4]
 8008aac:	47b0      	blx	r6
 8008aae:	6821      	ldr	r1, [r4, #0]
 8008ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab4:	f011 0f20 	tst.w	r1, #32
 8008ab8:	d013      	beq.n	8008ae2 <_scanf_i+0x1c6>
 8008aba:	1d1a      	adds	r2, r3, #4
 8008abc:	f8c8 2000 	str.w	r2, [r8]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6018      	str	r0, [r3, #0]
 8008ac4:	68e3      	ldr	r3, [r4, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60e3      	str	r3, [r4, #12]
 8008aca:	2000      	movs	r0, #0
 8008acc:	1bed      	subs	r5, r5, r7
 8008ace:	44ab      	add	fp, r5
 8008ad0:	6925      	ldr	r5, [r4, #16]
 8008ad2:	445d      	add	r5, fp
 8008ad4:	6125      	str	r5, [r4, #16]
 8008ad6:	b007      	add	sp, #28
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	f04f 0b00 	mov.w	fp, #0
 8008ae0:	e7ca      	b.n	8008a78 <_scanf_i+0x15c>
 8008ae2:	1d1a      	adds	r2, r3, #4
 8008ae4:	f8c8 2000 	str.w	r2, [r8]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f011 0f01 	tst.w	r1, #1
 8008aee:	bf14      	ite	ne
 8008af0:	8018      	strhne	r0, [r3, #0]
 8008af2:	6018      	streq	r0, [r3, #0]
 8008af4:	e7e6      	b.n	8008ac4 <_scanf_i+0x1a8>
 8008af6:	2001      	movs	r0, #1
 8008af8:	e7ed      	b.n	8008ad6 <_scanf_i+0x1ba>
 8008afa:	bf00      	nop
 8008afc:	08009908 	.word	0x08009908
 8008b00:	08008cb1 	.word	0x08008cb1
 8008b04:	08006215 	.word	0x08006215
 8008b08:	0800a336 	.word	0x0800a336

08008b0c <_read_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	4611      	mov	r1, r2
 8008b14:	2200      	movs	r2, #0
 8008b16:	4d05      	ldr	r5, [pc, #20]	; (8008b2c <_read_r+0x20>)
 8008b18:	602a      	str	r2, [r5, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f7f9 fe0b 	bl	8002736 <_read>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_read_r+0x1e>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_read_r+0x1e>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	20000508 	.word	0x20000508

08008b30 <nan>:
 8008b30:	2000      	movs	r0, #0
 8008b32:	4901      	ldr	r1, [pc, #4]	; (8008b38 <nan+0x8>)
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	7ff80000 	.word	0x7ff80000

08008b3c <_sbrk_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4d05      	ldr	r5, [pc, #20]	; (8008b58 <_sbrk_r+0x1c>)
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7f9 fe5e 	bl	8002808 <_sbrk>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_sbrk_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_sbrk_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20000508 	.word	0x20000508

08008b5c <__sccl>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	780b      	ldrb	r3, [r1, #0]
 8008b60:	4604      	mov	r4, r0
 8008b62:	2b5e      	cmp	r3, #94	; 0x5e
 8008b64:	bf13      	iteet	ne
 8008b66:	2200      	movne	r2, #0
 8008b68:	2201      	moveq	r2, #1
 8008b6a:	784b      	ldrbeq	r3, [r1, #1]
 8008b6c:	1c48      	addne	r0, r1, #1
 8008b6e:	bf08      	it	eq
 8008b70:	1c88      	addeq	r0, r1, #2
 8008b72:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008b76:	1e61      	subs	r1, r4, #1
 8008b78:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008b7c:	42a9      	cmp	r1, r5
 8008b7e:	d1fb      	bne.n	8008b78 <__sccl+0x1c>
 8008b80:	b90b      	cbnz	r3, 8008b86 <__sccl+0x2a>
 8008b82:	3801      	subs	r0, #1
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
 8008b86:	f082 0201 	eor.w	r2, r2, #1
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	54e2      	strb	r2, [r4, r3]
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008b94:	292d      	cmp	r1, #45	; 0x2d
 8008b96:	d006      	beq.n	8008ba6 <__sccl+0x4a>
 8008b98:	295d      	cmp	r1, #93	; 0x5d
 8008b9a:	d0f3      	beq.n	8008b84 <__sccl+0x28>
 8008b9c:	b909      	cbnz	r1, 8008ba2 <__sccl+0x46>
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	e7f0      	b.n	8008b84 <__sccl+0x28>
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	e7f1      	b.n	8008b8a <__sccl+0x2e>
 8008ba6:	786e      	ldrb	r6, [r5, #1]
 8008ba8:	2e5d      	cmp	r6, #93	; 0x5d
 8008baa:	d0fa      	beq.n	8008ba2 <__sccl+0x46>
 8008bac:	42b3      	cmp	r3, r6
 8008bae:	dcf8      	bgt.n	8008ba2 <__sccl+0x46>
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	3502      	adds	r5, #2
 8008bb4:	3101      	adds	r1, #1
 8008bb6:	428e      	cmp	r6, r1
 8008bb8:	5462      	strb	r2, [r4, r1]
 8008bba:	dcfb      	bgt.n	8008bb4 <__sccl+0x58>
 8008bbc:	1af1      	subs	r1, r6, r3
 8008bbe:	3901      	subs	r1, #1
 8008bc0:	42b3      	cmp	r3, r6
 8008bc2:	bfa8      	it	ge
 8008bc4:	2100      	movge	r1, #0
 8008bc6:	1c58      	adds	r0, r3, #1
 8008bc8:	1843      	adds	r3, r0, r1
 8008bca:	e7e0      	b.n	8008b8e <__sccl+0x32>

08008bcc <_strtoul_l.constprop.0>:
 8008bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	4686      	mov	lr, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	4f35      	ldr	r7, [pc, #212]	; (8008cac <_strtoul_l.constprop.0+0xe0>)
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bdc:	5de6      	ldrb	r6, [r4, r7]
 8008bde:	f016 0608 	ands.w	r6, r6, #8
 8008be2:	d1f8      	bne.n	8008bd6 <_strtoul_l.constprop.0+0xa>
 8008be4:	2c2d      	cmp	r4, #45	; 0x2d
 8008be6:	d12f      	bne.n	8008c48 <_strtoul_l.constprop.0+0x7c>
 8008be8:	2601      	movs	r6, #1
 8008bea:	782c      	ldrb	r4, [r5, #0]
 8008bec:	1c85      	adds	r5, r0, #2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d057      	beq.n	8008ca2 <_strtoul_l.constprop.0+0xd6>
 8008bf2:	2b10      	cmp	r3, #16
 8008bf4:	d109      	bne.n	8008c0a <_strtoul_l.constprop.0+0x3e>
 8008bf6:	2c30      	cmp	r4, #48	; 0x30
 8008bf8:	d107      	bne.n	8008c0a <_strtoul_l.constprop.0+0x3e>
 8008bfa:	7828      	ldrb	r0, [r5, #0]
 8008bfc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008c00:	2858      	cmp	r0, #88	; 0x58
 8008c02:	d149      	bne.n	8008c98 <_strtoul_l.constprop.0+0xcc>
 8008c04:	2310      	movs	r3, #16
 8008c06:	786c      	ldrb	r4, [r5, #1]
 8008c08:	3502      	adds	r5, #2
 8008c0a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008c0e:	fbb8 f8f3 	udiv	r8, r8, r3
 8008c12:	2700      	movs	r7, #0
 8008c14:	fb03 f908 	mul.w	r9, r3, r8
 8008c18:	4638      	mov	r0, r7
 8008c1a:	ea6f 0909 	mvn.w	r9, r9
 8008c1e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008c22:	f1bc 0f09 	cmp.w	ip, #9
 8008c26:	d814      	bhi.n	8008c52 <_strtoul_l.constprop.0+0x86>
 8008c28:	4664      	mov	r4, ip
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	dd22      	ble.n	8008c74 <_strtoul_l.constprop.0+0xa8>
 8008c2e:	2f00      	cmp	r7, #0
 8008c30:	db1d      	blt.n	8008c6e <_strtoul_l.constprop.0+0xa2>
 8008c32:	4580      	cmp	r8, r0
 8008c34:	d31b      	bcc.n	8008c6e <_strtoul_l.constprop.0+0xa2>
 8008c36:	d101      	bne.n	8008c3c <_strtoul_l.constprop.0+0x70>
 8008c38:	45a1      	cmp	r9, r4
 8008c3a:	db18      	blt.n	8008c6e <_strtoul_l.constprop.0+0xa2>
 8008c3c:	2701      	movs	r7, #1
 8008c3e:	fb00 4003 	mla	r0, r0, r3, r4
 8008c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c46:	e7ea      	b.n	8008c1e <_strtoul_l.constprop.0+0x52>
 8008c48:	2c2b      	cmp	r4, #43	; 0x2b
 8008c4a:	bf04      	itt	eq
 8008c4c:	782c      	ldrbeq	r4, [r5, #0]
 8008c4e:	1c85      	addeq	r5, r0, #2
 8008c50:	e7cd      	b.n	8008bee <_strtoul_l.constprop.0+0x22>
 8008c52:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c56:	f1bc 0f19 	cmp.w	ip, #25
 8008c5a:	d801      	bhi.n	8008c60 <_strtoul_l.constprop.0+0x94>
 8008c5c:	3c37      	subs	r4, #55	; 0x37
 8008c5e:	e7e4      	b.n	8008c2a <_strtoul_l.constprop.0+0x5e>
 8008c60:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c64:	f1bc 0f19 	cmp.w	ip, #25
 8008c68:	d804      	bhi.n	8008c74 <_strtoul_l.constprop.0+0xa8>
 8008c6a:	3c57      	subs	r4, #87	; 0x57
 8008c6c:	e7dd      	b.n	8008c2a <_strtoul_l.constprop.0+0x5e>
 8008c6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c72:	e7e6      	b.n	8008c42 <_strtoul_l.constprop.0+0x76>
 8008c74:	2f00      	cmp	r7, #0
 8008c76:	da07      	bge.n	8008c88 <_strtoul_l.constprop.0+0xbc>
 8008c78:	2322      	movs	r3, #34	; 0x22
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7e:	f8ce 3000 	str.w	r3, [lr]
 8008c82:	b932      	cbnz	r2, 8008c92 <_strtoul_l.constprop.0+0xc6>
 8008c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c88:	b106      	cbz	r6, 8008c8c <_strtoul_l.constprop.0+0xc0>
 8008c8a:	4240      	negs	r0, r0
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	d0f9      	beq.n	8008c84 <_strtoul_l.constprop.0+0xb8>
 8008c90:	b107      	cbz	r7, 8008c94 <_strtoul_l.constprop.0+0xc8>
 8008c92:	1e69      	subs	r1, r5, #1
 8008c94:	6011      	str	r1, [r2, #0]
 8008c96:	e7f5      	b.n	8008c84 <_strtoul_l.constprop.0+0xb8>
 8008c98:	2430      	movs	r4, #48	; 0x30
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1b5      	bne.n	8008c0a <_strtoul_l.constprop.0+0x3e>
 8008c9e:	2308      	movs	r3, #8
 8008ca0:	e7b3      	b.n	8008c0a <_strtoul_l.constprop.0+0x3e>
 8008ca2:	2c30      	cmp	r4, #48	; 0x30
 8008ca4:	d0a9      	beq.n	8008bfa <_strtoul_l.constprop.0+0x2e>
 8008ca6:	230a      	movs	r3, #10
 8008ca8:	e7af      	b.n	8008c0a <_strtoul_l.constprop.0+0x3e>
 8008caa:	bf00      	nop
 8008cac:	08009fa9 	.word	0x08009fa9

08008cb0 <_strtoul_r>:
 8008cb0:	f7ff bf8c 	b.w	8008bcc <_strtoul_l.constprop.0>

08008cb4 <__submore>:
 8008cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d11b      	bne.n	8008cfc <__submore+0x48>
 8008cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008cc8:	f7ff fa2a 	bl	8008120 <_malloc_r>
 8008ccc:	b918      	cbnz	r0, 8008cd6 <__submore+0x22>
 8008cce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cda:	63a3      	str	r3, [r4, #56]	; 0x38
 8008cdc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008ce0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ce2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008ce6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008cea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008cee:	7043      	strb	r3, [r0, #1]
 8008cf0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008cf4:	7003      	strb	r3, [r0, #0]
 8008cf6:	6020      	str	r0, [r4, #0]
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	e7ea      	b.n	8008cd2 <__submore+0x1e>
 8008cfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008cfe:	0077      	lsls	r7, r6, #1
 8008d00:	463a      	mov	r2, r7
 8008d02:	f000 fa29 	bl	8009158 <_realloc_r>
 8008d06:	4605      	mov	r5, r0
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0e0      	beq.n	8008cce <__submore+0x1a>
 8008d0c:	eb00 0806 	add.w	r8, r0, r6
 8008d10:	4601      	mov	r1, r0
 8008d12:	4632      	mov	r2, r6
 8008d14:	4640      	mov	r0, r8
 8008d16:	f7fe fcc1 	bl	800769c <memcpy>
 8008d1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008d1e:	f8c4 8000 	str.w	r8, [r4]
 8008d22:	e7e9      	b.n	8008cf8 <__submore+0x44>

08008d24 <__ascii_wctomb>:
 8008d24:	4603      	mov	r3, r0
 8008d26:	4608      	mov	r0, r1
 8008d28:	b141      	cbz	r1, 8008d3c <__ascii_wctomb+0x18>
 8008d2a:	2aff      	cmp	r2, #255	; 0xff
 8008d2c:	d904      	bls.n	8008d38 <__ascii_wctomb+0x14>
 8008d2e:	228a      	movs	r2, #138	; 0x8a
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d34:	601a      	str	r2, [r3, #0]
 8008d36:	4770      	bx	lr
 8008d38:	2001      	movs	r0, #1
 8008d3a:	700a      	strb	r2, [r1, #0]
 8008d3c:	4770      	bx	lr
	...

08008d40 <__assert_func>:
 8008d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d42:	4614      	mov	r4, r2
 8008d44:	461a      	mov	r2, r3
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <__assert_func+0x2c>)
 8008d48:	4605      	mov	r5, r0
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68d8      	ldr	r0, [r3, #12]
 8008d4e:	b14c      	cbz	r4, 8008d64 <__assert_func+0x24>
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <__assert_func+0x30>)
 8008d52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d56:	9100      	str	r1, [sp, #0]
 8008d58:	462b      	mov	r3, r5
 8008d5a:	4906      	ldr	r1, [pc, #24]	; (8008d74 <__assert_func+0x34>)
 8008d5c:	f000 f9a2 	bl	80090a4 <fiprintf>
 8008d60:	f000 fc40 	bl	80095e4 <abort>
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <__assert_func+0x38>)
 8008d66:	461c      	mov	r4, r3
 8008d68:	e7f3      	b.n	8008d52 <__assert_func+0x12>
 8008d6a:	bf00      	nop
 8008d6c:	2000000c 	.word	0x2000000c
 8008d70:	0800a338 	.word	0x0800a338
 8008d74:	0800a345 	.word	0x0800a345
 8008d78:	0800a373 	.word	0x0800a373

08008d7c <__sflush_r>:
 8008d7c:	898a      	ldrh	r2, [r1, #12]
 8008d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d80:	4605      	mov	r5, r0
 8008d82:	0710      	lsls	r0, r2, #28
 8008d84:	460c      	mov	r4, r1
 8008d86:	d457      	bmi.n	8008e38 <__sflush_r+0xbc>
 8008d88:	684b      	ldr	r3, [r1, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dc04      	bgt.n	8008d98 <__sflush_r+0x1c>
 8008d8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	dc01      	bgt.n	8008d98 <__sflush_r+0x1c>
 8008d94:	2000      	movs	r0, #0
 8008d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d0fa      	beq.n	8008d94 <__sflush_r+0x18>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da4:	682f      	ldr	r7, [r5, #0]
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	d032      	beq.n	8008e10 <__sflush_r+0x94>
 8008daa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	075a      	lsls	r2, r3, #29
 8008db0:	d505      	bpl.n	8008dbe <__sflush_r+0x42>
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	1ac0      	subs	r0, r0, r3
 8008db6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008db8:	b10b      	cbz	r3, 8008dbe <__sflush_r+0x42>
 8008dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dbc:	1ac0      	subs	r0, r0, r3
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	6a21      	ldr	r1, [r4, #32]
 8008dc8:	47b0      	blx	r6
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	d106      	bne.n	8008dde <__sflush_r+0x62>
 8008dd0:	6829      	ldr	r1, [r5, #0]
 8008dd2:	291d      	cmp	r1, #29
 8008dd4:	d82c      	bhi.n	8008e30 <__sflush_r+0xb4>
 8008dd6:	4a29      	ldr	r2, [pc, #164]	; (8008e7c <__sflush_r+0x100>)
 8008dd8:	40ca      	lsrs	r2, r1
 8008dda:	07d6      	lsls	r6, r2, #31
 8008ddc:	d528      	bpl.n	8008e30 <__sflush_r+0xb4>
 8008dde:	2200      	movs	r2, #0
 8008de0:	6062      	str	r2, [r4, #4]
 8008de2:	6922      	ldr	r2, [r4, #16]
 8008de4:	04d9      	lsls	r1, r3, #19
 8008de6:	6022      	str	r2, [r4, #0]
 8008de8:	d504      	bpl.n	8008df4 <__sflush_r+0x78>
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	d101      	bne.n	8008df2 <__sflush_r+0x76>
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	b903      	cbnz	r3, 8008df4 <__sflush_r+0x78>
 8008df2:	6560      	str	r0, [r4, #84]	; 0x54
 8008df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df6:	602f      	str	r7, [r5, #0]
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d0cb      	beq.n	8008d94 <__sflush_r+0x18>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <__sflush_r+0x8e>
 8008e04:	4628      	mov	r0, r5
 8008e06:	f7ff f923 	bl	8008050 <_free_r>
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	6360      	str	r0, [r4, #52]	; 0x34
 8008e0e:	e7c2      	b.n	8008d96 <__sflush_r+0x1a>
 8008e10:	6a21      	ldr	r1, [r4, #32]
 8008e12:	2301      	movs	r3, #1
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b0      	blx	r6
 8008e18:	1c41      	adds	r1, r0, #1
 8008e1a:	d1c7      	bne.n	8008dac <__sflush_r+0x30>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0c4      	beq.n	8008dac <__sflush_r+0x30>
 8008e22:	2b1d      	cmp	r3, #29
 8008e24:	d001      	beq.n	8008e2a <__sflush_r+0xae>
 8008e26:	2b16      	cmp	r3, #22
 8008e28:	d101      	bne.n	8008e2e <__sflush_r+0xb2>
 8008e2a:	602f      	str	r7, [r5, #0]
 8008e2c:	e7b2      	b.n	8008d94 <__sflush_r+0x18>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e34:	81a3      	strh	r3, [r4, #12]
 8008e36:	e7ae      	b.n	8008d96 <__sflush_r+0x1a>
 8008e38:	690f      	ldr	r7, [r1, #16]
 8008e3a:	2f00      	cmp	r7, #0
 8008e3c:	d0aa      	beq.n	8008d94 <__sflush_r+0x18>
 8008e3e:	0793      	lsls	r3, r2, #30
 8008e40:	bf18      	it	ne
 8008e42:	2300      	movne	r3, #0
 8008e44:	680e      	ldr	r6, [r1, #0]
 8008e46:	bf08      	it	eq
 8008e48:	694b      	ldreq	r3, [r1, #20]
 8008e4a:	1bf6      	subs	r6, r6, r7
 8008e4c:	600f      	str	r7, [r1, #0]
 8008e4e:	608b      	str	r3, [r1, #8]
 8008e50:	2e00      	cmp	r6, #0
 8008e52:	dd9f      	ble.n	8008d94 <__sflush_r+0x18>
 8008e54:	4633      	mov	r3, r6
 8008e56:	463a      	mov	r2, r7
 8008e58:	4628      	mov	r0, r5
 8008e5a:	6a21      	ldr	r1, [r4, #32]
 8008e5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008e60:	47e0      	blx	ip
 8008e62:	2800      	cmp	r0, #0
 8008e64:	dc06      	bgt.n	8008e74 <__sflush_r+0xf8>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	e790      	b.n	8008d96 <__sflush_r+0x1a>
 8008e74:	4407      	add	r7, r0
 8008e76:	1a36      	subs	r6, r6, r0
 8008e78:	e7ea      	b.n	8008e50 <__sflush_r+0xd4>
 8008e7a:	bf00      	nop
 8008e7c:	20400001 	.word	0x20400001

08008e80 <_fflush_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	4605      	mov	r5, r0
 8008e86:	460c      	mov	r4, r1
 8008e88:	b913      	cbnz	r3, 8008e90 <_fflush_r+0x10>
 8008e8a:	2500      	movs	r5, #0
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	b118      	cbz	r0, 8008e9a <_fflush_r+0x1a>
 8008e92:	6983      	ldr	r3, [r0, #24]
 8008e94:	b90b      	cbnz	r3, 8008e9a <_fflush_r+0x1a>
 8008e96:	f000 f887 	bl	8008fa8 <__sinit>
 8008e9a:	4b14      	ldr	r3, [pc, #80]	; (8008eec <_fflush_r+0x6c>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d11b      	bne.n	8008ed8 <_fflush_r+0x58>
 8008ea0:	686c      	ldr	r4, [r5, #4]
 8008ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0ef      	beq.n	8008e8a <_fflush_r+0xa>
 8008eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eac:	07d0      	lsls	r0, r2, #31
 8008eae:	d404      	bmi.n	8008eba <_fflush_r+0x3a>
 8008eb0:	0599      	lsls	r1, r3, #22
 8008eb2:	d402      	bmi.n	8008eba <_fflush_r+0x3a>
 8008eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb6:	f000 f927 	bl	8009108 <__retarget_lock_acquire_recursive>
 8008eba:	4628      	mov	r0, r5
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	f7ff ff5d 	bl	8008d7c <__sflush_r>
 8008ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	07da      	lsls	r2, r3, #31
 8008ec8:	d4e0      	bmi.n	8008e8c <_fflush_r+0xc>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	059b      	lsls	r3, r3, #22
 8008ece:	d4dd      	bmi.n	8008e8c <_fflush_r+0xc>
 8008ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed2:	f000 f91a 	bl	800910a <__retarget_lock_release_recursive>
 8008ed6:	e7d9      	b.n	8008e8c <_fflush_r+0xc>
 8008ed8:	4b05      	ldr	r3, [pc, #20]	; (8008ef0 <_fflush_r+0x70>)
 8008eda:	429c      	cmp	r4, r3
 8008edc:	d101      	bne.n	8008ee2 <_fflush_r+0x62>
 8008ede:	68ac      	ldr	r4, [r5, #8]
 8008ee0:	e7df      	b.n	8008ea2 <_fflush_r+0x22>
 8008ee2:	4b04      	ldr	r3, [pc, #16]	; (8008ef4 <_fflush_r+0x74>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	bf08      	it	eq
 8008ee8:	68ec      	ldreq	r4, [r5, #12]
 8008eea:	e7da      	b.n	8008ea2 <_fflush_r+0x22>
 8008eec:	0800a394 	.word	0x0800a394
 8008ef0:	0800a3b4 	.word	0x0800a3b4
 8008ef4:	0800a374 	.word	0x0800a374

08008ef8 <std>:
 8008ef8:	2300      	movs	r3, #0
 8008efa:	b510      	push	{r4, lr}
 8008efc:	4604      	mov	r4, r0
 8008efe:	e9c0 3300 	strd	r3, r3, [r0]
 8008f02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f06:	6083      	str	r3, [r0, #8]
 8008f08:	8181      	strh	r1, [r0, #12]
 8008f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f0c:	81c2      	strh	r2, [r0, #14]
 8008f0e:	6183      	str	r3, [r0, #24]
 8008f10:	4619      	mov	r1, r3
 8008f12:	2208      	movs	r2, #8
 8008f14:	305c      	adds	r0, #92	; 0x5c
 8008f16:	f7fb fbd5 	bl	80046c4 <memset>
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <std+0x38>)
 8008f1c:	6224      	str	r4, [r4, #32]
 8008f1e:	6263      	str	r3, [r4, #36]	; 0x24
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <std+0x3c>)
 8008f22:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f24:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <std+0x40>)
 8008f26:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f28:	4b04      	ldr	r3, [pc, #16]	; (8008f3c <std+0x44>)
 8008f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f2c:	bd10      	pop	{r4, pc}
 8008f2e:	bf00      	nop
 8008f30:	0800544d 	.word	0x0800544d
 8008f34:	08005473 	.word	0x08005473
 8008f38:	080054ab 	.word	0x080054ab
 8008f3c:	080054cf 	.word	0x080054cf

08008f40 <_cleanup_r>:
 8008f40:	4901      	ldr	r1, [pc, #4]	; (8008f48 <_cleanup_r+0x8>)
 8008f42:	f000 b8c1 	b.w	80090c8 <_fwalk_reent>
 8008f46:	bf00      	nop
 8008f48:	08008e81 	.word	0x08008e81

08008f4c <__sfmoreglue>:
 8008f4c:	2268      	movs	r2, #104	; 0x68
 8008f4e:	b570      	push	{r4, r5, r6, lr}
 8008f50:	1e4d      	subs	r5, r1, #1
 8008f52:	4355      	muls	r5, r2
 8008f54:	460e      	mov	r6, r1
 8008f56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f5a:	f7ff f8e1 	bl	8008120 <_malloc_r>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	b140      	cbz	r0, 8008f74 <__sfmoreglue+0x28>
 8008f62:	2100      	movs	r1, #0
 8008f64:	e9c0 1600 	strd	r1, r6, [r0]
 8008f68:	300c      	adds	r0, #12
 8008f6a:	60a0      	str	r0, [r4, #8]
 8008f6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f70:	f7fb fba8 	bl	80046c4 <memset>
 8008f74:	4620      	mov	r0, r4
 8008f76:	bd70      	pop	{r4, r5, r6, pc}

08008f78 <__sfp_lock_acquire>:
 8008f78:	4801      	ldr	r0, [pc, #4]	; (8008f80 <__sfp_lock_acquire+0x8>)
 8008f7a:	f000 b8c5 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8008f7e:	bf00      	nop
 8008f80:	2000050d 	.word	0x2000050d

08008f84 <__sfp_lock_release>:
 8008f84:	4801      	ldr	r0, [pc, #4]	; (8008f8c <__sfp_lock_release+0x8>)
 8008f86:	f000 b8c0 	b.w	800910a <__retarget_lock_release_recursive>
 8008f8a:	bf00      	nop
 8008f8c:	2000050d 	.word	0x2000050d

08008f90 <__sinit_lock_acquire>:
 8008f90:	4801      	ldr	r0, [pc, #4]	; (8008f98 <__sinit_lock_acquire+0x8>)
 8008f92:	f000 b8b9 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8008f96:	bf00      	nop
 8008f98:	2000050e 	.word	0x2000050e

08008f9c <__sinit_lock_release>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__sinit_lock_release+0x8>)
 8008f9e:	f000 b8b4 	b.w	800910a <__retarget_lock_release_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	2000050e 	.word	0x2000050e

08008fa8 <__sinit>:
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	4604      	mov	r4, r0
 8008fac:	f7ff fff0 	bl	8008f90 <__sinit_lock_acquire>
 8008fb0:	69a3      	ldr	r3, [r4, #24]
 8008fb2:	b11b      	cbz	r3, 8008fbc <__sinit+0x14>
 8008fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fb8:	f7ff bff0 	b.w	8008f9c <__sinit_lock_release>
 8008fbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fc0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fc2:	4b13      	ldr	r3, [pc, #76]	; (8009010 <__sinit+0x68>)
 8008fc4:	4a13      	ldr	r2, [pc, #76]	; (8009014 <__sinit+0x6c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	bf08      	it	eq
 8008fce:	2301      	moveq	r3, #1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	bf08      	it	eq
 8008fd4:	61a3      	streq	r3, [r4, #24]
 8008fd6:	f000 f81f 	bl	8009018 <__sfp>
 8008fda:	6060      	str	r0, [r4, #4]
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 f81b 	bl	8009018 <__sfp>
 8008fe2:	60a0      	str	r0, [r4, #8]
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f000 f817 	bl	8009018 <__sfp>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2104      	movs	r1, #4
 8008fee:	60e0      	str	r0, [r4, #12]
 8008ff0:	6860      	ldr	r0, [r4, #4]
 8008ff2:	f7ff ff81 	bl	8008ef8 <std>
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	2109      	movs	r1, #9
 8008ffa:	68a0      	ldr	r0, [r4, #8]
 8008ffc:	f7ff ff7c 	bl	8008ef8 <std>
 8009000:	2202      	movs	r2, #2
 8009002:	2112      	movs	r1, #18
 8009004:	68e0      	ldr	r0, [r4, #12]
 8009006:	f7ff ff77 	bl	8008ef8 <std>
 800900a:	2301      	movs	r3, #1
 800900c:	61a3      	str	r3, [r4, #24]
 800900e:	e7d1      	b.n	8008fb4 <__sinit+0xc>
 8009010:	08009f1c 	.word	0x08009f1c
 8009014:	08008f41 	.word	0x08008f41

08009018 <__sfp>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	4607      	mov	r7, r0
 800901c:	f7ff ffac 	bl	8008f78 <__sfp_lock_acquire>
 8009020:	4b1e      	ldr	r3, [pc, #120]	; (800909c <__sfp+0x84>)
 8009022:	681e      	ldr	r6, [r3, #0]
 8009024:	69b3      	ldr	r3, [r6, #24]
 8009026:	b913      	cbnz	r3, 800902e <__sfp+0x16>
 8009028:	4630      	mov	r0, r6
 800902a:	f7ff ffbd 	bl	8008fa8 <__sinit>
 800902e:	3648      	adds	r6, #72	; 0x48
 8009030:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009034:	3b01      	subs	r3, #1
 8009036:	d503      	bpl.n	8009040 <__sfp+0x28>
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	b30b      	cbz	r3, 8009080 <__sfp+0x68>
 800903c:	6836      	ldr	r6, [r6, #0]
 800903e:	e7f7      	b.n	8009030 <__sfp+0x18>
 8009040:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009044:	b9d5      	cbnz	r5, 800907c <__sfp+0x64>
 8009046:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <__sfp+0x88>)
 8009048:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800904c:	60e3      	str	r3, [r4, #12]
 800904e:	6665      	str	r5, [r4, #100]	; 0x64
 8009050:	f000 f859 	bl	8009106 <__retarget_lock_init_recursive>
 8009054:	f7ff ff96 	bl	8008f84 <__sfp_lock_release>
 8009058:	2208      	movs	r2, #8
 800905a:	4629      	mov	r1, r5
 800905c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009064:	6025      	str	r5, [r4, #0]
 8009066:	61a5      	str	r5, [r4, #24]
 8009068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800906c:	f7fb fb2a 	bl	80046c4 <memset>
 8009070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009078:	4620      	mov	r0, r4
 800907a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907c:	3468      	adds	r4, #104	; 0x68
 800907e:	e7d9      	b.n	8009034 <__sfp+0x1c>
 8009080:	2104      	movs	r1, #4
 8009082:	4638      	mov	r0, r7
 8009084:	f7ff ff62 	bl	8008f4c <__sfmoreglue>
 8009088:	4604      	mov	r4, r0
 800908a:	6030      	str	r0, [r6, #0]
 800908c:	2800      	cmp	r0, #0
 800908e:	d1d5      	bne.n	800903c <__sfp+0x24>
 8009090:	f7ff ff78 	bl	8008f84 <__sfp_lock_release>
 8009094:	230c      	movs	r3, #12
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	e7ee      	b.n	8009078 <__sfp+0x60>
 800909a:	bf00      	nop
 800909c:	08009f1c 	.word	0x08009f1c
 80090a0:	ffff0001 	.word	0xffff0001

080090a4 <fiprintf>:
 80090a4:	b40e      	push	{r1, r2, r3}
 80090a6:	b503      	push	{r0, r1, lr}
 80090a8:	4601      	mov	r1, r0
 80090aa:	ab03      	add	r3, sp, #12
 80090ac:	4805      	ldr	r0, [pc, #20]	; (80090c4 <fiprintf+0x20>)
 80090ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b2:	6800      	ldr	r0, [r0, #0]
 80090b4:	9301      	str	r3, [sp, #4]
 80090b6:	f000 f8a5 	bl	8009204 <_vfiprintf_r>
 80090ba:	b002      	add	sp, #8
 80090bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090c0:	b003      	add	sp, #12
 80090c2:	4770      	bx	lr
 80090c4:	2000000c 	.word	0x2000000c

080090c8 <_fwalk_reent>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	4606      	mov	r6, r0
 80090ce:	4688      	mov	r8, r1
 80090d0:	2700      	movs	r7, #0
 80090d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090da:	f1b9 0901 	subs.w	r9, r9, #1
 80090de:	d505      	bpl.n	80090ec <_fwalk_reent+0x24>
 80090e0:	6824      	ldr	r4, [r4, #0]
 80090e2:	2c00      	cmp	r4, #0
 80090e4:	d1f7      	bne.n	80090d6 <_fwalk_reent+0xe>
 80090e6:	4638      	mov	r0, r7
 80090e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ec:	89ab      	ldrh	r3, [r5, #12]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d907      	bls.n	8009102 <_fwalk_reent+0x3a>
 80090f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f6:	3301      	adds	r3, #1
 80090f8:	d003      	beq.n	8009102 <_fwalk_reent+0x3a>
 80090fa:	4629      	mov	r1, r5
 80090fc:	4630      	mov	r0, r6
 80090fe:	47c0      	blx	r8
 8009100:	4307      	orrs	r7, r0
 8009102:	3568      	adds	r5, #104	; 0x68
 8009104:	e7e9      	b.n	80090da <_fwalk_reent+0x12>

08009106 <__retarget_lock_init_recursive>:
 8009106:	4770      	bx	lr

08009108 <__retarget_lock_acquire_recursive>:
 8009108:	4770      	bx	lr

0800910a <__retarget_lock_release_recursive>:
 800910a:	4770      	bx	lr

0800910c <memmove>:
 800910c:	4288      	cmp	r0, r1
 800910e:	b510      	push	{r4, lr}
 8009110:	eb01 0402 	add.w	r4, r1, r2
 8009114:	d902      	bls.n	800911c <memmove+0x10>
 8009116:	4284      	cmp	r4, r0
 8009118:	4623      	mov	r3, r4
 800911a:	d807      	bhi.n	800912c <memmove+0x20>
 800911c:	1e43      	subs	r3, r0, #1
 800911e:	42a1      	cmp	r1, r4
 8009120:	d008      	beq.n	8009134 <memmove+0x28>
 8009122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800912a:	e7f8      	b.n	800911e <memmove+0x12>
 800912c:	4601      	mov	r1, r0
 800912e:	4402      	add	r2, r0
 8009130:	428a      	cmp	r2, r1
 8009132:	d100      	bne.n	8009136 <memmove+0x2a>
 8009134:	bd10      	pop	{r4, pc}
 8009136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800913a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800913e:	e7f7      	b.n	8009130 <memmove+0x24>

08009140 <__malloc_lock>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__malloc_lock+0x8>)
 8009142:	f7ff bfe1 	b.w	8009108 <__retarget_lock_acquire_recursive>
 8009146:	bf00      	nop
 8009148:	2000050c 	.word	0x2000050c

0800914c <__malloc_unlock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_unlock+0x8>)
 800914e:	f7ff bfdc 	b.w	800910a <__retarget_lock_release_recursive>
 8009152:	bf00      	nop
 8009154:	2000050c 	.word	0x2000050c

08009158 <_realloc_r>:
 8009158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800915c:	4680      	mov	r8, r0
 800915e:	4614      	mov	r4, r2
 8009160:	460e      	mov	r6, r1
 8009162:	b921      	cbnz	r1, 800916e <_realloc_r+0x16>
 8009164:	4611      	mov	r1, r2
 8009166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800916a:	f7fe bfd9 	b.w	8008120 <_malloc_r>
 800916e:	b92a      	cbnz	r2, 800917c <_realloc_r+0x24>
 8009170:	f7fe ff6e 	bl	8008050 <_free_r>
 8009174:	4625      	mov	r5, r4
 8009176:	4628      	mov	r0, r5
 8009178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800917c:	f000 fa9e 	bl	80096bc <_malloc_usable_size_r>
 8009180:	4284      	cmp	r4, r0
 8009182:	4607      	mov	r7, r0
 8009184:	d802      	bhi.n	800918c <_realloc_r+0x34>
 8009186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800918a:	d812      	bhi.n	80091b2 <_realloc_r+0x5a>
 800918c:	4621      	mov	r1, r4
 800918e:	4640      	mov	r0, r8
 8009190:	f7fe ffc6 	bl	8008120 <_malloc_r>
 8009194:	4605      	mov	r5, r0
 8009196:	2800      	cmp	r0, #0
 8009198:	d0ed      	beq.n	8009176 <_realloc_r+0x1e>
 800919a:	42bc      	cmp	r4, r7
 800919c:	4622      	mov	r2, r4
 800919e:	4631      	mov	r1, r6
 80091a0:	bf28      	it	cs
 80091a2:	463a      	movcs	r2, r7
 80091a4:	f7fe fa7a 	bl	800769c <memcpy>
 80091a8:	4631      	mov	r1, r6
 80091aa:	4640      	mov	r0, r8
 80091ac:	f7fe ff50 	bl	8008050 <_free_r>
 80091b0:	e7e1      	b.n	8009176 <_realloc_r+0x1e>
 80091b2:	4635      	mov	r5, r6
 80091b4:	e7df      	b.n	8009176 <_realloc_r+0x1e>

080091b6 <__sfputc_r>:
 80091b6:	6893      	ldr	r3, [r2, #8]
 80091b8:	b410      	push	{r4}
 80091ba:	3b01      	subs	r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	6093      	str	r3, [r2, #8]
 80091c0:	da07      	bge.n	80091d2 <__sfputc_r+0x1c>
 80091c2:	6994      	ldr	r4, [r2, #24]
 80091c4:	42a3      	cmp	r3, r4
 80091c6:	db01      	blt.n	80091cc <__sfputc_r+0x16>
 80091c8:	290a      	cmp	r1, #10
 80091ca:	d102      	bne.n	80091d2 <__sfputc_r+0x1c>
 80091cc:	bc10      	pop	{r4}
 80091ce:	f000 b949 	b.w	8009464 <__swbuf_r>
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	1c58      	adds	r0, r3, #1
 80091d6:	6010      	str	r0, [r2, #0]
 80091d8:	7019      	strb	r1, [r3, #0]
 80091da:	4608      	mov	r0, r1
 80091dc:	bc10      	pop	{r4}
 80091de:	4770      	bx	lr

080091e0 <__sfputs_r>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	4614      	mov	r4, r2
 80091e8:	18d5      	adds	r5, r2, r3
 80091ea:	42ac      	cmp	r4, r5
 80091ec:	d101      	bne.n	80091f2 <__sfputs_r+0x12>
 80091ee:	2000      	movs	r0, #0
 80091f0:	e007      	b.n	8009202 <__sfputs_r+0x22>
 80091f2:	463a      	mov	r2, r7
 80091f4:	4630      	mov	r0, r6
 80091f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091fa:	f7ff ffdc 	bl	80091b6 <__sfputc_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	d1f3      	bne.n	80091ea <__sfputs_r+0xa>
 8009202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009204 <_vfiprintf_r>:
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	460d      	mov	r5, r1
 800920a:	4614      	mov	r4, r2
 800920c:	4698      	mov	r8, r3
 800920e:	4606      	mov	r6, r0
 8009210:	b09d      	sub	sp, #116	; 0x74
 8009212:	b118      	cbz	r0, 800921c <_vfiprintf_r+0x18>
 8009214:	6983      	ldr	r3, [r0, #24]
 8009216:	b90b      	cbnz	r3, 800921c <_vfiprintf_r+0x18>
 8009218:	f7ff fec6 	bl	8008fa8 <__sinit>
 800921c:	4b89      	ldr	r3, [pc, #548]	; (8009444 <_vfiprintf_r+0x240>)
 800921e:	429d      	cmp	r5, r3
 8009220:	d11b      	bne.n	800925a <_vfiprintf_r+0x56>
 8009222:	6875      	ldr	r5, [r6, #4]
 8009224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009226:	07d9      	lsls	r1, r3, #31
 8009228:	d405      	bmi.n	8009236 <_vfiprintf_r+0x32>
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	059a      	lsls	r2, r3, #22
 800922e:	d402      	bmi.n	8009236 <_vfiprintf_r+0x32>
 8009230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009232:	f7ff ff69 	bl	8009108 <__retarget_lock_acquire_recursive>
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	071b      	lsls	r3, r3, #28
 800923a:	d501      	bpl.n	8009240 <_vfiprintf_r+0x3c>
 800923c:	692b      	ldr	r3, [r5, #16]
 800923e:	b9eb      	cbnz	r3, 800927c <_vfiprintf_r+0x78>
 8009240:	4629      	mov	r1, r5
 8009242:	4630      	mov	r0, r6
 8009244:	f000 f960 	bl	8009508 <__swsetup_r>
 8009248:	b1c0      	cbz	r0, 800927c <_vfiprintf_r+0x78>
 800924a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800924c:	07dc      	lsls	r4, r3, #31
 800924e:	d50e      	bpl.n	800926e <_vfiprintf_r+0x6a>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009254:	b01d      	add	sp, #116	; 0x74
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	4b7b      	ldr	r3, [pc, #492]	; (8009448 <_vfiprintf_r+0x244>)
 800925c:	429d      	cmp	r5, r3
 800925e:	d101      	bne.n	8009264 <_vfiprintf_r+0x60>
 8009260:	68b5      	ldr	r5, [r6, #8]
 8009262:	e7df      	b.n	8009224 <_vfiprintf_r+0x20>
 8009264:	4b79      	ldr	r3, [pc, #484]	; (800944c <_vfiprintf_r+0x248>)
 8009266:	429d      	cmp	r5, r3
 8009268:	bf08      	it	eq
 800926a:	68f5      	ldreq	r5, [r6, #12]
 800926c:	e7da      	b.n	8009224 <_vfiprintf_r+0x20>
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	0598      	lsls	r0, r3, #22
 8009272:	d4ed      	bmi.n	8009250 <_vfiprintf_r+0x4c>
 8009274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009276:	f7ff ff48 	bl	800910a <__retarget_lock_release_recursive>
 800927a:	e7e9      	b.n	8009250 <_vfiprintf_r+0x4c>
 800927c:	2300      	movs	r3, #0
 800927e:	9309      	str	r3, [sp, #36]	; 0x24
 8009280:	2320      	movs	r3, #32
 8009282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009286:	2330      	movs	r3, #48	; 0x30
 8009288:	f04f 0901 	mov.w	r9, #1
 800928c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009290:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009450 <_vfiprintf_r+0x24c>
 8009294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009298:	4623      	mov	r3, r4
 800929a:	469a      	mov	sl, r3
 800929c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a0:	b10a      	cbz	r2, 80092a6 <_vfiprintf_r+0xa2>
 80092a2:	2a25      	cmp	r2, #37	; 0x25
 80092a4:	d1f9      	bne.n	800929a <_vfiprintf_r+0x96>
 80092a6:	ebba 0b04 	subs.w	fp, sl, r4
 80092aa:	d00b      	beq.n	80092c4 <_vfiprintf_r+0xc0>
 80092ac:	465b      	mov	r3, fp
 80092ae:	4622      	mov	r2, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ff94 	bl	80091e0 <__sfputs_r>
 80092b8:	3001      	adds	r0, #1
 80092ba:	f000 80aa 	beq.w	8009412 <_vfiprintf_r+0x20e>
 80092be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c0:	445a      	add	r2, fp
 80092c2:	9209      	str	r2, [sp, #36]	; 0x24
 80092c4:	f89a 3000 	ldrb.w	r3, [sl]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80a2 	beq.w	8009412 <_vfiprintf_r+0x20e>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d8:	f10a 0a01 	add.w	sl, sl, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092e4:	931a      	str	r3, [sp, #104]	; 0x68
 80092e6:	4654      	mov	r4, sl
 80092e8:	2205      	movs	r2, #5
 80092ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ee:	4858      	ldr	r0, [pc, #352]	; (8009450 <_vfiprintf_r+0x24c>)
 80092f0:	f7fe f9c6 	bl	8007680 <memchr>
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	b9d8      	cbnz	r0, 8009330 <_vfiprintf_r+0x12c>
 80092f8:	06d1      	lsls	r1, r2, #27
 80092fa:	bf44      	itt	mi
 80092fc:	2320      	movmi	r3, #32
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009302:	0713      	lsls	r3, r2, #28
 8009304:	bf44      	itt	mi
 8009306:	232b      	movmi	r3, #43	; 0x2b
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930c:	f89a 3000 	ldrb.w	r3, [sl]
 8009310:	2b2a      	cmp	r3, #42	; 0x2a
 8009312:	d015      	beq.n	8009340 <_vfiprintf_r+0x13c>
 8009314:	4654      	mov	r4, sl
 8009316:	2000      	movs	r0, #0
 8009318:	f04f 0c0a 	mov.w	ip, #10
 800931c:	9a07      	ldr	r2, [sp, #28]
 800931e:	4621      	mov	r1, r4
 8009320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009324:	3b30      	subs	r3, #48	; 0x30
 8009326:	2b09      	cmp	r3, #9
 8009328:	d94e      	bls.n	80093c8 <_vfiprintf_r+0x1c4>
 800932a:	b1b0      	cbz	r0, 800935a <_vfiprintf_r+0x156>
 800932c:	9207      	str	r2, [sp, #28]
 800932e:	e014      	b.n	800935a <_vfiprintf_r+0x156>
 8009330:	eba0 0308 	sub.w	r3, r0, r8
 8009334:	fa09 f303 	lsl.w	r3, r9, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	46a2      	mov	sl, r4
 800933c:	9304      	str	r3, [sp, #16]
 800933e:	e7d2      	b.n	80092e6 <_vfiprintf_r+0xe2>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	1d19      	adds	r1, r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bfbb      	ittet	lt
 800934c:	425b      	neglt	r3, r3
 800934e:	f042 0202 	orrlt.w	r2, r2, #2
 8009352:	9307      	strge	r3, [sp, #28]
 8009354:	9307      	strlt	r3, [sp, #28]
 8009356:	bfb8      	it	lt
 8009358:	9204      	strlt	r2, [sp, #16]
 800935a:	7823      	ldrb	r3, [r4, #0]
 800935c:	2b2e      	cmp	r3, #46	; 0x2e
 800935e:	d10c      	bne.n	800937a <_vfiprintf_r+0x176>
 8009360:	7863      	ldrb	r3, [r4, #1]
 8009362:	2b2a      	cmp	r3, #42	; 0x2a
 8009364:	d135      	bne.n	80093d2 <_vfiprintf_r+0x1ce>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	3402      	adds	r4, #2
 800936a:	1d1a      	adds	r2, r3, #4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	9203      	str	r2, [sp, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	bfb8      	it	lt
 8009374:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009454 <_vfiprintf_r+0x250>
 800937e:	2203      	movs	r2, #3
 8009380:	4650      	mov	r0, sl
 8009382:	7821      	ldrb	r1, [r4, #0]
 8009384:	f7fe f97c 	bl	8007680 <memchr>
 8009388:	b140      	cbz	r0, 800939c <_vfiprintf_r+0x198>
 800938a:	2340      	movs	r3, #64	; 0x40
 800938c:	eba0 000a 	sub.w	r0, r0, sl
 8009390:	fa03 f000 	lsl.w	r0, r3, r0
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	3401      	adds	r4, #1
 8009398:	4303      	orrs	r3, r0
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a0:	2206      	movs	r2, #6
 80093a2:	482d      	ldr	r0, [pc, #180]	; (8009458 <_vfiprintf_r+0x254>)
 80093a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093a8:	f7fe f96a 	bl	8007680 <memchr>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d03f      	beq.n	8009430 <_vfiprintf_r+0x22c>
 80093b0:	4b2a      	ldr	r3, [pc, #168]	; (800945c <_vfiprintf_r+0x258>)
 80093b2:	bb1b      	cbnz	r3, 80093fc <_vfiprintf_r+0x1f8>
 80093b4:	9b03      	ldr	r3, [sp, #12]
 80093b6:	3307      	adds	r3, #7
 80093b8:	f023 0307 	bic.w	r3, r3, #7
 80093bc:	3308      	adds	r3, #8
 80093be:	9303      	str	r3, [sp, #12]
 80093c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c2:	443b      	add	r3, r7
 80093c4:	9309      	str	r3, [sp, #36]	; 0x24
 80093c6:	e767      	b.n	8009298 <_vfiprintf_r+0x94>
 80093c8:	460c      	mov	r4, r1
 80093ca:	2001      	movs	r0, #1
 80093cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80093d0:	e7a5      	b.n	800931e <_vfiprintf_r+0x11a>
 80093d2:	2300      	movs	r3, #0
 80093d4:	f04f 0c0a 	mov.w	ip, #10
 80093d8:	4619      	mov	r1, r3
 80093da:	3401      	adds	r4, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	4620      	mov	r0, r4
 80093e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e4:	3a30      	subs	r2, #48	; 0x30
 80093e6:	2a09      	cmp	r2, #9
 80093e8:	d903      	bls.n	80093f2 <_vfiprintf_r+0x1ee>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0c5      	beq.n	800937a <_vfiprintf_r+0x176>
 80093ee:	9105      	str	r1, [sp, #20]
 80093f0:	e7c3      	b.n	800937a <_vfiprintf_r+0x176>
 80093f2:	4604      	mov	r4, r0
 80093f4:	2301      	movs	r3, #1
 80093f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80093fa:	e7f0      	b.n	80093de <_vfiprintf_r+0x1da>
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	462a      	mov	r2, r5
 8009402:	4630      	mov	r0, r6
 8009404:	4b16      	ldr	r3, [pc, #88]	; (8009460 <_vfiprintf_r+0x25c>)
 8009406:	a904      	add	r1, sp, #16
 8009408:	f7fb fa02 	bl	8004810 <_printf_float>
 800940c:	4607      	mov	r7, r0
 800940e:	1c78      	adds	r0, r7, #1
 8009410:	d1d6      	bne.n	80093c0 <_vfiprintf_r+0x1bc>
 8009412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009414:	07d9      	lsls	r1, r3, #31
 8009416:	d405      	bmi.n	8009424 <_vfiprintf_r+0x220>
 8009418:	89ab      	ldrh	r3, [r5, #12]
 800941a:	059a      	lsls	r2, r3, #22
 800941c:	d402      	bmi.n	8009424 <_vfiprintf_r+0x220>
 800941e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009420:	f7ff fe73 	bl	800910a <__retarget_lock_release_recursive>
 8009424:	89ab      	ldrh	r3, [r5, #12]
 8009426:	065b      	lsls	r3, r3, #25
 8009428:	f53f af12 	bmi.w	8009250 <_vfiprintf_r+0x4c>
 800942c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800942e:	e711      	b.n	8009254 <_vfiprintf_r+0x50>
 8009430:	ab03      	add	r3, sp, #12
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	462a      	mov	r2, r5
 8009436:	4630      	mov	r0, r6
 8009438:	4b09      	ldr	r3, [pc, #36]	; (8009460 <_vfiprintf_r+0x25c>)
 800943a:	a904      	add	r1, sp, #16
 800943c:	f7fb fc84 	bl	8004d48 <_printf_i>
 8009440:	e7e4      	b.n	800940c <_vfiprintf_r+0x208>
 8009442:	bf00      	nop
 8009444:	0800a394 	.word	0x0800a394
 8009448:	0800a3b4 	.word	0x0800a3b4
 800944c:	0800a374 	.word	0x0800a374
 8009450:	0800a30c 	.word	0x0800a30c
 8009454:	0800a312 	.word	0x0800a312
 8009458:	0800a316 	.word	0x0800a316
 800945c:	08004811 	.word	0x08004811
 8009460:	080091e1 	.word	0x080091e1

08009464 <__swbuf_r>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	4614      	mov	r4, r2
 800946a:	4605      	mov	r5, r0
 800946c:	b118      	cbz	r0, 8009476 <__swbuf_r+0x12>
 800946e:	6983      	ldr	r3, [r0, #24]
 8009470:	b90b      	cbnz	r3, 8009476 <__swbuf_r+0x12>
 8009472:	f7ff fd99 	bl	8008fa8 <__sinit>
 8009476:	4b21      	ldr	r3, [pc, #132]	; (80094fc <__swbuf_r+0x98>)
 8009478:	429c      	cmp	r4, r3
 800947a:	d12b      	bne.n	80094d4 <__swbuf_r+0x70>
 800947c:	686c      	ldr	r4, [r5, #4]
 800947e:	69a3      	ldr	r3, [r4, #24]
 8009480:	60a3      	str	r3, [r4, #8]
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	071a      	lsls	r2, r3, #28
 8009486:	d52f      	bpl.n	80094e8 <__swbuf_r+0x84>
 8009488:	6923      	ldr	r3, [r4, #16]
 800948a:	b36b      	cbz	r3, 80094e8 <__swbuf_r+0x84>
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	6820      	ldr	r0, [r4, #0]
 8009490:	b2f6      	uxtb	r6, r6
 8009492:	1ac0      	subs	r0, r0, r3
 8009494:	6963      	ldr	r3, [r4, #20]
 8009496:	4637      	mov	r7, r6
 8009498:	4283      	cmp	r3, r0
 800949a:	dc04      	bgt.n	80094a6 <__swbuf_r+0x42>
 800949c:	4621      	mov	r1, r4
 800949e:	4628      	mov	r0, r5
 80094a0:	f7ff fcee 	bl	8008e80 <_fflush_r>
 80094a4:	bb30      	cbnz	r0, 80094f4 <__swbuf_r+0x90>
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	3001      	adds	r0, #1
 80094aa:	3b01      	subs	r3, #1
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	6022      	str	r2, [r4, #0]
 80094b4:	701e      	strb	r6, [r3, #0]
 80094b6:	6963      	ldr	r3, [r4, #20]
 80094b8:	4283      	cmp	r3, r0
 80094ba:	d004      	beq.n	80094c6 <__swbuf_r+0x62>
 80094bc:	89a3      	ldrh	r3, [r4, #12]
 80094be:	07db      	lsls	r3, r3, #31
 80094c0:	d506      	bpl.n	80094d0 <__swbuf_r+0x6c>
 80094c2:	2e0a      	cmp	r6, #10
 80094c4:	d104      	bne.n	80094d0 <__swbuf_r+0x6c>
 80094c6:	4621      	mov	r1, r4
 80094c8:	4628      	mov	r0, r5
 80094ca:	f7ff fcd9 	bl	8008e80 <_fflush_r>
 80094ce:	b988      	cbnz	r0, 80094f4 <__swbuf_r+0x90>
 80094d0:	4638      	mov	r0, r7
 80094d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d4:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <__swbuf_r+0x9c>)
 80094d6:	429c      	cmp	r4, r3
 80094d8:	d101      	bne.n	80094de <__swbuf_r+0x7a>
 80094da:	68ac      	ldr	r4, [r5, #8]
 80094dc:	e7cf      	b.n	800947e <__swbuf_r+0x1a>
 80094de:	4b09      	ldr	r3, [pc, #36]	; (8009504 <__swbuf_r+0xa0>)
 80094e0:	429c      	cmp	r4, r3
 80094e2:	bf08      	it	eq
 80094e4:	68ec      	ldreq	r4, [r5, #12]
 80094e6:	e7ca      	b.n	800947e <__swbuf_r+0x1a>
 80094e8:	4621      	mov	r1, r4
 80094ea:	4628      	mov	r0, r5
 80094ec:	f000 f80c 	bl	8009508 <__swsetup_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d0cb      	beq.n	800948c <__swbuf_r+0x28>
 80094f4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094f8:	e7ea      	b.n	80094d0 <__swbuf_r+0x6c>
 80094fa:	bf00      	nop
 80094fc:	0800a394 	.word	0x0800a394
 8009500:	0800a3b4 	.word	0x0800a3b4
 8009504:	0800a374 	.word	0x0800a374

08009508 <__swsetup_r>:
 8009508:	4b32      	ldr	r3, [pc, #200]	; (80095d4 <__swsetup_r+0xcc>)
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	681d      	ldr	r5, [r3, #0]
 800950e:	4606      	mov	r6, r0
 8009510:	460c      	mov	r4, r1
 8009512:	b125      	cbz	r5, 800951e <__swsetup_r+0x16>
 8009514:	69ab      	ldr	r3, [r5, #24]
 8009516:	b913      	cbnz	r3, 800951e <__swsetup_r+0x16>
 8009518:	4628      	mov	r0, r5
 800951a:	f7ff fd45 	bl	8008fa8 <__sinit>
 800951e:	4b2e      	ldr	r3, [pc, #184]	; (80095d8 <__swsetup_r+0xd0>)
 8009520:	429c      	cmp	r4, r3
 8009522:	d10f      	bne.n	8009544 <__swsetup_r+0x3c>
 8009524:	686c      	ldr	r4, [r5, #4]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800952c:	0719      	lsls	r1, r3, #28
 800952e:	d42c      	bmi.n	800958a <__swsetup_r+0x82>
 8009530:	06dd      	lsls	r5, r3, #27
 8009532:	d411      	bmi.n	8009558 <__swsetup_r+0x50>
 8009534:	2309      	movs	r3, #9
 8009536:	6033      	str	r3, [r6, #0]
 8009538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009540:	81a3      	strh	r3, [r4, #12]
 8009542:	e03e      	b.n	80095c2 <__swsetup_r+0xba>
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <__swsetup_r+0xd4>)
 8009546:	429c      	cmp	r4, r3
 8009548:	d101      	bne.n	800954e <__swsetup_r+0x46>
 800954a:	68ac      	ldr	r4, [r5, #8]
 800954c:	e7eb      	b.n	8009526 <__swsetup_r+0x1e>
 800954e:	4b24      	ldr	r3, [pc, #144]	; (80095e0 <__swsetup_r+0xd8>)
 8009550:	429c      	cmp	r4, r3
 8009552:	bf08      	it	eq
 8009554:	68ec      	ldreq	r4, [r5, #12]
 8009556:	e7e6      	b.n	8009526 <__swsetup_r+0x1e>
 8009558:	0758      	lsls	r0, r3, #29
 800955a:	d512      	bpl.n	8009582 <__swsetup_r+0x7a>
 800955c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800955e:	b141      	cbz	r1, 8009572 <__swsetup_r+0x6a>
 8009560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009564:	4299      	cmp	r1, r3
 8009566:	d002      	beq.n	800956e <__swsetup_r+0x66>
 8009568:	4630      	mov	r0, r6
 800956a:	f7fe fd71 	bl	8008050 <_free_r>
 800956e:	2300      	movs	r3, #0
 8009570:	6363      	str	r3, [r4, #52]	; 0x34
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	2300      	movs	r3, #0
 800957c:	6063      	str	r3, [r4, #4]
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f043 0308 	orr.w	r3, r3, #8
 8009588:	81a3      	strh	r3, [r4, #12]
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	b94b      	cbnz	r3, 80095a2 <__swsetup_r+0x9a>
 800958e:	89a3      	ldrh	r3, [r4, #12]
 8009590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009598:	d003      	beq.n	80095a2 <__swsetup_r+0x9a>
 800959a:	4621      	mov	r1, r4
 800959c:	4630      	mov	r0, r6
 800959e:	f000 f84d 	bl	800963c <__smakebuf_r>
 80095a2:	89a0      	ldrh	r0, [r4, #12]
 80095a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095a8:	f010 0301 	ands.w	r3, r0, #1
 80095ac:	d00a      	beq.n	80095c4 <__swsetup_r+0xbc>
 80095ae:	2300      	movs	r3, #0
 80095b0:	60a3      	str	r3, [r4, #8]
 80095b2:	6963      	ldr	r3, [r4, #20]
 80095b4:	425b      	negs	r3, r3
 80095b6:	61a3      	str	r3, [r4, #24]
 80095b8:	6923      	ldr	r3, [r4, #16]
 80095ba:	b943      	cbnz	r3, 80095ce <__swsetup_r+0xc6>
 80095bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095c0:	d1ba      	bne.n	8009538 <__swsetup_r+0x30>
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
 80095c4:	0781      	lsls	r1, r0, #30
 80095c6:	bf58      	it	pl
 80095c8:	6963      	ldrpl	r3, [r4, #20]
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	e7f4      	b.n	80095b8 <__swsetup_r+0xb0>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e7f7      	b.n	80095c2 <__swsetup_r+0xba>
 80095d2:	bf00      	nop
 80095d4:	2000000c 	.word	0x2000000c
 80095d8:	0800a394 	.word	0x0800a394
 80095dc:	0800a3b4 	.word	0x0800a3b4
 80095e0:	0800a374 	.word	0x0800a374

080095e4 <abort>:
 80095e4:	2006      	movs	r0, #6
 80095e6:	b508      	push	{r3, lr}
 80095e8:	f000 f898 	bl	800971c <raise>
 80095ec:	2001      	movs	r0, #1
 80095ee:	f7f9 f898 	bl	8002722 <_exit>

080095f2 <__swhatbuf_r>:
 80095f2:	b570      	push	{r4, r5, r6, lr}
 80095f4:	460e      	mov	r6, r1
 80095f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095fa:	4614      	mov	r4, r2
 80095fc:	2900      	cmp	r1, #0
 80095fe:	461d      	mov	r5, r3
 8009600:	b096      	sub	sp, #88	; 0x58
 8009602:	da08      	bge.n	8009616 <__swhatbuf_r+0x24>
 8009604:	2200      	movs	r2, #0
 8009606:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800960a:	602a      	str	r2, [r5, #0]
 800960c:	061a      	lsls	r2, r3, #24
 800960e:	d410      	bmi.n	8009632 <__swhatbuf_r+0x40>
 8009610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009614:	e00e      	b.n	8009634 <__swhatbuf_r+0x42>
 8009616:	466a      	mov	r2, sp
 8009618:	f000 f89c 	bl	8009754 <_fstat_r>
 800961c:	2800      	cmp	r0, #0
 800961e:	dbf1      	blt.n	8009604 <__swhatbuf_r+0x12>
 8009620:	9a01      	ldr	r2, [sp, #4]
 8009622:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009626:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800962a:	425a      	negs	r2, r3
 800962c:	415a      	adcs	r2, r3
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	e7ee      	b.n	8009610 <__swhatbuf_r+0x1e>
 8009632:	2340      	movs	r3, #64	; 0x40
 8009634:	2000      	movs	r0, #0
 8009636:	6023      	str	r3, [r4, #0]
 8009638:	b016      	add	sp, #88	; 0x58
 800963a:	bd70      	pop	{r4, r5, r6, pc}

0800963c <__smakebuf_r>:
 800963c:	898b      	ldrh	r3, [r1, #12]
 800963e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009640:	079d      	lsls	r5, r3, #30
 8009642:	4606      	mov	r6, r0
 8009644:	460c      	mov	r4, r1
 8009646:	d507      	bpl.n	8009658 <__smakebuf_r+0x1c>
 8009648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	6123      	str	r3, [r4, #16]
 8009650:	2301      	movs	r3, #1
 8009652:	6163      	str	r3, [r4, #20]
 8009654:	b002      	add	sp, #8
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	466a      	mov	r2, sp
 800965a:	ab01      	add	r3, sp, #4
 800965c:	f7ff ffc9 	bl	80095f2 <__swhatbuf_r>
 8009660:	9900      	ldr	r1, [sp, #0]
 8009662:	4605      	mov	r5, r0
 8009664:	4630      	mov	r0, r6
 8009666:	f7fe fd5b 	bl	8008120 <_malloc_r>
 800966a:	b948      	cbnz	r0, 8009680 <__smakebuf_r+0x44>
 800966c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009670:	059a      	lsls	r2, r3, #22
 8009672:	d4ef      	bmi.n	8009654 <__smakebuf_r+0x18>
 8009674:	f023 0303 	bic.w	r3, r3, #3
 8009678:	f043 0302 	orr.w	r3, r3, #2
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	e7e3      	b.n	8009648 <__smakebuf_r+0xc>
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <__smakebuf_r+0x7c>)
 8009682:	62b3      	str	r3, [r6, #40]	; 0x28
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	6020      	str	r0, [r4, #0]
 8009688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	6120      	str	r0, [r4, #16]
 8009692:	6163      	str	r3, [r4, #20]
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	b15b      	cbz	r3, 80096b0 <__smakebuf_r+0x74>
 8009698:	4630      	mov	r0, r6
 800969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969e:	f000 f86b 	bl	8009778 <_isatty_r>
 80096a2:	b128      	cbz	r0, 80096b0 <__smakebuf_r+0x74>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	89a0      	ldrh	r0, [r4, #12]
 80096b2:	4305      	orrs	r5, r0
 80096b4:	81a5      	strh	r5, [r4, #12]
 80096b6:	e7cd      	b.n	8009654 <__smakebuf_r+0x18>
 80096b8:	08008f41 	.word	0x08008f41

080096bc <_malloc_usable_size_r>:
 80096bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096c0:	1f18      	subs	r0, r3, #4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bfbc      	itt	lt
 80096c6:	580b      	ldrlt	r3, [r1, r0]
 80096c8:	18c0      	addlt	r0, r0, r3
 80096ca:	4770      	bx	lr

080096cc <_raise_r>:
 80096cc:	291f      	cmp	r1, #31
 80096ce:	b538      	push	{r3, r4, r5, lr}
 80096d0:	4604      	mov	r4, r0
 80096d2:	460d      	mov	r5, r1
 80096d4:	d904      	bls.n	80096e0 <_raise_r+0x14>
 80096d6:	2316      	movs	r3, #22
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096e2:	b112      	cbz	r2, 80096ea <_raise_r+0x1e>
 80096e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096e8:	b94b      	cbnz	r3, 80096fe <_raise_r+0x32>
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 f830 	bl	8009750 <_getpid_r>
 80096f0:	462a      	mov	r2, r5
 80096f2:	4601      	mov	r1, r0
 80096f4:	4620      	mov	r0, r4
 80096f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096fa:	f000 b817 	b.w	800972c <_kill_r>
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d00a      	beq.n	8009718 <_raise_r+0x4c>
 8009702:	1c59      	adds	r1, r3, #1
 8009704:	d103      	bne.n	800970e <_raise_r+0x42>
 8009706:	2316      	movs	r3, #22
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	2001      	movs	r0, #1
 800970c:	e7e7      	b.n	80096de <_raise_r+0x12>
 800970e:	2400      	movs	r4, #0
 8009710:	4628      	mov	r0, r5
 8009712:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009716:	4798      	blx	r3
 8009718:	2000      	movs	r0, #0
 800971a:	e7e0      	b.n	80096de <_raise_r+0x12>

0800971c <raise>:
 800971c:	4b02      	ldr	r3, [pc, #8]	; (8009728 <raise+0xc>)
 800971e:	4601      	mov	r1, r0
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f7ff bfd3 	b.w	80096cc <_raise_r>
 8009726:	bf00      	nop
 8009728:	2000000c 	.word	0x2000000c

0800972c <_kill_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	2300      	movs	r3, #0
 8009730:	4d06      	ldr	r5, [pc, #24]	; (800974c <_kill_r+0x20>)
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	4611      	mov	r1, r2
 8009738:	602b      	str	r3, [r5, #0]
 800973a:	f7f8 ffe2 	bl	8002702 <_kill>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d102      	bne.n	8009748 <_kill_r+0x1c>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	b103      	cbz	r3, 8009748 <_kill_r+0x1c>
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	bf00      	nop
 800974c:	20000508 	.word	0x20000508

08009750 <_getpid_r>:
 8009750:	f7f8 bfd0 	b.w	80026f4 <_getpid>

08009754 <_fstat_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	2300      	movs	r3, #0
 8009758:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_fstat_r+0x20>)
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	f7f9 f82c 	bl	80027be <_fstat>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d102      	bne.n	8009770 <_fstat_r+0x1c>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b103      	cbz	r3, 8009770 <_fstat_r+0x1c>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	20000508 	.word	0x20000508

08009778 <_isatty_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	2300      	movs	r3, #0
 800977c:	4d05      	ldr	r5, [pc, #20]	; (8009794 <_isatty_r+0x1c>)
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f9 f82a 	bl	80027dc <_isatty>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_isatty_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_isatty_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	20000508 	.word	0x20000508

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
