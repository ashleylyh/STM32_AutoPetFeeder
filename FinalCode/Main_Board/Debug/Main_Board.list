
Main_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a920  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af4  0800ab08  0800ab08  0001ab08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5fc  0800b5fc  00020288  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5fc  0800b5fc  00020288  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5fc  0800b5fc  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5fc  0800b5fc  0001b5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800b604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015dc  20000288  0800b88c  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001864  0800b88c  00021864  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001467c  00000000  00000000  000202b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000319a  00000000  00000000  0003492d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00037ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00038df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb3f  00000000  00000000  00039fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168cb  00000000  00000000  00056b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6dab  00000000  00000000  0006d3f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011419d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  001141f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000288 	.word	0x20000288
 8000204:	00000000 	.word	0x00000000
 8000208:	0800aaf0 	.word	0x0800aaf0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000028c 	.word	0x2000028c
 8000224:	0800aaf0 	.word	0x0800aaf0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <Ov7725_Init>:
extern uint8_t Ov7725_vsync;

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	717b      	strb	r3, [r7, #5]

	if (0 == SCCB_WriteByte(0x12, 0x80)) /*reset sensor */
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	2012      	movs	r0, #18
 800107a:	f000 fa0b 	bl	8001494 <SCCB_WriteByte>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d101      	bne.n	8001088 <Ov7725_Init+0x20>
	{
		return ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e030      	b.n	80010ea <Ov7725_Init+0x82>
	}

	if (0 == SCCB_ReadByte(&Sensor_IDCode, 1, 0x0b)) /* read sensor ID*/
 8001088:	1d7b      	adds	r3, r7, #5
 800108a:	220b      	movs	r2, #11
 800108c:	2101      	movs	r1, #1
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa2f 	bl	80014f2 <SCCB_ReadByte>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <Ov7725_Init+0x36>
	{
		return ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e025      	b.n	80010ea <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	

	if (Sensor_IDCode == OV7725_ID) {
 800109e:	797b      	ldrb	r3, [r7, #5]
 80010a0:	2b21      	cmp	r3, #33	; 0x21
 80010a2:	d11f      	bne.n	80010e4 <Ov7725_Init+0x7c>
		for (i = 0; i < OV7725_REG_NUM; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	e015      	b.n	80010d6 <Ov7725_Init+0x6e>
			if (0
					== SCCB_WriteByte(Sensor_Config[i].Address,
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <Ov7725_Init+0x8c>)
 80010ae:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	490f      	ldr	r1, [pc, #60]	; (80010f4 <Ov7725_Init+0x8c>)
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	440b      	add	r3, r1
 80010bc:	785b      	ldrb	r3, [r3, #1]
 80010be:	4619      	mov	r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f000 f9e7 	bl	8001494 <SCCB_WriteByte>
 80010c6:	4603      	mov	r3, r0
			if (0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <Ov7725_Init+0x68>
							Sensor_Config[i].Value)) {
				return ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e00c      	b.n	80010ea <Ov7725_Init+0x82>
		for (i = 0; i < OV7725_REG_NUM; i++) {
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	3301      	adds	r3, #1
 80010d4:	80fb      	strh	r3, [r7, #6]
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <Ov7725_Init+0x90>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	88fa      	ldrh	r2, [r7, #6]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3e3      	bcc.n	80010aa <Ov7725_Init+0x42>
 80010e2:	e001      	b.n	80010e8 <Ov7725_Init+0x80>
			}
		}
	} else {
		return ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <Ov7725_Init+0x82>
	}

	return SUCCESS;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000
 80010f8:	2000009a 	.word	0x2000009a

080010fc <ImagDisp2>:
//	//Flash_Write_Data(address, (uint16_t *) Stored_Data, 120*160);
//
//	return Stored_Data;
//}
//
void ImagDisp2(UART_HandleTypeDef *huart) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	uint8_t r, g, b, greyscale;



	image[0] = 1;
 8001104:	4b53      	ldr	r3, [pc, #332]	; (8001254 <ImagDisp2+0x158>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
	image[4801] = 2;
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <ImagDisp2+0x158>)
 800110c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001110:	2202      	movs	r2, #2
 8001112:	f883 22c1 	strb.w	r2, [r3, #705]	; 0x2c1
	//image[1201] = 2;

	//LCD_Cam_Gram();


	for (i = 0; i < 240; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	82fb      	strh	r3, [r7, #22]
 800111a:	e07a      	b.n	8001212 <ImagDisp2+0x116>
		for (j = 0; j < 320; j++) {
 800111c:	2300      	movs	r3, #0
 800111e:	82bb      	strh	r3, [r7, #20]
 8001120:	e070      	b.n	8001204 <ImagDisp2+0x108>
			READ_FIFO_PIXEL(Camera_Data);
 8001122:	2300      	movs	r3, #0
 8001124:	823b      	strh	r3, [r7, #16]
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <ImagDisp2+0x15c>)
 8001128:	2220      	movs	r2, #32
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	4b4b      	ldr	r3, [pc, #300]	; (800125c <ImagDisp2+0x160>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	b29b      	uxth	r3, r3
 8001132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001136:	823b      	strh	r3, [r7, #16]
 8001138:	4b47      	ldr	r3, [pc, #284]	; (8001258 <ImagDisp2+0x15c>)
 800113a:	2220      	movs	r2, #32
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	4b46      	ldr	r3, [pc, #280]	; (8001258 <ImagDisp2+0x15c>)
 8001140:	2220      	movs	r2, #32
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	4b45      	ldr	r3, [pc, #276]	; (800125c <ImagDisp2+0x160>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	b2db      	uxtb	r3, r3
 800114c:	b29a      	uxth	r2, r3
 800114e:	8a3b      	ldrh	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	823b      	strh	r3, [r7, #16]
 8001154:	4b40      	ldr	r3, [pc, #256]	; (8001258 <ImagDisp2+0x15c>)
 8001156:	2220      	movs	r2, #32
 8001158:	611a      	str	r2, [r3, #16]
			//LCD_Write_Data(Camera_Data);

			if (i % 4 == 0 && j % 4 == 0) {
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d14b      	bne.n	80011fe <ImagDisp2+0x102>
 8001166:	8abb      	ldrh	r3, [r7, #20]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	b29b      	uxth	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d145      	bne.n	80011fe <ImagDisp2+0x102>
				r = (Camera_Data >> 11) & 0x1F;
 8001172:	8a3b      	ldrh	r3, [r7, #16]
 8001174:	0adb      	lsrs	r3, r3, #11
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 031f 	and.w	r3, r3, #31
 800117e:	73fb      	strb	r3, [r7, #15]
				g = (Camera_Data >> 5) & 0x3F;
 8001180:	8a3b      	ldrh	r3, [r7, #16]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	b29b      	uxth	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118c:	73bb      	strb	r3, [r7, #14]
				b = (Camera_Data) & 0x1F;
 800118e:	8a3b      	ldrh	r3, [r7, #16]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	737b      	strb	r3, [r7, #13]

				greyscale = (r * 2 + g * 5 + b * 1) >> 3;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	0059      	lsls	r1, r3, #1
 800119c:	7bba      	ldrb	r2, [r7, #14]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	18ca      	adds	r2, r1, r3
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	4413      	add	r3, r2
 80011aa:	10db      	asrs	r3, r3, #3
 80011ac:	74fb      	strb	r3, [r7, #19]

				if (greyscale == 1 || greyscale == 2 || greyscale == 3
 80011ae:	7cfb      	ldrb	r3, [r7, #19]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d014      	beq.n	80011de <ImagDisp2+0xe2>
 80011b4:	7cfb      	ldrb	r3, [r7, #19]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d011      	beq.n	80011de <ImagDisp2+0xe2>
 80011ba:	7cfb      	ldrb	r3, [r7, #19]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d00e      	beq.n	80011de <ImagDisp2+0xe2>
						|| greyscale == 4 || greyscale == 5 || greyscale == 6
 80011c0:	7cfb      	ldrb	r3, [r7, #19]
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d00b      	beq.n	80011de <ImagDisp2+0xe2>
 80011c6:	7cfb      	ldrb	r3, [r7, #19]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d008      	beq.n	80011de <ImagDisp2+0xe2>
 80011cc:	7cfb      	ldrb	r3, [r7, #19]
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d005      	beq.n	80011de <ImagDisp2+0xe2>
						|| greyscale == 7 || greyscale == 8) {
 80011d2:	7cfb      	ldrb	r3, [r7, #19]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d002      	beq.n	80011de <ImagDisp2+0xe2>
 80011d8:	7cfb      	ldrb	r3, [r7, #19]
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d101      	bne.n	80011e2 <ImagDisp2+0xe6>
					greyscale = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	74fb      	strb	r3, [r7, #19]
				}

				image[i * 20 + j / 4 + 1] = greyscale;
 80011e2:	8afa      	ldrh	r2, [r7, #22]
 80011e4:	4613      	mov	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	461a      	mov	r2, r3
 80011ee:	8abb      	ldrh	r3, [r7, #20]
 80011f0:	089b      	lsrs	r3, r3, #2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	3301      	adds	r3, #1
 80011f8:	4916      	ldr	r1, [pc, #88]	; (8001254 <ImagDisp2+0x158>)
 80011fa:	7cfa      	ldrb	r2, [r7, #19]
 80011fc:	54ca      	strb	r2, [r1, r3]
		for (j = 0; j < 320; j++) {
 80011fe:	8abb      	ldrh	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	82bb      	strh	r3, [r7, #20]
 8001204:	8abb      	ldrh	r3, [r7, #20]
 8001206:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800120a:	d38a      	bcc.n	8001122 <ImagDisp2+0x26>
	for (i = 0; i < 240; i++) {
 800120c:	8afb      	ldrh	r3, [r7, #22]
 800120e:	3301      	adds	r3, #1
 8001210:	82fb      	strh	r3, [r7, #22]
 8001212:	8afb      	ldrh	r3, [r7, #22]
 8001214:	2bef      	cmp	r3, #239	; 0xef
 8001216:	d981      	bls.n	800111c <ImagDisp2+0x20>

		}

	}

	HAL_UART_Transmit(huart, (uint8_t*) "Start", sizeof("Start") - 1,
 8001218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121c:	2205      	movs	r2, #5
 800121e:	4910      	ldr	r1, [pc, #64]	; (8001260 <ImagDisp2+0x164>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f005 fdd1 	bl	8006dc8 <HAL_UART_Transmit>
						HAL_MAX_DELAY);

	HAL_UART_Transmit(huart, image, sizeof(image), HAL_MAX_DELAY);
 8001226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800122a:	f241 22c2 	movw	r2, #4802	; 0x12c2
 800122e:	4909      	ldr	r1, [pc, #36]	; (8001254 <ImagDisp2+0x158>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f005 fdc9 	bl	8006dc8 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart, (uint8_t*) "End", sizeof("End!") - 1,
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	2204      	movs	r2, #4
 800123c:	4909      	ldr	r1, [pc, #36]	; (8001264 <ImagDisp2+0x168>)
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f005 fdc2 	bl	8006dc8 <HAL_UART_Transmit>
			HAL_MAX_DELAY);


	HAL_Delay(3000);
 8001244:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001248:	f002 f9f0 	bl	800362c <HAL_Delay>

}
 800124c:	bf00      	nop
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200002a4 	.word	0x200002a4
 8001258:	40011000 	.word	0x40011000
 800125c:	40010c00 	.word	0x40010c00
 8001260:	0800ab08 	.word	0x0800ab08
 8001264:	0800ab10 	.word	0x0800ab10

08001268 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 800126e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001272:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8001274:	e002      	b.n	800127c <SCCB_delay+0x14>
   { 
     i--; 
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	3b01      	subs	r3, #1
 800127a:	80fb      	strh	r3, [r7, #6]
   while(i) 
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f9      	bne.n	8001276 <SCCB_delay+0xe>
   } 
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
	...

08001290 <SCCB_Start>:


static int SCCB_Start(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	SDA_H;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <SCCB_Start+0x54>)
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	611a      	str	r2, [r3, #16]
	SCL_H;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <SCCB_Start+0x54>)
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80012a0:	f7ff ffe2 	bl	8001268 <SCCB_delay>
	if(!SDA_read)
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	480f      	ldr	r0, [pc, #60]	; (80012e4 <SCCB_Start+0x54>)
 80012a8:	f003 fab4 	bl	8004814 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <SCCB_Start+0x26>
	return DISABLE;	
 80012b2:	2300      	movs	r3, #0
 80012b4:	e013      	b.n	80012de <SCCB_Start+0x4e>
	SDA_L;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <SCCB_Start+0x54>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012bc:	f7ff ffd4 	bl	8001268 <SCCB_delay>
	if(SDA_read) 
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <SCCB_Start+0x54>)
 80012c4:	f003 faa6 	bl	8004814 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SCCB_Start+0x42>
	return DISABLE;	
 80012ce:	2300      	movs	r3, #0
 80012d0:	e005      	b.n	80012de <SCCB_Start+0x4e>
	SDA_L;
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SCCB_Start+0x54>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012d8:	f7ff ffc6 	bl	8001268 <SCCB_delay>
	return ENABLE;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40011000 	.word	0x40011000

080012e8 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	SCL_L;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <SCCB_Stop+0x30>)
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012f2:	f7ff ffb9 	bl	8001268 <SCCB_delay>
	SDA_L;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <SCCB_Stop+0x30>)
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 80012fc:	f7ff ffb4 	bl	8001268 <SCCB_delay>
	SCL_H;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SCCB_Stop+0x30>)
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001306:	f7ff ffaf 	bl	8001268 <SCCB_delay>
	SDA_H;
 800130a:	4b03      	ldr	r3, [pc, #12]	; (8001318 <SCCB_Stop+0x30>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001310:	f7ff ffaa 	bl	8001268 <SCCB_delay>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40011000 	.word	0x40011000

0800131c <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	SCL_L;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <SCCB_Ack+0x30>)
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001326:	f7ff ff9f 	bl	8001268 <SCCB_delay>
	SDA_L;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <SCCB_Ack+0x30>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001330:	f7ff ff9a 	bl	8001268 <SCCB_delay>
	SCL_H;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SCCB_Ack+0x30>)
 8001336:	2240      	movs	r2, #64	; 0x40
 8001338:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800133a:	f7ff ff95 	bl	8001268 <SCCB_delay>
	SCL_L;
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <SCCB_Ack+0x30>)
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001344:	f7ff ff90 	bl	8001268 <SCCB_delay>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011000 	.word	0x40011000

08001350 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	SCL_L;
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <SCCB_NoAck+0x30>)
 8001356:	2240      	movs	r2, #64	; 0x40
 8001358:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800135a:	f7ff ff85 	bl	8001268 <SCCB_delay>
	SDA_H;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <SCCB_NoAck+0x30>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001364:	f7ff ff80 	bl	8001268 <SCCB_delay>
	SCL_H;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <SCCB_NoAck+0x30>)
 800136a:	2240      	movs	r2, #64	; 0x40
 800136c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 800136e:	f7ff ff7b 	bl	8001268 <SCCB_delay>
	SCL_L;
 8001372:	4b03      	ldr	r3, [pc, #12]	; (8001380 <SCCB_NoAck+0x30>)
 8001374:	2240      	movs	r2, #64	; 0x40
 8001376:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8001378:	f7ff ff76 	bl	8001268 <SCCB_delay>
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40011000 	.word	0x40011000

08001384 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	SCL_L;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <SCCB_WaitAck+0x48>)
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 800138e:	f7ff ff6b 	bl	8001268 <SCCB_delay>
	SDA_H;			
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <SCCB_WaitAck+0x48>)
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8001398:	f7ff ff66 	bl	8001268 <SCCB_delay>
	SCL_H;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <SCCB_WaitAck+0x48>)
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 80013a2:	f7ff ff61 	bl	8001268 <SCCB_delay>
	if(SDA_read)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <SCCB_WaitAck+0x48>)
 80013aa:	f003 fa33 	bl	8004814 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SCCB_WaitAck+0x48>)
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	615a      	str	r2, [r3, #20]
      return DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e003      	b.n	80013c6 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 80013be:	4b03      	ldr	r3, [pc, #12]	; (80013cc <SCCB_WaitAck+0x48>)
 80013c0:	2240      	movs	r2, #64	; 0x40
 80013c2:	615a      	str	r2, [r3, #20]
	return ENABLE;
 80013c4:	2301      	movs	r3, #1
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40011000 	.word	0x40011000

080013d0 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 80013da:	2308      	movs	r3, #8
 80013dc:	73fb      	strb	r3, [r7, #15]
    while(i--)
 80013de:	e019      	b.n	8001414 <SCCB_SendByte+0x44>
    {
        SCL_L;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <SCCB_SendByte+0x5c>)
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 80013e6:	f7ff ff3f 	bl	8001268 <SCCB_delay>
      if(SendByte&0x80)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	da03      	bge.n	80013fa <SCCB_SendByte+0x2a>
        SDA_H;  
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <SCCB_SendByte+0x5c>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	611a      	str	r2, [r3, #16]
 80013f8:	e002      	b.n	8001400 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <SCCB_SendByte+0x5c>)
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8001406:	f7ff ff2f 	bl	8001268 <SCCB_delay>
		SCL_H;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <SCCB_SendByte+0x5c>)
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8001410:	f7ff ff2a 	bl	8001268 <SCCB_delay>
    while(i--)
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	1e5a      	subs	r2, r3, #1
 8001418:	73fa      	strb	r2, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1e0      	bne.n	80013e0 <SCCB_SendByte+0x10>
    }
    SCL_L;
 800141e:	4b03      	ldr	r3, [pc, #12]	; (800142c <SCCB_SendByte+0x5c>)
 8001420:	2240      	movs	r2, #64	; 0x40
 8001422:	615a      	str	r2, [r3, #20]
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40011000 	.word	0x40011000

08001430 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8001436:	2308      	movs	r3, #8
 8001438:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 800143a:	2300      	movs	r3, #0
 800143c:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <SCCB_ReceiveByte+0x60>)
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	611a      	str	r2, [r3, #16]
    while(i--)
 8001444:	e017      	b.n	8001476 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <SCCB_ReceiveByte+0x60>)
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8001452:	f7ff ff09 	bl	8001268 <SCCB_delay>
	  SCL_H;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <SCCB_ReceiveByte+0x60>)
 8001458:	2240      	movs	r2, #64	; 0x40
 800145a:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 800145c:	f7ff ff04 	bl	8001268 <SCCB_delay>
      if(SDA_read)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <SCCB_ReceiveByte+0x60>)
 8001464:	f003 f9d6 	bl	8004814 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	1e5a      	subs	r2, r3, #1
 800147a:	71fa      	strb	r2, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e2      	bne.n	8001446 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <SCCB_ReceiveByte+0x60>)
 8001482:	2240      	movs	r2, #64	; 0x40
 8001484:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8001486:	79bb      	ldrb	r3, [r7, #6]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40011000 	.word	0x40011000

08001494 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	460a      	mov	r2, r1
 800149e:	80fb      	strh	r3, [r7, #6]
 80014a0:	4613      	mov	r3, r2
 80014a2:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 80014a4:	f7ff fef4 	bl	8001290 <SCCB_Start>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e01b      	b.n	80014ea <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 80014b2:	2042      	movs	r0, #66	; 0x42
 80014b4:	f7ff ff8c 	bl	80013d0 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 80014b8:	f7ff ff64 	bl	8001384 <SCCB_WaitAck>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 80014c2:	f7ff ff11 	bl	80012e8 <SCCB_Stop>
		return DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	e00f      	b.n	80014ea <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff7e 	bl	80013d0 <SCCB_SendByte>
    SCCB_WaitAck();	
 80014d4:	f7ff ff56 	bl	8001384 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff78 	bl	80013d0 <SCCB_SendByte>
    SCCB_WaitAck();   
 80014e0:	f7ff ff50 	bl	8001384 <SCCB_WaitAck>
    SCCB_Stop(); 
 80014e4:	f7ff ff00 	bl	80012e8 <SCCB_Stop>
    return ENABLE;
 80014e8:	2301      	movs	r3, #1
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	807b      	strh	r3, [r7, #2]
 80014fe:	4613      	mov	r3, r2
 8001500:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8001502:	f7ff fec5 	bl	8001290 <SCCB_Start>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	e040      	b.n	8001592 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8001510:	2042      	movs	r0, #66	; 0x42
 8001512:	f7ff ff5d 	bl	80013d0 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8001516:	f7ff ff35 	bl	8001384 <SCCB_WaitAck>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d103      	bne.n	8001528 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8001520:	f7ff fee2 	bl	80012e8 <SCCB_Stop>
		return DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	e034      	b.n	8001592 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff50 	bl	80013d0 <SCCB_SendByte>
    SCCB_WaitAck();	
 8001530:	f7ff ff28 	bl	8001384 <SCCB_WaitAck>
    SCCB_Stop(); 
 8001534:	f7ff fed8 	bl	80012e8 <SCCB_Stop>
	
    if(!SCCB_Start())
 8001538:	f7ff feaa 	bl	8001290 <SCCB_Start>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	e025      	b.n	8001592 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8001546:	2043      	movs	r0, #67	; 0x43
 8001548:	f7ff ff42 	bl	80013d0 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 800154c:	f7ff ff1a 	bl	8001384 <SCCB_WaitAck>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d117      	bne.n	8001586 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8001556:	f7ff fec7 	bl	80012e8 <SCCB_Stop>
		return DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	e019      	b.n	8001592 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 800155e:	f7ff ff67 	bl	8001430 <SCCB_ReceiveByte>
 8001562:	4603      	mov	r3, r0
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d102      	bne.n	8001576 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8001570:	f7ff feee 	bl	8001350 <SCCB_NoAck>
 8001574:	e001      	b.n	800157a <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8001576:	f7ff fed1 	bl	800131c <SCCB_Ack>
	  }
      pBuffer++;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3301      	adds	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
      length--;
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	3b01      	subs	r3, #1
 8001584:	807b      	strh	r3, [r7, #2]
    while(length)
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e8      	bne.n	800155e <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 800158c:	f7ff feac 	bl	80012e8 <SCCB_Stop>
    return ENABLE;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	e002      	b.n	80015aa <Delay+0x10>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <Delay+0xa>
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <LCD_INIT>:

void LCD_INIT ( void )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 f82a 	bl	800161c <LCD_BackLed_Control>
	LCD_Rst();
 80015c8:	f000 f810 	bl	80015ec <LCD_Rst>
	LCD_REG_Config();
 80015cc:	f000 f860 	bl	8001690 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80015d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015da:	22f0      	movs	r2, #240	; 0xf0
 80015dc:	2100      	movs	r1, #0
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f9e7 	bl	80019b2 <LCD_Clear>
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <LCD_Rst>:



void LCD_Rst ( void )
{			
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2102      	movs	r1, #2
 80015f4:	4807      	ldr	r0, [pc, #28]	; (8001614 <LCD_Rst+0x28>)
 80015f6:	f003 f924 	bl	8004842 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 80015fa:	4807      	ldr	r0, [pc, #28]	; (8001618 <LCD_Rst+0x2c>)
 80015fc:	f7ff ffcd 	bl	800159a <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2102      	movs	r1, #2
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <LCD_Rst+0x28>)
 8001606:	f003 f91c 	bl	8004842 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800160a:	4803      	ldr	r0, [pc, #12]	; (8001618 <LCD_Rst+0x2c>)
 800160c:	f7ff ffc5 	bl	800159a <Delay>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40011800 	.word	0x40011800
 8001618:	0002bffc 	.word	0x0002bffc

0800161c <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <LCD_BackLed_Control+0x34>)
 8001634:	f003 f905 	bl	8004842 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001638:	e005      	b.n	8001646 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <LCD_BackLed_Control+0x34>)
 8001642:	f003 f8fe 	bl	8004842 <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40011400 	.word	0x40011400

08001654 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800165e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	8013      	strh	r3, [r2, #0]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800167a:	4a04      	ldr	r2, [pc, #16]	; (800168c <LCD_Write_Data+0x1c>)
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	8013      	strh	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	60020000 	.word	0x60020000

08001690 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001694:	20cf      	movs	r0, #207	; 0xcf
 8001696:	f7ff ffdd 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff ffe8 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80016a0:	2081      	movs	r0, #129	; 0x81
 80016a2:	f7ff ffe5 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80016a6:	2030      	movs	r0, #48	; 0x30
 80016a8:	f7ff ffe2 	bl	8001670 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80016ac:	20ed      	movs	r0, #237	; 0xed
 80016ae:	f7ff ffd1 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80016b2:	2064      	movs	r0, #100	; 0x64
 80016b4:	f7ff ffdc 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff ffd9 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80016be:	2012      	movs	r0, #18
 80016c0:	f7ff ffd6 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80016c4:	2081      	movs	r0, #129	; 0x81
 80016c6:	f7ff ffd3 	bl	8001670 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80016ca:	20e8      	movs	r0, #232	; 0xe8
 80016cc:	f7ff ffc2 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80016d0:	2085      	movs	r0, #133	; 0x85
 80016d2:	f7ff ffcd 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80016d6:	2010      	movs	r0, #16
 80016d8:	f7ff ffca 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80016dc:	2078      	movs	r0, #120	; 0x78
 80016de:	f7ff ffc7 	bl	8001670 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80016e2:	20cb      	movs	r0, #203	; 0xcb
 80016e4:	f7ff ffb6 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80016e8:	2039      	movs	r0, #57	; 0x39
 80016ea:	f7ff ffc1 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80016ee:	202c      	movs	r0, #44	; 0x2c
 80016f0:	f7ff ffbe 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff ffbb 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80016fa:	2034      	movs	r0, #52	; 0x34
 80016fc:	f7ff ffb8 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8001700:	2002      	movs	r0, #2
 8001702:	f7ff ffb5 	bl	8001670 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001706:	20f7      	movs	r0, #247	; 0xf7
 8001708:	f7ff ffa4 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 800170c:	2020      	movs	r0, #32
 800170e:	f7ff ffaf 	bl	8001670 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8001712:	20ea      	movs	r0, #234	; 0xea
 8001714:	f7ff ff9e 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff ffa9 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ffa6 	bl	8001670 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001724:	20b1      	movs	r0, #177	; 0xb1
 8001726:	f7ff ff95 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ffa0 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001730:	201b      	movs	r0, #27
 8001732:	f7ff ff9d 	bl	8001670 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001736:	20b6      	movs	r0, #182	; 0xb6
 8001738:	f7ff ff8c 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800173c:	200a      	movs	r0, #10
 800173e:	f7ff ff97 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001742:	20a2      	movs	r0, #162	; 0xa2
 8001744:	f7ff ff94 	bl	8001670 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001748:	20c0      	movs	r0, #192	; 0xc0
 800174a:	f7ff ff83 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800174e:	2035      	movs	r0, #53	; 0x35
 8001750:	f7ff ff8e 	bl	8001670 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001754:	20c1      	movs	r0, #193	; 0xc1
 8001756:	f7ff ff7d 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800175a:	2011      	movs	r0, #17
 800175c:	f7ff ff88 	bl	8001670 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001760:	20c5      	movs	r0, #197	; 0xc5
 8001762:	f7ff ff77 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001766:	2045      	movs	r0, #69	; 0x45
 8001768:	f7ff ff82 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800176c:	2045      	movs	r0, #69	; 0x45
 800176e:	f7ff ff7f 	bl	8001670 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001772:	20c7      	movs	r0, #199	; 0xc7
 8001774:	f7ff ff6e 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001778:	20a2      	movs	r0, #162	; 0xa2
 800177a:	f7ff ff79 	bl	8001670 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800177e:	20f2      	movs	r0, #242	; 0xf2
 8001780:	f7ff ff68 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001784:	2000      	movs	r0, #0
 8001786:	f7ff ff73 	bl	8001670 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800178a:	2026      	movs	r0, #38	; 0x26
 800178c:	f7ff ff62 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff ff6d 	bl	8001670 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001796:	20e0      	movs	r0, #224	; 0xe0
 8001798:	f7ff ff5c 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800179c:	200f      	movs	r0, #15
 800179e:	f7ff ff67 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80017a2:	2026      	movs	r0, #38	; 0x26
 80017a4:	f7ff ff64 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80017a8:	2024      	movs	r0, #36	; 0x24
 80017aa:	f7ff ff61 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80017ae:	200b      	movs	r0, #11
 80017b0:	f7ff ff5e 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80017b4:	200e      	movs	r0, #14
 80017b6:	f7ff ff5b 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017ba:	2009      	movs	r0, #9
 80017bc:	f7ff ff58 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80017c0:	2054      	movs	r0, #84	; 0x54
 80017c2:	f7ff ff55 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80017c6:	20a8      	movs	r0, #168	; 0xa8
 80017c8:	f7ff ff52 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80017cc:	2046      	movs	r0, #70	; 0x46
 80017ce:	f7ff ff4f 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80017d2:	200c      	movs	r0, #12
 80017d4:	f7ff ff4c 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80017d8:	2017      	movs	r0, #23
 80017da:	f7ff ff49 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80017de:	2009      	movs	r0, #9
 80017e0:	f7ff ff46 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80017e4:	200f      	movs	r0, #15
 80017e6:	f7ff ff43 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff ff40 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ff3d 	bl	8001670 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80017f6:	20e1      	movs	r0, #225	; 0xe1
 80017f8:	f7ff ff2c 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff ff37 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8001802:	2019      	movs	r0, #25
 8001804:	f7ff ff34 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001808:	201b      	movs	r0, #27
 800180a:	f7ff ff31 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800180e:	2004      	movs	r0, #4
 8001810:	f7ff ff2e 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001814:	2010      	movs	r0, #16
 8001816:	f7ff ff2b 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 800181a:	2007      	movs	r0, #7
 800181c:	f7ff ff28 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001820:	202a      	movs	r0, #42	; 0x2a
 8001822:	f7ff ff25 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001826:	2047      	movs	r0, #71	; 0x47
 8001828:	f7ff ff22 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 800182c:	2039      	movs	r0, #57	; 0x39
 800182e:	f7ff ff1f 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001832:	2003      	movs	r0, #3
 8001834:	f7ff ff1c 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001838:	2006      	movs	r0, #6
 800183a:	f7ff ff19 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800183e:	2006      	movs	r0, #6
 8001840:	f7ff ff16 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001844:	2030      	movs	r0, #48	; 0x30
 8001846:	f7ff ff13 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800184a:	2038      	movs	r0, #56	; 0x38
 800184c:	f7ff ff10 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001850:	200f      	movs	r0, #15
 8001852:	f7ff ff0d 	bl	8001670 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001856:	2036      	movs	r0, #54	; 0x36
 8001858:	f7ff fefc 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 800185c:	20c8      	movs	r0, #200	; 0xc8
 800185e:	f7ff ff07 	bl	8001670 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001862:	202a      	movs	r0, #42	; 0x2a
 8001864:	f7ff fef6 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ff01 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fefe 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fefb 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800187a:	20ef      	movs	r0, #239	; 0xef
 800187c:	f7ff fef8 	bl	8001670 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001880:	202b      	movs	r0, #43	; 0x2b
 8001882:	f7ff fee7 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fef2 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff feef 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001892:	2001      	movs	r0, #1
 8001894:	f7ff feec 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001898:	203f      	movs	r0, #63	; 0x3f
 800189a:	f7ff fee9 	bl	8001670 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800189e:	203a      	movs	r0, #58	; 0x3a
 80018a0:	f7ff fed8 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80018a4:	2055      	movs	r0, #85	; 0x55
 80018a6:	f7ff fee3 	bl	8001670 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80018aa:	2011      	movs	r0, #17
 80018ac:	f7ff fed2 	bl	8001654 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <LCD_REG_Config+0x230>)
 80018b2:	f7ff fe72 	bl	800159a <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80018b6:	2029      	movs	r0, #41	; 0x29
 80018b8:	f7ff fecc 	bl	8001654 <LCD_Write_Cmd>
	
	
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	0002bffc 	.word	0x0002bffc

080018c4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4604      	mov	r4, r0
 80018cc:	4608      	mov	r0, r1
 80018ce:	4611      	mov	r1, r2
 80018d0:	461a      	mov	r2, r3
 80018d2:	4623      	mov	r3, r4
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	4603      	mov	r3, r0
 80018d8:	80bb      	strh	r3, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	807b      	strh	r3, [r7, #2]
 80018de:	4613      	mov	r3, r2
 80018e0:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80018e2:	202a      	movs	r0, #42	; 0x2a
 80018e4:	f7ff feb6 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff febe 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff feb8 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8001900:	88fa      	ldrh	r2, [r7, #6]
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	4413      	add	r3, r2
 8001906:	3b01      	subs	r3, #1
 8001908:	121b      	asrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff feaf 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	b2db      	uxtb	r3, r3
 8001920:	b29b      	uxth	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fea4 	bl	8001670 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001928:	202b      	movs	r0, #43	; 0x2b
 800192a:	f7ff fe93 	bl	8001654 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fe9b 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fe95 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	883b      	ldrh	r3, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	3b01      	subs	r3, #1
 800194e:	121b      	asrs	r3, r3, #8
 8001950:	b29b      	uxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe8c 	bl	8001670 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	883b      	ldrh	r3, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe81 	bl	8001670 <LCD_Write_Data>
	
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}

08001976 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001986:	202c      	movs	r0, #44	; 0x2c
 8001988:	f7ff fe64 	bl	8001654 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e006      	b.n	80019a0 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fe6b 	bl	8001670 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d3f4      	bcc.n	8001992 <LCD_FillColor+0x1c>
		
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80019b2:	b590      	push	{r4, r7, lr}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4604      	mov	r4, r0
 80019ba:	4608      	mov	r0, r1
 80019bc:	4611      	mov	r1, r2
 80019be:	461a      	mov	r2, r3
 80019c0:	4623      	mov	r3, r4
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	4603      	mov	r3, r0
 80019c6:	80bb      	strh	r3, [r7, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	807b      	strh	r3, [r7, #2]
 80019cc:	4613      	mov	r3, r2
 80019ce:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80019d0:	883b      	ldrh	r3, [r7, #0]
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	88b9      	ldrh	r1, [r7, #4]
 80019d6:	88f8      	ldrh	r0, [r7, #6]
 80019d8:	f7ff ff74 	bl	80018c4 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80019dc:	887b      	ldrh	r3, [r7, #2]
 80019de:	883a      	ldrh	r2, [r7, #0]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	461a      	mov	r2, r3
 80019e6:	8b3b      	ldrh	r3, [r7, #24]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff ffc3 	bl	8001976 <LCD_FillColor>
	
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd90      	pop	{r4, r7, pc}

080019f8 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	460b      	mov	r3, r1
 8001a04:	80bb      	strh	r3, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001a0a:	78fb      	ldrb	r3, [r7, #3]
 8001a0c:	3b20      	subs	r3, #32
 8001a0e:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8001a10:	88b9      	ldrh	r1, [r7, #4]
 8001a12:	88f8      	ldrh	r0, [r7, #6]
 8001a14:	2310      	movs	r3, #16
 8001a16:	2208      	movs	r2, #8
 8001a18:	f7ff ff54 	bl	80018c4 <LCD_OpenWindow>
	

	LCD_Write_Cmd ( CMD_SetPixel );	
 8001a1c:	202c      	movs	r0, #44	; 0x2c
 8001a1e:	f7ff fe19 	bl	8001654 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a22:	2300      	movs	r3, #0
 8001a24:	73bb      	strb	r3, [r7, #14]
 8001a26:	e023      	b.n	8001a70 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001a28:	7b3a      	ldrb	r2, [r7, #12]
 8001a2a:	7bbb      	ldrb	r3, [r7, #14]
 8001a2c:	4914      	ldr	r1, [pc, #80]	; (8001a80 <LCD_DrawChar+0x88>)
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	440a      	add	r2, r1
 8001a32:	4413      	add	r3, r2
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a38:	2300      	movs	r3, #0
 8001a3a:	737b      	strb	r3, [r7, #13]
 8001a3c:	e012      	b.n	8001a64 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001a48:	201f      	movs	r0, #31
 8001a4a:	f7ff fe11 	bl	8001670 <LCD_Write_Data>
 8001a4e:	e003      	b.n	8001a58 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001a50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a54:	f7ff fe0c 	bl	8001670 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	3301      	adds	r3, #1
 8001a62:	737b      	strb	r3, [r7, #13]
 8001a64:	7b7b      	ldrb	r3, [r7, #13]
 8001a66:	2b07      	cmp	r3, #7
 8001a68:	d9e9      	bls.n	8001a3e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	73bb      	strb	r3, [r7, #14]
 8001a70:	7bbb      	ldrb	r3, [r7, #14]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	d9d8      	bls.n	8001a28 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	0800abf0 	.word	0x0800abf0

08001a84 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	603a      	str	r2, [r7, #0]
 8001a8e:	80fb      	strh	r3, [r7, #6]
 8001a90:	460b      	mov	r3, r1
 8001a92:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001a94:	e01c      	b.n	8001ad0 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2be8      	cmp	r3, #232	; 0xe8
 8001a9a:	d904      	bls.n	8001aa6 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	3310      	adds	r3, #16
 8001aa4:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001aac:	d903      	bls.n	8001ab6 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	88b9      	ldrh	r1, [r7, #4]
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff9a 	bl	80019f8 <LCD_DrawChar>
		
		pStr ++;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	3308      	adds	r3, #8
 8001ace:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1de      	bne.n	8001a96 <LCD_DrawString+0x12>
		
	}
	
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <LCD_DrawValue>:

}


void LCD_DrawValue (uint16_t usC, uint16_t usP, int value)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b090      	sub	sp, #64	; 0x40
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	603a      	str	r2, [r7, #0]
 8001aee:	80fb      	strh	r3, [r7, #6]
 8001af0:	460b      	mov	r3, r1
 8001af2:	80bb      	strh	r3, [r7, #4]
	char value_str[50];
	sprintf(value_str, "%04d", value);
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	4917      	ldr	r1, [pc, #92]	; (8001b58 <LCD_DrawValue+0x74>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f006 fcf7 	bl	80084f0 <siprintf>
	const char* pStr = value_str;
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c

		while ( * pStr != '\0' )
 8001b08:	e01c      	b.n	8001b44 <LCD_DrawValue+0x60>
		{
			if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	2be8      	cmp	r3, #232	; 0xe8
 8001b0e:	d904      	bls.n	8001b1a <LCD_DrawValue+0x36>
			{
				usC = LCD_DispWindow_Start_COLUMN;
 8001b10:	2300      	movs	r3, #0
 8001b12:	80fb      	strh	r3, [r7, #6]
				usP += HEIGHT_EN_CHAR;
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	3310      	adds	r3, #16
 8001b18:	80bb      	strh	r3, [r7, #4]
			}

			if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001b20:	d903      	bls.n	8001b2a <LCD_DrawValue+0x46>
			{
				usC = LCD_DispWindow_Start_COLUMN;
 8001b22:	2300      	movs	r3, #0
 8001b24:	80fb      	strh	r3, [r7, #6]
				usP = LCD_DispWindow_Start_PAGE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	80bb      	strh	r3, [r7, #4]
			}

			LCD_DrawChar ( usC, usP, * pStr );
 8001b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	88b9      	ldrh	r1, [r7, #4]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff60 	bl	80019f8 <LCD_DrawChar>

			pStr ++;
 8001b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c

			usC += WIDTH_EN_CHAR;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	3308      	adds	r3, #8
 8001b42:	80fb      	strh	r3, [r7, #6]
		while ( * pStr != '\0' )
 8001b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1de      	bne.n	8001b0a <LCD_DrawValue+0x26>

		}
//	LCD_DrawString(usC, usP, value_str);
	
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3740      	adds	r7, #64	; 0x40
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	0800ab1c 	.word	0x0800ab1c

08001b5c <microDelay>:
float knownOriginal = 133000;  // in milli gram
float knownHX711 = 535000;
int weight = 0;
int disp_weight = 0;

void microDelay(uint16_t delay) {
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <microDelay+0x2c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001b6e:	bf00      	nop
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <microDelay+0x2c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d3f9      	bcc.n	8001b70 <microDelay+0x14>
		;
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	200015ac 	.word	0x200015ac

08001b8c <getHX711>:

uint32_t getHX711(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick();
 8001b96:	f001 fd3f 	bl	8003618 <HAL_GetTick>
 8001b9a:	6078      	str	r0, [r7, #4]
	while (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8001b9c:	e008      	b.n	8001bb0 <getHX711+0x24>
		if (HAL_GetTick() - startTime > 200)
 8001b9e:	f001 fd3b 	bl	8003618 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2bc8      	cmp	r3, #200	; 0xc8
 8001baa:	d901      	bls.n	8001bb0 <getHX711+0x24>
			return 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e047      	b.n	8001c40 <getHX711+0xb4>
	while (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET) {
 8001bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb4:	4824      	ldr	r0, [pc, #144]	; (8001c48 <getHX711+0xbc>)
 8001bb6:	f002 fe2d 	bl	8004814 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d0ee      	beq.n	8001b9e <getHX711+0x12>
	}
	for (int8_t len = 0; len < 24; len++) {
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	72fb      	strb	r3, [r7, #11]
 8001bc4:	e023      	b.n	8001c0e <getHX711+0x82>
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4820      	ldr	r0, [pc, #128]	; (8001c4c <getHX711+0xc0>)
 8001bcc:	f002 fe39 	bl	8004842 <HAL_GPIO_WritePin>
		microDelay(1);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff ffc3 	bl	8001b5c <microDelay>
		data = data << 1;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2104      	movs	r1, #4
 8001be0:	481a      	ldr	r0, [pc, #104]	; (8001c4c <getHX711+0xc0>)
 8001be2:	f002 fe2e 	bl	8004842 <HAL_GPIO_WritePin>
		microDelay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff ffb8 	bl	8001b5c <microDelay>
		if (HAL_GPIO_ReadPin(DT_PORT, DT_PIN) == GPIO_PIN_SET)
 8001bec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bf0:	4815      	ldr	r0, [pc, #84]	; (8001c48 <getHX711+0xbc>)
 8001bf2:	f002 fe0f 	bl	8004814 <HAL_GPIO_ReadPin>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d102      	bne.n	8001c02 <getHX711+0x76>
			data++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
	for (int8_t len = 0; len < 24; len++) {
 8001c02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	72fb      	strb	r3, [r7, #11]
 8001c0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c12:	2b17      	cmp	r3, #23
 8001c14:	ddd7      	ble.n	8001bc6 <getHX711+0x3a>
	}
	data = data ^ 0x800000;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001c1c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2104      	movs	r1, #4
 8001c22:	480a      	ldr	r0, [pc, #40]	; (8001c4c <getHX711+0xc0>)
 8001c24:	f002 fe0d 	bl	8004842 <HAL_GPIO_WritePin>
	microDelay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff ff97 	bl	8001b5c <microDelay>
	HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2104      	movs	r1, #4
 8001c32:	4806      	ldr	r0, [pc, #24]	; (8001c4c <getHX711+0xc0>)
 8001c34:	f002 fe05 	bl	8004842 <HAL_GPIO_WritePin>
	microDelay(1);
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff ff8f 	bl	8001b5c <microDelay>
	return data;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400

08001c50 <weigh>:

int weigh(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
	int32_t total = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
	int32_t samples = 10;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	60fb      	str	r3, [r7, #12]
	int milligram;
	float coefficient;
	for (uint16_t i = 0; i < samples; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	827b      	strh	r3, [r7, #18]
 8001c62:	e008      	b.n	8001c76 <weigh+0x26>
		total += getHX711();
 8001c64:	f7ff ff92 	bl	8001b8c <getHX711>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < samples; i++) {
 8001c70:	8a7b      	ldrh	r3, [r7, #18]
 8001c72:	3301      	adds	r3, #1
 8001c74:	827b      	strh	r3, [r7, #18]
 8001c76:	8a7b      	ldrh	r3, [r7, #18]
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dcf2      	bgt.n	8001c64 <weigh+0x14>
	}
	int32_t average = (uint32_t) (total / samples);
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c86:	60bb      	str	r3, [r7, #8]
	coefficient = knownOriginal / knownHX711;
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <weigh+0x7c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <weigh+0x80>)
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f926 	bl	8000ee4 <__aeabi_fdiv>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	607b      	str	r3, [r7, #4]
	milligram = (int) (average - tare) * coefficient;
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <weigh+0x84>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f815 	bl	8000cd4 <__aeabi_i2f>
 8001caa:	4603      	mov	r3, r0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f864 	bl	8000d7c <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f9b0 	bl	800101c <__aeabi_f2iz>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	603b      	str	r3, [r7, #0]
	return milligram;
 8001cc0:	683b      	ldr	r3, [r7, #0]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200000a4 	.word	0x200000a4
 8001cd0:	200000a8 	.word	0x200000a8
 8001cd4:	200000a0 	.word	0x200000a0

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
time.Hours = 0;
 8001cde:	4bb4      	ldr	r3, [pc, #720]	; (8001fb0 <main+0x2d8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
time.Minutes = 0;
 8001ce4:	4bb2      	ldr	r3, [pc, #712]	; (8001fb0 <main+0x2d8>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	705a      	strb	r2, [r3, #1]
time.Seconds = 0;
 8001cea:	4bb1      	ldr	r3, [pc, #708]	; (8001fb0 <main+0x2d8>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	709a      	strb	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f001 fc3a 	bl	8003568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 fc58 	bl	80025a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 fe54 	bl	80029a4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001cfc:	f000 ff7e 	bl	8002bfc <MX_FSMC_Init>
  MX_ADC2_Init();
 8001d00:	f000 fcb4 	bl	800266c <MX_ADC2_Init>
  MX_RTC_Init();
 8001d04:	f000 fcf0 	bl	80026e8 <MX_RTC_Init>
  MX_TIM1_Init();
 8001d08:	f000 fd2c 	bl	8002764 <MX_TIM1_Init>
  MX_TIM3_Init(0);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f000 fd79 	bl	8002804 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d12:	f000 fdf3 	bl	80028fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d16:	f000 fe1b 	bl	8002950 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 8001d1a:	f7ff fc4f 	bl	80015bc <LCD_INIT>

  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	2104      	movs	r1, #4
 8001d22:	48a4      	ldr	r0, [pc, #656]	; (8001fb4 <main+0x2dc>)
 8001d24:	f002 fd8d 	bl	8004842 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001d28:	200a      	movs	r0, #10
 8001d2a:	f001 fc7f 	bl	800362c <HAL_Delay>
  HAL_GPIO_WritePin(SCK_PORT, SCK_PIN, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2104      	movs	r1, #4
 8001d32:	48a0      	ldr	r0, [pc, #640]	; (8001fb4 <main+0x2dc>)
 8001d34:	f002 fd85 	bl	8004842 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f001 fc77 	bl	800362c <HAL_Delay>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d3e:	2100      	movs	r1, #0
 8001d40:	489d      	ldr	r0, [pc, #628]	; (8001fb8 <main+0x2e0>)
 8001d42:	f004 fa61 	bl	8006208 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8001d46:	489d      	ldr	r0, [pc, #628]	; (8001fbc <main+0x2e4>)
 8001d48:	f004 f9ae 	bl	80060a8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	489b      	ldr	r0, [pc, #620]	; (8001fc0 <main+0x2e8>)
 8001d52:	f002 fd76 	bl	8004842 <HAL_GPIO_WritePin>


//  HAL_UART_Receive_IT (&huart1, &PCInt, 1);
  HAL_UART_Receive_IT (&huart3, &LoraInt, 1);
 8001d56:	2201      	movs	r2, #1
 8001d58:	499a      	ldr	r1, [pc, #616]	; (8001fc4 <main+0x2ec>)
 8001d5a:	489b      	ldr	r0, [pc, #620]	; (8001fc8 <main+0x2f0>)
 8001d5c:	f005 f8b7 	bl	8006ece <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	HAL_ADCEx_Calibration_Start(&hadc2); // turn on the Calibration model
 8001d60:	489a      	ldr	r0, [pc, #616]	; (8001fcc <main+0x2f4>)
 8001d62:	f002 f8c5 	bl	8003ef0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc2);
 8001d66:	4899      	ldr	r0, [pc, #612]	; (8001fcc <main+0x2f4>)
 8001d68:	f001 fd6e 	bl	8003848 <HAL_ADC_Start>

	while(Ov7725_Init() != SUCCESS);
 8001d6c:	bf00      	nop
 8001d6e:	f7ff f97b 	bl	8001068 <Ov7725_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1fa      	bne.n	8001d6e <main+0x96>
	Ov7725_vsync = 0;
 8001d78:	4b95      	ldr	r3, [pc, #596]	; (8001fd0 <main+0x2f8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

	init_weight = weigh();
 8001d7e:	f7ff ff67 	bl	8001c50 <weigh>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <main+0x2fc>)
 8001d88:	801a      	strh	r2, [r3, #0]
	adjust_disp_weight = init_weight/100;
 8001d8a:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <main+0x2fc>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	4a92      	ldr	r2, [pc, #584]	; (8001fd8 <main+0x300>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <main+0x304>)
 8001d9a:	801a      	strh	r2, [r3, #0]
//		     	memset(PCMsg, 0, 20); // clear message buffer
//		     	Pindex = 0;
//		     	FromPCMsgComplete = 0;
//		   }

		  if (FromLoraMsgComplete){
 8001d9c:	4b90      	ldr	r3, [pc, #576]	; (8001fe0 <main+0x308>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d011      	beq.n	8001dc8 <main+0xf0>
		         HAL_UART_Transmit(&huart1, loraMsg, sizeof(loraMsg), 300); // transmit to PC for display
 8001da4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001da8:	22c8      	movs	r2, #200	; 0xc8
 8001daa:	498e      	ldr	r1, [pc, #568]	; (8001fe4 <main+0x30c>)
 8001dac:	488e      	ldr	r0, [pc, #568]	; (8001fe8 <main+0x310>)
 8001dae:	f005 f80b 	bl	8006dc8 <HAL_UART_Transmit>
		         memset(loraMsg, 0, 200); // clear message buffer
 8001db2:	22c8      	movs	r2, #200	; 0xc8
 8001db4:	2100      	movs	r1, #0
 8001db6:	488b      	ldr	r0, [pc, #556]	; (8001fe4 <main+0x30c>)
 8001db8:	f005 ff32 	bl	8007c20 <memset>
		         Lindex = 0;
 8001dbc:	4b8b      	ldr	r3, [pc, #556]	; (8001fec <main+0x314>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
		         FromLoraMsgComplete = 0;
 8001dc2:	4b87      	ldr	r3, [pc, #540]	; (8001fe0 <main+0x308>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		   }

		if(activated){
 8001dc8:	4b89      	ldr	r3, [pc, #548]	; (8001ff0 <main+0x318>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 83a4 	beq.w	800251a <main+0x842>

		  HAL_RTC_GetTime(&hrtc, &getTime, RTC_FORMAT_BIN);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4987      	ldr	r1, [pc, #540]	; (8001ff4 <main+0x31c>)
 8001dd6:	4888      	ldr	r0, [pc, #544]	; (8001ff8 <main+0x320>)
 8001dd8:	f003 fba4 	bl	8005524 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &getDate, RTC_FORMAT_BIN);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4987      	ldr	r1, [pc, #540]	; (8001ffc <main+0x324>)
 8001de0:	4885      	ldr	r0, [pc, #532]	; (8001ff8 <main+0x320>)
 8001de2:	f003 fc77 	bl	80056d4 <HAL_RTC_GetDate>

		  LCD_DrawString(50, 10, "Date: ");
 8001de6:	4a86      	ldr	r2, [pc, #536]	; (8002000 <main+0x328>)
 8001de8:	210a      	movs	r1, #10
 8001dea:	2032      	movs	r0, #50	; 0x32
 8001dec:	f7ff fe4a 	bl	8001a84 <LCD_DrawString>
		  LCD_DrawValue(90, 10, getDate.Year);
 8001df0:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <main+0x324>)
 8001df2:	78db      	ldrb	r3, [r3, #3]
 8001df4:	461a      	mov	r2, r3
 8001df6:	210a      	movs	r1, #10
 8001df8:	205a      	movs	r0, #90	; 0x5a
 8001dfa:	f7ff fe73 	bl	8001ae4 <LCD_DrawValue>
		  LCD_DrawValue(130, 10, getDate.Month);
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <main+0x324>)
 8001e00:	785b      	ldrb	r3, [r3, #1]
 8001e02:	461a      	mov	r2, r3
 8001e04:	210a      	movs	r1, #10
 8001e06:	2082      	movs	r0, #130	; 0x82
 8001e08:	f7ff fe6c 	bl	8001ae4 <LCD_DrawValue>
		  LCD_DrawValue(170, 10, getDate.Date);
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <main+0x324>)
 8001e0e:	789b      	ldrb	r3, [r3, #2]
 8001e10:	461a      	mov	r2, r3
 8001e12:	210a      	movs	r1, #10
 8001e14:	20aa      	movs	r0, #170	; 0xaa
 8001e16:	f7ff fe65 	bl	8001ae4 <LCD_DrawValue>

		  LCD_DrawString(50, 25, "Time: ");
 8001e1a:	4a7a      	ldr	r2, [pc, #488]	; (8002004 <main+0x32c>)
 8001e1c:	2119      	movs	r1, #25
 8001e1e:	2032      	movs	r0, #50	; 0x32
 8001e20:	f7ff fe30 	bl	8001a84 <LCD_DrawString>
		  LCD_DrawValue(90, 25, getTime.Hours);
 8001e24:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <main+0x31c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2119      	movs	r1, #25
 8001e2c:	205a      	movs	r0, #90	; 0x5a
 8001e2e:	f7ff fe59 	bl	8001ae4 <LCD_DrawValue>
		  LCD_DrawValue(130, 25, getTime.Minutes);
 8001e32:	4b70      	ldr	r3, [pc, #448]	; (8001ff4 <main+0x31c>)
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	461a      	mov	r2, r3
 8001e38:	2119      	movs	r1, #25
 8001e3a:	2082      	movs	r0, #130	; 0x82
 8001e3c:	f7ff fe52 	bl	8001ae4 <LCD_DrawValue>
		  LCD_DrawValue(170, 25, getTime.Seconds);
 8001e40:	4b6c      	ldr	r3, [pc, #432]	; (8001ff4 <main+0x31c>)
 8001e42:	789b      	ldrb	r3, [r3, #2]
 8001e44:	461a      	mov	r2, r3
 8001e46:	2119      	movs	r1, #25
 8001e48:	20aa      	movs	r0, #170	; 0xaa
 8001e4a:	f7ff fe4b 	bl	8001ae4 <LCD_DrawValue>

		  HAL_ADC_PollForConversion(&hadc2, 1000);
 8001e4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e52:	485e      	ldr	r0, [pc, #376]	; (8001fcc <main+0x2f4>)
 8001e54:	f001 fda6 	bl	80039a4 <HAL_ADC_PollForConversion>
		  value2 = HAL_ADC_GetValue(&hadc2);
 8001e58:	485c      	ldr	r0, [pc, #368]	; (8001fcc <main+0x2f4>)
 8001e5a:	f001 fea9 	bl	8003bb0 <HAL_ADC_GetValue>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a69      	ldr	r2, [pc, #420]	; (8002008 <main+0x330>)
 8001e62:	6013      	str	r3, [r2, #0]

		  menu = value2/1600; // min = 0, max = 4XXX
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <main+0x330>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5b      	ldr	r2, [pc, #364]	; (8001fd8 <main+0x300>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0a5b      	lsrs	r3, r3, #9
 8001e70:	4a66      	ldr	r2, [pc, #408]	; (800200c <main+0x334>)
 8001e72:	6013      	str	r3, [r2, #0]

	// -------------------------- Menu selection using VR as controller (ADC convertor)---------------
		 switch(Machine_state){
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <main+0x338>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d88f      	bhi.n	8001d9c <main+0xc4>
 8001e7c:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <main+0x1ac>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e99 	.word	0x08001e99
 8001e88:	08001fa1 	.word	0x08001fa1
 8001e8c:	08002273 	.word	0x08002273
 8001e90:	08002447 	.word	0x08002447
 8001e94:	0800248d 	.word	0x0800248d
		 	case 0:

		 			  countdown = 3;
 8001e98:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <main+0x33c>)
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	701a      	strb	r2, [r3, #0]

		 	  		  LCD_DrawString(50,60, "Select Function:");
 8001e9e:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <main+0x340>)
 8001ea0:	213c      	movs	r1, #60	; 0x3c
 8001ea2:	2032      	movs	r0, #50	; 0x32
 8001ea4:	f7ff fdee 	bl	8001a84 <LCD_DrawString>
		 	  		  LCD_DrawString(70,75, "Manual mode");
 8001ea8:	4a5c      	ldr	r2, [pc, #368]	; (800201c <main+0x344>)
 8001eaa:	214b      	movs	r1, #75	; 0x4b
 8001eac:	2046      	movs	r0, #70	; 0x46
 8001eae:	f7ff fde9 	bl	8001a84 <LCD_DrawString>
		 	  		  LCD_DrawString(70,90, "Schedule mode");
 8001eb2:	4a5b      	ldr	r2, [pc, #364]	; (8002020 <main+0x348>)
 8001eb4:	215a      	movs	r1, #90	; 0x5a
 8001eb6:	2046      	movs	r0, #70	; 0x46
 8001eb8:	f7ff fde4 	bl	8001a84 <LCD_DrawString>
		 	  		  LCD_DrawValue(70,280,value2);
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <main+0x330>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001ec6:	2046      	movs	r0, #70	; 0x46
 8001ec8:	f7ff fe0c 	bl	8001ae4 <LCD_DrawValue>
					 if(menu == 0){
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	; (800200c <main+0x334>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d111      	bne.n	8001ef8 <main+0x220>
						 LCD_Clear (50, 78, 20, 35, 0xFFFF);
 8001ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2323      	movs	r3, #35	; 0x23
 8001edc:	2214      	movs	r2, #20
 8001ede:	214e      	movs	r1, #78	; 0x4e
 8001ee0:	2032      	movs	r0, #50	; 0x32
 8001ee2:	f7ff fd66 	bl	80019b2 <LCD_Clear>
						 HAL_Delay(10);
 8001ee6:	200a      	movs	r0, #10
 8001ee8:	f001 fba0 	bl	800362c <HAL_Delay>
						 LCD_DrawString(50,75, ">>");
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <main+0x34c>)
 8001eee:	214b      	movs	r1, #75	; 0x4b
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f7ff fdc7 	bl	8001a84 <LCD_DrawString>
 8001ef6:	e014      	b.n	8001f22 <main+0x24a>

					 }else if(menu == 1){
 8001ef8:	4b44      	ldr	r3, [pc, #272]	; (800200c <main+0x334>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d110      	bne.n	8001f22 <main+0x24a>
				 		 LCD_Clear (50, 78, 20, 35, 0xFFFF);
 8001f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2323      	movs	r3, #35	; 0x23
 8001f08:	2214      	movs	r2, #20
 8001f0a:	214e      	movs	r1, #78	; 0x4e
 8001f0c:	2032      	movs	r0, #50	; 0x32
 8001f0e:	f7ff fd50 	bl	80019b2 <LCD_Clear>
				 		 HAL_Delay(10);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f001 fb8a 	bl	800362c <HAL_Delay>
				 		 LCD_DrawString(50,90, ">>");
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <main+0x34c>)
 8001f1a:	215a      	movs	r1, #90	; 0x5a
 8001f1c:	2032      	movs	r0, #50	; 0x32
 8001f1e:	f7ff fdb1 	bl	8001a84 <LCD_DrawString>
				 	  }
					 if(setting){
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <main+0x350>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d014      	beq.n	8001f54 <main+0x27c>
						 	setting = 0;
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <main+0x350>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
							function = menu;
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <main+0x334>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <main+0x354>)
 8001f38:	701a      	strb	r2, [r3, #0]
							Machine_state = 1;
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <main+0x338>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
							LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f4a:	22f0      	movs	r2, #240	; 0xf0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fd2f 	bl	80019b2 <LCD_Clear>
					 }

					 if(alarm_set){
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <main+0x358>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 82f5 	beq.w	8002548 <main+0x870>
						 HAL_RTC_GetAlarm(&hrtc, &sAlarm2, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	4934      	ldr	r1, [pc, #208]	; (8002034 <main+0x35c>)
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <main+0x320>)
 8001f66:	f003 fcc1 	bl	80058ec <HAL_RTC_GetAlarm>
						 LCD_DrawString(70,110, "Alarm set");
 8001f6a:	4a33      	ldr	r2, [pc, #204]	; (8002038 <main+0x360>)
 8001f6c:	216e      	movs	r1, #110	; 0x6e
 8001f6e:	2046      	movs	r0, #70	; 0x46
 8001f70:	f7ff fd88 	bl	8001a84 <LCD_DrawString>
						 LCD_DrawValue(70,130, sAlarm2.AlarmTime.Hours);
 8001f74:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <main+0x35c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2182      	movs	r1, #130	; 0x82
 8001f7c:	2046      	movs	r0, #70	; 0x46
 8001f7e:	f7ff fdb1 	bl	8001ae4 <LCD_DrawValue>
						 LCD_DrawValue(120,130, sAlarm2.AlarmTime.Minutes);
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <main+0x35c>)
 8001f84:	785b      	ldrb	r3, [r3, #1]
 8001f86:	461a      	mov	r2, r3
 8001f88:	2182      	movs	r1, #130	; 0x82
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f7ff fdaa 	bl	8001ae4 <LCD_DrawValue>
						 LCD_DrawValue(170,130, sAlarm2.AlarmTime.Seconds);
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <main+0x35c>)
 8001f92:	789b      	ldrb	r3, [r3, #2]
 8001f94:	461a      	mov	r2, r3
 8001f96:	2182      	movs	r1, #130	; 0x82
 8001f98:	20aa      	movs	r0, #170	; 0xaa
 8001f9a:	f7ff fda3 	bl	8001ae4 <LCD_DrawValue>

					 }
					 break;
 8001f9e:	e2d3      	b.n	8002548 <main+0x870>
		 	case 1:
		 		  switch(function){
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <main+0x354>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d049      	beq.n	800203c <main+0x364>
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d079      	beq.n	80020a0 <main+0x3c8>

				 		}



		 		break;
 8001fac:	e2d1      	b.n	8002552 <main+0x87a>
 8001fae:	bf00      	nop
 8001fb0:	2000171c 	.word	0x2000171c
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	200015f4 	.word	0x200015f4
 8001fbc:	200015ac 	.word	0x200015ac
 8001fc0:	40011800 	.word	0x40011800
 8001fc4:	20001750 	.word	0x20001750
 8001fc8:	20001684 	.word	0x20001684
 8001fcc:	20001568 	.word	0x20001568
 8001fd0:	2000183c 	.word	0x2000183c
 8001fd4:	20001838 	.word	0x20001838
 8001fd8:	51eb851f 	.word	0x51eb851f
 8001fdc:	2000183a 	.word	0x2000183a
 8001fe0:	20001752 	.word	0x20001752
 8001fe4:	20001768 	.word	0x20001768
 8001fe8:	2000163c 	.word	0x2000163c
 8001fec:	2000174e 	.word	0x2000174e
 8001ff0:	2000009c 	.word	0x2000009c
 8001ff4:	20001718 	.word	0x20001718
 8001ff8:	20001598 	.word	0x20001598
 8001ffc:	20001714 	.word	0x20001714
 8002000:	0800ab24 	.word	0x0800ab24
 8002004:	0800ab2c 	.word	0x0800ab2c
 8002008:	20001734 	.word	0x20001734
 800200c:	20001738 	.word	0x20001738
 8002010:	20001732 	.word	0x20001732
 8002014:	2000009b 	.word	0x2000009b
 8002018:	0800ab34 	.word	0x0800ab34
 800201c:	0800ab48 	.word	0x0800ab48
 8002020:	0800ab54 	.word	0x0800ab54
 8002024:	0800ab64 	.word	0x0800ab64
 8002028:	20001748 	.word	0x20001748
 800202c:	2000173c 	.word	0x2000173c
 8002030:	2000174b 	.word	0x2000174b
 8002034:	20001728 	.word	0x20001728
 8002038:	0800ab68 	.word	0x0800ab68
							LCD_DrawString(50,60, "Food weight: ");
 800203c:	4a90      	ldr	r2, [pc, #576]	; (8002280 <main+0x5a8>)
 800203e:	213c      	movs	r1, #60	; 0x3c
 8002040:	2032      	movs	r0, #50	; 0x32
 8002042:	f7ff fd1f 	bl	8001a84 <LCD_DrawString>
				 	  	 	amount = value2/200;
 8002046:	4b8f      	ldr	r3, [pc, #572]	; (8002284 <main+0x5ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a8f      	ldr	r2, [pc, #572]	; (8002288 <main+0x5b0>)
 800204c:	fba2 2303 	umull	r2, r3, r2, r3
 8002050:	099b      	lsrs	r3, r3, #6
 8002052:	4a8e      	ldr	r2, [pc, #568]	; (800228c <main+0x5b4>)
 8002054:	6013      	str	r3, [r2, #0]
				 	  	 	LCD_DrawValue(150,60, 5*amount);
 8002056:	4b8d      	ldr	r3, [pc, #564]	; (800228c <main+0x5b4>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	461a      	mov	r2, r3
 8002062:	213c      	movs	r1, #60	; 0x3c
 8002064:	2096      	movs	r0, #150	; 0x96
 8002066:	f7ff fd3d 	bl	8001ae4 <LCD_DrawValue>
				 	  	 	LCD_DrawString(200,60, "g");
 800206a:	4a89      	ldr	r2, [pc, #548]	; (8002290 <main+0x5b8>)
 800206c:	213c      	movs	r1, #60	; 0x3c
 800206e:	20c8      	movs	r0, #200	; 0xc8
 8002070:	f7ff fd08 	bl	8001a84 <LCD_DrawString>
				 	  	 	if(setting){
 8002074:	4b87      	ldr	r3, [pc, #540]	; (8002294 <main+0x5bc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80f6 	beq.w	800226a <main+0x592>
				 	  	 		setting = 0;
 800207e:	4b85      	ldr	r3, [pc, #532]	; (8002294 <main+0x5bc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
				 	  			Machine_state = 2;
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <main+0x5c0>)
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
				 	  			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 800208a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002094:	22f0      	movs	r2, #240	; 0xf0
 8002096:	2100      	movs	r1, #0
 8002098:	2000      	movs	r0, #0
 800209a:	f7ff fc8a 	bl	80019b2 <LCD_Clear>
				 	  	 	break;
 800209e:	e0e4      	b.n	800226a <main+0x592>
				 		 LCD_DrawString(50,60, "First Daily Alarm: ");
 80020a0:	4a7e      	ldr	r2, [pc, #504]	; (800229c <main+0x5c4>)
 80020a2:	213c      	movs	r1, #60	; 0x3c
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	f7ff fced 	bl	8001a84 <LCD_DrawString>
				 		 if(setting == 0){
 80020aa:	4b7a      	ldr	r3, [pc, #488]	; (8002294 <main+0x5bc>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d134      	bne.n	800211c <main+0x444>
				 			hour = value2/145;
 80020b2:	4b74      	ldr	r3, [pc, #464]	; (8002284 <main+0x5ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7a      	ldr	r2, [pc, #488]	; (80022a0 <main+0x5c8>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	09db      	lsrs	r3, r3, #7
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <main+0x5cc>)
 80020c2:	701a      	strb	r2, [r3, #0]
				 			if(hour > 24) hour = 24;
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <main+0x5cc>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b18      	cmp	r3, #24
 80020ca:	d902      	bls.n	80020d2 <main+0x3fa>
 80020cc:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <main+0x5cc>)
 80020ce:	2218      	movs	r2, #24
 80020d0:	701a      	strb	r2, [r3, #0]
				 			LCD_DrawValue(50,75, hour);
 80020d2:	4b74      	ldr	r3, [pc, #464]	; (80022a4 <main+0x5cc>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	214b      	movs	r1, #75	; 0x4b
 80020da:	2032      	movs	r0, #50	; 0x32
 80020dc:	f7ff fd02 	bl	8001ae4 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 80020e0:	4a71      	ldr	r2, [pc, #452]	; (80022a8 <main+0x5d0>)
 80020e2:	214b      	movs	r1, #75	; 0x4b
 80020e4:	2055      	movs	r0, #85	; 0x55
 80020e6:	f7ff fccd 	bl	8001a84 <LCD_DrawString>
				 			LCD_DrawValue(90,75, time.Minutes);
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <main+0x5d4>)
 80020ec:	785b      	ldrb	r3, [r3, #1]
 80020ee:	461a      	mov	r2, r3
 80020f0:	214b      	movs	r1, #75	; 0x4b
 80020f2:	205a      	movs	r0, #90	; 0x5a
 80020f4:	f7ff fcf6 	bl	8001ae4 <LCD_DrawValue>
				 			HAL_Delay(400);
 80020f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80020fc:	f001 fa96 	bl	800362c <HAL_Delay>
				 			LCD_Clear (50, 75, 35, 15, 0xFFFF);
 8002100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	230f      	movs	r3, #15
 8002108:	2223      	movs	r2, #35	; 0x23
 800210a:	214b      	movs	r1, #75	; 0x4b
 800210c:	2032      	movs	r0, #50	; 0x32
 800210e:	f7ff fc50 	bl	80019b2 <LCD_Clear>
				 			HAL_Delay(400);
 8002112:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002116:	f001 fa89 	bl	800362c <HAL_Delay>
				 		break;
 800211a:	e0a8      	b.n	800226e <main+0x596>
				 		 } else if(setting == 1){
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <main+0x5bc>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d13b      	bne.n	800219c <main+0x4c4>
				 			time.Hours = hour;
 8002124:	4b5f      	ldr	r3, [pc, #380]	; (80022a4 <main+0x5cc>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	4b60      	ldr	r3, [pc, #384]	; (80022ac <main+0x5d4>)
 800212a:	701a      	strb	r2, [r3, #0]
				 			minute = value2/57;
 800212c:	4b55      	ldr	r3, [pc, #340]	; (8002284 <main+0x5ac>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <main+0x5d8>)
 8002132:	fba3 1302 	umull	r1, r3, r3, r2
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	0852      	lsrs	r2, r2, #1
 800213a:	4413      	add	r3, r2
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <main+0x5dc>)
 8002142:	701a      	strb	r2, [r3, #0]
				 			if(minute > 60) minute = 60;
 8002144:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <main+0x5dc>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b3c      	cmp	r3, #60	; 0x3c
 800214a:	d902      	bls.n	8002152 <main+0x47a>
 800214c:	4b59      	ldr	r3, [pc, #356]	; (80022b4 <main+0x5dc>)
 800214e:	223c      	movs	r2, #60	; 0x3c
 8002150:	701a      	strb	r2, [r3, #0]
				 			LCD_DrawValue(50,75, time.Hours);
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <main+0x5d4>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	214b      	movs	r1, #75	; 0x4b
 800215a:	2032      	movs	r0, #50	; 0x32
 800215c:	f7ff fcc2 	bl	8001ae4 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <main+0x5d0>)
 8002162:	214b      	movs	r1, #75	; 0x4b
 8002164:	2055      	movs	r0, #85	; 0x55
 8002166:	f7ff fc8d 	bl	8001a84 <LCD_DrawString>
				 			LCD_DrawValue(90,75, minute);
 800216a:	4b52      	ldr	r3, [pc, #328]	; (80022b4 <main+0x5dc>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	214b      	movs	r1, #75	; 0x4b
 8002172:	205a      	movs	r0, #90	; 0x5a
 8002174:	f7ff fcb6 	bl	8001ae4 <LCD_DrawValue>
				 			HAL_Delay(400);
 8002178:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800217c:	f001 fa56 	bl	800362c <HAL_Delay>
				 			LCD_Clear (90, 75, 35, 15, 0xFFFF);
 8002180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	230f      	movs	r3, #15
 8002188:	2223      	movs	r2, #35	; 0x23
 800218a:	214b      	movs	r1, #75	; 0x4b
 800218c:	205a      	movs	r0, #90	; 0x5a
 800218e:	f7ff fc10 	bl	80019b2 <LCD_Clear>
				 			HAL_Delay(400);
 8002192:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002196:	f001 fa49 	bl	800362c <HAL_Delay>
				 		break;
 800219a:	e068      	b.n	800226e <main+0x596>
				 		 } else if (setting == 2){
 800219c:	4b3d      	ldr	r3, [pc, #244]	; (8002294 <main+0x5bc>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d133      	bne.n	800220c <main+0x534>
				 			time.Minutes = minute;
 80021a4:	4b43      	ldr	r3, [pc, #268]	; (80022b4 <main+0x5dc>)
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <main+0x5d4>)
 80021aa:	705a      	strb	r2, [r3, #1]
				 			LCD_DrawValue(50,75, time.Hours);
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <main+0x5d4>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	461a      	mov	r2, r3
 80021b2:	214b      	movs	r1, #75	; 0x4b
 80021b4:	2032      	movs	r0, #50	; 0x32
 80021b6:	f7ff fc95 	bl	8001ae4 <LCD_DrawValue>
				 			LCD_DrawString(85,75, ":");
 80021ba:	4a3b      	ldr	r2, [pc, #236]	; (80022a8 <main+0x5d0>)
 80021bc:	214b      	movs	r1, #75	; 0x4b
 80021be:	2055      	movs	r0, #85	; 0x55
 80021c0:	f7ff fc60 	bl	8001a84 <LCD_DrawString>
				 			LCD_DrawValue(90,75, time.Minutes);
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <main+0x5d4>)
 80021c6:	785b      	ldrb	r3, [r3, #1]
 80021c8:	461a      	mov	r2, r3
 80021ca:	214b      	movs	r1, #75	; 0x4b
 80021cc:	205a      	movs	r0, #90	; 0x5a
 80021ce:	f7ff fc89 	bl	8001ae4 <LCD_DrawValue>
				 			LCD_DrawString(50,90, "Food weight: ");
 80021d2:	4a2b      	ldr	r2, [pc, #172]	; (8002280 <main+0x5a8>)
 80021d4:	215a      	movs	r1, #90	; 0x5a
 80021d6:	2032      	movs	r0, #50	; 0x32
 80021d8:	f7ff fc54 	bl	8001a84 <LCD_DrawString>
				 			amount = value2/200;
 80021dc:	4b29      	ldr	r3, [pc, #164]	; (8002284 <main+0x5ac>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	; (8002288 <main+0x5b0>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <main+0x5b4>)
 80021ea:	6013      	str	r3, [r2, #0]
				 			LCD_DrawValue(150,90, 5*amount);
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <main+0x5b4>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	461a      	mov	r2, r3
 80021f8:	215a      	movs	r1, #90	; 0x5a
 80021fa:	2096      	movs	r0, #150	; 0x96
 80021fc:	f7ff fc72 	bl	8001ae4 <LCD_DrawValue>
				 			LCD_DrawString(200,90, "g");
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <main+0x5b8>)
 8002202:	215a      	movs	r1, #90	; 0x5a
 8002204:	20c8      	movs	r0, #200	; 0xc8
 8002206:	f7ff fc3d 	bl	8001a84 <LCD_DrawString>
				 		break;
 800220a:	e030      	b.n	800226e <main+0x596>
				 		 }else if(setting == 3){
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <main+0x5bc>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d12c      	bne.n	800226e <main+0x596>
				 			sAlarm.Alarm = RTC_ALARM_A;
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <main+0x5e0>)
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
				 			sAlarm.AlarmTime.Hours = time.Hours;
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <main+0x5d4>)
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <main+0x5e0>)
 8002220:	701a      	strb	r2, [r3, #0]
				 			sAlarm.AlarmTime.Minutes = time.Minutes;
 8002222:	4b22      	ldr	r3, [pc, #136]	; (80022ac <main+0x5d4>)
 8002224:	785a      	ldrb	r2, [r3, #1]
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <main+0x5e0>)
 8002228:	705a      	strb	r2, [r3, #1]
				 			sAlarm.AlarmTime.Seconds = time.Seconds;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <main+0x5d4>)
 800222c:	789a      	ldrb	r2, [r3, #2]
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <main+0x5e0>)
 8002230:	709a      	strb	r2, [r3, #2]
				 			if(HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) == HAL_OK){
 8002232:	2200      	movs	r2, #0
 8002234:	4920      	ldr	r1, [pc, #128]	; (80022b8 <main+0x5e0>)
 8002236:	4821      	ldr	r0, [pc, #132]	; (80022bc <main+0x5e4>)
 8002238:	f003 faa0 	bl	800577c <HAL_RTC_SetAlarm_IT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <main+0x570>
				 				alarm_set = 1;
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <main+0x5e8>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
				 			setting = 0;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <main+0x5bc>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
				 			Machine_state = 0;
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <main+0x5c0>)
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
				 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8002254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800225e:	22f0      	movs	r2, #240	; 0xf0
 8002260:	2100      	movs	r1, #0
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff fba5 	bl	80019b2 <LCD_Clear>
				 		break;
 8002268:	e001      	b.n	800226e <main+0x596>
				 	  	 	break;
 800226a:	bf00      	nop
 800226c:	e171      	b.n	8002552 <main+0x87a>
				 		break;
 800226e:	bf00      	nop
		 		break;
 8002270:	e16f      	b.n	8002552 <main+0x87a>
	//------------- ----------------------------- RTC & Servo motor ------------------------------------------------
		 	case 2:

		 		 switch(function){
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <main+0x5ec>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d026      	beq.n	80022c8 <main+0x5f0>
 800227a:	2b01      	cmp	r3, #1
 800227c:	d07d      	beq.n	800237a <main+0x6a2>
 800227e:	e0e2      	b.n	8002446 <main+0x76e>
 8002280:	0800ab74 	.word	0x0800ab74
 8002284:	20001734 	.word	0x20001734
 8002288:	51eb851f 	.word	0x51eb851f
 800228c:	20001740 	.word	0x20001740
 8002290:	0800ab84 	.word	0x0800ab84
 8002294:	20001748 	.word	0x20001748
 8002298:	20001732 	.word	0x20001732
 800229c:	0800ab88 	.word	0x0800ab88
 80022a0:	e1fc780f 	.word	0xe1fc780f
 80022a4:	20001749 	.word	0x20001749
 80022a8:	0800ab9c 	.word	0x0800ab9c
 80022ac:	2000171c 	.word	0x2000171c
 80022b0:	1f7047dd 	.word	0x1f7047dd
 80022b4:	2000174a 	.word	0x2000174a
 80022b8:	20001720 	.word	0x20001720
 80022bc:	20001598 	.word	0x20001598
 80022c0:	2000174b 	.word	0x2000174b
 80022c4:	2000173c 	.word	0x2000173c
		 		 	case 0:
		 		 		weight = weigh();
 80022c8:	f7ff fcc2 	bl	8001c50 <weigh>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4aa1      	ldr	r2, [pc, #644]	; (8002554 <main+0x87c>)
 80022d0:	6013      	str	r3, [r2, #0]
		 		 		disp_weight = weight/100 - adjust_disp_weight;
 80022d2:	4ba0      	ldr	r3, [pc, #640]	; (8002554 <main+0x87c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4aa0      	ldr	r2, [pc, #640]	; (8002558 <main+0x880>)
 80022d8:	fb82 1203 	smull	r1, r2, r2, r3
 80022dc:	1152      	asrs	r2, r2, #5
 80022de:	17db      	asrs	r3, r3, #31
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	4a9e      	ldr	r2, [pc, #632]	; (800255c <main+0x884>)
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	4a9d      	ldr	r2, [pc, #628]	; (8002560 <main+0x888>)
 80022ea:	6013      	str	r3, [r2, #0]

		 		 		LCD_DrawString(20, 50, "Distributing the food....");
 80022ec:	4a9d      	ldr	r2, [pc, #628]	; (8002564 <main+0x88c>)
 80022ee:	2132      	movs	r1, #50	; 0x32
 80022f0:	2014      	movs	r0, #20
 80022f2:	f7ff fbc7 	bl	8001a84 <LCD_DrawString>
		 		 		LCD_DrawString(20, 75, "Weight");
 80022f6:	4a9c      	ldr	r2, [pc, #624]	; (8002568 <main+0x890>)
 80022f8:	214b      	movs	r1, #75	; 0x4b
 80022fa:	2014      	movs	r0, #20
 80022fc:	f7ff fbc2 	bl	8001a84 <LCD_DrawString>
		 		 		LCD_DrawValue(70, 75, disp_weight);
 8002300:	4b97      	ldr	r3, [pc, #604]	; (8002560 <main+0x888>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	461a      	mov	r2, r3
 8002306:	214b      	movs	r1, #75	; 0x4b
 8002308:	2046      	movs	r0, #70	; 0x46
 800230a:	f7ff fbeb 	bl	8001ae4 <LCD_DrawValue>
		 		 		HAL_Delay(1000); // if not then the weight won't be init
 800230e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002312:	f001 f98b 	bl	800362c <HAL_Delay>

		 		 		MX_TIM3_Init(250);
 8002316:	20fa      	movs	r0, #250	; 0xfa
 8002318:	f000 fa74 	bl	8002804 <MX_TIM3_Init>
		 		 		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800231c:	2100      	movs	r1, #0
 800231e:	4893      	ldr	r0, [pc, #588]	; (800256c <main+0x894>)
 8002320:	f003 ff72 	bl	8006208 <HAL_TIM_PWM_Start>
		 		 		HAL_Delay(300);
 8002324:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002328:	f001 f980 	bl	800362c <HAL_Delay>

		 		 		total_weight = 5 * (int)amount;
 800232c:	4b90      	ldr	r3, [pc, #576]	; (8002570 <main+0x898>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	4a8e      	ldr	r2, [pc, #568]	; (8002574 <main+0x89c>)
 800233a:	6013      	str	r3, [r2, #0]
		 		 		if(disp_weight >total_weight){
 800233c:	4b88      	ldr	r3, [pc, #544]	; (8002560 <main+0x888>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <main+0x89c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	dd7d      	ble.n	8002444 <main+0x76c>
		 		 			MX_TIM3_Init(50);
 8002348:	2032      	movs	r0, #50	; 0x32
 800234a:	f000 fa5b 	bl	8002804 <MX_TIM3_Init>
		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800234e:	2100      	movs	r1, #0
 8002350:	4886      	ldr	r0, [pc, #536]	; (800256c <main+0x894>)
 8002352:	f003 ff59 	bl	8006208 <HAL_TIM_PWM_Start>
		 		 			HAL_Delay(500);
 8002356:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800235a:	f001 f967 	bl	800362c <HAL_Delay>
		 		 			Machine_state = 3;
 800235e:	4b86      	ldr	r3, [pc, #536]	; (8002578 <main+0x8a0>)
 8002360:	2203      	movs	r2, #3
 8002362:	701a      	strb	r2, [r3, #0]
		 		 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8002364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800236e:	22f0      	movs	r2, #240	; 0xf0
 8002370:	2100      	movs	r1, #0
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff fb1d 	bl	80019b2 <LCD_Clear>
//		 		 			MX_TIM3_Init(50);
//		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//		 		 			HAL_Delay(500);
//		 		 		}

		 		 		break;
 8002378:	e064      	b.n	8002444 <main+0x76c>

		 		 	case 1:
		 		 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 800237a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002384:	22f0      	movs	r2, #240	; 0xf0
 8002386:	2100      	movs	r1, #0
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fb12 	bl	80019b2 <LCD_Clear>
		 		 			weight = weigh();
 800238e:	f7ff fc5f 	bl	8001c50 <weigh>
 8002392:	4603      	mov	r3, r0
 8002394:	4a6f      	ldr	r2, [pc, #444]	; (8002554 <main+0x87c>)
 8002396:	6013      	str	r3, [r2, #0]
		 		 			disp_weight = weight/100 - adjust_disp_weight+1;
 8002398:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <main+0x87c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6e      	ldr	r2, [pc, #440]	; (8002558 <main+0x880>)
 800239e:	fb82 1203 	smull	r1, r2, r2, r3
 80023a2:	1152      	asrs	r2, r2, #5
 80023a4:	17db      	asrs	r3, r3, #31
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4a6c      	ldr	r2, [pc, #432]	; (800255c <main+0x884>)
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	3301      	adds	r3, #1
 80023b0:	4a6b      	ldr	r2, [pc, #428]	; (8002560 <main+0x888>)
 80023b2:	6013      	str	r3, [r2, #0]

		 		 			LCD_DrawString(20,50, "Distributing the food...");
 80023b4:	4a71      	ldr	r2, [pc, #452]	; (800257c <main+0x8a4>)
 80023b6:	2132      	movs	r1, #50	; 0x32
 80023b8:	2014      	movs	r0, #20
 80023ba:	f7ff fb63 	bl	8001a84 <LCD_DrawString>
		 		 			LCD_DrawString(20, 75, "Weight");
 80023be:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <main+0x890>)
 80023c0:	214b      	movs	r1, #75	; 0x4b
 80023c2:	2014      	movs	r0, #20
 80023c4:	f7ff fb5e 	bl	8001a84 <LCD_DrawString>
		 		 			LCD_DrawValue(70, 75, disp_weight);
 80023c8:	4b65      	ldr	r3, [pc, #404]	; (8002560 <main+0x888>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	214b      	movs	r1, #75	; 0x4b
 80023d0:	2046      	movs	r0, #70	; 0x46
 80023d2:	f7ff fb87 	bl	8001ae4 <LCD_DrawValue>
		 		 			HAL_Delay(1000); // if not then the weight won't be init
 80023d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023da:	f001 f927 	bl	800362c <HAL_Delay>

		 		 			MX_TIM3_Init(250);
 80023de:	20fa      	movs	r0, #250	; 0xfa
 80023e0:	f000 fa10 	bl	8002804 <MX_TIM3_Init>
		 		 			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80023e4:	2100      	movs	r1, #0
 80023e6:	4861      	ldr	r0, [pc, #388]	; (800256c <main+0x894>)
 80023e8:	f003 ff0e 	bl	8006208 <HAL_TIM_PWM_Start>
		 		 			HAL_Delay(300);
 80023ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023f0:	f001 f91c 	bl	800362c <HAL_Delay>

		 		 			total_weight = 5 * (int)amount;
 80023f4:	4b5e      	ldr	r3, [pc, #376]	; (8002570 <main+0x898>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	4a5c      	ldr	r2, [pc, #368]	; (8002574 <main+0x89c>)
 8002402:	6013      	str	r3, [r2, #0]
		 		 			if(disp_weight >total_weight-5){ // leave some buffer
 8002404:	4b5b      	ldr	r3, [pc, #364]	; (8002574 <main+0x89c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	1f1a      	subs	r2, r3, #4
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <main+0x888>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	dc19      	bgt.n	8002446 <main+0x76e>
		 		 				MX_TIM3_Init(50);
 8002412:	2032      	movs	r0, #50	; 0x32
 8002414:	f000 f9f6 	bl	8002804 <MX_TIM3_Init>
		 		 				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002418:	2100      	movs	r1, #0
 800241a:	4854      	ldr	r0, [pc, #336]	; (800256c <main+0x894>)
 800241c:	f003 fef4 	bl	8006208 <HAL_TIM_PWM_Start>
		 		 				HAL_Delay(500);
 8002420:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002424:	f001 f902 	bl	800362c <HAL_Delay>
		 		 				Machine_state = 3;
 8002428:	4b53      	ldr	r3, [pc, #332]	; (8002578 <main+0x8a0>)
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
		 		 				LCD_Clear (0, 0, 240, 320, 0xFFFF);
 800242e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002438:	22f0      	movs	r2, #240	; 0xf0
 800243a:	2100      	movs	r1, #0
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fab8 	bl	80019b2 <LCD_Clear>
 8002442:	e000      	b.n	8002446 <main+0x76e>
		 		 		break;
 8002444:	bf00      	nop
		 		 			}
		 		 }
	//------------- ----------------------------- Sensing approach and eat ------------------------------------------------
		 	case 3:
		 		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == SET) eat = 1;// if the pet start to eat
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	484d      	ldr	r0, [pc, #308]	; (8002580 <main+0x8a8>)
 800244a:	f002 f9e3 	bl	8004814 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d102      	bne.n	800245a <main+0x782>
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <main+0x8ac>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
		 		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == RESET && eat){
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	4848      	ldr	r0, [pc, #288]	; (8002580 <main+0x8a8>)
 800245e:	f002 f9d9 	bl	8004814 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d171      	bne.n	800254c <main+0x874>
 8002468:	4b46      	ldr	r3, [pc, #280]	; (8002584 <main+0x8ac>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d06d      	beq.n	800254c <main+0x874>
		 			Machine_state = 4;
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <main+0x8a0>)
 8002472:	2204      	movs	r2, #4
 8002474:	701a      	strb	r2, [r3, #0]
		 			LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8002476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002480:	22f0      	movs	r2, #240	; 0xf0
 8002482:	2100      	movs	r1, #0
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff fa94 	bl	80019b2 <LCD_Clear>
		 		}
		 		break;
 800248a:	e05f      	b.n	800254c <main+0x874>
	//------------- ----------------------------- // Done eating,  take photo with OV7725 and send to PC -------------------
		 	case 4:
		 		LCD_DrawValue(50, 130, countdown);
 800248c:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <main+0x8b0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	2182      	movs	r1, #130	; 0x82
 8002494:	2032      	movs	r0, #50	; 0x32
 8002496:	f7ff fb25 	bl	8001ae4 <LCD_DrawValue>
		 		HAL_Delay(1000);
 800249a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800249e:	f001 f8c5 	bl	800362c <HAL_Delay>
		 		countdown--;
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <main+0x8b0>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <main+0x8b0>)
 80024ac:	701a      	strb	r2, [r3, #0]
		 		 if(!countdown)
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <main+0x8b0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d14c      	bne.n	8002550 <main+0x878>
		 			if (Ov7725_vsync == 2) {
 80024b6:	4b35      	ldr	r3, [pc, #212]	; (800258c <main+0x8b4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d147      	bne.n	8002550 <main+0x878>
		 				HAL_Delay(500);
 80024c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024c4:	f001 f8b2 	bl	800362c <HAL_Delay>
		 				FIFO_PREPARE;
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <main+0x8b8>)
 80024ca:	2204      	movs	r2, #4
 80024cc:	615a      	str	r2, [r3, #20]
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <main+0x8bc>)
 80024d0:	2220      	movs	r2, #32
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <main+0x8bc>)
 80024d6:	2220      	movs	r2, #32
 80024d8:	611a      	str	r2, [r3, #16]
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <main+0x8b8>)
 80024dc:	2204      	movs	r2, #4
 80024de:	611a      	str	r2, [r3, #16]
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <main+0x8bc>)
 80024e2:	2220      	movs	r2, #32
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <main+0x8bc>)
 80024e8:	2220      	movs	r2, #32
 80024ea:	611a      	str	r2, [r3, #16]
//		 				ImagDisp();
		 				ImagDisp2(&huart1);
 80024ec:	482a      	ldr	r0, [pc, #168]	; (8002598 <main+0x8c0>)
 80024ee:	f7fe fe05 	bl	80010fc <ImagDisp2>
		 				Ov7725_vsync = 0;
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <main+0x8b4>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]
						HAL_Delay(2000);
 80024f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024fc:	f001 f896 	bl	800362c <HAL_Delay>
						Machine_state = 0;
 8002500:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <main+0x8a0>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
						LCD_INIT();
 8002506:	f7ff f859 	bl	80015bc <LCD_INIT>
						if(alarm_set) alarm_set = 0;
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <main+0x8c4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d01e      	beq.n	8002550 <main+0x878>
 8002512:	4b22      	ldr	r3, [pc, #136]	; (800259c <main+0x8c4>)
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
					}

		 		break;
 8002518:	e01a      	b.n	8002550 <main+0x878>
//
		 }

		 }else {
			 if(display){
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <main+0x8c8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <main+0x864>
				 LCD_Clear (0, 0, 240, 320, 0xFFFF);
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	2100      	movs	r1, #0
 8002530:	2000      	movs	r0, #0
 8002532:	f7ff fa3e 	bl	80019b2 <LCD_Clear>
				 display = 0;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <main+0x8c8>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
			 }

			 LCD_DrawString(50,60, "Not Activated");
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <main+0x8cc>)
 800253e:	213c      	movs	r1, #60	; 0x3c
 8002540:	2032      	movs	r0, #50	; 0x32
 8002542:	f7ff fa9f 	bl	8001a84 <LCD_DrawString>
 8002546:	e429      	b.n	8001d9c <main+0xc4>
					 break;
 8002548:	bf00      	nop
 800254a:	e427      	b.n	8001d9c <main+0xc4>
		 		break;
 800254c:	bf00      	nop
 800254e:	e425      	b.n	8001d9c <main+0xc4>
		 		break;
 8002550:	bf00      	nop
		  if (FromLoraMsgComplete){
 8002552:	e423      	b.n	8001d9c <main+0xc4>
 8002554:	20001840 	.word	0x20001840
 8002558:	51eb851f 	.word	0x51eb851f
 800255c:	2000183a 	.word	0x2000183a
 8002560:	20001844 	.word	0x20001844
 8002564:	0800aba0 	.word	0x0800aba0
 8002568:	0800abbc 	.word	0x0800abbc
 800256c:	200015f4 	.word	0x200015f4
 8002570:	20001740 	.word	0x20001740
 8002574:	20001744 	.word	0x20001744
 8002578:	20001732 	.word	0x20001732
 800257c:	0800abc4 	.word	0x0800abc4
 8002580:	40010c00 	.word	0x40010c00
 8002584:	2000174c 	.word	0x2000174c
 8002588:	2000009b 	.word	0x2000009b
 800258c:	2000183c 	.word	0x2000183c
 8002590:	40010800 	.word	0x40010800
 8002594:	40011000 	.word	0x40011000
 8002598:	2000163c 	.word	0x2000163c
 800259c:	2000174b 	.word	0x2000174b
 80025a0:	20001834 	.word	0x20001834
 80025a4:	0800abe0 	.word	0x0800abe0

080025a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b096      	sub	sp, #88	; 0x58
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 fb32 	bl	8007c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]
 80025da:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80025dc:	2305      	movs	r3, #5
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025e6:	2300      	movs	r3, #0
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80025ea:	2301      	movs	r3, #1
 80025ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ee:	2301      	movs	r3, #1
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f2:	2302      	movs	r3, #2
 80025f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002600:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002606:	4618      	mov	r0, r3
 8002608:	f002 f962 	bl	80048d0 <HAL_RCC_OscConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002612:	f000 fc1f 	bl	8002e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002616:	230f      	movs	r3, #15
 8002618:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2102      	movs	r1, #2
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fbce 	bl	8004dd4 <HAL_RCC_ClockConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800263e:	f000 fc09 	bl	8002e54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8002642:	2303      	movs	r3, #3
 8002644:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800264c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002650:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fd4b 	bl	80050f0 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002660:	f000 fbf8 	bl	8002e54 <Error_Handler>
  }
}
 8002664:	bf00      	nop
 8002666:	3758      	adds	r7, #88	; 0x58
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <MX_ADC2_Init+0x74>)
 800267e:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <MX_ADC2_Init+0x78>)
 8002680:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <MX_ADC2_Init+0x74>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <MX_ADC2_Init+0x74>)
 800268a:	2201      	movs	r2, #1
 800268c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800268e:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <MX_ADC2_Init+0x74>)
 8002690:	2200      	movs	r2, #0
 8002692:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <MX_ADC2_Init+0x74>)
 8002696:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800269a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <MX_ADC2_Init+0x74>)
 800269e:	2200      	movs	r2, #0
 80026a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_ADC2_Init+0x74>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <MX_ADC2_Init+0x74>)
 80026aa:	f000 ffe3 	bl	8003674 <HAL_ADC_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80026b4:	f000 fbce 	bl	8002e54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80026b8:	2307      	movs	r3, #7
 80026ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026bc:	2301      	movs	r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_ADC2_Init+0x74>)
 80026ca:	f001 fa7d 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80026d4:	f000 fbbe 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20001568 	.word	0x20001568
 80026e4:	40012800 	.word	0x40012800

080026e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2100      	movs	r1, #0
 80026f4:	460a      	mov	r2, r1
 80026f6:	801a      	strh	r2, [r3, #0]
 80026f8:	460a      	mov	r2, r1
 80026fa:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_RTC_Init+0x74>)
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <MX_RTC_Init+0x78>)
 800270c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_RTC_Init+0x74>)
 8002710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002714:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_RTC_Init+0x74>)
 8002718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800271c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800271e:	480f      	ldr	r0, [pc, #60]	; (800275c <MX_RTC_Init+0x74>)
 8002720:	f002 fe74 	bl	800540c <HAL_RTC_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800272a:	f000 fb93 	bl	8002e54 <Error_Handler>
//    Error_Handler();
//  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800272e:	2300      	movs	r3, #0
 8002730:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002732:	2300      	movs	r3, #0
 8002734:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002736:	2300      	movs	r3, #0
 8002738:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800273e:	463b      	mov	r3, r7
 8002740:	2201      	movs	r2, #1
 8002742:	4619      	mov	r1, r3
 8002744:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_RTC_Init+0x74>)
 8002746:	f003 f819 	bl	800577c <HAL_RTC_SetAlarm_IT>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002750:	f000 fb80 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20001598 	.word	0x20001598
 8002760:	40002800 	.word	0x40002800

08002764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0308 	add.w	r3, r7, #8
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	463b      	mov	r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <MX_TIM1_Init+0x98>)
 8002782:	4a1f      	ldr	r2, [pc, #124]	; (8002800 <MX_TIM1_Init+0x9c>)
 8002784:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <MX_TIM1_Init+0x98>)
 8002788:	2247      	movs	r2, #71	; 0x47
 800278a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_TIM1_Init+0x98>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_TIM1_Init+0x98>)
 8002794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002798:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_TIM1_Init+0x98>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_TIM1_Init+0x98>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_TIM1_Init+0x98>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027ac:	4813      	ldr	r0, [pc, #76]	; (80027fc <MX_TIM1_Init+0x98>)
 80027ae:	f003 fc2c 	bl	800600a <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80027b8:	f000 fb4c 	bl	8002e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_TIM1_Init+0x98>)
 80027ca:	f003 fe99 	bl	8006500 <HAL_TIM_ConfigClockSource>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80027d4:	f000 fb3e 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027e0:	463b      	mov	r3, r7
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_TIM1_Init+0x98>)
 80027e6:	f004 fa33 	bl	8006c50 <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80027f0:	f000 fb30 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	200015ac 	.word	0x200015ac
 8002800:	40012c00 	.word	0x40012c00

08002804 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(uint16_t pulse)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b090      	sub	sp, #64	; 0x40
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	615a      	str	r2, [r3, #20]
 8002838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <MX_TIM3_Init+0xf0>)
 800283c:	4a2e      	ldr	r2, [pc, #184]	; (80028f8 <MX_TIM3_Init+0xf4>)
 800283e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002842:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <MX_TIM3_Init+0xf0>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002850:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002854:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <MX_TIM3_Init+0xf0>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002862:	4824      	ldr	r0, [pc, #144]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002864:	f003 fbd1 	bl	800600a <HAL_TIM_Base_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800286e:	f000 faf1 	bl	8002e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002878:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800287c:	4619      	mov	r1, r3
 800287e:	481d      	ldr	r0, [pc, #116]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002880:	f003 fe3e 	bl	8006500 <HAL_TIM_ConfigClockSource>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800288a:	f000 fae3 	bl	8002e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800288e:	4819      	ldr	r0, [pc, #100]	; (80028f4 <MX_TIM3_Init+0xf0>)
 8002890:	f003 fc62 	bl	8006158 <HAL_TIM_PWM_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800289a:	f000 fadb 	bl	8002e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028aa:	4619      	mov	r1, r3
 80028ac:	4811      	ldr	r0, [pc, #68]	; (80028f4 <MX_TIM3_Init+0xf0>)
 80028ae:	f004 f9cf 	bl	8006c50 <HAL_TIMEx_MasterConfigSynchronization>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80028b8:	f000 facc 	bl	8002e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028bc:	2360      	movs	r3, #96	; 0x60
 80028be:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = pulse;
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028cc:	f107 030c 	add.w	r3, r7, #12
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM3_Init+0xf0>)
 80028d6:	f003 fd51 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80028e0:	f000 fab8 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM3_Init+0xf0>)
 80028e6:	f000 fb87 	bl	8002ff8 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3740      	adds	r7, #64	; 0x40
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200015f4 	.word	0x200015f4
 80028f8:	40000400 	.word	0x40000400

080028fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <MX_USART1_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800290c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_USART1_UART_Init+0x4c>)
 8002934:	f004 f9f8 	bl	8006d28 <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f000 fa89 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000163c 	.word	0x2000163c
 800294c:	40013800 	.word	0x40013800

08002950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <MX_USART3_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800295a:	4b10      	ldr	r3, [pc, #64]	; (800299c <MX_USART3_UART_Init+0x4c>)
 800295c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <MX_USART3_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <MX_USART3_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002986:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_USART3_UART_Init+0x4c>)
 8002988:	f004 f9ce 	bl	8006d28 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002992:	f000 fa5f 	bl	8002e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20001684 	.word	0x20001684
 80029a0:	40004800 	.word	0x40004800

080029a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b8:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a87      	ldr	r2, [pc, #540]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b85      	ldr	r3, [pc, #532]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d0:	4b82      	ldr	r3, [pc, #520]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a81      	ldr	r2, [pc, #516]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029d6:	f043 0310 	orr.w	r3, r3, #16
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <MX_GPIO_Init+0x238>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a75      	ldr	r2, [pc, #468]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a18:	4b70      	ldr	r3, [pc, #448]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	4a6f      	ldr	r2, [pc, #444]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a1e:	f043 0320 	orr.w	r3, r3, #32
 8002a22:	6193      	str	r3, [r2, #24]
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <MX_GPIO_Init+0x238>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Ultrasound_Trigger_Pin|camera_pinE1_Pin, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2142      	movs	r1, #66	; 0x42
 8002a34:	486a      	ldr	r0, [pc, #424]	; (8002be0 <MX_GPIO_Init+0x23c>)
 8002a36:	f001 ff04 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, camera_pin_Pin|camera_pinA3_Pin, GPIO_PIN_RESET);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	210c      	movs	r1, #12
 8002a3e:	4869      	ldr	r0, [pc, #420]	; (8002be4 <MX_GPIO_Init+0x240>)
 8002a40:	f001 feff 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, camera_pinC4_Pin|camera_pinC5_Pin|camera_pinC6_Pin|camera_pinC7_Pin, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	21f0      	movs	r1, #240	; 0xf0
 8002a48:	4867      	ldr	r0, [pc, #412]	; (8002be8 <MX_GPIO_Init+0x244>)
 8002a4a:	f001 fefa 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, camera_pi_Pin|Weight_CLK_Pin|camera_pinD3_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f241 010c 	movw	r1, #4108	; 0x100c
 8002a54:	4865      	ldr	r0, [pc, #404]	; (8002bec <MX_GPIO_Init+0x248>)
 8002a56:	f001 fef4 	bl	8004842 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ultrasound_Echo_Pin */
  GPIO_InitStruct.Pin = Ultrasound_Echo_Pin;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Ultrasound_Echo_GPIO_Port, &GPIO_InitStruct);
 8002a66:	f107 0318 	add.w	r3, r7, #24
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	485c      	ldr	r0, [pc, #368]	; (8002be0 <MX_GPIO_Init+0x23c>)
 8002a6e:	f001 fd3d 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Ultrasound_Trigger_Pin */
  GPIO_InitStruct.Pin = Ultrasound_Trigger_Pin;
 8002a72:	2340      	movs	r3, #64	; 0x40
 8002a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Ultrasound_Trigger_GPIO_Port, &GPIO_InitStruct);
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	4619      	mov	r1, r3
 8002a88:	4855      	ldr	r0, [pc, #340]	; (8002be0 <MX_GPIO_Init+0x23c>)
 8002a8a:	f001 fd2f 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : camer_pin_Pin */
  GPIO_InitStruct.Pin = camer_pin_Pin;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a92:	4b57      	ldr	r3, [pc, #348]	; (8002bf0 <MX_GPIO_Init+0x24c>)
 8002a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(camer_pin_GPIO_Port, &GPIO_InitStruct);
 8002a9a:	f107 0318 	add.w	r3, r7, #24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4851      	ldr	r0, [pc, #324]	; (8002be8 <MX_GPIO_Init+0x244>)
 8002aa2:	f001 fd23 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aaa:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <MX_GPIO_Init+0x250>)
 8002aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	484a      	ldr	r0, [pc, #296]	; (8002be4 <MX_GPIO_Init+0x240>)
 8002aba:	f001 fd17 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pin_Pin camera_pinA3_Pin */
  GPIO_InitStruct.Pin = camera_pin_Pin|camera_pinA3_Pin;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0318 	add.w	r3, r7, #24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4843      	ldr	r0, [pc, #268]	; (8002be4 <MX_GPIO_Init+0x240>)
 8002ad6:	f001 fd09 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ada:	2310      	movs	r3, #16
 8002adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f107 0318 	add.w	r3, r7, #24
 8002aea:	4619      	mov	r1, r3
 8002aec:	483d      	ldr	r0, [pc, #244]	; (8002be4 <MX_GPIO_Init+0x240>)
 8002aee:	f001 fcfd 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinC4_Pin camera_pinC5_Pin */
  GPIO_InitStruct.Pin = camera_pinC4_Pin|camera_pinC5_Pin;
 8002af2:	2330      	movs	r3, #48	; 0x30
 8002af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b02:	f107 0318 	add.w	r3, r7, #24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4837      	ldr	r0, [pc, #220]	; (8002be8 <MX_GPIO_Init+0x244>)
 8002b0a:	f001 fcef 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinB10_Pin camera_pinB11_Pin camera_pinB12_Pin camera_pinB13_Pin
                           camera_pinB14_Pin camera_pinB15_Pin PB7 camera_pinB8_Pin
                           camera_pinB9_Pin */
  GPIO_InitStruct.Pin = camera_pinB10_Pin|camera_pinB11_Pin|camera_pinB12_Pin|camera_pinB13_Pin
 8002b0e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002b12:	61bb      	str	r3, [r7, #24]
                          |camera_pinB14_Pin|camera_pinB15_Pin|GPIO_PIN_7|camera_pinB8_Pin
                          |camera_pinB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	f107 0318 	add.w	r3, r7, #24
 8002b20:	4619      	mov	r1, r3
 8002b22:	4835      	ldr	r0, [pc, #212]	; (8002bf8 <MX_GPIO_Init+0x254>)
 8002b24:	f001 fce2 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pi_Pin camera_pinD3_Pin */
  GPIO_InitStruct.Pin = camera_pi_Pin|camera_pinD3_Pin;
 8002b28:	f241 0308 	movw	r3, #4104	; 0x1008
 8002b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b36:	2303      	movs	r3, #3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482a      	ldr	r0, [pc, #168]	; (8002bec <MX_GPIO_Init+0x248>)
 8002b42:	f001 fcd3 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pins : camera_pinC6_Pin camera_pinC7_Pin */
  GPIO_InitStruct.Pin = camera_pinC6_Pin|camera_pinC7_Pin;
 8002b46:	23c0      	movs	r3, #192	; 0xc0
 8002b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b4a:	2311      	movs	r3, #17
 8002b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 0318 	add.w	r3, r7, #24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4822      	ldr	r0, [pc, #136]	; (8002be8 <MX_GPIO_Init+0x244>)
 8002b5e:	f001 fcc5 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Weight_DT_Pin */
  GPIO_InitStruct.Pin = Weight_DT_Pin;
 8002b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Weight_DT_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 0318 	add.w	r3, r7, #24
 8002b74:	4619      	mov	r1, r3
 8002b76:	481c      	ldr	r0, [pc, #112]	; (8002be8 <MX_GPIO_Init+0x244>)
 8002b78:	f001 fcb8 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Weight_CLK_Pin */
  GPIO_InitStruct.Pin = Weight_CLK_Pin;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Weight_CLK_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 0318 	add.w	r3, r7, #24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4816      	ldr	r0, [pc, #88]	; (8002bec <MX_GPIO_Init+0x248>)
 8002b94:	f001 fcaa 	bl	80044ec <HAL_GPIO_Init>

  /*Configure GPIO pin : camera_pinE1_Pin */
  GPIO_InitStruct.Pin = camera_pinE1_Pin;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(camera_pinE1_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	4619      	mov	r1, r3
 8002bae:	480c      	ldr	r0, [pc, #48]	; (8002be0 <MX_GPIO_Init+0x23c>)
 8002bb0:	f001 fc9c 	bl	80044ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2006      	movs	r0, #6
 8002bba:	f001 fb1e 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bbe:	2006      	movs	r0, #6
 8002bc0:	f001 fb37 	bl	8004232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	2009      	movs	r0, #9
 8002bca:	f001 fb16 	bl	80041fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002bce:	2009      	movs	r0, #9
 8002bd0:	f001 fb2f 	bl	8004232 <HAL_NVIC_EnableIRQ>

}
 8002bd4:	bf00      	nop
 8002bd6:	3728      	adds	r7, #40	; 0x28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40011800 	.word	0x40011800
 8002be4:	40010800 	.word	0x40010800
 8002be8:	40011000 	.word	0x40011000
 8002bec:	40011400 	.word	0x40011400
 8002bf0:	10210000 	.word	0x10210000
 8002bf4:	10110000 	.word	0x10110000
 8002bf8:	40010c00 	.word	0x40010c00

08002bfc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002c02:	1d3b      	adds	r3, r7, #4
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	615a      	str	r2, [r3, #20]
 8002c12:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c16:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002c1a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002c1c:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c1e:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <MX_FSMC_Init+0xc0>)
 8002c20:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002c34:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c36:	2210      	movs	r2, #16
 8002c38:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002c4c:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c58:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002c5a:	4b17      	ldr	r3, [pc, #92]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002c60:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002c66:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002c72:	230f      	movs	r3, #15
 8002c74:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002c76:	230f      	movs	r3, #15
 8002c78:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002c7a:	23ff      	movs	r3, #255	; 0xff
 8002c7c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002c82:	2310      	movs	r3, #16
 8002c84:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002c86:	2311      	movs	r3, #17
 8002c88:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2200      	movs	r2, #0
 8002c92:	4619      	mov	r1, r3
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <MX_FSMC_Init+0xbc>)
 8002c96:	f003 f96b 	bl	8005f70 <HAL_SRAM_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002ca0:	f000 f8d8 	bl	8002e54 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <MX_FSMC_Init+0xc4>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <MX_FSMC_Init+0xc4>)
 8002caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cae:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002cb0:	bf00      	nop
 8002cb2:	3720      	adds	r7, #32
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200016cc 	.word	0x200016cc
 8002cbc:	a0000104 	.word	0xa0000104
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

	status = 1;
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	801a      	strh	r2, [r3, #0]
	Machine_state = 2;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RTC_AlarmAEventCallback+0x30>)
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
	function = 1;
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <HAL_RTC_AlarmAEventCallback+0x34>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	4806      	ldr	r0, [pc, #24]	; (8002cfc <HAL_RTC_AlarmAEventCallback+0x38>)
 8002ce4:	f001 fdad 	bl	8004842 <HAL_GPIO_WritePin>

}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20001730 	.word	0x20001730
 8002cf4:	20001732 	.word	0x20001732
 8002cf8:	2000173c 	.word	0x2000173c
 8002cfc:	40010c00 	.word	0x40010c00

08002d00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	if(Lindex > 198) Lindex = 1; // catch overflow
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2bc6      	cmp	r3, #198	; 0xc6
 8002d0e:	d902      	bls.n	8002d16 <HAL_UART_RxCpltCallback+0x16>
 8002d10:	4b41      	ldr	r3, [pc, #260]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
	if(Pindex > 198) Pindex = 1; // catch overflow
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2bc6      	cmp	r3, #198	; 0xc6
 8002d1c:	d902      	bls.n	8002d24 <HAL_UART_RxCpltCallback+0x24>
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
	if (huart -> Instance == USART1){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a3d      	ldr	r2, [pc, #244]	; (8002e20 <HAL_UART_RxCpltCallback+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d12b      	bne.n	8002d86 <HAL_UART_RxCpltCallback+0x86>
			if (PCInt == 10){
 8002d2e:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_UART_RxCpltCallback+0x124>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b0a      	cmp	r3, #10
 8002d34:	d112      	bne.n	8002d5c <HAL_UART_RxCpltCallback+0x5c>
				PCMsg[Pindex] =  huart->Instance->DR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	b2c9      	uxtb	r1, r1
 8002d44:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_UART_RxCpltCallback+0x128>)
 8002d46:	5499      	strb	r1, [r3, r2]
				Pindex++;
 8002d48:	4b34      	ldr	r3, [pc, #208]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d52:	701a      	strb	r2, [r3, #0]
				FromPCMsgComplete = 1;
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_UART_RxCpltCallback+0x12c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e00e      	b.n	8002d7a <HAL_UART_RxCpltCallback+0x7a>
			} else {
				PCMsg[Pindex] =  huart->Instance->DR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6859      	ldr	r1, [r3, #4]
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	b2c9      	uxtb	r1, r1
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <HAL_UART_RxCpltCallback+0x128>)
 8002d6c:	5499      	strb	r1, [r3, r2]
				Pindex++;
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_UART_RxCpltCallback+0x11c>)
 8002d78:	701a      	strb	r2, [r3, #0]
			}
		    HAL_UART_Receive_IT (&huart1, &PCInt, 1);
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4929      	ldr	r1, [pc, #164]	; (8002e24 <HAL_UART_RxCpltCallback+0x124>)
 8002d7e:	482c      	ldr	r0, [pc, #176]	; (8002e30 <HAL_UART_RxCpltCallback+0x130>)
 8002d80:	f004 f8a5 	bl	8006ece <HAL_UART_Receive_IT>
			if (!received) activated = 1;
			else {activated = 0; display = 1;};

			HAL_UART_Receive_IT (&huart3, &LoraInt, 1);
	}
 }
 8002d84:	e043      	b.n	8002e0e <HAL_UART_RxCpltCallback+0x10e>
	} else if(huart -> Instance == USART3){
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2a      	ldr	r2, [pc, #168]	; (8002e34 <HAL_UART_RxCpltCallback+0x134>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d13e      	bne.n	8002e0e <HAL_UART_RxCpltCallback+0x10e>
			if (LoraInt == 10){
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_UART_RxCpltCallback+0x138>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b0a      	cmp	r3, #10
 8002d96:	d112      	bne.n	8002dbe <HAL_UART_RxCpltCallback+0xbe>
				loraMsg[Lindex] =  huart->Instance->DR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	b2c9      	uxtb	r1, r1
 8002da6:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <HAL_UART_RxCpltCallback+0x13c>)
 8002da8:	5499      	strb	r1, [r3, r2]
				Lindex++;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002db4:	701a      	strb	r2, [r3, #0]
				FromLoraMsgComplete = 1;
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_UART_RxCpltCallback+0x140>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	e00e      	b.n	8002ddc <HAL_UART_RxCpltCallback+0xdc>
					loraMsg[Lindex] =  huart->Instance->DR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	b2c9      	uxtb	r1, r1
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_UART_RxCpltCallback+0x13c>)
 8002dce:	5499      	strb	r1, [r3, r2]
					Lindex++;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_UART_RxCpltCallback+0x118>)
 8002dda:	701a      	strb	r2, [r3, #0]
			received = atoi (loraMsg);
 8002ddc:	4817      	ldr	r0, [pc, #92]	; (8002e3c <HAL_UART_RxCpltCallback+0x13c>)
 8002dde:	f004 fef1 	bl	8007bc4 <atoi>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_UART_RxCpltCallback+0x144>)
 8002de6:	6013      	str	r3, [r2, #0]
			if (!received) activated = 1;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <HAL_UART_RxCpltCallback+0x144>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <HAL_UART_RxCpltCallback+0xf8>
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_UART_RxCpltCallback+0x148>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e005      	b.n	8002e04 <HAL_UART_RxCpltCallback+0x104>
			else {activated = 0; display = 1;};
 8002df8:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <HAL_UART_RxCpltCallback+0x148>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_UART_RxCpltCallback+0x14c>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT (&huart3, &LoraInt, 1);
 8002e04:	2201      	movs	r2, #1
 8002e06:	490c      	ldr	r1, [pc, #48]	; (8002e38 <HAL_UART_RxCpltCallback+0x138>)
 8002e08:	4811      	ldr	r0, [pc, #68]	; (8002e50 <HAL_UART_RxCpltCallback+0x150>)
 8002e0a:	f004 f860 	bl	8006ece <HAL_UART_Receive_IT>
 }
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000174e 	.word	0x2000174e
 8002e1c:	2000174d 	.word	0x2000174d
 8002e20:	40013800 	.word	0x40013800
 8002e24:	2000174f 	.word	0x2000174f
 8002e28:	20001754 	.word	0x20001754
 8002e2c:	20001751 	.word	0x20001751
 8002e30:	2000163c 	.word	0x2000163c
 8002e34:	40004800 	.word	0x40004800
 8002e38:	20001750 	.word	0x20001750
 8002e3c:	20001768 	.word	0x20001768
 8002e40:	20001752 	.word	0x20001752
 8002e44:	20001830 	.word	0x20001830
 8002e48:	2000009c 	.word	0x2000009c
 8002e4c:	20001834 	.word	0x20001834
 8002e50:	20001684 	.word	0x20001684

08002e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6193      	str	r3, [r2, #24]
 8002e72:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	61d3      	str	r3, [r2, #28]
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <HAL_MspInit+0x5c>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_MspInit+0x60>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <HAL_MspInit+0x60>)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010000 	.word	0x40010000

08002ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC2)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_ADC_MspInit+0x6c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d121      	bne.n	8002f28 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efc:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002f02:	f043 0304 	orr.w	r3, r3, #4
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_ADC_MspInit+0x70>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA7     ------> ADC2_IN7
    */
    GPIO_InitStruct.Pin = VR_controller_Pin;
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(VR_controller_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f107 0310 	add.w	r3, r7, #16
 8002f20:	4619      	mov	r1, r3
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <HAL_ADC_MspInit+0x74>)
 8002f24:	f001 fae2 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002f28:	bf00      	nop
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012800 	.word	0x40012800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40010800 	.word	0x40010800

08002f3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_RTC_MspInit+0x4c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d118      	bne.n	8002f80 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002f4e:	f001 fcb3 	bl	80048b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_RTC_MspInit+0x50>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_RTC_MspInit+0x50>)
 8002f58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RTC_MspInit+0x50>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f6a:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_RTC_MspInit+0x54>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2100      	movs	r1, #0
 8002f74:	2029      	movs	r0, #41	; 0x29
 8002f76:	f001 f940 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002f7a:	2029      	movs	r0, #41	; 0x29
 8002f7c:	f001 f959 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f80:	bf00      	nop
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40002800 	.word	0x40002800
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	4242043c 	.word	0x4242043c

08002f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a12      	ldr	r2, [pc, #72]	; (8002fec <HAL_TIM_Base_MspInit+0x58>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fb0:	6193      	str	r3, [r2, #24]
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002fbe:	e010      	b.n	8002fe2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <HAL_TIM_Base_MspInit+0x60>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	61d3      	str	r3, [r2, #28]
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_TIM_Base_MspInit+0x5c>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 0310 	add.w	r3, r7, #16
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <HAL_TIM_MspPostInit+0x58>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d117      	bne.n	8003048 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_TIM_MspPostInit+0x5c>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a0d      	ldr	r2, [pc, #52]	; (8003054 <HAL_TIM_MspPostInit+0x5c>)
 800301e:	f043 0304 	orr.w	r3, r3, #4
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_TIM_MspPostInit+0x5c>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Motor_PWM_Pin;
 8003030:	2340      	movs	r3, #64	; 0x40
 8003032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2302      	movs	r3, #2
 800303a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Motor_PWM_GPIO_Port, &GPIO_InitStruct);
 800303c:	f107 0310 	add.w	r3, r7, #16
 8003040:	4619      	mov	r1, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <HAL_TIM_MspPostInit+0x60>)
 8003044:	f001 fa52 	bl	80044ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3720      	adds	r7, #32
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40000400 	.word	0x40000400
 8003054:	40021000 	.word	0x40021000
 8003058:	40010800 	.word	0x40010800

0800305c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08c      	sub	sp, #48	; 0x30
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a49      	ldr	r2, [pc, #292]	; (800319c <HAL_UART_MspInit+0x140>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d13a      	bne.n	80030f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800307c:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <HAL_UART_MspInit+0x144>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	4a47      	ldr	r2, [pc, #284]	; (80031a0 <HAL_UART_MspInit+0x144>)
 8003082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003086:	6193      	str	r3, [r2, #24]
 8003088:	4b45      	ldr	r3, [pc, #276]	; (80031a0 <HAL_UART_MspInit+0x144>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_UART_MspInit+0x144>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a41      	ldr	r2, [pc, #260]	; (80031a0 <HAL_UART_MspInit+0x144>)
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_UART_MspInit+0x144>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC_Serial_Pin;
 80030ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030b6:	2303      	movs	r3, #3
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(PC_Serial_GPIO_Port, &GPIO_InitStruct);
 80030ba:	f107 031c 	add.w	r3, r7, #28
 80030be:	4619      	mov	r1, r3
 80030c0:	4838      	ldr	r0, [pc, #224]	; (80031a4 <HAL_UART_MspInit+0x148>)
 80030c2:	f001 fa13 	bl	80044ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC_SerialA10_Pin;
 80030c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PC_SerialA10_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	4832      	ldr	r0, [pc, #200]	; (80031a4 <HAL_UART_MspInit+0x148>)
 80030dc:	f001 fa06 	bl	80044ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	2025      	movs	r0, #37	; 0x25
 80030e6:	f001 f888 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030ea:	2025      	movs	r0, #37	; 0x25
 80030ec:	f001 f8a1 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030f0:	e050      	b.n	8003194 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <HAL_UART_MspInit+0x14c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d14b      	bne.n	8003194 <HAL_UART_MspInit+0x138>
    __HAL_RCC_USART3_CLK_ENABLE();
 80030fc:	4b28      	ldr	r3, [pc, #160]	; (80031a0 <HAL_UART_MspInit+0x144>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <HAL_UART_MspInit+0x144>)
 8003102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003106:	61d3      	str	r3, [r2, #28]
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_UART_MspInit+0x144>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003114:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_UART_MspInit+0x144>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	4a21      	ldr	r2, [pc, #132]	; (80031a0 <HAL_UART_MspInit+0x144>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6193      	str	r3, [r2, #24]
 8003120:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <HAL_UART_MspInit+0x144>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LoRa_RX_Pin;
 800312c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003132:	2302      	movs	r3, #2
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003136:	2303      	movs	r3, #3
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(LoRa_RX_GPIO_Port, &GPIO_InitStruct);
 800313a:	f107 031c 	add.w	r3, r7, #28
 800313e:	4619      	mov	r1, r3
 8003140:	481a      	ldr	r0, [pc, #104]	; (80031ac <HAL_UART_MspInit+0x150>)
 8003142:	f001 f9d3 	bl	80044ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LoRa_TX_Pin;
 8003146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LoRa_TX_GPIO_Port, &GPIO_InitStruct);
 8003154:	f107 031c 	add.w	r3, r7, #28
 8003158:	4619      	mov	r1, r3
 800315a:	4814      	ldr	r0, [pc, #80]	; (80031ac <HAL_UART_MspInit+0x150>)
 800315c:	f001 f9c6 	bl	80044ec <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_UART_MspInit+0x154>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	f043 0310 	orr.w	r3, r3, #16
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_UART_MspInit+0x154>)
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003184:	2200      	movs	r2, #0
 8003186:	2100      	movs	r1, #0
 8003188:	2027      	movs	r0, #39	; 0x27
 800318a:	f001 f836 	bl	80041fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800318e:	2027      	movs	r0, #39	; 0x27
 8003190:	f001 f84f 	bl	8004232 <HAL_NVIC_EnableIRQ>
}
 8003194:	bf00      	nop
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40013800 	.word	0x40013800
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40010800 	.word	0x40010800
 80031a8:	40004800 	.word	0x40004800
 80031ac:	40011000 	.word	0x40011000
 80031b0:	40010000 	.word	0x40010000

080031b4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_FSMC_MspInit+0x78>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d129      	bne.n	8003224 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80031d0:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_FSMC_MspInit+0x78>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <HAL_FSMC_MspInit+0x7c>)
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <HAL_FSMC_MspInit+0x7c>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6153      	str	r3, [r2, #20]
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_FSMC_MspInit+0x7c>)
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80031ee:	f64f 7380 	movw	r3, #65408	; 0xff80
 80031f2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f4:	2302      	movs	r3, #2
 80031f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	4619      	mov	r1, r3
 8003202:	480c      	ldr	r0, [pc, #48]	; (8003234 <HAL_FSMC_MspInit+0x80>)
 8003204:	f001 f972 	bl	80044ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003208:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800320c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2302      	movs	r3, #2
 8003210:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003212:	2303      	movs	r3, #3
 8003214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003216:	f107 0308 	add.w	r3, r7, #8
 800321a:	4619      	mov	r1, r3
 800321c:	4806      	ldr	r0, [pc, #24]	; (8003238 <HAL_FSMC_MspInit+0x84>)
 800321e:	f001 f965 	bl	80044ec <HAL_GPIO_Init>
 8003222:	e000      	b.n	8003226 <HAL_FSMC_MspInit+0x72>
    return;
 8003224:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20001848 	.word	0x20001848
 8003230:	40021000 	.word	0x40021000
 8003234:	40011800 	.word	0x40011800
 8003238:	40011400 	.word	0x40011400

0800323c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003244:	f7ff ffb6 	bl	80031b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003260:	e7fe      	b.n	8003260 <HardFault_Handler+0x4>

08003262 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003266:	e7fe      	b.n	8003266 <MemManage_Handler+0x4>

08003268 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800326c:	e7fe      	b.n	800326c <BusFault_Handler+0x4>

0800326e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003272:	e7fe      	b.n	8003272 <UsageFault_Handler+0x4>

08003274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800329c:	f000 f9aa 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <EXTI0_IRQHandler+0x34>)
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <EXTI0_IRQHandler+0x28>
	  {
			setting += 1;
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <EXTI0_IRQHandler+0x38>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <EXTI0_IRQHandler+0x38>)
 80032be:	701a      	strb	r2, [r3, #0]

	    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <EXTI0_IRQHandler+0x34>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	615a      	str	r2, [r3, #20]
	    HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80032c6:	2001      	movs	r0, #1
 80032c8:	f001 faec 	bl	80048a4 <HAL_GPIO_EXTI_Callback>
	  }

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f001 fad1 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40010400 	.word	0x40010400
 80032dc:	20001748 	.word	0x20001748

080032e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <EXTI3_IRQHandler+0x64>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d023      	beq.n	8003338 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <EXTI3_IRQHandler+0x68>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10f      	bne.n	8003318 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L(); 	                      
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <EXTI3_IRQHandler+0x6c>)
 80032fa:	2210      	movs	r2, #16
 80032fc:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();	                      
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <EXTI3_IRQHandler+0x70>)
 8003300:	2208      	movs	r2, #8
 8003302:	611a      	str	r2, [r3, #16]
            
        Ov7725_vsync = 1;	   	
 8003304:	4b10      	ldr	r3, [pc, #64]	; (8003348 <EXTI3_IRQHandler+0x68>)
 8003306:	2201      	movs	r2, #1
 8003308:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();                         
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <EXTI3_IRQHandler+0x70>)
 800330c:	2208      	movs	r2, #8
 800330e:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();                     
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <EXTI3_IRQHandler+0x6c>)
 8003312:	2210      	movs	r2, #16
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	e009      	b.n	800332c <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <EXTI3_IRQHandler+0x68>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d105      	bne.n	800332c <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();                       
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <EXTI3_IRQHandler+0x70>)
 8003322:	2208      	movs	r2, #8
 8003324:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <EXTI3_IRQHandler+0x68>)
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
    }        
				
		
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <EXTI3_IRQHandler+0x64>)
 800332e:	2208      	movs	r2, #8
 8003330:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8003332:	2008      	movs	r0, #8
 8003334:	f001 fab6 	bl	80048a4 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(camer_pin_Pin);
 8003338:	2008      	movs	r0, #8
 800333a:	f001 fa9b 	bl	8004874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40010400 	.word	0x40010400
 8003348:	2000183c 	.word	0x2000183c
 800334c:	40011000 	.word	0x40011000
 8003350:	40011400 	.word	0x40011400

08003354 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <USART1_IRQHandler+0x10>)
 800335a:	f003 fddd 	bl	8006f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000163c 	.word	0x2000163c

08003368 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <USART3_IRQHandler+0x10>)
 800336e:	f003 fdd3 	bl	8006f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20001684 	.word	0x20001684

0800337c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003380:	4802      	ldr	r0, [pc, #8]	; (800338c <RTC_Alarm_IRQHandler+0x10>)
 8003382:	f002 fb29 	bl	80059d8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20001598 	.word	0x20001598

08003390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
	return 1;
 8003394:	2301      	movs	r3, #1
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <_kill>:

int _kill(int pid, int sig)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033a8:	f004 fc10 	bl	8007bcc <__errno>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2216      	movs	r2, #22
 80033b0:	601a      	str	r2, [r3, #0]
	return -1;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <_exit>:

void _exit (int status)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80033c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffe7 	bl	800339e <_kill>
	while (1) {}		/* Make sure we hang here */
 80033d0:	e7fe      	b.n	80033d0 <_exit+0x12>

080033d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	e00a      	b.n	80033fa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80033e4:	f3af 8000 	nop.w
 80033e8:	4601      	mov	r1, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	60ba      	str	r2, [r7, #8]
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	3301      	adds	r3, #1
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	dbf0      	blt.n	80033e4 <_read+0x12>
	}

return len;
 8003402:	687b      	ldr	r3, [r7, #4]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	e009      	b.n	8003432 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1c5a      	adds	r2, r3, #1
 8003422:	60ba      	str	r2, [r7, #8]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	3301      	adds	r3, #1
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	429a      	cmp	r2, r3
 8003438:	dbf1      	blt.n	800341e <_write+0x12>
	}
	return len;
 800343a:	687b      	ldr	r3, [r7, #4]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <_close>:

int _close(int file)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	return -1;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800346a:	605a      	str	r2, [r3, #4]
	return 0;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr

08003478 <_isatty>:

int _isatty(int file)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	return 1;
 8003480:	2301      	movs	r3, #1
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	return 0;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034ac:	4a14      	ldr	r2, [pc, #80]	; (8003500 <_sbrk+0x5c>)
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <_sbrk+0x60>)
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034b8:	4b13      	ldr	r3, [pc, #76]	; (8003508 <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <_sbrk+0x64>)
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <_sbrk+0x68>)
 80034c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <_sbrk+0x64>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d207      	bcs.n	80034e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034d4:	f004 fb7a 	bl	8007bcc <__errno>
 80034d8:	4603      	mov	r3, r0
 80034da:	220c      	movs	r2, #12
 80034dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e2:	e009      	b.n	80034f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <_sbrk+0x64>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <_sbrk+0x64>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	4a05      	ldr	r2, [pc, #20]	; (8003508 <_sbrk+0x64>)
 80034f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20010000 	.word	0x20010000
 8003504:	00000400 	.word	0x00000400
 8003508:	2000184c 	.word	0x2000184c
 800350c:	20001868 	.word	0x20001868

08003510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800351c:	f7ff fff8 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003520:	480b      	ldr	r0, [pc, #44]	; (8003550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003522:	490c      	ldr	r1, [pc, #48]	; (8003554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003528:	e002      	b.n	8003530 <LoopCopyDataInit>

0800352a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800352a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800352c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800352e:	3304      	adds	r3, #4

08003530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003534:	d3f9      	bcc.n	800352a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003538:	4c09      	ldr	r4, [pc, #36]	; (8003560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800353c:	e001      	b.n	8003542 <LoopFillZerobss>

0800353e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800353e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003540:	3204      	adds	r2, #4

08003542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003544:	d3fb      	bcc.n	800353e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003546:	f004 fb47 	bl	8007bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800354a:	f7fe fbc5 	bl	8001cd8 <main>
  bx lr
 800354e:	4770      	bx	lr
  ldr r0, =_sdata
 8003550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003554:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003558:	0800b604 	.word	0x0800b604
  ldr r2, =_sbss
 800355c:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003560:	20001864 	.word	0x20001864

08003564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003564:	e7fe      	b.n	8003564 <ADC1_2_IRQHandler>
	...

08003568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_Init+0x28>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	; (8003590 <HAL_Init+0x28>)
 8003572:	f043 0310 	orr.w	r3, r3, #16
 8003576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 fe33 	bl	80041e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	2000      	movs	r0, #0
 8003580:	f000 f808 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fc6c 	bl	8002e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40022000 	.word	0x40022000

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_InitTick+0x54>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_InitTick+0x58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe4b 	bl	800424e <HAL_SYSTICK_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00e      	b.n	80035e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d80a      	bhi.n	80035de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c8:	2200      	movs	r2, #0
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035d0:	f000 fe13 	bl	80041fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_InitTick+0x5c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200000ac 	.word	0x200000ac
 80035ec:	200000b4 	.word	0x200000b4
 80035f0:	200000b0 	.word	0x200000b0

080035f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_IncTick+0x1c>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_IncTick+0x20>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4413      	add	r3, r2
 8003604:	4a03      	ldr	r2, [pc, #12]	; (8003614 <HAL_IncTick+0x20>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	200000b4 	.word	0x200000b4
 8003614:	20001850 	.word	0x20001850

08003618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return uwTick;
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_GetTick+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20001850 	.word	0x20001850

0800362c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff fff0 	bl	8003618 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003644:	d005      	beq.n	8003652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <HAL_Delay+0x44>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003652:	bf00      	nop
 8003654:	f7ff ffe0 	bl	8003618 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f7      	bhi.n	8003654 <HAL_Delay+0x28>
  {
  }
}
 8003664:	bf00      	nop
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200000b4 	.word	0x200000b4

08003674 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e0ce      	b.n	8003834 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fc06 	bl	8002ec4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fbd7 	bl	8003e6c <ADC_ConversionStop_Disable>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 80a9 	bne.w	8003822 <HAL_ADC_Init+0x1ae>
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f040 80a5 	bne.w	8003822 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80036e0:	f023 0302 	bic.w	r3, r3, #2
 80036e4:	f043 0202 	orr.w	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4951      	ldr	r1, [pc, #324]	; (800383c <HAL_ADC_Init+0x1c8>)
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d10a      	bne.n	8003710 <HAL_ADC_Init+0x9c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003702:	d002      	beq.n	800370a <HAL_ADC_Init+0x96>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	e004      	b.n	8003714 <HAL_ADC_Init+0xa0>
 800370a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800370e:	e001      	b.n	8003714 <HAL_ADC_Init+0xa0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003714:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7b1b      	ldrb	r3, [r3, #12]
 800371a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800371c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4313      	orrs	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800372c:	d003      	beq.n	8003736 <HAL_ADC_Init+0xc2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_ADC_Init+0xc8>
 8003736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373a:	e000      	b.n	800373e <HAL_ADC_Init+0xca>
 800373c:	2300      	movs	r3, #0
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7d1b      	ldrb	r3, [r3, #20]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d119      	bne.n	8003780 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7b1b      	ldrb	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	3b01      	subs	r3, #1
 800375a:	035a      	lsls	r2, r3, #13
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e00b      	b.n	8003780 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <HAL_ADC_Init+0x1cc>)
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b0:	d003      	beq.n	80037ba <HAL_ADC_Init+0x146>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d104      	bne.n	80037c4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	3b01      	subs	r3, #1
 80037c0:	051b      	lsls	r3, r3, #20
 80037c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	4b19      	ldr	r3, [pc, #100]	; (8003844 <HAL_ADC_Init+0x1d0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d10b      	bne.n	8003800 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	f023 0303 	bic.w	r3, r3, #3
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037fe:	e018      	b.n	8003832 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	f023 0312 	bic.w	r3, r3, #18
 8003808:	f043 0210 	orr.w	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003820:	e007      	b.n	8003832 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	f043 0210 	orr.w	r2, r3, #16
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003832:	7dfb      	ldrb	r3, [r7, #23]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40013c00 	.word	0x40013c00
 8003840:	ffe1f7fd 	.word	0xffe1f7fd
 8003844:	ff1f0efe 	.word	0xff1f0efe

08003848 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_ADC_Start+0x1a>
 800385e:	2302      	movs	r3, #2
 8003860:	e098      	b.n	8003994 <HAL_ADC_Start+0x14c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 faa4 	bl	8003db8 <ADC_Enable>
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8087 	bne.w	800398a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a41      	ldr	r2, [pc, #260]	; (800399c <HAL_ADC_Start+0x154>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d105      	bne.n	80038a6 <HAL_ADC_Start+0x5e>
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <HAL_ADC_Start+0x158>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d115      	bne.n	80038d2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d026      	beq.n	800390e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038d0:	e01d      	b.n	800390e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2f      	ldr	r2, [pc, #188]	; (80039a0 <HAL_ADC_Start+0x158>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_ADC_Start+0xaa>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_ADC_Start+0x154>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10d      	bne.n	800390e <HAL_ADC_Start+0xc6>
 80038f2:	4b2b      	ldr	r3, [pc, #172]	; (80039a0 <HAL_ADC_Start+0x158>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d007      	beq.n	800390e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d006      	beq.n	8003928 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	f023 0206 	bic.w	r2, r3, #6
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
 8003926:	e002      	b.n	800392e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0202 	mvn.w	r2, #2
 800393e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800394a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800394e:	d113      	bne.n	8003978 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003954:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_ADC_Start+0x154>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d105      	bne.n	8003966 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800395a:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_ADC_Start+0x158>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e00c      	b.n	8003992 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	e003      	b.n	8003992 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003992:	7bfb      	ldrb	r3, [r7, #15]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40012800 	.word	0x40012800
 80039a0:	40012400 	.word	0x40012400

080039a4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80039ba:	f7ff fe2d 	bl	8003618 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0d3      	b.n	8003b8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d131      	bne.n	8003a58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d12a      	bne.n	8003a58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a02:	e021      	b.n	8003a48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	d01d      	beq.n	8003a48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <HAL_ADC_PollForConversion+0x7e>
 8003a12:	f7ff fe01 	bl	8003618 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d212      	bcs.n	8003a48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10b      	bne.n	8003a48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e0a2      	b.n	8003b8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0d6      	beq.n	8003a04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003a56:	e070      	b.n	8003b3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <HAL_ADC_PollForConversion+0x1f4>)
 8003a5a:	681c      	ldr	r4, [r3, #0]
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f001 fbfd 	bl	800525c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a62:	4603      	mov	r3, r0
 8003a64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6919      	ldr	r1, [r3, #16]
 8003a6e:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_ADC_PollForConversion+0x1f8>)
 8003a70:	400b      	ands	r3, r1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d118      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x104>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68d9      	ldr	r1, [r3, #12]
 8003a7c:	4b48      	ldr	r3, [pc, #288]	; (8003ba0 <HAL_ADC_PollForConversion+0x1fc>)
 8003a7e:	400b      	ands	r3, r1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d111      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x104>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6919      	ldr	r1, [r3, #16]
 8003a8a:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_ADC_PollForConversion+0x200>)
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d108      	bne.n	8003aa4 <HAL_ADC_PollForConversion+0x100>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68d9      	ldr	r1, [r3, #12]
 8003a98:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <HAL_ADC_PollForConversion+0x204>)
 8003a9a:	400b      	ands	r3, r1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_ADC_PollForConversion+0x100>
 8003aa0:	2314      	movs	r3, #20
 8003aa2:	e020      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x142>
 8003aa4:	2329      	movs	r3, #41	; 0x29
 8003aa6:	e01e      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x142>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6919      	ldr	r1, [r3, #16]
 8003aae:	4b3d      	ldr	r3, [pc, #244]	; (8003ba4 <HAL_ADC_PollForConversion+0x200>)
 8003ab0:	400b      	ands	r3, r1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_ADC_PollForConversion+0x120>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68d9      	ldr	r1, [r3, #12]
 8003abc:	4b3a      	ldr	r3, [pc, #232]	; (8003ba8 <HAL_ADC_PollForConversion+0x204>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_ADC_PollForConversion+0x13c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <HAL_ADC_PollForConversion+0x208>)
 8003acc:	400b      	ands	r3, r1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d108      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x140>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68d9      	ldr	r1, [r3, #12]
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_ADC_PollForConversion+0x208>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_PollForConversion+0x140>
 8003ae0:	2354      	movs	r3, #84	; 0x54
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADC_PollForConversion+0x142>
 8003ae4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003aec:	e021      	b.n	8003b32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d01a      	beq.n	8003b2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d007      	beq.n	8003b0c <HAL_ADC_PollForConversion+0x168>
 8003afc:	f7ff fd8c 	bl	8003618 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d20f      	bcs.n	8003b2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d90b      	bls.n	8003b2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f043 0204 	orr.w	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e030      	b.n	8003b8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d8d9      	bhi.n	8003aee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0212 	mvn.w	r2, #18
 8003b42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003b5e:	d115      	bne.n	8003b8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d111      	bne.n	8003b8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	bf00      	nop
 8003b98:	200000ac 	.word	0x200000ac
 8003b9c:	24924924 	.word	0x24924924
 8003ba0:	00924924 	.word	0x00924924
 8003ba4:	12492492 	.word	0x12492492
 8003ba8:	00492492 	.word	0x00492492
 8003bac:	00249249 	.word	0x00249249

08003bb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x20>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0dc      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x1da>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b06      	cmp	r3, #6
 8003bf6:	d81c      	bhi.n	8003c32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	3b05      	subs	r3, #5
 8003c0a:	221f      	movs	r2, #31
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	4019      	ands	r1, r3
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6818      	ldr	r0, [r3, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	3b05      	subs	r3, #5
 8003c24:	fa00 f203 	lsl.w	r2, r0, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c30:	e03c      	b.n	8003cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b0c      	cmp	r3, #12
 8003c38:	d81c      	bhi.n	8003c74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	3b23      	subs	r3, #35	; 0x23
 8003c4c:	221f      	movs	r2, #31
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	4019      	ands	r1, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	3b23      	subs	r3, #35	; 0x23
 8003c66:	fa00 f203 	lsl.w	r2, r0, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	631a      	str	r2, [r3, #48]	; 0x30
 8003c72:	e01b      	b.n	8003cac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	3b41      	subs	r3, #65	; 0x41
 8003c86:	221f      	movs	r2, #31
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	4019      	ands	r1, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3b41      	subs	r3, #65	; 0x41
 8003ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b09      	cmp	r3, #9
 8003cb2:	d91c      	bls.n	8003cee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68d9      	ldr	r1, [r3, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3b1e      	subs	r3, #30
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	4019      	ands	r1, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6898      	ldr	r0, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	3b1e      	subs	r3, #30
 8003ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e019      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6919      	ldr	r1, [r3, #16]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2207      	movs	r2, #7
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	4019      	ands	r1, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6898      	ldr	r0, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	fa00 f203 	lsl.w	r2, r0, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b10      	cmp	r3, #16
 8003d28:	d003      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003d2e:	2b11      	cmp	r3, #17
 8003d30:	d132      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_ADC_ConfigChannel+0x1e4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d125      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d126      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003d58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b10      	cmp	r3, #16
 8003d60:	d11a      	bne.n	8003d98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <HAL_ADC_ConfigChannel+0x1e8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <HAL_ADC_ConfigChannel+0x1ec>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	0c9a      	lsrs	r2, r3, #18
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d78:	e002      	b.n	8003d80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f9      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x1b2>
 8003d86:	e007      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr
 8003dac:	40012400 	.word	0x40012400
 8003db0:	200000ac 	.word	0x200000ac
 8003db4:	431bde83 	.word	0x431bde83

08003db8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d040      	beq.n	8003e58 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <ADC_Enable+0xac>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1f      	ldr	r2, [pc, #124]	; (8003e68 <ADC_Enable+0xb0>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	0c9b      	lsrs	r3, r3, #18
 8003df2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003df4:	e002      	b.n	8003dfc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f9      	bne.n	8003df6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e02:	f7ff fc09 	bl	8003618 <HAL_GetTick>
 8003e06:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e08:	e01f      	b.n	8003e4a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e0a:	f7ff fc05 	bl	8003618 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d918      	bls.n	8003e4a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d011      	beq.n	8003e4a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	f043 0210 	orr.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e007      	b.n	8003e5a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d1d8      	bne.n	8003e0a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200000ac 	.word	0x200000ac
 8003e68:	431bde83 	.word	0x431bde83

08003e6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d12e      	bne.n	8003ee4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0201 	bic.w	r2, r2, #1
 8003e94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e96:	f7ff fbbf 	bl	8003618 <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003e9c:	e01b      	b.n	8003ed6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e9e:	f7ff fbbb 	bl	8003618 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d914      	bls.n	8003ed6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10d      	bne.n	8003ed6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e007      	b.n	8003ee6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d0dc      	beq.n	8003e9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_ADCEx_Calibration_Start+0x1e>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e097      	b.n	800403e <HAL_ADCEx_Calibration_Start+0x14e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff ffa8 	bl	8003e6c <ADC_ConversionStop_Disable>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff49 	bl	8003db8 <ADC_Enable>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 8081 	bne.w	8004034 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f3a:	f023 0302 	bic.w	r3, r3, #2
 8003f3e:	f043 0202 	orr.w	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003f46:	4b40      	ldr	r3, [pc, #256]	; (8004048 <HAL_ADCEx_Calibration_Start+0x158>)
 8003f48:	681c      	ldr	r4, [r3, #0]
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	f001 f986 	bl	800525c <HAL_RCCEx_GetPeriphCLKFreq>
 8003f50:	4603      	mov	r3, r0
 8003f52:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003f56:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003f58:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003f5a:	e002      	b.n	8003f62 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f9      	bne.n	8003f5c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003f78:	f7ff fb4e 	bl	8003618 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003f7e:	e01b      	b.n	8003fb8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003f80:	f7ff fb4a 	bl	8003618 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b0a      	cmp	r3, #10
 8003f8c:	d914      	bls.n	8003fb8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00d      	beq.n	8003fb8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f023 0312 	bic.w	r3, r3, #18
 8003fa4:	f043 0210 	orr.w	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e042      	b.n	800403e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1dc      	bne.n	8003f80 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f042 0204 	orr.w	r2, r2, #4
 8003fd4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003fd6:	f7ff fb1f 	bl	8003618 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003fdc:	e01b      	b.n	8004016 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003fde:	f7ff fb1b 	bl	8003618 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b0a      	cmp	r3, #10
 8003fea:	d914      	bls.n	8004016 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00d      	beq.n	8004016 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	f023 0312 	bic.w	r3, r3, #18
 8004002:	f043 0210 	orr.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e013      	b.n	800403e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1dc      	bne.n	8003fde <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f023 0303 	bic.w	r3, r3, #3
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
}
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd90      	pop	{r4, r7, pc}
 8004046:	bf00      	nop
 8004048:	200000ac 	.word	0x200000ac

0800404c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800405c:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407e:	4a04      	ldr	r2, [pc, #16]	; (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	60d3      	str	r3, [r2, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	bc80      	pop	{r7}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <__NVIC_GetPriorityGrouping+0x18>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f003 0307 	and.w	r3, r3, #7
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bc80      	pop	{r7}
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	db0b      	blt.n	80040da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	f003 021f 	and.w	r2, r3, #31
 80040c8:	4906      	ldr	r1, [pc, #24]	; (80040e4 <__NVIC_EnableIRQ+0x34>)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2001      	movs	r0, #1
 80040d2:	fa00 f202 	lsl.w	r2, r0, r2
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d301      	bcc.n	80041b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b2:	2301      	movs	r3, #1
 80041b4:	e00f      	b.n	80041d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <SysTick_Config+0x40>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041be:	210f      	movs	r1, #15
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	f7ff ff90 	bl	80040e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <SysTick_Config+0x40>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ce:	4b04      	ldr	r3, [pc, #16]	; (80041e0 <SysTick_Config+0x40>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	e000e010 	.word	0xe000e010

080041e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff ff2d 	bl	800404c <__NVIC_SetPriorityGrouping>
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4603      	mov	r3, r0
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800420c:	f7ff ff42 	bl	8004094 <__NVIC_GetPriorityGrouping>
 8004210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff ff90 	bl	800413c <NVIC_EncodePriority>
 800421c:	4602      	mov	r2, r0
 800421e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff5f 	bl	80040e8 <__NVIC_SetPriority>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff35 	bl	80040b0 <__NVIC_EnableIRQ>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffa2 	bl	80041a0 <SysTick_Config>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2204      	movs	r2, #4
 8004282:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e020      	b.n	80042d2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 020e 	bic.w	r2, r2, #14
 800429e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f202 	lsl.w	r2, r1, r2
 80042be:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d005      	beq.n	8004300 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e0d6      	b.n	80044ae <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 020e 	bic.w	r2, r2, #14
 800430e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <HAL_DMA_Abort_IT+0x1dc>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d958      	bls.n	80043de <HAL_DMA_Abort_IT+0x102>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a62      	ldr	r2, [pc, #392]	; (80044bc <HAL_DMA_Abort_IT+0x1e0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d04f      	beq.n	80043d6 <HAL_DMA_Abort_IT+0xfa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a61      	ldr	r2, [pc, #388]	; (80044c0 <HAL_DMA_Abort_IT+0x1e4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d048      	beq.n	80043d2 <HAL_DMA_Abort_IT+0xf6>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5f      	ldr	r2, [pc, #380]	; (80044c4 <HAL_DMA_Abort_IT+0x1e8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d040      	beq.n	80043cc <HAL_DMA_Abort_IT+0xf0>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5e      	ldr	r2, [pc, #376]	; (80044c8 <HAL_DMA_Abort_IT+0x1ec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d038      	beq.n	80043c6 <HAL_DMA_Abort_IT+0xea>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_DMA_Abort_IT+0x1f0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d030      	beq.n	80043c0 <HAL_DMA_Abort_IT+0xe4>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a5b      	ldr	r2, [pc, #364]	; (80044d0 <HAL_DMA_Abort_IT+0x1f4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d028      	beq.n	80043ba <HAL_DMA_Abort_IT+0xde>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_DMA_Abort_IT+0x1dc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d020      	beq.n	80043b4 <HAL_DMA_Abort_IT+0xd8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a57      	ldr	r2, [pc, #348]	; (80044d4 <HAL_DMA_Abort_IT+0x1f8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d019      	beq.n	80043b0 <HAL_DMA_Abort_IT+0xd4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a55      	ldr	r2, [pc, #340]	; (80044d8 <HAL_DMA_Abort_IT+0x1fc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d012      	beq.n	80043ac <HAL_DMA_Abort_IT+0xd0>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a54      	ldr	r2, [pc, #336]	; (80044dc <HAL_DMA_Abort_IT+0x200>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00a      	beq.n	80043a6 <HAL_DMA_Abort_IT+0xca>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a52      	ldr	r2, [pc, #328]	; (80044e0 <HAL_DMA_Abort_IT+0x204>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d102      	bne.n	80043a0 <HAL_DMA_Abort_IT+0xc4>
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	e01b      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043a4:	e018      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043aa:	e015      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043ac:	2310      	movs	r3, #16
 80043ae:	e013      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e011      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b8:	e00e      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80043be:	e00b      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043c4:	e008      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ca:	e005      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043d0:	e002      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043d2:	2310      	movs	r3, #16
 80043d4:	e000      	b.n	80043d8 <HAL_DMA_Abort_IT+0xfc>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4a42      	ldr	r2, [pc, #264]	; (80044e4 <HAL_DMA_Abort_IT+0x208>)
 80043da:	6053      	str	r3, [r2, #4]
 80043dc:	e057      	b.n	800448e <HAL_DMA_Abort_IT+0x1b2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a36      	ldr	r2, [pc, #216]	; (80044bc <HAL_DMA_Abort_IT+0x1e0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d04f      	beq.n	8004488 <HAL_DMA_Abort_IT+0x1ac>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a34      	ldr	r2, [pc, #208]	; (80044c0 <HAL_DMA_Abort_IT+0x1e4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d048      	beq.n	8004484 <HAL_DMA_Abort_IT+0x1a8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a33      	ldr	r2, [pc, #204]	; (80044c4 <HAL_DMA_Abort_IT+0x1e8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d040      	beq.n	800447e <HAL_DMA_Abort_IT+0x1a2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <HAL_DMA_Abort_IT+0x1ec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d038      	beq.n	8004478 <HAL_DMA_Abort_IT+0x19c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_DMA_Abort_IT+0x1f0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d030      	beq.n	8004472 <HAL_DMA_Abort_IT+0x196>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_DMA_Abort_IT+0x1f4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d028      	beq.n	800446c <HAL_DMA_Abort_IT+0x190>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <HAL_DMA_Abort_IT+0x1dc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d020      	beq.n	8004466 <HAL_DMA_Abort_IT+0x18a>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_DMA_Abort_IT+0x1f8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d019      	beq.n	8004462 <HAL_DMA_Abort_IT+0x186>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <HAL_DMA_Abort_IT+0x1fc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d012      	beq.n	800445e <HAL_DMA_Abort_IT+0x182>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_DMA_Abort_IT+0x200>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00a      	beq.n	8004458 <HAL_DMA_Abort_IT+0x17c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <HAL_DMA_Abort_IT+0x204>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d102      	bne.n	8004452 <HAL_DMA_Abort_IT+0x176>
 800444c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004450:	e01b      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004456:	e018      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800445c:	e015      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 800445e:	2310      	movs	r3, #16
 8004460:	e013      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004462:	2301      	movs	r3, #1
 8004464:	e011      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800446a:	e00e      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 800446c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004470:	e00b      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004476:	e008      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447c:	e005      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 800447e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004482:	e002      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004484:	2310      	movs	r3, #16
 8004486:	e000      	b.n	800448a <HAL_DMA_Abort_IT+0x1ae>
 8004488:	2301      	movs	r3, #1
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <HAL_DMA_Abort_IT+0x20c>)
 800448c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
    } 
  }
  return status;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40020080 	.word	0x40020080
 80044bc:	40020008 	.word	0x40020008
 80044c0:	4002001c 	.word	0x4002001c
 80044c4:	40020030 	.word	0x40020030
 80044c8:	40020044 	.word	0x40020044
 80044cc:	40020058 	.word	0x40020058
 80044d0:	4002006c 	.word	0x4002006c
 80044d4:	40020408 	.word	0x40020408
 80044d8:	4002041c 	.word	0x4002041c
 80044dc:	40020430 	.word	0x40020430
 80044e0:	40020444 	.word	0x40020444
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020000 	.word	0x40020000

080044ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b08b      	sub	sp, #44	; 0x2c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044fe:	e179      	b.n	80047f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004500:	2201      	movs	r2, #1
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	f040 8168 	bne.w	80047ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4a96      	ldr	r2, [pc, #600]	; (800477c <HAL_GPIO_Init+0x290>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d05e      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004528:	4a94      	ldr	r2, [pc, #592]	; (800477c <HAL_GPIO_Init+0x290>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d875      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800452e:	4a94      	ldr	r2, [pc, #592]	; (8004780 <HAL_GPIO_Init+0x294>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d058      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004534:	4a92      	ldr	r2, [pc, #584]	; (8004780 <HAL_GPIO_Init+0x294>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d86f      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800453a:	4a92      	ldr	r2, [pc, #584]	; (8004784 <HAL_GPIO_Init+0x298>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d052      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004540:	4a90      	ldr	r2, [pc, #576]	; (8004784 <HAL_GPIO_Init+0x298>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d869      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004546:	4a90      	ldr	r2, [pc, #576]	; (8004788 <HAL_GPIO_Init+0x29c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d04c      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 800454c:	4a8e      	ldr	r2, [pc, #568]	; (8004788 <HAL_GPIO_Init+0x29c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d863      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004552:	4a8e      	ldr	r2, [pc, #568]	; (800478c <HAL_GPIO_Init+0x2a0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d046      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
 8004558:	4a8c      	ldr	r2, [pc, #560]	; (800478c <HAL_GPIO_Init+0x2a0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d85d      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 800455e:	2b12      	cmp	r3, #18
 8004560:	d82a      	bhi.n	80045b8 <HAL_GPIO_Init+0xcc>
 8004562:	2b12      	cmp	r3, #18
 8004564:	d859      	bhi.n	800461a <HAL_GPIO_Init+0x12e>
 8004566:	a201      	add	r2, pc, #4	; (adr r2, 800456c <HAL_GPIO_Init+0x80>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	080045e7 	.word	0x080045e7
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045d3 	.word	0x080045d3
 8004578:	08004615 	.word	0x08004615
 800457c:	0800461b 	.word	0x0800461b
 8004580:	0800461b 	.word	0x0800461b
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800461b 	.word	0x0800461b
 800458c:	0800461b 	.word	0x0800461b
 8004590:	0800461b 	.word	0x0800461b
 8004594:	0800461b 	.word	0x0800461b
 8004598:	0800461b 	.word	0x0800461b
 800459c:	0800461b 	.word	0x0800461b
 80045a0:	0800461b 	.word	0x0800461b
 80045a4:	0800461b 	.word	0x0800461b
 80045a8:	0800461b 	.word	0x0800461b
 80045ac:	0800461b 	.word	0x0800461b
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	4a75      	ldr	r2, [pc, #468]	; (8004790 <HAL_GPIO_Init+0x2a4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d013      	beq.n	80045e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045be:	e02c      	b.n	800461a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	623b      	str	r3, [r7, #32]
          break;
 80045c6:	e029      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	3304      	adds	r3, #4
 80045ce:	623b      	str	r3, [r7, #32]
          break;
 80045d0:	e024      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	3308      	adds	r3, #8
 80045d8:	623b      	str	r3, [r7, #32]
          break;
 80045da:	e01f      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	330c      	adds	r3, #12
 80045e2:	623b      	str	r3, [r7, #32]
          break;
 80045e4:	e01a      	b.n	800461c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d102      	bne.n	80045f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045ee:	2304      	movs	r3, #4
 80045f0:	623b      	str	r3, [r7, #32]
          break;
 80045f2:	e013      	b.n	800461c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045fc:	2308      	movs	r3, #8
 80045fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	611a      	str	r2, [r3, #16]
          break;
 8004606:	e009      	b.n	800461c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004608:	2308      	movs	r3, #8
 800460a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	615a      	str	r2, [r3, #20]
          break;
 8004612:	e003      	b.n	800461c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004614:	2300      	movs	r3, #0
 8004616:	623b      	str	r3, [r7, #32]
          break;
 8004618:	e000      	b.n	800461c <HAL_GPIO_Init+0x130>
          break;
 800461a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2bff      	cmp	r3, #255	; 0xff
 8004620:	d801      	bhi.n	8004626 <HAL_GPIO_Init+0x13a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	e001      	b.n	800462a <HAL_GPIO_Init+0x13e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2bff      	cmp	r3, #255	; 0xff
 8004630:	d802      	bhi.n	8004638 <HAL_GPIO_Init+0x14c>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	e002      	b.n	800463e <HAL_GPIO_Init+0x152>
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	3b08      	subs	r3, #8
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	210f      	movs	r1, #15
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	6a39      	ldr	r1, [r7, #32]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	fa01 f303 	lsl.w	r3, r1, r3
 8004658:	431a      	orrs	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80c1 	beq.w	80047ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800466c:	4b49      	ldr	r3, [pc, #292]	; (8004794 <HAL_GPIO_Init+0x2a8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	4a48      	ldr	r2, [pc, #288]	; (8004794 <HAL_GPIO_Init+0x2a8>)
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	6193      	str	r3, [r2, #24]
 8004678:	4b46      	ldr	r3, [pc, #280]	; (8004794 <HAL_GPIO_Init+0x2a8>)
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004684:	4a44      	ldr	r2, [pc, #272]	; (8004798 <HAL_GPIO_Init+0x2ac>)
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	3302      	adds	r3, #2
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4013      	ands	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3c      	ldr	r2, [pc, #240]	; (800479c <HAL_GPIO_Init+0x2b0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01f      	beq.n	80046f0 <HAL_GPIO_Init+0x204>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	; (80047a0 <HAL_GPIO_Init+0x2b4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d019      	beq.n	80046ec <HAL_GPIO_Init+0x200>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <HAL_GPIO_Init+0x2b8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_GPIO_Init+0x1fc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a39      	ldr	r2, [pc, #228]	; (80047a8 <HAL_GPIO_Init+0x2bc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00d      	beq.n	80046e4 <HAL_GPIO_Init+0x1f8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_GPIO_Init+0x2c0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <HAL_GPIO_Init+0x1f4>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a37      	ldr	r2, [pc, #220]	; (80047b0 <HAL_GPIO_Init+0x2c4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_GPIO_Init+0x1f0>
 80046d8:	2305      	movs	r3, #5
 80046da:	e00a      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046dc:	2306      	movs	r3, #6
 80046de:	e008      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046e0:	2304      	movs	r3, #4
 80046e2:	e006      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e004      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e002      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_GPIO_Init+0x206>
 80046f0:	2300      	movs	r3, #0
 80046f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f4:	f002 0203 	and.w	r2, r2, #3
 80046f8:	0092      	lsls	r2, r2, #2
 80046fa:	4093      	lsls	r3, r2
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004702:	4925      	ldr	r1, [pc, #148]	; (8004798 <HAL_GPIO_Init+0x2ac>)
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d006      	beq.n	800472a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4924      	ldr	r1, [pc, #144]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]
 8004728:	e006      	b.n	8004738 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	43db      	mvns	r3, r3
 8004732:	4920      	ldr	r1, [pc, #128]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 8004734:	4013      	ands	r3, r2
 8004736:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d006      	beq.n	8004752 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004744:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	491a      	ldr	r1, [pc, #104]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	60cb      	str	r3, [r1, #12]
 8004750:	e006      	b.n	8004760 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004752:	4b18      	ldr	r3, [pc, #96]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	43db      	mvns	r3, r3
 800475a:	4916      	ldr	r1, [pc, #88]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 800475c:	4013      	ands	r3, r2
 800475e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d025      	beq.n	80047b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800476c:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	4910      	ldr	r1, [pc, #64]	; (80047b4 <HAL_GPIO_Init+0x2c8>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	604b      	str	r3, [r1, #4]
 8004778:	e025      	b.n	80047c6 <HAL_GPIO_Init+0x2da>
 800477a:	bf00      	nop
 800477c:	10320000 	.word	0x10320000
 8004780:	10310000 	.word	0x10310000
 8004784:	10220000 	.word	0x10220000
 8004788:	10210000 	.word	0x10210000
 800478c:	10120000 	.word	0x10120000
 8004790:	10110000 	.word	0x10110000
 8004794:	40021000 	.word	0x40021000
 8004798:	40010000 	.word	0x40010000
 800479c:	40010800 	.word	0x40010800
 80047a0:	40010c00 	.word	0x40010c00
 80047a4:	40011000 	.word	0x40011000
 80047a8:	40011400 	.word	0x40011400
 80047ac:	40011800 	.word	0x40011800
 80047b0:	40011c00 	.word	0x40011c00
 80047b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	43db      	mvns	r3, r3
 80047c0:	4913      	ldr	r1, [pc, #76]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d006      	beq.n	80047e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
 80047de:	e006      	b.n	80047ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	43db      	mvns	r3, r3
 80047e8:	4909      	ldr	r1, [pc, #36]	; (8004810 <HAL_GPIO_Init+0x324>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f47f ae7e 	bne.w	8004500 <HAL_GPIO_Init+0x14>
  }
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	372c      	adds	r7, #44	; 0x2c
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	40010400 	.word	0x40010400

08004814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e001      	b.n	8004836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004836:	7bfb      	ldrb	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr

08004842 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	807b      	strh	r3, [r7, #2]
 800484e:	4613      	mov	r3, r2
 8004850:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004852:	787b      	ldrb	r3, [r7, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004858:	887a      	ldrh	r2, [r7, #2]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800485e:	e003      	b.n	8004868 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004860:	887b      	ldrh	r3, [r7, #2]
 8004862:	041a      	lsls	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	611a      	str	r2, [r3, #16]
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
	...

08004874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800488a:	4a05      	ldr	r2, [pc, #20]	; (80048a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800488c:	88fb      	ldrh	r3, [r7, #6]
 800488e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004890:	88fb      	ldrh	r3, [r7, #6]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f806 	bl	80048a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40010400 	.word	0x40010400

080048a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	420e0020 	.word	0x420e0020

080048d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e272      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 8087 	beq.w	80049fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048f0:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00c      	beq.n	8004916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048fc:	4b8f      	ldr	r3, [pc, #572]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 030c 	and.w	r3, r3, #12
 8004904:	2b08      	cmp	r3, #8
 8004906:	d112      	bne.n	800492e <HAL_RCC_OscConfig+0x5e>
 8004908:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d10b      	bne.n	800492e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004916:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d06c      	beq.n	80049fc <HAL_RCC_OscConfig+0x12c>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d168      	bne.n	80049fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e24c      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004936:	d106      	bne.n	8004946 <HAL_RCC_OscConfig+0x76>
 8004938:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a7f      	ldr	r2, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800493e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	e02e      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_RCC_OscConfig+0x98>
 800494e:	4b7b      	ldr	r3, [pc, #492]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a7a      	ldr	r2, [pc, #488]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	4b78      	ldr	r3, [pc, #480]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a77      	ldr	r2, [pc, #476]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	e01d      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004970:	d10c      	bne.n	800498c <HAL_RCC_OscConfig+0xbc>
 8004972:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a71      	ldr	r2, [pc, #452]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	e00b      	b.n	80049a4 <HAL_RCC_OscConfig+0xd4>
 800498c:	4b6b      	ldr	r3, [pc, #428]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a67      	ldr	r2, [pc, #412]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 800499e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d013      	beq.n	80049d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fe34 	bl	8003618 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b4:	f7fe fe30 	bl	8003618 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b64      	cmp	r3, #100	; 0x64
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e200      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c6:	4b5d      	ldr	r3, [pc, #372]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0xe4>
 80049d2:	e014      	b.n	80049fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fe fe20 	bl	8003618 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049dc:	f7fe fe1c 	bl	8003618 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e1ec      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ee:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x10c>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d063      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a0a:	4b4c      	ldr	r3, [pc, #304]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a16:	4b49      	ldr	r3, [pc, #292]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d11c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x18c>
 8004a22:	4b46      	ldr	r3, [pc, #280]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d116      	bne.n	8004a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_RCC_OscConfig+0x176>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e1c0      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b3d      	ldr	r3, [pc, #244]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4939      	ldr	r1, [pc, #228]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	e03a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d020      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_RCC_OscConfig+0x270>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6a:	f7fe fdd5 	bl	8003618 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a72:	f7fe fdd1 	bl	8003618 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1a1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a84:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a90:	4b2a      	ldr	r3, [pc, #168]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4927      	ldr	r1, [pc, #156]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	600b      	str	r3, [r1, #0]
 8004aa4:	e015      	b.n	8004ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <HAL_RCC_OscConfig+0x270>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fdb4 	bl	8003618 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fdb0 	bl	8003618 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e180      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d03a      	beq.n	8004b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d019      	beq.n	8004b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <HAL_RCC_OscConfig+0x274>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aec:	f7fe fd94 	bl	8003618 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af4:	f7fe fd90 	bl	8003618 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e160      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <HAL_RCC_OscConfig+0x26c>)
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f000 face 	bl	80050b4 <RCC_Delay>
 8004b18:	e01c      	b.n	8004b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fe fd7a 	bl	8003618 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b26:	e00f      	b.n	8004b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe fd76 	bl	8003618 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d908      	bls.n	8004b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e146      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
 8004b3a:	bf00      	nop
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	42420000 	.word	0x42420000
 8004b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b48:	4b92      	ldr	r3, [pc, #584]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e9      	bne.n	8004b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 80a6 	beq.w	8004cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b66:	4b8b      	ldr	r3, [pc, #556]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b72:	4b88      	ldr	r3, [pc, #544]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4a87      	ldr	r2, [pc, #540]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	61d3      	str	r3, [r2, #28]
 8004b7e:	4b85      	ldr	r3, [pc, #532]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	60bb      	str	r3, [r7, #8]
 8004b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b82      	ldr	r3, [pc, #520]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d118      	bne.n	8004bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7e      	ldr	r2, [pc, #504]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fe fd37 	bl	8003618 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fe fd33 	bl	8003618 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	; 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e103      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	4b75      	ldr	r3, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4c8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_OscConfig+0x312>
 8004bd4:	4b6f      	ldr	r3, [pc, #444]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bda:	f043 0301 	orr.w	r3, r3, #1
 8004bde:	6213      	str	r3, [r2, #32]
 8004be0:	e02d      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10c      	bne.n	8004c04 <HAL_RCC_OscConfig+0x334>
 8004bea:	4b6a      	ldr	r3, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bf0:	f023 0301 	bic.w	r3, r3, #1
 8004bf4:	6213      	str	r3, [r2, #32]
 8004bf6:	4b67      	ldr	r3, [pc, #412]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4a66      	ldr	r2, [pc, #408]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	6213      	str	r3, [r2, #32]
 8004c02:	e01c      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2b05      	cmp	r3, #5
 8004c0a:	d10c      	bne.n	8004c26 <HAL_RCC_OscConfig+0x356>
 8004c0c:	4b61      	ldr	r3, [pc, #388]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c12:	f043 0304 	orr.w	r3, r3, #4
 8004c16:	6213      	str	r3, [r2, #32]
 8004c18:	4b5e      	ldr	r3, [pc, #376]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	4a5d      	ldr	r2, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	6213      	str	r3, [r2, #32]
 8004c24:	e00b      	b.n	8004c3e <HAL_RCC_OscConfig+0x36e>
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4a5a      	ldr	r2, [pc, #360]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6213      	str	r3, [r2, #32]
 8004c32:	4b58      	ldr	r3, [pc, #352]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	4a57      	ldr	r2, [pc, #348]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d015      	beq.n	8004c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7fe fce7 	bl	8003618 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fce3 	bl	8003618 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e0b1      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c64:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0ee      	beq.n	8004c4e <HAL_RCC_OscConfig+0x37e>
 8004c70:	e014      	b.n	8004c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c72:	f7fe fcd1 	bl	8003618 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c78:	e00a      	b.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7a:	f7fe fccd 	bl	8003618 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e09b      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c90:	4b40      	ldr	r3, [pc, #256]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1ee      	bne.n	8004c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b3c      	ldr	r3, [pc, #240]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4a3b      	ldr	r2, [pc, #236]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8087 	beq.w	8004dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb8:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d061      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d146      	bne.n	8004d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fe fca1 	bl	8003618 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cda:	f7fe fc9d 	bl	8003618 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e06d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cec:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1f0      	bne.n	8004cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d00:	d108      	bne.n	8004d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	4921      	ldr	r1, [pc, #132]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d14:	4b1f      	ldr	r3, [pc, #124]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a19      	ldr	r1, [r3, #32]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	430b      	orrs	r3, r1
 8004d26:	491b      	ldr	r1, [pc, #108]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe fc71 	bl	8003618 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fe fc6d 	bl	8003618 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e03d      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4c:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x46a>
 8004d58:	e035      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x4cc>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fe fc5a 	bl	8003618 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d68:	f7fe fc56 	bl	8003618 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e026      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_RCC_OscConfig+0x4c4>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0x498>
 8004d86:	e01e      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e019      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40007000 	.word	0x40007000
 8004d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x500>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d001      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40021000 	.word	0x40021000

08004dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0d0      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d910      	bls.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b67      	ldr	r3, [pc, #412]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 0207 	bic.w	r2, r3, #7
 8004dfe:	4965      	ldr	r1, [pc, #404]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d001      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0b8      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d020      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e30:	4b59      	ldr	r3, [pc, #356]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a58      	ldr	r2, [pc, #352]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e48:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	494d      	ldr	r1, [pc, #308]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d040      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7a:	4b47      	ldr	r3, [pc, #284]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d115      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e07f      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e92:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e073      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e06b      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b39      	ldr	r3, [pc, #228]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4936      	ldr	r1, [pc, #216]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec4:	f7fe fba8 	bl	8003618 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fe fba4 	bl	8003618 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e053      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d210      	bcs.n	8004f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 0207 	bic.w	r2, r3, #7
 8004f0a:	4922      	ldr	r1, [pc, #136]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f12:	4b20      	ldr	r3, [pc, #128]	; (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e032      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f30:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	4916      	ldr	r1, [pc, #88]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f4e:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	490e      	ldr	r1, [pc, #56]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f62:	f000 f821 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8004f66:	4602      	mov	r2, r0
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	091b      	lsrs	r3, r3, #4
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	490a      	ldr	r1, [pc, #40]	; (8004f9c <HAL_RCC_ClockConfig+0x1c8>)
 8004f74:	5ccb      	ldrb	r3, [r1, r3]
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	4a09      	ldr	r2, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8004f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fb06 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	40022000 	.word	0x40022000
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	0800b1e0 	.word	0x0800b1e0
 8004fa0:	200000ac 	.word	0x200000ac
 8004fa4:	200000b0 	.word	0x200000b0

08004fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	2300      	movs	r3, #0
 8004fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fc2:	4b1e      	ldr	r3, [pc, #120]	; (800503c <HAL_RCC_GetSysClockFreq+0x94>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d002      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0x36>
 8004fd6:	e027      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fda:	613b      	str	r3, [r7, #16]
      break;
 8004fdc:	e027      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	0c9b      	lsrs	r3, r3, #18
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fe8:	5cd3      	ldrb	r3, [r2, r3]
 8004fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d010      	beq.n	8005018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <HAL_RCC_GetSysClockFreq+0x94>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	0c5b      	lsrs	r3, r3, #17
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	4a11      	ldr	r2, [pc, #68]	; (8005048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <HAL_RCC_GetSysClockFreq+0x98>)
 800500a:	fb03 f202 	mul.w	r2, r3, r2
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	e004      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <HAL_RCC_GetSysClockFreq+0xa4>)
 800501c:	fb02 f303 	mul.w	r3, r2, r3
 8005020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	613b      	str	r3, [r7, #16]
      break;
 8005026:	e002      	b.n	800502e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetSysClockFreq+0x98>)
 800502a:	613b      	str	r3, [r7, #16]
      break;
 800502c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800502e:	693b      	ldr	r3, [r7, #16]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	007a1200 	.word	0x007a1200
 8005044:	0800b1f8 	.word	0x0800b1f8
 8005048:	0800b208 	.word	0x0800b208
 800504c:	003d0900 	.word	0x003d0900

08005050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005054:	4b02      	ldr	r3, [pc, #8]	; (8005060 <HAL_RCC_GetHCLKFreq+0x10>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	200000ac 	.word	0x200000ac

08005064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005068:	f7ff fff2 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 800506c:	4602      	mov	r2, r0
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	4903      	ldr	r1, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800507a:	5ccb      	ldrb	r3, [r1, r3]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40021000 	.word	0x40021000
 8005088:	0800b1f0 	.word	0x0800b1f0

0800508c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005090:	f7ff ffde 	bl	8005050 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	0adb      	lsrs	r3, r3, #11
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	0800b1f0 	.word	0x0800b1f0

080050b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <RCC_Delay+0x34>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <RCC_Delay+0x38>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	0a5b      	lsrs	r3, r3, #9
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050d0:	bf00      	nop
  }
  while (Delay --);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	60fa      	str	r2, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f9      	bne.n	80050d0 <RCC_Delay+0x1c>
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr
 80050e8:	200000ac 	.word	0x200000ac
 80050ec:	10624dd3 	.word	0x10624dd3

080050f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d07d      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005110:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511c:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4a4b      	ldr	r2, [pc, #300]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005126:	61d3      	str	r3, [r2, #28]
 8005128:	4b49      	ldr	r3, [pc, #292]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	4b46      	ldr	r3, [pc, #280]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d118      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005144:	4b43      	ldr	r3, [pc, #268]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a42      	ldr	r2, [pc, #264]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800514a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005150:	f7fe fa62 	bl	8003618 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005156:	e008      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005158:	f7fe fa5e 	bl	8003618 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e06d      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516a:	4b3a      	ldr	r3, [pc, #232]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0f0      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005176:	4b36      	ldr	r3, [pc, #216]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d02e      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	429a      	cmp	r2, r3
 8005192:	d027      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005194:	4b2e      	ldr	r3, [pc, #184]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800519e:	4b2e      	ldr	r3, [pc, #184]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051a4:	4b2c      	ldr	r3, [pc, #176]	; (8005258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051aa:	4a29      	ldr	r2, [pc, #164]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d014      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fe fa2d 	bl	8003618 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fe fa29 	bl	8003618 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e036      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ee      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4917      	ldr	r1, [pc, #92]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051f6:	7dfb      	ldrb	r3, [r7, #23]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d105      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	4a13      	ldr	r2, [pc, #76]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005206:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d008      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005214:	4b0e      	ldr	r3, [pc, #56]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	490b      	ldr	r1, [pc, #44]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	4313      	orrs	r3, r2
 8005224:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	4904      	ldr	r1, [pc, #16]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40021000 	.word	0x40021000
 8005254:	40007000 	.word	0x40007000
 8005258:	42420440 	.word	0x42420440

0800525c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	2300      	movs	r3, #0
 8005276:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3b01      	subs	r3, #1
 800527c:	2b0f      	cmp	r3, #15
 800527e:	f200 80af 	bhi.w	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	0800535f 	.word	0x0800535f
 800528c:	080053c5 	.word	0x080053c5
 8005290:	080053e1 	.word	0x080053e1
 8005294:	0800534f 	.word	0x0800534f
 8005298:	080053e1 	.word	0x080053e1
 800529c:	080053e1 	.word	0x080053e1
 80052a0:	080053e1 	.word	0x080053e1
 80052a4:	08005357 	.word	0x08005357
 80052a8:	080053e1 	.word	0x080053e1
 80052ac:	080053e1 	.word	0x080053e1
 80052b0:	080053e1 	.word	0x080053e1
 80052b4:	080053e1 	.word	0x080053e1
 80052b8:	080053e1 	.word	0x080053e1
 80052bc:	080053e1 	.word	0x080053e1
 80052c0:	080053e1 	.word	0x080053e1
 80052c4:	080052c9 	.word	0x080052c9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80052c8:	4b4a      	ldr	r3, [pc, #296]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80052ce:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8084 	beq.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	0c9b      	lsrs	r3, r3, #18
 80052e0:	f003 030f 	and.w	r3, r3, #15
 80052e4:	4a44      	ldr	r2, [pc, #272]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80052e6:	5cd3      	ldrb	r3, [r2, r3]
 80052e8:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d015      	beq.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	0c5b      	lsrs	r3, r3, #17
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	4a3f      	ldr	r2, [pc, #252]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8005300:	5cd3      	ldrb	r3, [r2, r3]
 8005302:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fbb2 f2f3 	udiv	r2, r2, r3
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	fb02 f303 	mul.w	r3, r2, r3
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	e004      	b.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4a38      	ldr	r2, [pc, #224]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800532a:	4b32      	ldr	r3, [pc, #200]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005336:	d102      	bne.n	800533e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800533c:	e052      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4a31      	ldr	r2, [pc, #196]	; (8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	61bb      	str	r3, [r7, #24]
      break;
 800534c:	e04a      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800534e:	f7ff fe2b 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 8005352:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005354:	e049      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005356:	f7ff fe27 	bl	8004fa8 <HAL_RCC_GetSysClockFreq>
 800535a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800535c:	e045      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800535e:	4b25      	ldr	r3, [pc, #148]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536e:	d108      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537e:	61bb      	str	r3, [r7, #24]
 8005380:	e01f      	b.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538c:	d109      	bne.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800538e:	4b19      	ldr	r3, [pc, #100]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 800539a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e00f      	b.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ac:	d11c      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80053ae:	4b11      	ldr	r3, [pc, #68]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80053ba:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053be:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80053c0:	e012      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80053c2:	e011      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80053c4:	f7ff fe62 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	0b9b      	lsrs	r3, r3, #14
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	3301      	adds	r3, #1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	61bb      	str	r3, [r7, #24]
      break;
 80053de:	e004      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80053e0:	bf00      	nop
 80053e2:	e002      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80053e4:	bf00      	nop
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80053e8:	bf00      	nop
    }
  }
  return (frequency);
 80053ea:	69bb      	ldr	r3, [r7, #24]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800b20c 	.word	0x0800b20c
 80053fc:	0800b21c 	.word	0x0800b21c
 8005400:	007a1200 	.word	0x007a1200
 8005404:	003d0900 	.word	0x003d0900
 8005408:	aaaaaaab 	.word	0xaaaaaaab

0800540c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07a      	b.n	8005518 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	7c5b      	ldrb	r3, [r3, #17]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fd fd82 	bl	8002f3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 faf4 	bl	8005a2c <HAL_RTC_WaitForSynchro>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e061      	b.n	8005518 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fbad 	bl	8005bb4 <RTC_EnterInitMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2204      	movs	r2, #4
 8005464:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e056      	b.n	8005518 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0207 	bic.w	r2, r2, #7
 8005478:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d005      	beq.n	800548e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RTC_Init+0x114>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	4a26      	ldr	r2, [pc, #152]	; (8005520 <HAL_RTC_Init+0x114>)
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RTC_Init+0x114>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4921      	ldr	r1, [pc, #132]	; (8005520 <HAL_RTC_Init+0x114>)
 800549c:	4313      	orrs	r3, r2
 800549e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a8:	d003      	beq.n	80054b2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e00e      	b.n	80054d0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80054b2:	2001      	movs	r0, #1
 80054b4:	f7ff fed2 	bl	800525c <HAL_RCCEx_GetPeriphCLKFreq>
 80054b8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d104      	bne.n	80054ca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2204      	movs	r2, #4
 80054c4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e026      	b.n	8005518 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	0c1a      	lsrs	r2, r3, #16
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f002 020f 	and.w	r2, r2, #15
 80054dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	b292      	uxth	r2, r2
 80054e6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb8b 	bl	8005c04 <RTC_ExitInitMode>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2204      	movs	r2, #4
 80054f8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00c      	b.n	8005518 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005516:	2300      	movs	r3, #0
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40006c00 	.word	0x40006c00

08005524 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	2300      	movs	r3, #0
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	2300      	movs	r3, #0
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_RTC_GetTime+0x28>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e0b5      	b.n	80056bc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0ac      	b.n	80056bc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fa8f 	bl	8005a86 <RTC_ReadTimeCounter>
 8005568:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	4a55      	ldr	r2, [pc, #340]	; (80056c4 <HAL_RTC_GetTime+0x1a0>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	0adb      	lsrs	r3, r3, #11
 8005574:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	4b52      	ldr	r3, [pc, #328]	; (80056c4 <HAL_RTC_GetTime+0x1a0>)
 800557a:	fba3 1302 	umull	r1, r3, r3, r2
 800557e:	0adb      	lsrs	r3, r3, #11
 8005580:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	4a4f      	ldr	r2, [pc, #316]	; (80056c8 <HAL_RTC_GetTime+0x1a4>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	4a4a      	ldr	r2, [pc, #296]	; (80056c4 <HAL_RTC_GetTime+0x1a0>)
 800559c:	fba2 1203 	umull	r1, r2, r2, r3
 80055a0:	0ad2      	lsrs	r2, r2, #11
 80055a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80055a6:	fb01 f202 	mul.w	r2, r1, r2
 80055aa:	1a9a      	subs	r2, r3, r2
 80055ac:	4b46      	ldr	r3, [pc, #280]	; (80056c8 <HAL_RTC_GetTime+0x1a4>)
 80055ae:	fba3 1302 	umull	r1, r3, r3, r2
 80055b2:	0959      	lsrs	r1, r3, #5
 80055b4:	460b      	mov	r3, r1
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	1a5b      	subs	r3, r3, r1
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	1ad1      	subs	r1, r2, r3
 80055be:	b2ca      	uxtb	r2, r1
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b17      	cmp	r3, #23
 80055c8:	d955      	bls.n	8005676 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4a3f      	ldr	r2, [pc, #252]	; (80056cc <HAL_RTC_GetTime+0x1a8>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80055d6:	6939      	ldr	r1, [r7, #16]
 80055d8:	4b3c      	ldr	r3, [pc, #240]	; (80056cc <HAL_RTC_GetTime+0x1a8>)
 80055da:	fba3 2301 	umull	r2, r3, r3, r1
 80055de:	091a      	lsrs	r2, r3, #4
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	1aca      	subs	r2, r1, r3
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fa9f 	bl	8005b34 <RTC_ReadAlarmCounter>
 80055f6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055fe:	d008      	beq.n	8005612 <HAL_RTC_GetTime+0xee>
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	429a      	cmp	r2, r3
 8005606:	d904      	bls.n	8005612 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8005608:	69fa      	ldr	r2, [r7, #28]
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	e002      	b.n	8005618 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005616:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <HAL_RTC_GetTime+0x1ac>)
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005626:	69b9      	ldr	r1, [r7, #24]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 fa5c 	bl	8005ae6 <RTC_WriteTimeCounter>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e041      	b.n	80056bc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800563e:	d00c      	beq.n	800565a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005648:	69f9      	ldr	r1, [r7, #28]
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 fa8b 	bl	8005b66 <RTC_WriteAlarmCounter>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e030      	b.n	80056bc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800565a:	69f9      	ldr	r1, [r7, #28]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fa82 	bl	8005b66 <RTC_WriteAlarmCounter>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e027      	b.n	80056bc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800566c:	6979      	ldr	r1, [r7, #20]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fb2a 	bl	8005cc8 <RTC_DateUpdate>
 8005674:	e003      	b.n	800567e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01a      	beq.n	80056ba <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fae3 	bl	8005c54 <RTC_ByteToBcd2>
 800568e:	4603      	mov	r3, r0
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	785b      	ldrb	r3, [r3, #1]
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fada 	bl	8005c54 <RTC_ByteToBcd2>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	789b      	ldrb	r3, [r3, #2]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fad1 	bl	8005c54 <RTC_ByteToBcd2>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3720      	adds	r7, #32
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	91a2b3c5 	.word	0x91a2b3c5
 80056c8:	88888889 	.word	0x88888889
 80056cc:	aaaaaaab 	.word	0xaaaaaaab
 80056d0:	00015180 	.word	0x00015180

080056d4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80056e0:	f107 0314 	add.w	r3, r7, #20
 80056e4:	2100      	movs	r1, #0
 80056e6:	460a      	mov	r2, r1
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	460a      	mov	r2, r1
 80056ec:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_RTC_GetDate+0x26>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e03a      	b.n	8005774 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	2200      	movs	r2, #0
 8005704:	4619      	mov	r1, r3
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff ff0c 	bl	8005524 <HAL_RTC_GetTime>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e02e      	b.n	8005774 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	7b1a      	ldrb	r2, [r3, #12]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	7bda      	ldrb	r2, [r3, #15]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	7b5a      	ldrb	r2, [r3, #13]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	7b9a      	ldrb	r2, [r3, #14]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d01a      	beq.n	8005772 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	78db      	ldrb	r3, [r3, #3]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fa87 	bl	8005c54 <RTC_ByteToBcd2>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa7e 	bl	8005c54 <RTC_ByteToBcd2>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fa75 	bl	8005c54 <RTC_ByteToBcd2>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8005788:	2300      	movs	r3, #0
 800578a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	2100      	movs	r1, #0
 8005792:	460a      	mov	r2, r1
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	460a      	mov	r2, r1
 8005798:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_RTC_SetAlarm_IT+0x2a>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e099      	b.n	80058de <HAL_RTC_SetAlarm_IT+0x162>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	7c1b      	ldrb	r3, [r3, #16]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_RTC_SetAlarm_IT+0x3a>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e093      	b.n	80058de <HAL_RTC_SetAlarm_IT+0x162>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2202      	movs	r2, #2
 80057c0:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	2200      	movs	r2, #0
 80057c8:	4619      	mov	r1, r3
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f7ff feaa 	bl	8005524 <HAL_RTC_GetTime>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e081      	b.n	80058de <HAL_RTC_SetAlarm_IT+0x162>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80057da:	7d3b      	ldrb	r3, [r7, #20]
 80057dc:	461a      	mov	r2, r3
 80057de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80057e2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80057e6:	7d7b      	ldrb	r3, [r7, #21]
 80057e8:	4619      	mov	r1, r3
 80057ea:	460b      	mov	r3, r1
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	1a5b      	subs	r3, r3, r1
 80057f0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80057f2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80057f4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80057f6:	4413      	add	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d113      	bne.n	8005828 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	461a      	mov	r2, r3
 8005806:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800580a:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	4619      	mov	r1, r3
 8005814:	460b      	mov	r3, r1
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a5b      	subs	r3, r3, r1
 800581a:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800581c:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8005822:	4413      	add	r3, r2
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	e01e      	b.n	8005866 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fa2e 	bl	8005c8e <RTC_Bcd2ToByte>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800583a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fa23 	bl	8005c8e <RTC_Bcd2ToByte>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	4613      	mov	r3, r2
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005854:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	789b      	ldrb	r3, [r3, #2]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fa17 	bl	8005c8e <RTC_Bcd2ToByte>
 8005860:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8005862:	4423      	add	r3, r4
 8005864:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	d205      	bcs.n	800587a <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005874:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005878:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800587a:	69f9      	ldr	r1, [r7, #28]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 f972 	bl	8005b66 <RTC_WriteAlarmCounter>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2204      	movs	r2, #4
 800588c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e022      	b.n	80058de <HAL_RTC_SetAlarm_IT+0x162>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0202 	bic.w	r2, r2, #2
 80058a6:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0202 	orr.w	r2, r2, #2
 80058b6:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a0a      	ldr	r2, [pc, #40]	; (80058e8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c2:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a07      	ldr	r2, [pc, #28]	; (80058e8 <HAL_RTC_SetAlarm_IT+0x16c>)
 80058ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ce:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
  }
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3724      	adds	r7, #36	; 0x24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40010400 	.word	0x40010400

080058ec <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_RTC_GetAlarm+0x1e>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e05a      	b.n	80059c4 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f910 	bl	8005b34 <RTC_ReadAlarmCounter>
 8005914:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <HAL_RTC_GetAlarm+0xe0>)
 800591a:	fba2 2303 	umull	r2, r3, r2, r3
 800591e:	0ad9      	lsrs	r1, r3, #11
 8005920:	4b2b      	ldr	r3, [pc, #172]	; (80059d0 <HAL_RTC_GetAlarm+0xe4>)
 8005922:	fba3 2301 	umull	r2, r3, r3, r1
 8005926:	091a      	lsrs	r2, r3, #4
 8005928:	4613      	mov	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	1aca      	subs	r2, r1, r3
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RTC_GetAlarm+0xe0>)
 800593c:	fba3 1302 	umull	r1, r3, r3, r2
 8005940:	0adb      	lsrs	r3, r3, #11
 8005942:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_RTC_GetAlarm+0xe8>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_RTC_GetAlarm+0xe0>)
 800595e:	fba2 1203 	umull	r1, r2, r2, r3
 8005962:	0ad2      	lsrs	r2, r2, #11
 8005964:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005968:	fb01 f202 	mul.w	r2, r1, r2
 800596c:	1a9a      	subs	r2, r3, r2
 800596e:	4b19      	ldr	r3, [pc, #100]	; (80059d4 <HAL_RTC_GetAlarm+0xe8>)
 8005970:	fba3 1302 	umull	r1, r3, r3, r2
 8005974:	0959      	lsrs	r1, r3, #5
 8005976:	460b      	mov	r3, r1
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a5b      	subs	r3, r3, r1
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	1ad1      	subs	r1, r2, r3
 8005980:	b2ca      	uxtb	r2, r1
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01a      	beq.n	80059c2 <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f95f 	bl	8005c54 <RTC_ByteToBcd2>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f956 	bl	8005c54 <RTC_ByteToBcd2>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	789b      	ldrb	r3, [r3, #2]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f94d 	bl	8005c54 <RTC_ByteToBcd2>
 80059ba:	4603      	mov	r3, r0
 80059bc:	461a      	mov	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	91a2b3c5 	.word	0x91a2b3c5
 80059d0:	aaaaaaab 	.word	0xaaaaaaab
 80059d4:	88888889 	.word	0x88888889

080059d8 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d011      	beq.n	8005a12 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fd f961 	bl	8002cc4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0202 	bic.w	r2, r2, #2
 8005a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <HAL_RTC_AlarmIRQHandler+0x50>)
 8005a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a18:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	745a      	strb	r2, [r3, #17]
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40010400 	.word	0x40010400

08005a2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e01d      	b.n	8005a7e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0208 	bic.w	r2, r2, #8
 8005a50:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005a52:	f7fd fde1 	bl	8003618 <HAL_GetTick>
 8005a56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a58:	e009      	b.n	8005a6e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005a5a:	f7fd fddd 	bl	8003618 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a68:	d901      	bls.n	8005a6e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e007      	b.n	8005a7e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ee      	beq.n	8005a5a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b087      	sub	sp, #28
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	827b      	strh	r3, [r7, #18]
 8005a92:	2300      	movs	r3, #0
 8005a94:	823b      	strh	r3, [r7, #16]
 8005a96:	2300      	movs	r3, #0
 8005a98:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005ab6:	8a7a      	ldrh	r2, [r7, #18]
 8005ab8:	8a3b      	ldrh	r3, [r7, #16]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d008      	beq.n	8005ad0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005abe:	8a3b      	ldrh	r3, [r7, #16]
 8005ac0:	041a      	lsls	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e004      	b.n	8005ada <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005ad0:	8a7b      	ldrh	r3, [r7, #18]
 8005ad2:	041a      	lsls	r2, r3, #16
 8005ad4:	89fb      	ldrh	r3, [r7, #14]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f85d 	bl	8005bb4 <RTC_EnterInitMode>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e011      	b.n	8005b2a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	0c12      	lsrs	r2, r2, #16
 8005b0e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	b292      	uxth	r2, r2
 8005b18:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f872 	bl	8005c04 <RTC_ExitInitMode>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	81fb      	strh	r3, [r7, #14]
 8005b40:	2300      	movs	r3, #0
 8005b42:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005b54:	89fb      	ldrh	r3, [r7, #14]
 8005b56:	041a      	lsls	r2, r3, #16
 8005b58:	89bb      	ldrh	r3, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bc80      	pop	{r7}
 8005b64:	4770      	bx	lr

08005b66 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f81d 	bl	8005bb4 <RTC_EnterInitMode>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
 8005b84:	e011      	b.n	8005baa <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	0c12      	lsrs	r2, r2, #16
 8005b8e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	b292      	uxth	r2, r2
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f832 	bl	8005c04 <RTC_ExitInitMode>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005bc0:	f7fd fd2a 	bl	8003618 <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bc6:	e009      	b.n	8005bdc <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bc8:	f7fd fd26 	bl	8003618 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd6:	d901      	bls.n	8005bdc <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e00f      	b.n	8005bfc <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0ee      	beq.n	8005bc8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0210 	orr.w	r2, r2, #16
 8005bf8:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0210 	bic.w	r2, r2, #16
 8005c1e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005c20:	f7fd fcfa 	bl	8003618 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005c26:	e009      	b.n	8005c3c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005c28:	f7fd fcf6 	bl	8003618 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c36:	d901      	bls.n	8005c3c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e007      	b.n	8005c4c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0ee      	beq.n	8005c28 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005c62:	e005      	b.n	8005c70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	3b0a      	subs	r3, #10
 8005c6e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	2b09      	cmp	r3, #9
 8005c74:	d8f6      	bhi.n	8005c64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	b2db      	uxtb	r3, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	091b      	lsrs	r3, r3, #4
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	4413      	add	r3, r2
 8005cbc:	b2db      	uxtb	r3, r3
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	7bdb      	ldrb	r3, [r3, #15]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	7b5b      	ldrb	r3, [r3, #13]
 8005cec:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	7b9b      	ldrb	r3, [r3, #14]
 8005cf2:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	e06f      	b.n	8005dda <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d011      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d00e      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d00b      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b07      	cmp	r3, #7
 8005d10:	d008      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d005      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	2b0a      	cmp	r3, #10
 8005d1c:	d002      	beq.n	8005d24 <RTC_DateUpdate+0x5c>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d117      	bne.n	8005d54 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b1e      	cmp	r3, #30
 8005d28:	d803      	bhi.n	8005d32 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005d30:	e050      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d005      	beq.n	8005d44 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005d42:	e047      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005d44:	2301      	movs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	60fb      	str	r3, [r7, #12]
          year++;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005d52:	e03f      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d008      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	2b06      	cmp	r3, #6
 8005d5e:	d005      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b09      	cmp	r3, #9
 8005d64:	d002      	beq.n	8005d6c <RTC_DateUpdate+0xa4>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d10c      	bne.n	8005d86 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b1d      	cmp	r3, #29
 8005d70:	d803      	bhi.n	8005d7a <RTC_DateUpdate+0xb2>
      {
        day++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d78:	e02c      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d80:	2301      	movs	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d84:	e026      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d123      	bne.n	8005dd4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b1b      	cmp	r3, #27
 8005d90:	d803      	bhi.n	8005d9a <RTC_DateUpdate+0xd2>
      {
        day++;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3301      	adds	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e01c      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b1c      	cmp	r3, #28
 8005d9e:	d111      	bne.n	8005dc4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f839 	bl	8005e1c <RTC_IsLeapYear>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
 8005db6:	e00d      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e007      	b.n	8005dd4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b1d      	cmp	r3, #29
 8005dc8:	d104      	bne.n	8005dd4 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d38b      	bcc.n	8005cfa <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	4619      	mov	r1, r3
 8005e04:	6978      	ldr	r0, [r7, #20]
 8005e06:	f000 f83b 	bl	8005e80 <RTC_WeekDayNum>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	731a      	strb	r2, [r3, #12]
}
 8005e12:	bf00      	nop
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4603      	mov	r3, r0
 8005e24:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e01d      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005e36:	88fb      	ldrh	r3, [r7, #6]
 8005e38:	4a10      	ldr	r2, [pc, #64]	; (8005e7c <RTC_IsLeapYear+0x60>)
 8005e3a:	fba2 1203 	umull	r1, r2, r2, r3
 8005e3e:	0952      	lsrs	r2, r2, #5
 8005e40:	2164      	movs	r1, #100	; 0x64
 8005e42:	fb01 f202 	mul.w	r2, r1, r2
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e00f      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005e52:	88fb      	ldrh	r3, [r7, #6]
 8005e54:	4a09      	ldr	r2, [pc, #36]	; (8005e7c <RTC_IsLeapYear+0x60>)
 8005e56:	fba2 1203 	umull	r1, r2, r2, r3
 8005e5a:	09d2      	lsrs	r2, r2, #7
 8005e5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e60:	fb01 f202 	mul.w	r2, r1, r2
 8005e64:	1a9b      	subs	r3, r3, r2
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005e70:	2300      	movs	r3, #0
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	51eb851f 	.word	0x51eb851f

08005e80 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
 8005e94:	2300      	movs	r3, #0
 8005e96:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005e9e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005ea0:	78fb      	ldrb	r3, [r7, #3]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d82d      	bhi.n	8005f02 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ea6:	78fa      	ldrb	r2, [r7, #3]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	; (8005f64 <RTC_WeekDayNum+0xe4>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	085a      	lsrs	r2, r3, #1
 8005eba:	78bb      	ldrb	r3, [r7, #2]
 8005ebc:	441a      	add	r2, r3
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	089b      	lsrs	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	4926      	ldr	r1, [pc, #152]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005ed0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4922      	ldr	r1, [pc, #136]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005ede:	fba1 1303 	umull	r1, r3, r1, r3
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	4413      	add	r3, r2
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <RTC_WeekDayNum+0xec>)
 8005eea:	fba3 1302 	umull	r1, r3, r3, r2
 8005eee:	1ad1      	subs	r1, r2, r3
 8005ef0:	0849      	lsrs	r1, r1, #1
 8005ef2:	440b      	add	r3, r1
 8005ef4:	0899      	lsrs	r1, r3, #2
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	1a5b      	subs	r3, r3, r1
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e029      	b.n	8005f56 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	1a9b      	subs	r3, r3, r2
 8005f0e:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <RTC_WeekDayNum+0xe4>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	085a      	lsrs	r2, r3, #1
 8005f16:	78bb      	ldrb	r3, [r7, #2]
 8005f18:	441a      	add	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	441a      	add	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4910      	ldr	r1, [pc, #64]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005f28:	fba1 1303 	umull	r1, r3, r1, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	490d      	ldr	r1, [pc, #52]	; (8005f68 <RTC_WeekDayNum+0xe8>)
 8005f34:	fba1 1303 	umull	r1, r3, r1, r3
 8005f38:	09db      	lsrs	r3, r3, #7
 8005f3a:	4413      	add	r3, r2
 8005f3c:	1c9a      	adds	r2, r3, #2
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <RTC_WeekDayNum+0xec>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	1ad1      	subs	r1, r2, r3
 8005f46:	0849      	lsrs	r1, r1, #1
 8005f48:	440b      	add	r3, r1
 8005f4a:	0899      	lsrs	r1, r3, #2
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	1a5b      	subs	r3, r3, r1
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	b2db      	uxtb	r3, r3
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	38e38e39 	.word	0x38e38e39
 8005f68:	51eb851f 	.word	0x51eb851f
 8005f6c:	24924925 	.word	0x24924925

08005f70 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d004      	beq.n	8005f8c <HAL_SRAM_Init+0x1c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8a:	d101      	bne.n	8005f90 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e038      	b.n	8006002 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7fd f949 	bl	800323c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f001 fd2f 	bl	8007a18 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	f001 fd91 	bl	8007aec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6858      	ldr	r0, [r3, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	f001 fdbc 	bl	8007b54 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	6892      	ldr	r2, [r2, #8]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	f041 0101 	orr.w	r1, r1, #1
 8005ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e041      	b.n	80060a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fc ffaf 	bl	8002f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f000 fb21 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d001      	beq.n	80060c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e03c      	b.n	800613a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <HAL_TIM_Base_Start+0x9c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d018      	beq.n	8006104 <HAL_TIM_Base_Start+0x5c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1c      	ldr	r2, [pc, #112]	; (8006148 <HAL_TIM_Base_Start+0xa0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d013      	beq.n	8006104 <HAL_TIM_Base_Start+0x5c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e4:	d00e      	beq.n	8006104 <HAL_TIM_Base_Start+0x5c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a18      	ldr	r2, [pc, #96]	; (800614c <HAL_TIM_Base_Start+0xa4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d009      	beq.n	8006104 <HAL_TIM_Base_Start+0x5c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a16      	ldr	r2, [pc, #88]	; (8006150 <HAL_TIM_Base_Start+0xa8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIM_Base_Start+0x5c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <HAL_TIM_Base_Start+0xac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d111      	bne.n	8006128 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b06      	cmp	r3, #6
 8006114:	d010      	beq.n	8006138 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	e007      	b.n	8006138 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00

08006158 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e041      	b.n	80061ee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f839 	bl	80061f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f000 fa7a 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x24>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e022      	b.n	8006272 <HAL_TIM_PWM_Start+0x6a>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b04      	cmp	r3, #4
 8006230:	d109      	bne.n	8006246 <HAL_TIM_PWM_Start+0x3e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b01      	cmp	r3, #1
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	e015      	b.n	8006272 <HAL_TIM_PWM_Start+0x6a>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d109      	bne.n	8006260 <HAL_TIM_PWM_Start+0x58>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	bf14      	ite	ne
 8006258:	2301      	movne	r3, #1
 800625a:	2300      	moveq	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	e008      	b.n	8006272 <HAL_TIM_PWM_Start+0x6a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e072      	b.n	8006360 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Start+0x82>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006288:	e013      	b.n	80062b2 <HAL_TIM_PWM_Start+0xaa>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d104      	bne.n	800629a <HAL_TIM_PWM_Start+0x92>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006298:	e00b      	b.n	80062b2 <HAL_TIM_PWM_Start+0xaa>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d104      	bne.n	80062aa <HAL_TIM_PWM_Start+0xa2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a8:	e003      	b.n	80062b2 <HAL_TIM_PWM_Start+0xaa>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2201      	movs	r2, #1
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fca4 	bl	8006c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a28      	ldr	r2, [pc, #160]	; (8006368 <HAL_TIM_PWM_Start+0x160>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_PWM_Start+0xcc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a27      	ldr	r2, [pc, #156]	; (800636c <HAL_TIM_PWM_Start+0x164>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_TIM_PWM_Start+0xd0>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <HAL_TIM_PWM_Start+0xd2>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a1d      	ldr	r2, [pc, #116]	; (8006368 <HAL_TIM_PWM_Start+0x160>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_TIM_PWM_Start+0x122>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_TIM_PWM_Start+0x164>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_TIM_PWM_Start+0x122>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d00e      	beq.n	800632a <HAL_TIM_PWM_Start+0x122>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a17      	ldr	r2, [pc, #92]	; (8006370 <HAL_TIM_PWM_Start+0x168>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_TIM_PWM_Start+0x122>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a16      	ldr	r2, [pc, #88]	; (8006374 <HAL_TIM_PWM_Start+0x16c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_TIM_PWM_Start+0x122>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a14      	ldr	r2, [pc, #80]	; (8006378 <HAL_TIM_PWM_Start+0x170>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d111      	bne.n	800634e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b06      	cmp	r3, #6
 800633a:	d010      	beq.n	800635e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634c:	e007      	b.n	800635e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f042 0201 	orr.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40013400 	.word	0x40013400
 8006370:	40000400 	.word	0x40000400
 8006374:	40000800 	.word	0x40000800
 8006378:	40000c00 	.word	0x40000c00

0800637c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006396:	2302      	movs	r3, #2
 8006398:	e0ae      	b.n	80064f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b0c      	cmp	r3, #12
 80063a6:	f200 809f 	bhi.w	80064e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063e5 	.word	0x080063e5
 80063b4:	080064e9 	.word	0x080064e9
 80063b8:	080064e9 	.word	0x080064e9
 80063bc:	080064e9 	.word	0x080064e9
 80063c0:	08006425 	.word	0x08006425
 80063c4:	080064e9 	.word	0x080064e9
 80063c8:	080064e9 	.word	0x080064e9
 80063cc:	080064e9 	.word	0x080064e9
 80063d0:	08006467 	.word	0x08006467
 80063d4:	080064e9 	.word	0x080064e9
 80063d8:	080064e9 	.word	0x080064e9
 80063dc:	080064e9 	.word	0x080064e9
 80063e0:	080064a7 	.word	0x080064a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f9ca 	bl	8006784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0208 	orr.w	r2, r2, #8
 80063fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0204 	bic.w	r2, r2, #4
 800640e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6999      	ldr	r1, [r3, #24]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	619a      	str	r2, [r3, #24]
      break;
 8006422:	e064      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa1a 	bl	8006864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800643e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800644e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6999      	ldr	r1, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	021a      	lsls	r2, r3, #8
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	619a      	str	r2, [r3, #24]
      break;
 8006464:	e043      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fa6d 	bl	800694c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0208 	orr.w	r2, r2, #8
 8006480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0204 	bic.w	r2, r2, #4
 8006490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69d9      	ldr	r1, [r3, #28]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	61da      	str	r2, [r3, #28]
      break;
 80064a4:	e023      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fac1 	bl	8006a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69d9      	ldr	r1, [r3, #28]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	021a      	lsls	r2, r3, #8
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	61da      	str	r2, [r3, #28]
      break;
 80064e6:	e002      	b.n	80064ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
      break;
 80064ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_TIM_ConfigClockSource+0x1c>
 8006518:	2302      	movs	r3, #2
 800651a:	e0b4      	b.n	8006686 <HAL_TIM_ConfigClockSource+0x186>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800653a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006554:	d03e      	beq.n	80065d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655a:	f200 8087 	bhi.w	800666c <HAL_TIM_ConfigClockSource+0x16c>
 800655e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006562:	f000 8086 	beq.w	8006672 <HAL_TIM_ConfigClockSource+0x172>
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d87f      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 800656c:	2b70      	cmp	r3, #112	; 0x70
 800656e:	d01a      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006570:	2b70      	cmp	r3, #112	; 0x70
 8006572:	d87b      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 8006574:	2b60      	cmp	r3, #96	; 0x60
 8006576:	d050      	beq.n	800661a <HAL_TIM_ConfigClockSource+0x11a>
 8006578:	2b60      	cmp	r3, #96	; 0x60
 800657a:	d877      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 800657c:	2b50      	cmp	r3, #80	; 0x50
 800657e:	d03c      	beq.n	80065fa <HAL_TIM_ConfigClockSource+0xfa>
 8006580:	2b50      	cmp	r3, #80	; 0x50
 8006582:	d873      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 8006584:	2b40      	cmp	r3, #64	; 0x40
 8006586:	d058      	beq.n	800663a <HAL_TIM_ConfigClockSource+0x13a>
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d86f      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d064      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x15a>
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d86b      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d060      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x15a>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d867      	bhi.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d05c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x15a>
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d05a      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x15a>
 80065a4:	e062      	b.n	800666c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6899      	ldr	r1, [r3, #8]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f000 fb08 	bl	8006bca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	609a      	str	r2, [r3, #8]
      break;
 80065d2:	e04f      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6818      	ldr	r0, [r3, #0]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	6899      	ldr	r1, [r3, #8]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f000 faf1 	bl	8006bca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065f6:	609a      	str	r2, [r3, #8]
      break;
 80065f8:	e03c      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	f000 fa68 	bl	8006adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2150      	movs	r1, #80	; 0x50
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fabf 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 8006618:	e02c      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6818      	ldr	r0, [r3, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	6859      	ldr	r1, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	461a      	mov	r2, r3
 8006628:	f000 fa86 	bl	8006b38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2160      	movs	r1, #96	; 0x60
 8006632:	4618      	mov	r0, r3
 8006634:	f000 faaf 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 8006638:	e01c      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6859      	ldr	r1, [r3, #4]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	461a      	mov	r2, r3
 8006648:	f000 fa48 	bl	8006adc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2140      	movs	r1, #64	; 0x40
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa9f 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 8006658:	e00c      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f000 fa96 	bl	8006b96 <TIM_ITRx_SetConfig>
      break;
 800666a:	e003      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e000      	b.n	8006674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a33      	ldr	r2, [pc, #204]	; (8006770 <TIM_Base_SetConfig+0xe0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a32      	ldr	r2, [pc, #200]	; (8006774 <TIM_Base_SetConfig+0xe4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00f      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_Base_SetConfig+0xe8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a2e      	ldr	r2, [pc, #184]	; (800677c <TIM_Base_SetConfig+0xec>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a2d      	ldr	r2, [pc, #180]	; (8006780 <TIM_Base_SetConfig+0xf0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a22      	ldr	r2, [pc, #136]	; (8006770 <TIM_Base_SetConfig+0xe0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d013      	beq.n	8006712 <TIM_Base_SetConfig+0x82>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a21      	ldr	r2, [pc, #132]	; (8006774 <TIM_Base_SetConfig+0xe4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00f      	beq.n	8006712 <TIM_Base_SetConfig+0x82>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d00b      	beq.n	8006712 <TIM_Base_SetConfig+0x82>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1e      	ldr	r2, [pc, #120]	; (8006778 <TIM_Base_SetConfig+0xe8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d007      	beq.n	8006712 <TIM_Base_SetConfig+0x82>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1d      	ldr	r2, [pc, #116]	; (800677c <TIM_Base_SetConfig+0xec>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_Base_SetConfig+0x82>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <TIM_Base_SetConfig+0xf0>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d108      	bne.n	8006724 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a09      	ldr	r2, [pc, #36]	; (8006770 <TIM_Base_SetConfig+0xe0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_Base_SetConfig+0xc8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a08      	ldr	r2, [pc, #32]	; (8006774 <TIM_Base_SetConfig+0xe4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d103      	bne.n	8006760 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	615a      	str	r2, [r3, #20]
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr
 8006770:	40012c00 	.word	0x40012c00
 8006774:	40013400 	.word	0x40013400
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00

08006784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f023 0201 	bic.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0303 	bic.w	r3, r3, #3
 80067ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 0302 	bic.w	r3, r3, #2
 80067cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a20      	ldr	r2, [pc, #128]	; (800685c <TIM_OC1_SetConfig+0xd8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_OC1_SetConfig+0x64>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <TIM_OC1_SetConfig+0xdc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d10c      	bne.n	8006802 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0308 	bic.w	r3, r3, #8
 80067ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 0304 	bic.w	r3, r3, #4
 8006800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a15      	ldr	r2, [pc, #84]	; (800685c <TIM_OC1_SetConfig+0xd8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_OC1_SetConfig+0x8e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <TIM_OC1_SetConfig+0xdc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d111      	bne.n	8006836 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40013400 	.word	0x40013400

08006864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006864:	b480      	push	{r7}
 8006866:	b087      	sub	sp, #28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	f023 0210 	bic.w	r2, r3, #16
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 0320 	bic.w	r3, r3, #32
 80068ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a21      	ldr	r2, [pc, #132]	; (8006944 <TIM_OC2_SetConfig+0xe0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC2_SetConfig+0x68>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a20      	ldr	r2, [pc, #128]	; (8006948 <TIM_OC2_SetConfig+0xe4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d10d      	bne.n	80068e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a16      	ldr	r2, [pc, #88]	; (8006944 <TIM_OC2_SetConfig+0xe0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_OC2_SetConfig+0x94>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a15      	ldr	r2, [pc, #84]	; (8006948 <TIM_OC2_SetConfig+0xe4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d113      	bne.n	8006920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	621a      	str	r2, [r3, #32]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40013400 	.word	0x40013400

0800694c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <TIM_OC3_SetConfig+0xe0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0x66>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <TIM_OC3_SetConfig+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10d      	bne.n	80069ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <TIM_OC3_SetConfig+0xe0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC3_SetConfig+0x92>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <TIM_OC3_SetConfig+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d113      	bne.n	8006a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40012c00 	.word	0x40012c00
 8006a30:	40013400 	.word	0x40013400

08006a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a11      	ldr	r2, [pc, #68]	; (8006ad4 <TIM_OC4_SetConfig+0xa0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC4_SetConfig+0x68>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a10      	ldr	r2, [pc, #64]	; (8006ad8 <TIM_OC4_SetConfig+0xa4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d109      	bne.n	8006ab0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	019b      	lsls	r3, r3, #6
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400

08006adc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f023 030a 	bic.w	r3, r3, #10
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f023 0210 	bic.w	r2, r3, #16
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	031b      	lsls	r3, r3, #12
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	011b      	lsls	r3, r3, #4
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr

08006b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b085      	sub	sp, #20
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	f043 0307 	orr.w	r3, r3, #7
 8006bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b087      	sub	sp, #28
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	021a      	lsls	r2, r3, #8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	431a      	orrs	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	609a      	str	r2, [r3, #8]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f003 031f 	and.w	r3, r3, #31
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1a      	ldr	r2, [r3, #32]
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	401a      	ands	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1a      	ldr	r2, [r3, #32]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c40:	431a      	orrs	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e050      	b.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cbe:	d00e      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a15      	ldr	r2, [pc, #84]	; (8006d1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a14      	ldr	r2, [pc, #80]	; (8006d20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ce4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr
 8006d14:	40012c00 	.word	0x40012c00
 8006d18:	40013400 	.word	0x40013400
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	40000c00 	.word	0x40000c00

08006d28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e042      	b.n	8006dc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7fc f984 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2224      	movs	r2, #36	; 0x24
 8006d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fdc5 	bl	80078fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006da0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d16d      	bne.n	8006ec4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_UART_Transmit+0x2c>
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e066      	b.n	8006ec6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2221      	movs	r2, #33	; 0x21
 8006e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e06:	f7fc fc07 	bl	8003618 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	88fa      	ldrh	r2, [r7, #6]
 8006e10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	88fa      	ldrh	r2, [r7, #6]
 8006e16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d108      	bne.n	8006e34 <HAL_UART_Transmit+0x6c>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e003      	b.n	8006e3c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e3c:	e02a      	b.n	8006e94 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2180      	movs	r1, #128	; 0x80
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fb14 	bl	8007476 <UART_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e036      	b.n	8006ec6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10b      	bne.n	8006e76 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	3302      	adds	r3, #2
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	e007      	b.n	8006e86 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1cf      	bne.n	8006e3e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2140      	movs	r1, #64	; 0x40
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fae4 	bl	8007476 <UART_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e006      	b.n	8006ec6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	e000      	b.n	8006ec6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006ec4:	2302      	movs	r3, #2
  }
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3720      	adds	r7, #32
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d112      	bne.n	8006f0e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_UART_Receive_IT+0x26>
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e00b      	b.n	8006f10 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	461a      	mov	r2, r3
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fb24 	bl	8007552 <UART_Start_Receive_IT>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	e000      	b.n	8006f10 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b0ba      	sub	sp, #232	; 0xe8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10f      	bne.n	8006f7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <HAL_UART_IRQHandler+0x66>
 8006f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fc01 	bl	800777e <UART_Receive_IT>
      return;
 8006f7c:	e25b      	b.n	8007436 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80de 	beq.w	8007144 <HAL_UART_IRQHandler+0x22c>
 8006f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d106      	bne.n	8006fa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 80d1 	beq.w	8007144 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <HAL_UART_IRQHandler+0xae>
 8006fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fbe:	f043 0201 	orr.w	r2, r3, #1
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <HAL_UART_IRQHandler+0xd2>
 8006fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	f043 0202 	orr.w	r2, r3, #2
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00b      	beq.n	800700e <HAL_UART_IRQHandler+0xf6>
 8006ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f043 0204 	orr.w	r2, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800700e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007012:	f003 0308 	and.w	r3, r3, #8
 8007016:	2b00      	cmp	r3, #0
 8007018:	d011      	beq.n	800703e <HAL_UART_IRQHandler+0x126>
 800701a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d105      	bne.n	8007032 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007036:	f043 0208 	orr.w	r2, r3, #8
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 81f2 	beq.w	800742c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_UART_IRQHandler+0x14e>
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fb8c 	bl	800777e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <HAL_UART_IRQHandler+0x17a>
 800708a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800708e:	2b00      	cmp	r3, #0
 8007090:	d04f      	beq.n	8007132 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa96 	bl	80075c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d041      	beq.n	800712a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3314      	adds	r3, #20
 80070ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1d9      	bne.n	80070a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d013      	beq.n	8007122 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	4a7e      	ldr	r2, [pc, #504]	; (80072f8 <HAL_UART_IRQHandler+0x3e0>)
 8007100:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fd f8e8 	bl	80042dc <HAL_DMA_Abort_IT>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800711c:	4610      	mov	r0, r2
 800711e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007120:	e00e      	b.n	8007140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f993 	bl	800744e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007128:	e00a      	b.n	8007140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f98f 	bl	800744e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	e006      	b.n	8007140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f98b 	bl	800744e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800713e:	e175      	b.n	800742c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007140:	bf00      	nop
    return;
 8007142:	e173      	b.n	800742c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	2b01      	cmp	r3, #1
 800714a:	f040 814f 	bne.w	80073ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 8148 	beq.w	80073ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8141 	beq.w	80073ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800716a:	2300      	movs	r3, #0
 800716c:	60bb      	str	r3, [r7, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	60bb      	str	r3, [r7, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80b6 	beq.w	80072fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800719c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	f000 8145 	beq.w	8007430 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ae:	429a      	cmp	r2, r3
 80071b0:	f080 813e 	bcs.w	8007430 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	f000 8088 	beq.w	80072d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007200:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007204:	e841 2300 	strex	r3, r2, [r1]
 8007208:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800720c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1d9      	bne.n	80071c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3314      	adds	r3, #20
 800721a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3314      	adds	r3, #20
 8007234:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007238:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800723c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007240:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800724a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e1      	bne.n	8007214 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3314      	adds	r3, #20
 8007256:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007274:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007276:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800727a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e3      	bne.n	8007250 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	330c      	adds	r3, #12
 800729c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072a8:	f023 0310 	bic.w	r3, r3, #16
 80072ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80072ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80072bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e3      	bne.n	8007296 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fc ffc7 	bl	8004266 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f8b6 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072f4:	e09c      	b.n	8007430 <HAL_UART_IRQHandler+0x518>
 80072f6:	bf00      	nop
 80072f8:	08007689 	.word	0x08007689
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007304:	b29b      	uxth	r3, r3
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 808e 	beq.w	8007434 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007318:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8089 	beq.w	8007434 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	330c      	adds	r3, #12
 8007328:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	330c      	adds	r3, #12
 8007342:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007346:	647a      	str	r2, [r7, #68]	; 0x44
 8007348:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800734c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e3      	bne.n	8007322 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3314      	adds	r3, #20
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	623b      	str	r3, [r7, #32]
   return(result);
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	f023 0301 	bic.w	r3, r3, #1
 8007370:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3314      	adds	r3, #20
 800737a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800737e:	633a      	str	r2, [r7, #48]	; 0x30
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e3      	bne.n	800735a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	e853 3f00 	ldrex	r3, [r3]
 80073ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0310 	bic.w	r3, r3, #16
 80073b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	330c      	adds	r3, #12
 80073c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80073c4:	61fa      	str	r2, [r7, #28]
 80073c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	69b9      	ldr	r1, [r7, #24]
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	e841 2300 	strex	r3, r2, [r1]
 80073d0:	617b      	str	r3, [r7, #20]
   return(result);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e3      	bne.n	80073a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f83b 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073ea:	e023      	b.n	8007434 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80073ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_UART_IRQHandler+0x4f4>
 80073f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f953 	bl	80076b0 <UART_Transmit_IT>
    return;
 800740a:	e014      	b.n	8007436 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <HAL_UART_IRQHandler+0x51e>
 8007418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800741c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007420:	2b00      	cmp	r3, #0
 8007422:	d008      	beq.n	8007436 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f992 	bl	800774e <UART_EndTransmit_IT>
    return;
 800742a:	e004      	b.n	8007436 <HAL_UART_IRQHandler+0x51e>
    return;
 800742c:	bf00      	nop
 800742e:	e002      	b.n	8007436 <HAL_UART_IRQHandler+0x51e>
      return;
 8007430:	bf00      	nop
 8007432:	e000      	b.n	8007436 <HAL_UART_IRQHandler+0x51e>
      return;
 8007434:	bf00      	nop
  }
}
 8007436:	37e8      	adds	r7, #232	; 0xe8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr

0800744e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr

08007476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b090      	sub	sp, #64	; 0x40
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007486:	e050      	b.n	800752a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800748e:	d04c      	beq.n	800752a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8007496:	f7fc f8bf 	bl	8003618 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d241      	bcs.n	800752a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074c6:	637a      	str	r2, [r7, #52]	; 0x34
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	e853 3f00 	ldrex	r3, [r3]
 80074e8:	613b      	str	r3, [r7, #16]
   return(result);
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074fa:	623a      	str	r2, [r7, #32]
 80074fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fe:	69f9      	ldr	r1, [r7, #28]
 8007500:	6a3a      	ldr	r2, [r7, #32]
 8007502:	e841 2300 	strex	r3, r2, [r1]
 8007506:	61bb      	str	r3, [r7, #24]
   return(result);
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1e5      	bne.n	80074da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e00f      	b.n	800754a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	bf0c      	ite	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	2300      	movne	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	429a      	cmp	r2, r3
 8007546:	d09f      	beq.n	8007488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3740      	adds	r7, #64	; 0x40
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	4613      	mov	r3, r2
 800755e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2222      	movs	r2, #34	; 0x22
 800757c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d007      	beq.n	8007598 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007596:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695a      	ldr	r2, [r3, #20]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0220 	orr.w	r2, r2, #32
 80075b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b095      	sub	sp, #84	; 0x54
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	330c      	adds	r3, #12
 80075d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d6:	e853 3f00 	ldrex	r3, [r3]
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	330c      	adds	r3, #12
 80075ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075ec:	643a      	str	r2, [r7, #64]	; 0x40
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e5      	bne.n	80075cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3314      	adds	r3, #20
 8007606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	e853 3f00 	ldrex	r3, [r3]
 800760e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3314      	adds	r3, #20
 800761e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007628:	e841 2300 	strex	r3, r2, [r1]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d1e5      	bne.n	8007600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	2b01      	cmp	r3, #1
 800763a:	d119      	bne.n	8007670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	330c      	adds	r3, #12
 8007642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60bb      	str	r3, [r7, #8]
   return(result);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	330c      	adds	r3, #12
 800765a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800765c:	61ba      	str	r2, [r7, #24]
 800765e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007660:	6979      	ldr	r1, [r7, #20]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	e841 2300 	strex	r3, r2, [r1]
 8007668:	613b      	str	r3, [r7, #16]
   return(result);
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e5      	bne.n	800763c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800767e:	bf00      	nop
 8007680:	3754      	adds	r7, #84	; 0x54
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr

08007688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fed3 	bl	800744e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b21      	cmp	r3, #33	; 0x21
 80076c2:	d13e      	bne.n	8007742 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076cc:	d114      	bne.n	80076f8 <UART_Transmit_IT+0x48>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	1c9a      	adds	r2, r3, #2
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	621a      	str	r2, [r3, #32]
 80076f6:	e008      	b.n	800770a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	1c59      	adds	r1, r3, #1
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	6211      	str	r1, [r2, #32]
 8007702:	781a      	ldrb	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	b29b      	uxth	r3, r3
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	4619      	mov	r1, r3
 8007718:	84d1      	strh	r1, [r2, #38]	; 0x26
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10f      	bne.n	800773e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800772c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800773c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007742:	2302      	movs	r3, #2
  }
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007764:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7ff fe64 	bl	800743c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b08c      	sub	sp, #48	; 0x30
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b22      	cmp	r3, #34	; 0x22
 8007790:	f040 80ae 	bne.w	80078f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779c:	d117      	bne.n	80077ce <UART_Receive_IT+0x50>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d113      	bne.n	80077ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	b29a      	uxth	r2, r3
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	1c9a      	adds	r2, r3, #2
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28
 80077cc:	e026      	b.n	800781c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e0:	d007      	beq.n	80077f2 <UART_Receive_IT+0x74>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10a      	bne.n	8007800 <UART_Receive_IT+0x82>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e008      	b.n	8007812 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	b2da      	uxtb	r2, r3
 800780e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007810:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007820:	b29b      	uxth	r3, r3
 8007822:	3b01      	subs	r3, #1
 8007824:	b29b      	uxth	r3, r3
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	4619      	mov	r1, r3
 800782a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800782c:	2b00      	cmp	r3, #0
 800782e:	d15d      	bne.n	80078ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0220 	bic.w	r2, r2, #32
 800783e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800784e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	2b01      	cmp	r3, #1
 8007874:	d135      	bne.n	80078e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	613b      	str	r3, [r7, #16]
   return(result);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	627b      	str	r3, [r7, #36]	; 0x24
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	330c      	adds	r3, #12
 800789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789c:	623a      	str	r2, [r7, #32]
 800789e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	69f9      	ldr	r1, [r7, #28]
 80078a2:	6a3a      	ldr	r2, [r7, #32]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e5      	bne.n	800787c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b10      	cmp	r3, #16
 80078bc:	d10a      	bne.n	80078d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff fdc0 	bl	8007460 <HAL_UARTEx_RxEventCallback>
 80078e0:	e002      	b.n	80078e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fb fa0c 	bl	8002d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	e002      	b.n	80078f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3730      	adds	r7, #48	; 0x30
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007936:	f023 030c 	bic.w	r3, r3, #12
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	68b9      	ldr	r1, [r7, #8]
 8007940:	430b      	orrs	r3, r1
 8007942:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a2c      	ldr	r2, [pc, #176]	; (8007a10 <UART_SetConfig+0x114>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d103      	bne.n	800796c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007964:	f7fd fb92 	bl	800508c <HAL_RCC_GetPCLK2Freq>
 8007968:	60f8      	str	r0, [r7, #12]
 800796a:	e002      	b.n	8007972 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800796c:	f7fd fb7a 	bl	8005064 <HAL_RCC_GetPCLK1Freq>
 8007970:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009a      	lsls	r2, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <UART_SetConfig+0x118>)
 800798a:	fba2 2303 	umull	r2, r3, r2, r3
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	0119      	lsls	r1, r3, #4
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009a      	lsls	r2, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <UART_SetConfig+0x118>)
 80079aa:	fba3 0302 	umull	r0, r3, r3, r2
 80079ae:	095b      	lsrs	r3, r3, #5
 80079b0:	2064      	movs	r0, #100	; 0x64
 80079b2:	fb00 f303 	mul.w	r3, r0, r3
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	3332      	adds	r3, #50	; 0x32
 80079bc:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <UART_SetConfig+0x118>)
 80079be:	fba2 2303 	umull	r2, r3, r2, r3
 80079c2:	095b      	lsrs	r3, r3, #5
 80079c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079c8:	4419      	add	r1, r3
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	009a      	lsls	r2, r3, #2
 80079d4:	441a      	add	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <UART_SetConfig+0x118>)
 80079e2:	fba3 0302 	umull	r0, r3, r3, r2
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	2064      	movs	r0, #100	; 0x64
 80079ea:	fb00 f303 	mul.w	r3, r0, r3
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	011b      	lsls	r3, r3, #4
 80079f2:	3332      	adds	r3, #50	; 0x32
 80079f4:	4a07      	ldr	r2, [pc, #28]	; (8007a14 <UART_SetConfig+0x118>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	095b      	lsrs	r3, r3, #5
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	440a      	add	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40013800 	.word	0x40013800
 8007a14:	51eb851f 	.word	0x51eb851f

08007a18 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	f023 0101 	bic.w	r1, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d102      	bne.n	8007a48 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007a42:	2340      	movs	r3, #64	; 0x40
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e001      	b.n	8007a4c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007a58:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007a5e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007a64:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007a6a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007a70:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007a76:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007a7c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8007a82:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007a88:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <FSMC_NORSRAM_Init+0xd0>)
 8007aa8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ab0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007ab8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	ea02 0103 	and.w	r1, r2, r3
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4319      	orrs	r1, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	371c      	adds	r7, #28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	0008fb7f 	.word	0x0008fb7f

08007aec <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b02:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	431a      	orrs	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	021b      	lsls	r3, r3, #8
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	051b      	lsls	r3, r3, #20
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	3b02      	subs	r3, #2
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	3201      	adds	r2, #1
 8007b40:	4319      	orrs	r1, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
 8007b60:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b68:	d11d      	bne.n	8007ba6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b72:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	6852      	ldr	r2, [r2, #4]
 8007b7e:	0112      	lsls	r2, r2, #4
 8007b80:	4311      	orrs	r1, r2
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	6892      	ldr	r2, [r2, #8]
 8007b86:	0212      	lsls	r2, r2, #8
 8007b88:	4311      	orrs	r1, r2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	6992      	ldr	r2, [r2, #24]
 8007b8e:	4311      	orrs	r1, r2
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	68d2      	ldr	r2, [r2, #12]
 8007b94:	0412      	lsls	r2, r2, #16
 8007b96:	430a      	orrs	r2, r1
 8007b98:	ea43 0102 	orr.w	r1, r3, r2
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ba4:	e005      	b.n	8007bb2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	cff00000 	.word	0xcff00000

08007bc4 <atoi>:
 8007bc4:	220a      	movs	r2, #10
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	f000 bd2e 	b.w	8008628 <strtol>

08007bcc <__errno>:
 8007bcc:	4b01      	ldr	r3, [pc, #4]	; (8007bd4 <__errno+0x8>)
 8007bce:	6818      	ldr	r0, [r3, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200000b8 	.word	0x200000b8

08007bd8 <__libc_init_array>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	2600      	movs	r6, #0
 8007bdc:	4d0c      	ldr	r5, [pc, #48]	; (8007c10 <__libc_init_array+0x38>)
 8007bde:	4c0d      	ldr	r4, [pc, #52]	; (8007c14 <__libc_init_array+0x3c>)
 8007be0:	1b64      	subs	r4, r4, r5
 8007be2:	10a4      	asrs	r4, r4, #2
 8007be4:	42a6      	cmp	r6, r4
 8007be6:	d109      	bne.n	8007bfc <__libc_init_array+0x24>
 8007be8:	f002 ff82 	bl	800aaf0 <_init>
 8007bec:	2600      	movs	r6, #0
 8007bee:	4d0a      	ldr	r5, [pc, #40]	; (8007c18 <__libc_init_array+0x40>)
 8007bf0:	4c0a      	ldr	r4, [pc, #40]	; (8007c1c <__libc_init_array+0x44>)
 8007bf2:	1b64      	subs	r4, r4, r5
 8007bf4:	10a4      	asrs	r4, r4, #2
 8007bf6:	42a6      	cmp	r6, r4
 8007bf8:	d105      	bne.n	8007c06 <__libc_init_array+0x2e>
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}
 8007bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c00:	4798      	blx	r3
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7ee      	b.n	8007be4 <__libc_init_array+0xc>
 8007c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0a:	4798      	blx	r3
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	e7f2      	b.n	8007bf6 <__libc_init_array+0x1e>
 8007c10:	0800b5fc 	.word	0x0800b5fc
 8007c14:	0800b5fc 	.word	0x0800b5fc
 8007c18:	0800b5fc 	.word	0x0800b5fc
 8007c1c:	0800b600 	.word	0x0800b600

08007c20 <memset>:
 8007c20:	4603      	mov	r3, r0
 8007c22:	4402      	add	r2, r0
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d100      	bne.n	8007c2a <memset+0xa>
 8007c28:	4770      	bx	lr
 8007c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2e:	e7f9      	b.n	8007c24 <memset+0x4>

08007c30 <__cvt>:
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c36:	461f      	mov	r7, r3
 8007c38:	bfbb      	ittet	lt
 8007c3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007c3e:	461f      	movlt	r7, r3
 8007c40:	2300      	movge	r3, #0
 8007c42:	232d      	movlt	r3, #45	; 0x2d
 8007c44:	b088      	sub	sp, #32
 8007c46:	4614      	mov	r4, r2
 8007c48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007c4c:	7013      	strb	r3, [r2, #0]
 8007c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007c54:	f023 0820 	bic.w	r8, r3, #32
 8007c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c5c:	d005      	beq.n	8007c6a <__cvt+0x3a>
 8007c5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c62:	d100      	bne.n	8007c66 <__cvt+0x36>
 8007c64:	3501      	adds	r5, #1
 8007c66:	2302      	movs	r3, #2
 8007c68:	e000      	b.n	8007c6c <__cvt+0x3c>
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	aa07      	add	r2, sp, #28
 8007c6e:	9204      	str	r2, [sp, #16]
 8007c70:	aa06      	add	r2, sp, #24
 8007c72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007c76:	e9cd 3500 	strd	r3, r5, [sp]
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	f000 fd6b 	bl	8008758 <_dtoa_r>
 8007c82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c86:	4606      	mov	r6, r0
 8007c88:	d102      	bne.n	8007c90 <__cvt+0x60>
 8007c8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c8c:	07db      	lsls	r3, r3, #31
 8007c8e:	d522      	bpl.n	8007cd6 <__cvt+0xa6>
 8007c90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c94:	eb06 0905 	add.w	r9, r6, r5
 8007c98:	d110      	bne.n	8007cbc <__cvt+0x8c>
 8007c9a:	7833      	ldrb	r3, [r6, #0]
 8007c9c:	2b30      	cmp	r3, #48	; 0x30
 8007c9e:	d10a      	bne.n	8007cb6 <__cvt+0x86>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 feea 	bl	8000a80 <__aeabi_dcmpeq>
 8007cac:	b918      	cbnz	r0, 8007cb6 <__cvt+0x86>
 8007cae:	f1c5 0501 	rsb	r5, r5, #1
 8007cb2:	f8ca 5000 	str.w	r5, [sl]
 8007cb6:	f8da 3000 	ldr.w	r3, [sl]
 8007cba:	4499      	add	r9, r3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	f7f8 fedc 	bl	8000a80 <__aeabi_dcmpeq>
 8007cc8:	b108      	cbz	r0, 8007cce <__cvt+0x9e>
 8007cca:	f8cd 901c 	str.w	r9, [sp, #28]
 8007cce:	2230      	movs	r2, #48	; 0x30
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	454b      	cmp	r3, r9
 8007cd4:	d307      	bcc.n	8007ce6 <__cvt+0xb6>
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	9b07      	ldr	r3, [sp, #28]
 8007cda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cdc:	1b9b      	subs	r3, r3, r6
 8007cde:	6013      	str	r3, [r2, #0]
 8007ce0:	b008      	add	sp, #32
 8007ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	9107      	str	r1, [sp, #28]
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e7f0      	b.n	8007cd0 <__cvt+0xa0>

08007cee <__exponent>:
 8007cee:	4603      	mov	r3, r0
 8007cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	f803 2b02 	strb.w	r2, [r3], #2
 8007cf8:	bfb6      	itet	lt
 8007cfa:	222d      	movlt	r2, #45	; 0x2d
 8007cfc:	222b      	movge	r2, #43	; 0x2b
 8007cfe:	4249      	neglt	r1, r1
 8007d00:	2909      	cmp	r1, #9
 8007d02:	7042      	strb	r2, [r0, #1]
 8007d04:	dd2b      	ble.n	8007d5e <__exponent+0x70>
 8007d06:	f10d 0407 	add.w	r4, sp, #7
 8007d0a:	46a4      	mov	ip, r4
 8007d0c:	270a      	movs	r7, #10
 8007d0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007d12:	460a      	mov	r2, r1
 8007d14:	46a6      	mov	lr, r4
 8007d16:	fb07 1516 	mls	r5, r7, r6, r1
 8007d1a:	2a63      	cmp	r2, #99	; 0x63
 8007d1c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007d20:	4631      	mov	r1, r6
 8007d22:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007d26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007d2a:	dcf0      	bgt.n	8007d0e <__exponent+0x20>
 8007d2c:	3130      	adds	r1, #48	; 0x30
 8007d2e:	f1ae 0502 	sub.w	r5, lr, #2
 8007d32:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007d36:	4629      	mov	r1, r5
 8007d38:	1c44      	adds	r4, r0, #1
 8007d3a:	4561      	cmp	r1, ip
 8007d3c:	d30a      	bcc.n	8007d54 <__exponent+0x66>
 8007d3e:	f10d 0209 	add.w	r2, sp, #9
 8007d42:	eba2 020e 	sub.w	r2, r2, lr
 8007d46:	4565      	cmp	r5, ip
 8007d48:	bf88      	it	hi
 8007d4a:	2200      	movhi	r2, #0
 8007d4c:	4413      	add	r3, r2
 8007d4e:	1a18      	subs	r0, r3, r0
 8007d50:	b003      	add	sp, #12
 8007d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d58:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007d5c:	e7ed      	b.n	8007d3a <__exponent+0x4c>
 8007d5e:	2330      	movs	r3, #48	; 0x30
 8007d60:	3130      	adds	r1, #48	; 0x30
 8007d62:	7083      	strb	r3, [r0, #2]
 8007d64:	70c1      	strb	r1, [r0, #3]
 8007d66:	1d03      	adds	r3, r0, #4
 8007d68:	e7f1      	b.n	8007d4e <__exponent+0x60>
	...

08007d6c <_printf_float>:
 8007d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d70:	b091      	sub	sp, #68	; 0x44
 8007d72:	460c      	mov	r4, r1
 8007d74:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007d78:	4616      	mov	r6, r2
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	f001 fad9 	bl	8009334 <_localeconv_r>
 8007d82:	6803      	ldr	r3, [r0, #0]
 8007d84:	4618      	mov	r0, r3
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	f7f8 fa4e 	bl	8000228 <strlen>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	930e      	str	r3, [sp, #56]	; 0x38
 8007d90:	f8d8 3000 	ldr.w	r3, [r8]
 8007d94:	900a      	str	r0, [sp, #40]	; 0x28
 8007d96:	3307      	adds	r3, #7
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	f103 0208 	add.w	r2, r3, #8
 8007da0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007da4:	f8d4 b000 	ldr.w	fp, [r4]
 8007da8:	f8c8 2000 	str.w	r2, [r8]
 8007dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007db4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007db8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007dbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4b9c      	ldr	r3, [pc, #624]	; (8008038 <_printf_float+0x2cc>)
 8007dc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dc8:	f7f8 fe8c 	bl	8000ae4 <__aeabi_dcmpun>
 8007dcc:	bb70      	cbnz	r0, 8007e2c <_printf_float+0xc0>
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4b98      	ldr	r3, [pc, #608]	; (8008038 <_printf_float+0x2cc>)
 8007dd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007dd8:	f7f8 fe66 	bl	8000aa8 <__aeabi_dcmple>
 8007ddc:	bb30      	cbnz	r0, 8007e2c <_printf_float+0xc0>
 8007dde:	2200      	movs	r2, #0
 8007de0:	2300      	movs	r3, #0
 8007de2:	4640      	mov	r0, r8
 8007de4:	4651      	mov	r1, sl
 8007de6:	f7f8 fe55 	bl	8000a94 <__aeabi_dcmplt>
 8007dea:	b110      	cbz	r0, 8007df2 <_printf_float+0x86>
 8007dec:	232d      	movs	r3, #45	; 0x2d
 8007dee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007df2:	4b92      	ldr	r3, [pc, #584]	; (800803c <_printf_float+0x2d0>)
 8007df4:	4892      	ldr	r0, [pc, #584]	; (8008040 <_printf_float+0x2d4>)
 8007df6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007dfa:	bf94      	ite	ls
 8007dfc:	4698      	movls	r8, r3
 8007dfe:	4680      	movhi	r8, r0
 8007e00:	2303      	movs	r3, #3
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	f02b 0304 	bic.w	r3, fp, #4
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	4633      	mov	r3, r6
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	9700      	str	r7, [sp, #0]
 8007e16:	aa0f      	add	r2, sp, #60	; 0x3c
 8007e18:	f000 f9d4 	bl	80081c4 <_printf_common>
 8007e1c:	3001      	adds	r0, #1
 8007e1e:	f040 8090 	bne.w	8007f42 <_printf_float+0x1d6>
 8007e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e26:	b011      	add	sp, #68	; 0x44
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	4653      	mov	r3, sl
 8007e30:	4640      	mov	r0, r8
 8007e32:	4651      	mov	r1, sl
 8007e34:	f7f8 fe56 	bl	8000ae4 <__aeabi_dcmpun>
 8007e38:	b148      	cbz	r0, 8007e4e <_printf_float+0xe2>
 8007e3a:	f1ba 0f00 	cmp.w	sl, #0
 8007e3e:	bfb8      	it	lt
 8007e40:	232d      	movlt	r3, #45	; 0x2d
 8007e42:	4880      	ldr	r0, [pc, #512]	; (8008044 <_printf_float+0x2d8>)
 8007e44:	bfb8      	it	lt
 8007e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e4a:	4b7f      	ldr	r3, [pc, #508]	; (8008048 <_printf_float+0x2dc>)
 8007e4c:	e7d3      	b.n	8007df6 <_printf_float+0x8a>
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	d142      	bne.n	8007ede <_printf_float+0x172>
 8007e58:	2306      	movs	r3, #6
 8007e5a:	6063      	str	r3, [r4, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	9206      	str	r2, [sp, #24]
 8007e60:	aa0e      	add	r2, sp, #56	; 0x38
 8007e62:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007e66:	aa0d      	add	r2, sp, #52	; 0x34
 8007e68:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007e6c:	9203      	str	r2, [sp, #12]
 8007e6e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007e72:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4653      	mov	r3, sl
 8007e82:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e84:	f7ff fed4 	bl	8007c30 <__cvt>
 8007e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	2947      	cmp	r1, #71	; 0x47
 8007e8e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007e90:	d108      	bne.n	8007ea4 <_printf_float+0x138>
 8007e92:	1cc8      	adds	r0, r1, #3
 8007e94:	db02      	blt.n	8007e9c <_printf_float+0x130>
 8007e96:	6863      	ldr	r3, [r4, #4]
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	dd40      	ble.n	8007f1e <_printf_float+0x1b2>
 8007e9c:	f1a9 0902 	sub.w	r9, r9, #2
 8007ea0:	fa5f f989 	uxtb.w	r9, r9
 8007ea4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007ea8:	d81f      	bhi.n	8007eea <_printf_float+0x17e>
 8007eaa:	464a      	mov	r2, r9
 8007eac:	3901      	subs	r1, #1
 8007eae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007eb2:	910d      	str	r1, [sp, #52]	; 0x34
 8007eb4:	f7ff ff1b 	bl	8007cee <__exponent>
 8007eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eba:	4682      	mov	sl, r0
 8007ebc:	1813      	adds	r3, r2, r0
 8007ebe:	2a01      	cmp	r2, #1
 8007ec0:	6123      	str	r3, [r4, #16]
 8007ec2:	dc02      	bgt.n	8007eca <_printf_float+0x15e>
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	07d2      	lsls	r2, r2, #31
 8007ec8:	d501      	bpl.n	8007ece <_printf_float+0x162>
 8007eca:	3301      	adds	r3, #1
 8007ecc:	6123      	str	r3, [r4, #16]
 8007ece:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d09b      	beq.n	8007e0e <_printf_float+0xa2>
 8007ed6:	232d      	movs	r3, #45	; 0x2d
 8007ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007edc:	e797      	b.n	8007e0e <_printf_float+0xa2>
 8007ede:	2947      	cmp	r1, #71	; 0x47
 8007ee0:	d1bc      	bne.n	8007e5c <_printf_float+0xf0>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1ba      	bne.n	8007e5c <_printf_float+0xf0>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e7b7      	b.n	8007e5a <_printf_float+0xee>
 8007eea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007eee:	d118      	bne.n	8007f22 <_printf_float+0x1b6>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	dd0b      	ble.n	8007f0e <_printf_float+0x1a2>
 8007ef6:	6121      	str	r1, [r4, #16]
 8007ef8:	b913      	cbnz	r3, 8007f00 <_printf_float+0x194>
 8007efa:	6822      	ldr	r2, [r4, #0]
 8007efc:	07d0      	lsls	r0, r2, #31
 8007efe:	d502      	bpl.n	8007f06 <_printf_float+0x19a>
 8007f00:	3301      	adds	r3, #1
 8007f02:	440b      	add	r3, r1
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	f04f 0a00 	mov.w	sl, #0
 8007f0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007f0c:	e7df      	b.n	8007ece <_printf_float+0x162>
 8007f0e:	b913      	cbnz	r3, 8007f16 <_printf_float+0x1aa>
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	07d2      	lsls	r2, r2, #31
 8007f14:	d501      	bpl.n	8007f1a <_printf_float+0x1ae>
 8007f16:	3302      	adds	r3, #2
 8007f18:	e7f4      	b.n	8007f04 <_printf_float+0x198>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e7f2      	b.n	8007f04 <_printf_float+0x198>
 8007f1e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f24:	4299      	cmp	r1, r3
 8007f26:	db05      	blt.n	8007f34 <_printf_float+0x1c8>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	6121      	str	r1, [r4, #16]
 8007f2c:	07d8      	lsls	r0, r3, #31
 8007f2e:	d5ea      	bpl.n	8007f06 <_printf_float+0x19a>
 8007f30:	1c4b      	adds	r3, r1, #1
 8007f32:	e7e7      	b.n	8007f04 <_printf_float+0x198>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	bfcc      	ite	gt
 8007f38:	2201      	movgt	r2, #1
 8007f3a:	f1c1 0202 	rsble	r2, r1, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	e7e0      	b.n	8007f04 <_printf_float+0x198>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	055a      	lsls	r2, r3, #21
 8007f46:	d407      	bmi.n	8007f58 <_printf_float+0x1ec>
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	4642      	mov	r2, r8
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	4628      	mov	r0, r5
 8007f50:	47b8      	blx	r7
 8007f52:	3001      	adds	r0, #1
 8007f54:	d12b      	bne.n	8007fae <_printf_float+0x242>
 8007f56:	e764      	b.n	8007e22 <_printf_float+0xb6>
 8007f58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007f5c:	f240 80dd 	bls.w	800811a <_printf_float+0x3ae>
 8007f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f64:	2200      	movs	r2, #0
 8007f66:	2300      	movs	r3, #0
 8007f68:	f7f8 fd8a 	bl	8000a80 <__aeabi_dcmpeq>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d033      	beq.n	8007fd8 <_printf_float+0x26c>
 8007f70:	2301      	movs	r3, #1
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	4a35      	ldr	r2, [pc, #212]	; (800804c <_printf_float+0x2e0>)
 8007f78:	47b8      	blx	r7
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f43f af51 	beq.w	8007e22 <_printf_float+0xb6>
 8007f80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f84:	429a      	cmp	r2, r3
 8007f86:	db02      	blt.n	8007f8e <_printf_float+0x222>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	07d8      	lsls	r0, r3, #31
 8007f8c:	d50f      	bpl.n	8007fae <_printf_float+0x242>
 8007f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	47b8      	blx	r7
 8007f98:	3001      	adds	r0, #1
 8007f9a:	f43f af42 	beq.w	8007e22 <_printf_float+0xb6>
 8007f9e:	f04f 0800 	mov.w	r8, #0
 8007fa2:	f104 091a 	add.w	r9, r4, #26
 8007fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	4543      	cmp	r3, r8
 8007fac:	dc09      	bgt.n	8007fc2 <_printf_float+0x256>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	079b      	lsls	r3, r3, #30
 8007fb2:	f100 8102 	bmi.w	80081ba <_printf_float+0x44e>
 8007fb6:	68e0      	ldr	r0, [r4, #12]
 8007fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fba:	4298      	cmp	r0, r3
 8007fbc:	bfb8      	it	lt
 8007fbe:	4618      	movlt	r0, r3
 8007fc0:	e731      	b.n	8007e26 <_printf_float+0xba>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	464a      	mov	r2, r9
 8007fc6:	4631      	mov	r1, r6
 8007fc8:	4628      	mov	r0, r5
 8007fca:	47b8      	blx	r7
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f43f af28 	beq.w	8007e22 <_printf_float+0xb6>
 8007fd2:	f108 0801 	add.w	r8, r8, #1
 8007fd6:	e7e6      	b.n	8007fa6 <_printf_float+0x23a>
 8007fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	dc38      	bgt.n	8008050 <_printf_float+0x2e4>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4631      	mov	r1, r6
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	4a19      	ldr	r2, [pc, #100]	; (800804c <_printf_float+0x2e0>)
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f af1a 	beq.w	8007e22 <_printf_float+0xb6>
 8007fee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	d102      	bne.n	8007ffc <_printf_float+0x290>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	07d9      	lsls	r1, r3, #31
 8007ffa:	d5d8      	bpl.n	8007fae <_printf_float+0x242>
 8007ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	f43f af0b 	beq.w	8007e22 <_printf_float+0xb6>
 800800c:	f04f 0900 	mov.w	r9, #0
 8008010:	f104 0a1a 	add.w	sl, r4, #26
 8008014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008016:	425b      	negs	r3, r3
 8008018:	454b      	cmp	r3, r9
 800801a:	dc01      	bgt.n	8008020 <_printf_float+0x2b4>
 800801c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800801e:	e794      	b.n	8007f4a <_printf_float+0x1de>
 8008020:	2301      	movs	r3, #1
 8008022:	4652      	mov	r2, sl
 8008024:	4631      	mov	r1, r6
 8008026:	4628      	mov	r0, r5
 8008028:	47b8      	blx	r7
 800802a:	3001      	adds	r0, #1
 800802c:	f43f aef9 	beq.w	8007e22 <_printf_float+0xb6>
 8008030:	f109 0901 	add.w	r9, r9, #1
 8008034:	e7ee      	b.n	8008014 <_printf_float+0x2a8>
 8008036:	bf00      	nop
 8008038:	7fefffff 	.word	0x7fefffff
 800803c:	0800b224 	.word	0x0800b224
 8008040:	0800b228 	.word	0x0800b228
 8008044:	0800b230 	.word	0x0800b230
 8008048:	0800b22c 	.word	0x0800b22c
 800804c:	0800b234 	.word	0x0800b234
 8008050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008052:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008054:	429a      	cmp	r2, r3
 8008056:	bfa8      	it	ge
 8008058:	461a      	movge	r2, r3
 800805a:	2a00      	cmp	r2, #0
 800805c:	4691      	mov	r9, r2
 800805e:	dc37      	bgt.n	80080d0 <_printf_float+0x364>
 8008060:	f04f 0b00 	mov.w	fp, #0
 8008064:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008068:	f104 021a 	add.w	r2, r4, #26
 800806c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008070:	ebaa 0309 	sub.w	r3, sl, r9
 8008074:	455b      	cmp	r3, fp
 8008076:	dc33      	bgt.n	80080e0 <_printf_float+0x374>
 8008078:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800807c:	429a      	cmp	r2, r3
 800807e:	db3b      	blt.n	80080f8 <_printf_float+0x38c>
 8008080:	6823      	ldr	r3, [r4, #0]
 8008082:	07da      	lsls	r2, r3, #31
 8008084:	d438      	bmi.n	80080f8 <_printf_float+0x38c>
 8008086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008088:	990d      	ldr	r1, [sp, #52]	; 0x34
 800808a:	eba3 020a 	sub.w	r2, r3, sl
 800808e:	eba3 0901 	sub.w	r9, r3, r1
 8008092:	4591      	cmp	r9, r2
 8008094:	bfa8      	it	ge
 8008096:	4691      	movge	r9, r2
 8008098:	f1b9 0f00 	cmp.w	r9, #0
 800809c:	dc34      	bgt.n	8008108 <_printf_float+0x39c>
 800809e:	f04f 0800 	mov.w	r8, #0
 80080a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080a6:	f104 0a1a 	add.w	sl, r4, #26
 80080aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	eba3 0309 	sub.w	r3, r3, r9
 80080b4:	4543      	cmp	r3, r8
 80080b6:	f77f af7a 	ble.w	8007fae <_printf_float+0x242>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4652      	mov	r2, sl
 80080be:	4631      	mov	r1, r6
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b8      	blx	r7
 80080c4:	3001      	adds	r0, #1
 80080c6:	f43f aeac 	beq.w	8007e22 <_printf_float+0xb6>
 80080ca:	f108 0801 	add.w	r8, r8, #1
 80080ce:	e7ec      	b.n	80080aa <_printf_float+0x33e>
 80080d0:	4613      	mov	r3, r2
 80080d2:	4631      	mov	r1, r6
 80080d4:	4642      	mov	r2, r8
 80080d6:	4628      	mov	r0, r5
 80080d8:	47b8      	blx	r7
 80080da:	3001      	adds	r0, #1
 80080dc:	d1c0      	bne.n	8008060 <_printf_float+0x2f4>
 80080de:	e6a0      	b.n	8007e22 <_printf_float+0xb6>
 80080e0:	2301      	movs	r3, #1
 80080e2:	4631      	mov	r1, r6
 80080e4:	4628      	mov	r0, r5
 80080e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80080e8:	47b8      	blx	r7
 80080ea:	3001      	adds	r0, #1
 80080ec:	f43f ae99 	beq.w	8007e22 <_printf_float+0xb6>
 80080f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080f2:	f10b 0b01 	add.w	fp, fp, #1
 80080f6:	e7b9      	b.n	800806c <_printf_float+0x300>
 80080f8:	4631      	mov	r1, r6
 80080fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080fe:	4628      	mov	r0, r5
 8008100:	47b8      	blx	r7
 8008102:	3001      	adds	r0, #1
 8008104:	d1bf      	bne.n	8008086 <_printf_float+0x31a>
 8008106:	e68c      	b.n	8007e22 <_printf_float+0xb6>
 8008108:	464b      	mov	r3, r9
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	eb08 020a 	add.w	r2, r8, sl
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	d1c2      	bne.n	800809e <_printf_float+0x332>
 8008118:	e683      	b.n	8007e22 <_printf_float+0xb6>
 800811a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800811c:	2a01      	cmp	r2, #1
 800811e:	dc01      	bgt.n	8008124 <_printf_float+0x3b8>
 8008120:	07db      	lsls	r3, r3, #31
 8008122:	d537      	bpl.n	8008194 <_printf_float+0x428>
 8008124:	2301      	movs	r3, #1
 8008126:	4642      	mov	r2, r8
 8008128:	4631      	mov	r1, r6
 800812a:	4628      	mov	r0, r5
 800812c:	47b8      	blx	r7
 800812e:	3001      	adds	r0, #1
 8008130:	f43f ae77 	beq.w	8007e22 <_printf_float+0xb6>
 8008134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f ae6f 	beq.w	8007e22 <_printf_float+0xb6>
 8008144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008148:	2200      	movs	r2, #0
 800814a:	2300      	movs	r3, #0
 800814c:	f7f8 fc98 	bl	8000a80 <__aeabi_dcmpeq>
 8008150:	b9d8      	cbnz	r0, 800818a <_printf_float+0x41e>
 8008152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008154:	f108 0201 	add.w	r2, r8, #1
 8008158:	3b01      	subs	r3, #1
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	d10e      	bne.n	8008182 <_printf_float+0x416>
 8008164:	e65d      	b.n	8007e22 <_printf_float+0xb6>
 8008166:	2301      	movs	r3, #1
 8008168:	464a      	mov	r2, r9
 800816a:	4631      	mov	r1, r6
 800816c:	4628      	mov	r0, r5
 800816e:	47b8      	blx	r7
 8008170:	3001      	adds	r0, #1
 8008172:	f43f ae56 	beq.w	8007e22 <_printf_float+0xb6>
 8008176:	f108 0801 	add.w	r8, r8, #1
 800817a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800817c:	3b01      	subs	r3, #1
 800817e:	4543      	cmp	r3, r8
 8008180:	dcf1      	bgt.n	8008166 <_printf_float+0x3fa>
 8008182:	4653      	mov	r3, sl
 8008184:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008188:	e6e0      	b.n	8007f4c <_printf_float+0x1e0>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	f104 091a 	add.w	r9, r4, #26
 8008192:	e7f2      	b.n	800817a <_printf_float+0x40e>
 8008194:	2301      	movs	r3, #1
 8008196:	4642      	mov	r2, r8
 8008198:	e7df      	b.n	800815a <_printf_float+0x3ee>
 800819a:	2301      	movs	r3, #1
 800819c:	464a      	mov	r2, r9
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f ae3c 	beq.w	8007e22 <_printf_float+0xb6>
 80081aa:	f108 0801 	add.w	r8, r8, #1
 80081ae:	68e3      	ldr	r3, [r4, #12]
 80081b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081b2:	1a5b      	subs	r3, r3, r1
 80081b4:	4543      	cmp	r3, r8
 80081b6:	dcf0      	bgt.n	800819a <_printf_float+0x42e>
 80081b8:	e6fd      	b.n	8007fb6 <_printf_float+0x24a>
 80081ba:	f04f 0800 	mov.w	r8, #0
 80081be:	f104 0919 	add.w	r9, r4, #25
 80081c2:	e7f4      	b.n	80081ae <_printf_float+0x442>

080081c4 <_printf_common>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	4616      	mov	r6, r2
 80081ca:	4699      	mov	r9, r3
 80081cc:	688a      	ldr	r2, [r1, #8]
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	4607      	mov	r7, r0
 80081d2:	4293      	cmp	r3, r2
 80081d4:	bfb8      	it	lt
 80081d6:	4613      	movlt	r3, r2
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081de:	460c      	mov	r4, r1
 80081e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081e4:	b10a      	cbz	r2, 80081ea <_printf_common+0x26>
 80081e6:	3301      	adds	r3, #1
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	0699      	lsls	r1, r3, #26
 80081ee:	bf42      	ittt	mi
 80081f0:	6833      	ldrmi	r3, [r6, #0]
 80081f2:	3302      	addmi	r3, #2
 80081f4:	6033      	strmi	r3, [r6, #0]
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	f015 0506 	ands.w	r5, r5, #6
 80081fc:	d106      	bne.n	800820c <_printf_common+0x48>
 80081fe:	f104 0a19 	add.w	sl, r4, #25
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	6832      	ldr	r2, [r6, #0]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc28      	bgt.n	800825e <_printf_common+0x9a>
 800820c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008210:	1e13      	subs	r3, r2, #0
 8008212:	6822      	ldr	r2, [r4, #0]
 8008214:	bf18      	it	ne
 8008216:	2301      	movne	r3, #1
 8008218:	0692      	lsls	r2, r2, #26
 800821a:	d42d      	bmi.n	8008278 <_printf_common+0xb4>
 800821c:	4649      	mov	r1, r9
 800821e:	4638      	mov	r0, r7
 8008220:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008224:	47c0      	blx	r8
 8008226:	3001      	adds	r0, #1
 8008228:	d020      	beq.n	800826c <_printf_common+0xa8>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	68e5      	ldr	r5, [r4, #12]
 800822e:	f003 0306 	and.w	r3, r3, #6
 8008232:	2b04      	cmp	r3, #4
 8008234:	bf18      	it	ne
 8008236:	2500      	movne	r5, #0
 8008238:	6832      	ldr	r2, [r6, #0]
 800823a:	f04f 0600 	mov.w	r6, #0
 800823e:	68a3      	ldr	r3, [r4, #8]
 8008240:	bf08      	it	eq
 8008242:	1aad      	subeq	r5, r5, r2
 8008244:	6922      	ldr	r2, [r4, #16]
 8008246:	bf08      	it	eq
 8008248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800824c:	4293      	cmp	r3, r2
 800824e:	bfc4      	itt	gt
 8008250:	1a9b      	subgt	r3, r3, r2
 8008252:	18ed      	addgt	r5, r5, r3
 8008254:	341a      	adds	r4, #26
 8008256:	42b5      	cmp	r5, r6
 8008258:	d11a      	bne.n	8008290 <_printf_common+0xcc>
 800825a:	2000      	movs	r0, #0
 800825c:	e008      	b.n	8008270 <_printf_common+0xac>
 800825e:	2301      	movs	r3, #1
 8008260:	4652      	mov	r2, sl
 8008262:	4649      	mov	r1, r9
 8008264:	4638      	mov	r0, r7
 8008266:	47c0      	blx	r8
 8008268:	3001      	adds	r0, #1
 800826a:	d103      	bne.n	8008274 <_printf_common+0xb0>
 800826c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008274:	3501      	adds	r5, #1
 8008276:	e7c4      	b.n	8008202 <_printf_common+0x3e>
 8008278:	2030      	movs	r0, #48	; 0x30
 800827a:	18e1      	adds	r1, r4, r3
 800827c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008286:	4422      	add	r2, r4
 8008288:	3302      	adds	r3, #2
 800828a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800828e:	e7c5      	b.n	800821c <_printf_common+0x58>
 8008290:	2301      	movs	r3, #1
 8008292:	4622      	mov	r2, r4
 8008294:	4649      	mov	r1, r9
 8008296:	4638      	mov	r0, r7
 8008298:	47c0      	blx	r8
 800829a:	3001      	adds	r0, #1
 800829c:	d0e6      	beq.n	800826c <_printf_common+0xa8>
 800829e:	3601      	adds	r6, #1
 80082a0:	e7d9      	b.n	8008256 <_printf_common+0x92>
	...

080082a4 <_printf_i>:
 80082a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	7e0f      	ldrb	r7, [r1, #24]
 80082aa:	4691      	mov	r9, r2
 80082ac:	2f78      	cmp	r7, #120	; 0x78
 80082ae:	4680      	mov	r8, r0
 80082b0:	460c      	mov	r4, r1
 80082b2:	469a      	mov	sl, r3
 80082b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ba:	d807      	bhi.n	80082cc <_printf_i+0x28>
 80082bc:	2f62      	cmp	r7, #98	; 0x62
 80082be:	d80a      	bhi.n	80082d6 <_printf_i+0x32>
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	f000 80d9 	beq.w	8008478 <_printf_i+0x1d4>
 80082c6:	2f58      	cmp	r7, #88	; 0x58
 80082c8:	f000 80a4 	beq.w	8008414 <_printf_i+0x170>
 80082cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082d4:	e03a      	b.n	800834c <_printf_i+0xa8>
 80082d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082da:	2b15      	cmp	r3, #21
 80082dc:	d8f6      	bhi.n	80082cc <_printf_i+0x28>
 80082de:	a101      	add	r1, pc, #4	; (adr r1, 80082e4 <_printf_i+0x40>)
 80082e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e4:	0800833d 	.word	0x0800833d
 80082e8:	08008351 	.word	0x08008351
 80082ec:	080082cd 	.word	0x080082cd
 80082f0:	080082cd 	.word	0x080082cd
 80082f4:	080082cd 	.word	0x080082cd
 80082f8:	080082cd 	.word	0x080082cd
 80082fc:	08008351 	.word	0x08008351
 8008300:	080082cd 	.word	0x080082cd
 8008304:	080082cd 	.word	0x080082cd
 8008308:	080082cd 	.word	0x080082cd
 800830c:	080082cd 	.word	0x080082cd
 8008310:	0800845f 	.word	0x0800845f
 8008314:	08008381 	.word	0x08008381
 8008318:	08008441 	.word	0x08008441
 800831c:	080082cd 	.word	0x080082cd
 8008320:	080082cd 	.word	0x080082cd
 8008324:	08008481 	.word	0x08008481
 8008328:	080082cd 	.word	0x080082cd
 800832c:	08008381 	.word	0x08008381
 8008330:	080082cd 	.word	0x080082cd
 8008334:	080082cd 	.word	0x080082cd
 8008338:	08008449 	.word	0x08008449
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	602a      	str	r2, [r5, #0]
 8008344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800834c:	2301      	movs	r3, #1
 800834e:	e0a4      	b.n	800849a <_printf_i+0x1f6>
 8008350:	6820      	ldr	r0, [r4, #0]
 8008352:	6829      	ldr	r1, [r5, #0]
 8008354:	0606      	lsls	r6, r0, #24
 8008356:	f101 0304 	add.w	r3, r1, #4
 800835a:	d50a      	bpl.n	8008372 <_printf_i+0xce>
 800835c:	680e      	ldr	r6, [r1, #0]
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	2e00      	cmp	r6, #0
 8008362:	da03      	bge.n	800836c <_printf_i+0xc8>
 8008364:	232d      	movs	r3, #45	; 0x2d
 8008366:	4276      	negs	r6, r6
 8008368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836c:	230a      	movs	r3, #10
 800836e:	485e      	ldr	r0, [pc, #376]	; (80084e8 <_printf_i+0x244>)
 8008370:	e019      	b.n	80083a6 <_printf_i+0x102>
 8008372:	680e      	ldr	r6, [r1, #0]
 8008374:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	bf18      	it	ne
 800837c:	b236      	sxthne	r6, r6
 800837e:	e7ef      	b.n	8008360 <_printf_i+0xbc>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	6820      	ldr	r0, [r4, #0]
 8008384:	1d19      	adds	r1, r3, #4
 8008386:	6029      	str	r1, [r5, #0]
 8008388:	0601      	lsls	r1, r0, #24
 800838a:	d501      	bpl.n	8008390 <_printf_i+0xec>
 800838c:	681e      	ldr	r6, [r3, #0]
 800838e:	e002      	b.n	8008396 <_printf_i+0xf2>
 8008390:	0646      	lsls	r6, r0, #25
 8008392:	d5fb      	bpl.n	800838c <_printf_i+0xe8>
 8008394:	881e      	ldrh	r6, [r3, #0]
 8008396:	2f6f      	cmp	r7, #111	; 0x6f
 8008398:	bf0c      	ite	eq
 800839a:	2308      	moveq	r3, #8
 800839c:	230a      	movne	r3, #10
 800839e:	4852      	ldr	r0, [pc, #328]	; (80084e8 <_printf_i+0x244>)
 80083a0:	2100      	movs	r1, #0
 80083a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a6:	6865      	ldr	r5, [r4, #4]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	bfa8      	it	ge
 80083ac:	6821      	ldrge	r1, [r4, #0]
 80083ae:	60a5      	str	r5, [r4, #8]
 80083b0:	bfa4      	itt	ge
 80083b2:	f021 0104 	bicge.w	r1, r1, #4
 80083b6:	6021      	strge	r1, [r4, #0]
 80083b8:	b90e      	cbnz	r6, 80083be <_printf_i+0x11a>
 80083ba:	2d00      	cmp	r5, #0
 80083bc:	d04d      	beq.n	800845a <_printf_i+0x1b6>
 80083be:	4615      	mov	r5, r2
 80083c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80083c4:	fb03 6711 	mls	r7, r3, r1, r6
 80083c8:	5dc7      	ldrb	r7, [r0, r7]
 80083ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083ce:	4637      	mov	r7, r6
 80083d0:	42bb      	cmp	r3, r7
 80083d2:	460e      	mov	r6, r1
 80083d4:	d9f4      	bls.n	80083c0 <_printf_i+0x11c>
 80083d6:	2b08      	cmp	r3, #8
 80083d8:	d10b      	bne.n	80083f2 <_printf_i+0x14e>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	07de      	lsls	r6, r3, #31
 80083de:	d508      	bpl.n	80083f2 <_printf_i+0x14e>
 80083e0:	6923      	ldr	r3, [r4, #16]
 80083e2:	6861      	ldr	r1, [r4, #4]
 80083e4:	4299      	cmp	r1, r3
 80083e6:	bfde      	ittt	le
 80083e8:	2330      	movle	r3, #48	; 0x30
 80083ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80083f2:	1b52      	subs	r2, r2, r5
 80083f4:	6122      	str	r2, [r4, #16]
 80083f6:	464b      	mov	r3, r9
 80083f8:	4621      	mov	r1, r4
 80083fa:	4640      	mov	r0, r8
 80083fc:	f8cd a000 	str.w	sl, [sp]
 8008400:	aa03      	add	r2, sp, #12
 8008402:	f7ff fedf 	bl	80081c4 <_printf_common>
 8008406:	3001      	adds	r0, #1
 8008408:	d14c      	bne.n	80084a4 <_printf_i+0x200>
 800840a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800840e:	b004      	add	sp, #16
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	4834      	ldr	r0, [pc, #208]	; (80084e8 <_printf_i+0x244>)
 8008416:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800841a:	6829      	ldr	r1, [r5, #0]
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008422:	6029      	str	r1, [r5, #0]
 8008424:	061d      	lsls	r5, r3, #24
 8008426:	d514      	bpl.n	8008452 <_printf_i+0x1ae>
 8008428:	07df      	lsls	r7, r3, #31
 800842a:	bf44      	itt	mi
 800842c:	f043 0320 	orrmi.w	r3, r3, #32
 8008430:	6023      	strmi	r3, [r4, #0]
 8008432:	b91e      	cbnz	r6, 800843c <_printf_i+0x198>
 8008434:	6823      	ldr	r3, [r4, #0]
 8008436:	f023 0320 	bic.w	r3, r3, #32
 800843a:	6023      	str	r3, [r4, #0]
 800843c:	2310      	movs	r3, #16
 800843e:	e7af      	b.n	80083a0 <_printf_i+0xfc>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	2378      	movs	r3, #120	; 0x78
 800844a:	4828      	ldr	r0, [pc, #160]	; (80084ec <_printf_i+0x248>)
 800844c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008450:	e7e3      	b.n	800841a <_printf_i+0x176>
 8008452:	0659      	lsls	r1, r3, #25
 8008454:	bf48      	it	mi
 8008456:	b2b6      	uxthmi	r6, r6
 8008458:	e7e6      	b.n	8008428 <_printf_i+0x184>
 800845a:	4615      	mov	r5, r2
 800845c:	e7bb      	b.n	80083d6 <_printf_i+0x132>
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	6826      	ldr	r6, [r4, #0]
 8008462:	1d18      	adds	r0, r3, #4
 8008464:	6961      	ldr	r1, [r4, #20]
 8008466:	6028      	str	r0, [r5, #0]
 8008468:	0635      	lsls	r5, r6, #24
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	d501      	bpl.n	8008472 <_printf_i+0x1ce>
 800846e:	6019      	str	r1, [r3, #0]
 8008470:	e002      	b.n	8008478 <_printf_i+0x1d4>
 8008472:	0670      	lsls	r0, r6, #25
 8008474:	d5fb      	bpl.n	800846e <_printf_i+0x1ca>
 8008476:	8019      	strh	r1, [r3, #0]
 8008478:	2300      	movs	r3, #0
 800847a:	4615      	mov	r5, r2
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	e7ba      	b.n	80083f6 <_printf_i+0x152>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	2100      	movs	r1, #0
 8008484:	1d1a      	adds	r2, r3, #4
 8008486:	602a      	str	r2, [r5, #0]
 8008488:	681d      	ldr	r5, [r3, #0]
 800848a:	6862      	ldr	r2, [r4, #4]
 800848c:	4628      	mov	r0, r5
 800848e:	f000 ff5d 	bl	800934c <memchr>
 8008492:	b108      	cbz	r0, 8008498 <_printf_i+0x1f4>
 8008494:	1b40      	subs	r0, r0, r5
 8008496:	6060      	str	r0, [r4, #4]
 8008498:	6863      	ldr	r3, [r4, #4]
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	2300      	movs	r3, #0
 800849e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a2:	e7a8      	b.n	80083f6 <_printf_i+0x152>
 80084a4:	462a      	mov	r2, r5
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	6923      	ldr	r3, [r4, #16]
 80084ac:	47d0      	blx	sl
 80084ae:	3001      	adds	r0, #1
 80084b0:	d0ab      	beq.n	800840a <_printf_i+0x166>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	079b      	lsls	r3, r3, #30
 80084b6:	d413      	bmi.n	80084e0 <_printf_i+0x23c>
 80084b8:	68e0      	ldr	r0, [r4, #12]
 80084ba:	9b03      	ldr	r3, [sp, #12]
 80084bc:	4298      	cmp	r0, r3
 80084be:	bfb8      	it	lt
 80084c0:	4618      	movlt	r0, r3
 80084c2:	e7a4      	b.n	800840e <_printf_i+0x16a>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4632      	mov	r2, r6
 80084c8:	4649      	mov	r1, r9
 80084ca:	4640      	mov	r0, r8
 80084cc:	47d0      	blx	sl
 80084ce:	3001      	adds	r0, #1
 80084d0:	d09b      	beq.n	800840a <_printf_i+0x166>
 80084d2:	3501      	adds	r5, #1
 80084d4:	68e3      	ldr	r3, [r4, #12]
 80084d6:	9903      	ldr	r1, [sp, #12]
 80084d8:	1a5b      	subs	r3, r3, r1
 80084da:	42ab      	cmp	r3, r5
 80084dc:	dcf2      	bgt.n	80084c4 <_printf_i+0x220>
 80084de:	e7eb      	b.n	80084b8 <_printf_i+0x214>
 80084e0:	2500      	movs	r5, #0
 80084e2:	f104 0619 	add.w	r6, r4, #25
 80084e6:	e7f5      	b.n	80084d4 <_printf_i+0x230>
 80084e8:	0800b236 	.word	0x0800b236
 80084ec:	0800b247 	.word	0x0800b247

080084f0 <siprintf>:
 80084f0:	b40e      	push	{r1, r2, r3}
 80084f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084f6:	b500      	push	{lr}
 80084f8:	b09c      	sub	sp, #112	; 0x70
 80084fa:	ab1d      	add	r3, sp, #116	; 0x74
 80084fc:	9002      	str	r0, [sp, #8]
 80084fe:	9006      	str	r0, [sp, #24]
 8008500:	9107      	str	r1, [sp, #28]
 8008502:	9104      	str	r1, [sp, #16]
 8008504:	4808      	ldr	r0, [pc, #32]	; (8008528 <siprintf+0x38>)
 8008506:	4909      	ldr	r1, [pc, #36]	; (800852c <siprintf+0x3c>)
 8008508:	f853 2b04 	ldr.w	r2, [r3], #4
 800850c:	9105      	str	r1, [sp, #20]
 800850e:	6800      	ldr	r0, [r0, #0]
 8008510:	a902      	add	r1, sp, #8
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	f001 fc04 	bl	8009d20 <_svfiprintf_r>
 8008518:	2200      	movs	r2, #0
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	b01c      	add	sp, #112	; 0x70
 8008520:	f85d eb04 	ldr.w	lr, [sp], #4
 8008524:	b003      	add	sp, #12
 8008526:	4770      	bx	lr
 8008528:	200000b8 	.word	0x200000b8
 800852c:	ffff0208 	.word	0xffff0208

08008530 <_strtol_l.constprop.0>:
 8008530:	2b01      	cmp	r3, #1
 8008532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008536:	4680      	mov	r8, r0
 8008538:	d001      	beq.n	800853e <_strtol_l.constprop.0+0xe>
 800853a:	2b24      	cmp	r3, #36	; 0x24
 800853c:	d906      	bls.n	800854c <_strtol_l.constprop.0+0x1c>
 800853e:	f7ff fb45 	bl	8007bcc <__errno>
 8008542:	2316      	movs	r3, #22
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	2000      	movs	r0, #0
 8008548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800854c:	460d      	mov	r5, r1
 800854e:	4f35      	ldr	r7, [pc, #212]	; (8008624 <_strtol_l.constprop.0+0xf4>)
 8008550:	4628      	mov	r0, r5
 8008552:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008556:	5de6      	ldrb	r6, [r4, r7]
 8008558:	f016 0608 	ands.w	r6, r6, #8
 800855c:	d1f8      	bne.n	8008550 <_strtol_l.constprop.0+0x20>
 800855e:	2c2d      	cmp	r4, #45	; 0x2d
 8008560:	d12f      	bne.n	80085c2 <_strtol_l.constprop.0+0x92>
 8008562:	2601      	movs	r6, #1
 8008564:	782c      	ldrb	r4, [r5, #0]
 8008566:	1c85      	adds	r5, r0, #2
 8008568:	2b00      	cmp	r3, #0
 800856a:	d057      	beq.n	800861c <_strtol_l.constprop.0+0xec>
 800856c:	2b10      	cmp	r3, #16
 800856e:	d109      	bne.n	8008584 <_strtol_l.constprop.0+0x54>
 8008570:	2c30      	cmp	r4, #48	; 0x30
 8008572:	d107      	bne.n	8008584 <_strtol_l.constprop.0+0x54>
 8008574:	7828      	ldrb	r0, [r5, #0]
 8008576:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800857a:	2858      	cmp	r0, #88	; 0x58
 800857c:	d149      	bne.n	8008612 <_strtol_l.constprop.0+0xe2>
 800857e:	2310      	movs	r3, #16
 8008580:	786c      	ldrb	r4, [r5, #1]
 8008582:	3502      	adds	r5, #2
 8008584:	2700      	movs	r7, #0
 8008586:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800858a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800858e:	fbbe f9f3 	udiv	r9, lr, r3
 8008592:	4638      	mov	r0, r7
 8008594:	fb03 ea19 	mls	sl, r3, r9, lr
 8008598:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800859c:	f1bc 0f09 	cmp.w	ip, #9
 80085a0:	d814      	bhi.n	80085cc <_strtol_l.constprop.0+0x9c>
 80085a2:	4664      	mov	r4, ip
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	dd22      	ble.n	80085ee <_strtol_l.constprop.0+0xbe>
 80085a8:	2f00      	cmp	r7, #0
 80085aa:	db1d      	blt.n	80085e8 <_strtol_l.constprop.0+0xb8>
 80085ac:	4581      	cmp	r9, r0
 80085ae:	d31b      	bcc.n	80085e8 <_strtol_l.constprop.0+0xb8>
 80085b0:	d101      	bne.n	80085b6 <_strtol_l.constprop.0+0x86>
 80085b2:	45a2      	cmp	sl, r4
 80085b4:	db18      	blt.n	80085e8 <_strtol_l.constprop.0+0xb8>
 80085b6:	2701      	movs	r7, #1
 80085b8:	fb00 4003 	mla	r0, r0, r3, r4
 80085bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085c0:	e7ea      	b.n	8008598 <_strtol_l.constprop.0+0x68>
 80085c2:	2c2b      	cmp	r4, #43	; 0x2b
 80085c4:	bf04      	itt	eq
 80085c6:	782c      	ldrbeq	r4, [r5, #0]
 80085c8:	1c85      	addeq	r5, r0, #2
 80085ca:	e7cd      	b.n	8008568 <_strtol_l.constprop.0+0x38>
 80085cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80085d0:	f1bc 0f19 	cmp.w	ip, #25
 80085d4:	d801      	bhi.n	80085da <_strtol_l.constprop.0+0xaa>
 80085d6:	3c37      	subs	r4, #55	; 0x37
 80085d8:	e7e4      	b.n	80085a4 <_strtol_l.constprop.0+0x74>
 80085da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80085de:	f1bc 0f19 	cmp.w	ip, #25
 80085e2:	d804      	bhi.n	80085ee <_strtol_l.constprop.0+0xbe>
 80085e4:	3c57      	subs	r4, #87	; 0x57
 80085e6:	e7dd      	b.n	80085a4 <_strtol_l.constprop.0+0x74>
 80085e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80085ec:	e7e6      	b.n	80085bc <_strtol_l.constprop.0+0x8c>
 80085ee:	2f00      	cmp	r7, #0
 80085f0:	da07      	bge.n	8008602 <_strtol_l.constprop.0+0xd2>
 80085f2:	2322      	movs	r3, #34	; 0x22
 80085f4:	4670      	mov	r0, lr
 80085f6:	f8c8 3000 	str.w	r3, [r8]
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	d0a4      	beq.n	8008548 <_strtol_l.constprop.0+0x18>
 80085fe:	1e69      	subs	r1, r5, #1
 8008600:	e005      	b.n	800860e <_strtol_l.constprop.0+0xde>
 8008602:	b106      	cbz	r6, 8008606 <_strtol_l.constprop.0+0xd6>
 8008604:	4240      	negs	r0, r0
 8008606:	2a00      	cmp	r2, #0
 8008608:	d09e      	beq.n	8008548 <_strtol_l.constprop.0+0x18>
 800860a:	2f00      	cmp	r7, #0
 800860c:	d1f7      	bne.n	80085fe <_strtol_l.constprop.0+0xce>
 800860e:	6011      	str	r1, [r2, #0]
 8008610:	e79a      	b.n	8008548 <_strtol_l.constprop.0+0x18>
 8008612:	2430      	movs	r4, #48	; 0x30
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1b5      	bne.n	8008584 <_strtol_l.constprop.0+0x54>
 8008618:	2308      	movs	r3, #8
 800861a:	e7b3      	b.n	8008584 <_strtol_l.constprop.0+0x54>
 800861c:	2c30      	cmp	r4, #48	; 0x30
 800861e:	d0a9      	beq.n	8008574 <_strtol_l.constprop.0+0x44>
 8008620:	230a      	movs	r3, #10
 8008622:	e7af      	b.n	8008584 <_strtol_l.constprop.0+0x54>
 8008624:	0800b259 	.word	0x0800b259

08008628 <strtol>:
 8008628:	4613      	mov	r3, r2
 800862a:	460a      	mov	r2, r1
 800862c:	4601      	mov	r1, r0
 800862e:	4802      	ldr	r0, [pc, #8]	; (8008638 <strtol+0x10>)
 8008630:	6800      	ldr	r0, [r0, #0]
 8008632:	f7ff bf7d 	b.w	8008530 <_strtol_l.constprop.0>
 8008636:	bf00      	nop
 8008638:	200000b8 	.word	0x200000b8

0800863c <quorem>:
 800863c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	6903      	ldr	r3, [r0, #16]
 8008642:	690c      	ldr	r4, [r1, #16]
 8008644:	4607      	mov	r7, r0
 8008646:	42a3      	cmp	r3, r4
 8008648:	f2c0 8082 	blt.w	8008750 <quorem+0x114>
 800864c:	3c01      	subs	r4, #1
 800864e:	f100 0514 	add.w	r5, r0, #20
 8008652:	f101 0814 	add.w	r8, r1, #20
 8008656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800865a:	9301      	str	r3, [sp, #4]
 800865c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008664:	3301      	adds	r3, #1
 8008666:	429a      	cmp	r2, r3
 8008668:	fbb2 f6f3 	udiv	r6, r2, r3
 800866c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008674:	d331      	bcc.n	80086da <quorem+0x9e>
 8008676:	f04f 0e00 	mov.w	lr, #0
 800867a:	4640      	mov	r0, r8
 800867c:	46ac      	mov	ip, r5
 800867e:	46f2      	mov	sl, lr
 8008680:	f850 2b04 	ldr.w	r2, [r0], #4
 8008684:	b293      	uxth	r3, r2
 8008686:	fb06 e303 	mla	r3, r6, r3, lr
 800868a:	0c12      	lsrs	r2, r2, #16
 800868c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008690:	b29b      	uxth	r3, r3
 8008692:	fb06 e202 	mla	r2, r6, r2, lr
 8008696:	ebaa 0303 	sub.w	r3, sl, r3
 800869a:	f8dc a000 	ldr.w	sl, [ip]
 800869e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086a2:	fa1f fa8a 	uxth.w	sl, sl
 80086a6:	4453      	add	r3, sl
 80086a8:	f8dc a000 	ldr.w	sl, [ip]
 80086ac:	b292      	uxth	r2, r2
 80086ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086bc:	4581      	cmp	r9, r0
 80086be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086c2:	f84c 3b04 	str.w	r3, [ip], #4
 80086c6:	d2db      	bcs.n	8008680 <quorem+0x44>
 80086c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80086cc:	b92b      	cbnz	r3, 80086da <quorem+0x9e>
 80086ce:	9b01      	ldr	r3, [sp, #4]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	429d      	cmp	r5, r3
 80086d4:	461a      	mov	r2, r3
 80086d6:	d32f      	bcc.n	8008738 <quorem+0xfc>
 80086d8:	613c      	str	r4, [r7, #16]
 80086da:	4638      	mov	r0, r7
 80086dc:	f001 f8d0 	bl	8009880 <__mcmp>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	db25      	blt.n	8008730 <quorem+0xf4>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f04f 0c00 	mov.w	ip, #0
 80086ea:	3601      	adds	r6, #1
 80086ec:	f858 1b04 	ldr.w	r1, [r8], #4
 80086f0:	f8d0 e000 	ldr.w	lr, [r0]
 80086f4:	b28b      	uxth	r3, r1
 80086f6:	ebac 0303 	sub.w	r3, ip, r3
 80086fa:	fa1f f28e 	uxth.w	r2, lr
 80086fe:	4413      	add	r3, r2
 8008700:	0c0a      	lsrs	r2, r1, #16
 8008702:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008706:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800870a:	b29b      	uxth	r3, r3
 800870c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008710:	45c1      	cmp	r9, r8
 8008712:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008716:	f840 3b04 	str.w	r3, [r0], #4
 800871a:	d2e7      	bcs.n	80086ec <quorem+0xb0>
 800871c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008720:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008724:	b922      	cbnz	r2, 8008730 <quorem+0xf4>
 8008726:	3b04      	subs	r3, #4
 8008728:	429d      	cmp	r5, r3
 800872a:	461a      	mov	r2, r3
 800872c:	d30a      	bcc.n	8008744 <quorem+0x108>
 800872e:	613c      	str	r4, [r7, #16]
 8008730:	4630      	mov	r0, r6
 8008732:	b003      	add	sp, #12
 8008734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	3b04      	subs	r3, #4
 800873c:	2a00      	cmp	r2, #0
 800873e:	d1cb      	bne.n	80086d8 <quorem+0x9c>
 8008740:	3c01      	subs	r4, #1
 8008742:	e7c6      	b.n	80086d2 <quorem+0x96>
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	3b04      	subs	r3, #4
 8008748:	2a00      	cmp	r2, #0
 800874a:	d1f0      	bne.n	800872e <quorem+0xf2>
 800874c:	3c01      	subs	r4, #1
 800874e:	e7eb      	b.n	8008728 <quorem+0xec>
 8008750:	2000      	movs	r0, #0
 8008752:	e7ee      	b.n	8008732 <quorem+0xf6>
 8008754:	0000      	movs	r0, r0
	...

08008758 <_dtoa_r>:
 8008758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4616      	mov	r6, r2
 800875e:	461f      	mov	r7, r3
 8008760:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008762:	b099      	sub	sp, #100	; 0x64
 8008764:	4605      	mov	r5, r0
 8008766:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800876a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800876e:	b974      	cbnz	r4, 800878e <_dtoa_r+0x36>
 8008770:	2010      	movs	r0, #16
 8008772:	f000 fde3 	bl	800933c <malloc>
 8008776:	4602      	mov	r2, r0
 8008778:	6268      	str	r0, [r5, #36]	; 0x24
 800877a:	b920      	cbnz	r0, 8008786 <_dtoa_r+0x2e>
 800877c:	21ea      	movs	r1, #234	; 0xea
 800877e:	4ba8      	ldr	r3, [pc, #672]	; (8008a20 <_dtoa_r+0x2c8>)
 8008780:	48a8      	ldr	r0, [pc, #672]	; (8008a24 <_dtoa_r+0x2cc>)
 8008782:	f001 fbdd 	bl	8009f40 <__assert_func>
 8008786:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800878a:	6004      	str	r4, [r0, #0]
 800878c:	60c4      	str	r4, [r0, #12]
 800878e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008790:	6819      	ldr	r1, [r3, #0]
 8008792:	b151      	cbz	r1, 80087aa <_dtoa_r+0x52>
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	2301      	movs	r3, #1
 8008798:	4093      	lsls	r3, r2
 800879a:	604a      	str	r2, [r1, #4]
 800879c:	608b      	str	r3, [r1, #8]
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 fe30 	bl	8009404 <_Bfree>
 80087a4:	2200      	movs	r2, #0
 80087a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	1e3b      	subs	r3, r7, #0
 80087ac:	bfaf      	iteee	ge
 80087ae:	2300      	movge	r3, #0
 80087b0:	2201      	movlt	r2, #1
 80087b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087b6:	9305      	strlt	r3, [sp, #20]
 80087b8:	bfa8      	it	ge
 80087ba:	f8c8 3000 	strge.w	r3, [r8]
 80087be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80087c2:	4b99      	ldr	r3, [pc, #612]	; (8008a28 <_dtoa_r+0x2d0>)
 80087c4:	bfb8      	it	lt
 80087c6:	f8c8 2000 	strlt.w	r2, [r8]
 80087ca:	ea33 0309 	bics.w	r3, r3, r9
 80087ce:	d119      	bne.n	8008804 <_dtoa_r+0xac>
 80087d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087dc:	4333      	orrs	r3, r6
 80087de:	f000 857f 	beq.w	80092e0 <_dtoa_r+0xb88>
 80087e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087e4:	b953      	cbnz	r3, 80087fc <_dtoa_r+0xa4>
 80087e6:	4b91      	ldr	r3, [pc, #580]	; (8008a2c <_dtoa_r+0x2d4>)
 80087e8:	e022      	b.n	8008830 <_dtoa_r+0xd8>
 80087ea:	4b91      	ldr	r3, [pc, #580]	; (8008a30 <_dtoa_r+0x2d8>)
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	3308      	adds	r3, #8
 80087f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	9803      	ldr	r0, [sp, #12]
 80087f6:	b019      	add	sp, #100	; 0x64
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fc:	4b8b      	ldr	r3, [pc, #556]	; (8008a2c <_dtoa_r+0x2d4>)
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	3303      	adds	r3, #3
 8008802:	e7f5      	b.n	80087f0 <_dtoa_r+0x98>
 8008804:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008808:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800880c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008810:	2200      	movs	r2, #0
 8008812:	2300      	movs	r3, #0
 8008814:	f7f8 f934 	bl	8000a80 <__aeabi_dcmpeq>
 8008818:	4680      	mov	r8, r0
 800881a:	b158      	cbz	r0, 8008834 <_dtoa_r+0xdc>
 800881c:	2301      	movs	r3, #1
 800881e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8558 	beq.w	80092da <_dtoa_r+0xb82>
 800882a:	4882      	ldr	r0, [pc, #520]	; (8008a34 <_dtoa_r+0x2dc>)
 800882c:	6018      	str	r0, [r3, #0]
 800882e:	1e43      	subs	r3, r0, #1
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	e7df      	b.n	80087f4 <_dtoa_r+0x9c>
 8008834:	ab16      	add	r3, sp, #88	; 0x58
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	ab17      	add	r3, sp, #92	; 0x5c
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4628      	mov	r0, r5
 800883e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008842:	f001 f8c5 	bl	80099d0 <__d2b>
 8008846:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800884a:	4683      	mov	fp, r0
 800884c:	2c00      	cmp	r4, #0
 800884e:	d07f      	beq.n	8008950 <_dtoa_r+0x1f8>
 8008850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008856:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800885a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800885e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008862:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008866:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800886a:	2200      	movs	r2, #0
 800886c:	4b72      	ldr	r3, [pc, #456]	; (8008a38 <_dtoa_r+0x2e0>)
 800886e:	f7f7 fce7 	bl	8000240 <__aeabi_dsub>
 8008872:	a365      	add	r3, pc, #404	; (adr r3, 8008a08 <_dtoa_r+0x2b0>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fe9a 	bl	80005b0 <__aeabi_dmul>
 800887c:	a364      	add	r3, pc, #400	; (adr r3, 8008a10 <_dtoa_r+0x2b8>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 fcdf 	bl	8000244 <__adddf3>
 8008886:	4606      	mov	r6, r0
 8008888:	4620      	mov	r0, r4
 800888a:	460f      	mov	r7, r1
 800888c:	f7f7 fe26 	bl	80004dc <__aeabi_i2d>
 8008890:	a361      	add	r3, pc, #388	; (adr r3, 8008a18 <_dtoa_r+0x2c0>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	f7f7 fe8b 	bl	80005b0 <__aeabi_dmul>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f7 fccf 	bl	8000244 <__adddf3>
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	f7f8 f931 	bl	8000b10 <__aeabi_d2iz>
 80088ae:	2200      	movs	r2, #0
 80088b0:	4682      	mov	sl, r0
 80088b2:	2300      	movs	r3, #0
 80088b4:	4630      	mov	r0, r6
 80088b6:	4639      	mov	r1, r7
 80088b8:	f7f8 f8ec 	bl	8000a94 <__aeabi_dcmplt>
 80088bc:	b148      	cbz	r0, 80088d2 <_dtoa_r+0x17a>
 80088be:	4650      	mov	r0, sl
 80088c0:	f7f7 fe0c 	bl	80004dc <__aeabi_i2d>
 80088c4:	4632      	mov	r2, r6
 80088c6:	463b      	mov	r3, r7
 80088c8:	f7f8 f8da 	bl	8000a80 <__aeabi_dcmpeq>
 80088cc:	b908      	cbnz	r0, 80088d2 <_dtoa_r+0x17a>
 80088ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80088d2:	f1ba 0f16 	cmp.w	sl, #22
 80088d6:	d858      	bhi.n	800898a <_dtoa_r+0x232>
 80088d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088dc:	4b57      	ldr	r3, [pc, #348]	; (8008a3c <_dtoa_r+0x2e4>)
 80088de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f7f8 f8d5 	bl	8000a94 <__aeabi_dcmplt>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d04f      	beq.n	800898e <_dtoa_r+0x236>
 80088ee:	2300      	movs	r3, #0
 80088f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80088f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088f8:	1b1c      	subs	r4, r3, r4
 80088fa:	1e63      	subs	r3, r4, #1
 80088fc:	9309      	str	r3, [sp, #36]	; 0x24
 80088fe:	bf49      	itett	mi
 8008900:	f1c4 0301 	rsbmi	r3, r4, #1
 8008904:	2300      	movpl	r3, #0
 8008906:	9306      	strmi	r3, [sp, #24]
 8008908:	2300      	movmi	r3, #0
 800890a:	bf54      	ite	pl
 800890c:	9306      	strpl	r3, [sp, #24]
 800890e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	db3d      	blt.n	8008992 <_dtoa_r+0x23a>
 8008916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008918:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800891c:	4453      	add	r3, sl
 800891e:	9309      	str	r3, [sp, #36]	; 0x24
 8008920:	2300      	movs	r3, #0
 8008922:	930a      	str	r3, [sp, #40]	; 0x28
 8008924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008926:	2b09      	cmp	r3, #9
 8008928:	f200 808c 	bhi.w	8008a44 <_dtoa_r+0x2ec>
 800892c:	2b05      	cmp	r3, #5
 800892e:	bfc4      	itt	gt
 8008930:	3b04      	subgt	r3, #4
 8008932:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008936:	bfc8      	it	gt
 8008938:	2400      	movgt	r4, #0
 800893a:	f1a3 0302 	sub.w	r3, r3, #2
 800893e:	bfd8      	it	le
 8008940:	2401      	movle	r4, #1
 8008942:	2b03      	cmp	r3, #3
 8008944:	f200 808a 	bhi.w	8008a5c <_dtoa_r+0x304>
 8008948:	e8df f003 	tbb	[pc, r3]
 800894c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008950:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008954:	441c      	add	r4, r3
 8008956:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800895a:	2b20      	cmp	r3, #32
 800895c:	bfc3      	ittte	gt
 800895e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008962:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008966:	fa09 f303 	lslgt.w	r3, r9, r3
 800896a:	f1c3 0320 	rsble	r3, r3, #32
 800896e:	bfc6      	itte	gt
 8008970:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008974:	4318      	orrgt	r0, r3
 8008976:	fa06 f003 	lslle.w	r0, r6, r3
 800897a:	f7f7 fd9f 	bl	80004bc <__aeabi_ui2d>
 800897e:	2301      	movs	r3, #1
 8008980:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008984:	3c01      	subs	r4, #1
 8008986:	9313      	str	r3, [sp, #76]	; 0x4c
 8008988:	e76f      	b.n	800886a <_dtoa_r+0x112>
 800898a:	2301      	movs	r3, #1
 800898c:	e7b2      	b.n	80088f4 <_dtoa_r+0x19c>
 800898e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008990:	e7b1      	b.n	80088f6 <_dtoa_r+0x19e>
 8008992:	9b06      	ldr	r3, [sp, #24]
 8008994:	eba3 030a 	sub.w	r3, r3, sl
 8008998:	9306      	str	r3, [sp, #24]
 800899a:	f1ca 0300 	rsb	r3, sl, #0
 800899e:	930a      	str	r3, [sp, #40]	; 0x28
 80089a0:	2300      	movs	r3, #0
 80089a2:	930e      	str	r3, [sp, #56]	; 0x38
 80089a4:	e7be      	b.n	8008924 <_dtoa_r+0x1cc>
 80089a6:	2300      	movs	r3, #0
 80089a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc58      	bgt.n	8008a62 <_dtoa_r+0x30a>
 80089b0:	f04f 0901 	mov.w	r9, #1
 80089b4:	464b      	mov	r3, r9
 80089b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80089ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80089be:	2200      	movs	r2, #0
 80089c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80089c2:	6042      	str	r2, [r0, #4]
 80089c4:	2204      	movs	r2, #4
 80089c6:	f102 0614 	add.w	r6, r2, #20
 80089ca:	429e      	cmp	r6, r3
 80089cc:	6841      	ldr	r1, [r0, #4]
 80089ce:	d94e      	bls.n	8008a6e <_dtoa_r+0x316>
 80089d0:	4628      	mov	r0, r5
 80089d2:	f000 fcd7 	bl	8009384 <_Balloc>
 80089d6:	9003      	str	r0, [sp, #12]
 80089d8:	2800      	cmp	r0, #0
 80089da:	d14c      	bne.n	8008a76 <_dtoa_r+0x31e>
 80089dc:	4602      	mov	r2, r0
 80089de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089e2:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <_dtoa_r+0x2e8>)
 80089e4:	e6cc      	b.n	8008780 <_dtoa_r+0x28>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e7de      	b.n	80089a8 <_dtoa_r+0x250>
 80089ea:	2300      	movs	r3, #0
 80089ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089f0:	eb0a 0903 	add.w	r9, sl, r3
 80089f4:	f109 0301 	add.w	r3, r9, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	9308      	str	r3, [sp, #32]
 80089fc:	bfb8      	it	lt
 80089fe:	2301      	movlt	r3, #1
 8008a00:	e7dd      	b.n	80089be <_dtoa_r+0x266>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e7f2      	b.n	80089ec <_dtoa_r+0x294>
 8008a06:	bf00      	nop
 8008a08:	636f4361 	.word	0x636f4361
 8008a0c:	3fd287a7 	.word	0x3fd287a7
 8008a10:	8b60c8b3 	.word	0x8b60c8b3
 8008a14:	3fc68a28 	.word	0x3fc68a28
 8008a18:	509f79fb 	.word	0x509f79fb
 8008a1c:	3fd34413 	.word	0x3fd34413
 8008a20:	0800b366 	.word	0x0800b366
 8008a24:	0800b37d 	.word	0x0800b37d
 8008a28:	7ff00000 	.word	0x7ff00000
 8008a2c:	0800b362 	.word	0x0800b362
 8008a30:	0800b359 	.word	0x0800b359
 8008a34:	0800b235 	.word	0x0800b235
 8008a38:	3ff80000 	.word	0x3ff80000
 8008a3c:	0800b470 	.word	0x0800b470
 8008a40:	0800b3d8 	.word	0x0800b3d8
 8008a44:	2401      	movs	r4, #1
 8008a46:	2300      	movs	r3, #0
 8008a48:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a4a:	9322      	str	r3, [sp, #136]	; 0x88
 8008a4c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008a50:	2200      	movs	r2, #0
 8008a52:	2312      	movs	r3, #18
 8008a54:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a58:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a5a:	e7b0      	b.n	80089be <_dtoa_r+0x266>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a60:	e7f4      	b.n	8008a4c <_dtoa_r+0x2f4>
 8008a62:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008a66:	464b      	mov	r3, r9
 8008a68:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a6c:	e7a7      	b.n	80089be <_dtoa_r+0x266>
 8008a6e:	3101      	adds	r1, #1
 8008a70:	6041      	str	r1, [r0, #4]
 8008a72:	0052      	lsls	r2, r2, #1
 8008a74:	e7a7      	b.n	80089c6 <_dtoa_r+0x26e>
 8008a76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a78:	9a03      	ldr	r2, [sp, #12]
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	9b08      	ldr	r3, [sp, #32]
 8008a7e:	2b0e      	cmp	r3, #14
 8008a80:	f200 80a8 	bhi.w	8008bd4 <_dtoa_r+0x47c>
 8008a84:	2c00      	cmp	r4, #0
 8008a86:	f000 80a5 	beq.w	8008bd4 <_dtoa_r+0x47c>
 8008a8a:	f1ba 0f00 	cmp.w	sl, #0
 8008a8e:	dd34      	ble.n	8008afa <_dtoa_r+0x3a2>
 8008a90:	4a9a      	ldr	r2, [pc, #616]	; (8008cfc <_dtoa_r+0x5a4>)
 8008a92:	f00a 030f 	and.w	r3, sl, #15
 8008a96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a9a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008aa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008aa6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008aaa:	d016      	beq.n	8008ada <_dtoa_r+0x382>
 8008aac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ab0:	4b93      	ldr	r3, [pc, #588]	; (8008d00 <_dtoa_r+0x5a8>)
 8008ab2:	2703      	movs	r7, #3
 8008ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ab8:	f7f7 fea4 	bl	8000804 <__aeabi_ddiv>
 8008abc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac0:	f004 040f 	and.w	r4, r4, #15
 8008ac4:	4e8e      	ldr	r6, [pc, #568]	; (8008d00 <_dtoa_r+0x5a8>)
 8008ac6:	b954      	cbnz	r4, 8008ade <_dtoa_r+0x386>
 8008ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ad0:	f7f7 fe98 	bl	8000804 <__aeabi_ddiv>
 8008ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad8:	e029      	b.n	8008b2e <_dtoa_r+0x3d6>
 8008ada:	2702      	movs	r7, #2
 8008adc:	e7f2      	b.n	8008ac4 <_dtoa_r+0x36c>
 8008ade:	07e1      	lsls	r1, r4, #31
 8008ae0:	d508      	bpl.n	8008af4 <_dtoa_r+0x39c>
 8008ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ae6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008aea:	f7f7 fd61 	bl	80005b0 <__aeabi_dmul>
 8008aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008af2:	3701      	adds	r7, #1
 8008af4:	1064      	asrs	r4, r4, #1
 8008af6:	3608      	adds	r6, #8
 8008af8:	e7e5      	b.n	8008ac6 <_dtoa_r+0x36e>
 8008afa:	f000 80a5 	beq.w	8008c48 <_dtoa_r+0x4f0>
 8008afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b02:	f1ca 0400 	rsb	r4, sl, #0
 8008b06:	4b7d      	ldr	r3, [pc, #500]	; (8008cfc <_dtoa_r+0x5a4>)
 8008b08:	f004 020f 	and.w	r2, r4, #15
 8008b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	f7f7 fd4c 	bl	80005b0 <__aeabi_dmul>
 8008b18:	2702      	movs	r7, #2
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b20:	4e77      	ldr	r6, [pc, #476]	; (8008d00 <_dtoa_r+0x5a8>)
 8008b22:	1124      	asrs	r4, r4, #4
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	f040 8084 	bne.w	8008c32 <_dtoa_r+0x4da>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1d2      	bne.n	8008ad4 <_dtoa_r+0x37c>
 8008b2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 808b 	beq.w	8008c4c <_dtoa_r+0x4f4>
 8008b36:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b42:	2200      	movs	r2, #0
 8008b44:	4b6f      	ldr	r3, [pc, #444]	; (8008d04 <_dtoa_r+0x5ac>)
 8008b46:	f7f7 ffa5 	bl	8000a94 <__aeabi_dcmplt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d07e      	beq.n	8008c4c <_dtoa_r+0x4f4>
 8008b4e:	9b08      	ldr	r3, [sp, #32]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d07b      	beq.n	8008c4c <_dtoa_r+0x4f4>
 8008b54:	f1b9 0f00 	cmp.w	r9, #0
 8008b58:	dd38      	ble.n	8008bcc <_dtoa_r+0x474>
 8008b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b5e:	2200      	movs	r2, #0
 8008b60:	4b69      	ldr	r3, [pc, #420]	; (8008d08 <_dtoa_r+0x5b0>)
 8008b62:	f7f7 fd25 	bl	80005b0 <__aeabi_dmul>
 8008b66:	464c      	mov	r4, r9
 8008b68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b6c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8008b70:	3701      	adds	r7, #1
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7f7 fcb2 	bl	80004dc <__aeabi_i2d>
 8008b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b7c:	f7f7 fd18 	bl	80005b0 <__aeabi_dmul>
 8008b80:	2200      	movs	r2, #0
 8008b82:	4b62      	ldr	r3, [pc, #392]	; (8008d0c <_dtoa_r+0x5b4>)
 8008b84:	f7f7 fb5e 	bl	8000244 <__adddf3>
 8008b88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b90:	9611      	str	r6, [sp, #68]	; 0x44
 8008b92:	2c00      	cmp	r4, #0
 8008b94:	d15d      	bne.n	8008c52 <_dtoa_r+0x4fa>
 8008b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4b5c      	ldr	r3, [pc, #368]	; (8008d10 <_dtoa_r+0x5b8>)
 8008b9e:	f7f7 fb4f 	bl	8000240 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008baa:	4633      	mov	r3, r6
 8008bac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bae:	f7f7 ff8f 	bl	8000ad0 <__aeabi_dcmpgt>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	f040 829c 	bne.w	80090f0 <_dtoa_r+0x998>
 8008bb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bbe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bc2:	f7f7 ff67 	bl	8000a94 <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f040 8290 	bne.w	80090ec <_dtoa_r+0x994>
 8008bcc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008bd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008bd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f2c0 8152 	blt.w	8008e80 <_dtoa_r+0x728>
 8008bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8008be0:	f300 814e 	bgt.w	8008e80 <_dtoa_r+0x728>
 8008be4:	4b45      	ldr	r3, [pc, #276]	; (8008cfc <_dtoa_r+0x5a4>)
 8008be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008bf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f280 80db 	bge.w	8008db0 <_dtoa_r+0x658>
 8008bfa:	9b08      	ldr	r3, [sp, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f300 80d7 	bgt.w	8008db0 <_dtoa_r+0x658>
 8008c02:	f040 8272 	bne.w	80090ea <_dtoa_r+0x992>
 8008c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	4b40      	ldr	r3, [pc, #256]	; (8008d10 <_dtoa_r+0x5b8>)
 8008c0e:	f7f7 fccf 	bl	80005b0 <__aeabi_dmul>
 8008c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c16:	f7f7 ff51 	bl	8000abc <__aeabi_dcmpge>
 8008c1a:	9c08      	ldr	r4, [sp, #32]
 8008c1c:	4626      	mov	r6, r4
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f040 8248 	bne.w	80090b4 <_dtoa_r+0x95c>
 8008c24:	2331      	movs	r3, #49	; 0x31
 8008c26:	9f03      	ldr	r7, [sp, #12]
 8008c28:	f10a 0a01 	add.w	sl, sl, #1
 8008c2c:	f807 3b01 	strb.w	r3, [r7], #1
 8008c30:	e244      	b.n	80090bc <_dtoa_r+0x964>
 8008c32:	07e2      	lsls	r2, r4, #31
 8008c34:	d505      	bpl.n	8008c42 <_dtoa_r+0x4ea>
 8008c36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c3a:	f7f7 fcb9 	bl	80005b0 <__aeabi_dmul>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	3701      	adds	r7, #1
 8008c42:	1064      	asrs	r4, r4, #1
 8008c44:	3608      	adds	r6, #8
 8008c46:	e76d      	b.n	8008b24 <_dtoa_r+0x3cc>
 8008c48:	2702      	movs	r7, #2
 8008c4a:	e770      	b.n	8008b2e <_dtoa_r+0x3d6>
 8008c4c:	46d0      	mov	r8, sl
 8008c4e:	9c08      	ldr	r4, [sp, #32]
 8008c50:	e78f      	b.n	8008b72 <_dtoa_r+0x41a>
 8008c52:	9903      	ldr	r1, [sp, #12]
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <_dtoa_r+0x5a4>)
 8008c56:	4421      	add	r1, r4
 8008c58:	9112      	str	r1, [sp, #72]	; 0x48
 8008c5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c60:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c64:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c68:	2900      	cmp	r1, #0
 8008c6a:	d055      	beq.n	8008d18 <_dtoa_r+0x5c0>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	4929      	ldr	r1, [pc, #164]	; (8008d14 <_dtoa_r+0x5bc>)
 8008c70:	f7f7 fdc8 	bl	8000804 <__aeabi_ddiv>
 8008c74:	463b      	mov	r3, r7
 8008c76:	4632      	mov	r2, r6
 8008c78:	f7f7 fae2 	bl	8000240 <__aeabi_dsub>
 8008c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c80:	9f03      	ldr	r7, [sp, #12]
 8008c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c86:	f7f7 ff43 	bl	8000b10 <__aeabi_d2iz>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	f7f7 fc26 	bl	80004dc <__aeabi_i2d>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c98:	f7f7 fad2 	bl	8000240 <__aeabi_dsub>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	3430      	adds	r4, #48	; 0x30
 8008ca2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008caa:	f807 4b01 	strb.w	r4, [r7], #1
 8008cae:	f7f7 fef1 	bl	8000a94 <__aeabi_dcmplt>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d174      	bne.n	8008da0 <_dtoa_r+0x648>
 8008cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cba:	2000      	movs	r0, #0
 8008cbc:	4911      	ldr	r1, [pc, #68]	; (8008d04 <_dtoa_r+0x5ac>)
 8008cbe:	f7f7 fabf 	bl	8000240 <__aeabi_dsub>
 8008cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cc6:	f7f7 fee5 	bl	8000a94 <__aeabi_dcmplt>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f040 80b7 	bne.w	8008e3e <_dtoa_r+0x6e6>
 8008cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008cd2:	429f      	cmp	r7, r3
 8008cd4:	f43f af7a 	beq.w	8008bcc <_dtoa_r+0x474>
 8008cd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <_dtoa_r+0x5b0>)
 8008ce0:	f7f7 fc66 	bl	80005b0 <__aeabi_dmul>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cee:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <_dtoa_r+0x5b0>)
 8008cf0:	f7f7 fc5e 	bl	80005b0 <__aeabi_dmul>
 8008cf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cf8:	e7c3      	b.n	8008c82 <_dtoa_r+0x52a>
 8008cfa:	bf00      	nop
 8008cfc:	0800b470 	.word	0x0800b470
 8008d00:	0800b448 	.word	0x0800b448
 8008d04:	3ff00000 	.word	0x3ff00000
 8008d08:	40240000 	.word	0x40240000
 8008d0c:	401c0000 	.word	0x401c0000
 8008d10:	40140000 	.word	0x40140000
 8008d14:	3fe00000 	.word	0x3fe00000
 8008d18:	4630      	mov	r0, r6
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 fc48 	bl	80005b0 <__aeabi_dmul>
 8008d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d22:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d26:	9c03      	ldr	r4, [sp, #12]
 8008d28:	9314      	str	r3, [sp, #80]	; 0x50
 8008d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d2e:	f7f7 feef 	bl	8000b10 <__aeabi_d2iz>
 8008d32:	9015      	str	r0, [sp, #84]	; 0x54
 8008d34:	f7f7 fbd2 	bl	80004dc <__aeabi_i2d>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d40:	f7f7 fa7e 	bl	8000240 <__aeabi_dsub>
 8008d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d46:	4606      	mov	r6, r0
 8008d48:	3330      	adds	r3, #48	; 0x30
 8008d4a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d50:	460f      	mov	r7, r1
 8008d52:	429c      	cmp	r4, r3
 8008d54:	f04f 0200 	mov.w	r2, #0
 8008d58:	d124      	bne.n	8008da4 <_dtoa_r+0x64c>
 8008d5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d5e:	4bb0      	ldr	r3, [pc, #704]	; (8009020 <_dtoa_r+0x8c8>)
 8008d60:	f7f7 fa70 	bl	8000244 <__adddf3>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 feb0 	bl	8000ad0 <__aeabi_dcmpgt>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	d163      	bne.n	8008e3c <_dtoa_r+0x6e4>
 8008d74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d78:	2000      	movs	r0, #0
 8008d7a:	49a9      	ldr	r1, [pc, #676]	; (8009020 <_dtoa_r+0x8c8>)
 8008d7c:	f7f7 fa60 	bl	8000240 <__aeabi_dsub>
 8008d80:	4602      	mov	r2, r0
 8008d82:	460b      	mov	r3, r1
 8008d84:	4630      	mov	r0, r6
 8008d86:	4639      	mov	r1, r7
 8008d88:	f7f7 fe84 	bl	8000a94 <__aeabi_dcmplt>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f43f af1d 	beq.w	8008bcc <_dtoa_r+0x474>
 8008d92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008d94:	1e7b      	subs	r3, r7, #1
 8008d96:	9314      	str	r3, [sp, #80]	; 0x50
 8008d98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d0f8      	beq.n	8008d92 <_dtoa_r+0x63a>
 8008da0:	46c2      	mov	sl, r8
 8008da2:	e03b      	b.n	8008e1c <_dtoa_r+0x6c4>
 8008da4:	4b9f      	ldr	r3, [pc, #636]	; (8009024 <_dtoa_r+0x8cc>)
 8008da6:	f7f7 fc03 	bl	80005b0 <__aeabi_dmul>
 8008daa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dae:	e7bc      	b.n	8008d2a <_dtoa_r+0x5d2>
 8008db0:	9f03      	ldr	r7, [sp, #12]
 8008db2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fd21 	bl	8000804 <__aeabi_ddiv>
 8008dc2:	f7f7 fea5 	bl	8000b10 <__aeabi_d2iz>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	f7f7 fb88 	bl	80004dc <__aeabi_i2d>
 8008dcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dd0:	f7f7 fbee 	bl	80005b0 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4649      	mov	r1, r9
 8008ddc:	f7f7 fa30 	bl	8000240 <__aeabi_dsub>
 8008de0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008de4:	f807 6b01 	strb.w	r6, [r7], #1
 8008de8:	9e03      	ldr	r6, [sp, #12]
 8008dea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008dee:	1bbe      	subs	r6, r7, r6
 8008df0:	45b4      	cmp	ip, r6
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	d136      	bne.n	8008e66 <_dtoa_r+0x70e>
 8008df8:	f7f7 fa24 	bl	8000244 <__adddf3>
 8008dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e00:	4680      	mov	r8, r0
 8008e02:	4689      	mov	r9, r1
 8008e04:	f7f7 fe64 	bl	8000ad0 <__aeabi_dcmpgt>
 8008e08:	bb58      	cbnz	r0, 8008e62 <_dtoa_r+0x70a>
 8008e0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e0e:	4640      	mov	r0, r8
 8008e10:	4649      	mov	r1, r9
 8008e12:	f7f7 fe35 	bl	8000a80 <__aeabi_dcmpeq>
 8008e16:	b108      	cbz	r0, 8008e1c <_dtoa_r+0x6c4>
 8008e18:	07e1      	lsls	r1, r4, #31
 8008e1a:	d422      	bmi.n	8008e62 <_dtoa_r+0x70a>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	4659      	mov	r1, fp
 8008e20:	f000 faf0 	bl	8009404 <_Bfree>
 8008e24:	2300      	movs	r3, #0
 8008e26:	703b      	strb	r3, [r7, #0]
 8008e28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e2a:	f10a 0001 	add.w	r0, sl, #1
 8008e2e:	6018      	str	r0, [r3, #0]
 8008e30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f43f acde 	beq.w	80087f4 <_dtoa_r+0x9c>
 8008e38:	601f      	str	r7, [r3, #0]
 8008e3a:	e4db      	b.n	80087f4 <_dtoa_r+0x9c>
 8008e3c:	4627      	mov	r7, r4
 8008e3e:	463b      	mov	r3, r7
 8008e40:	461f      	mov	r7, r3
 8008e42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e46:	2a39      	cmp	r2, #57	; 0x39
 8008e48:	d107      	bne.n	8008e5a <_dtoa_r+0x702>
 8008e4a:	9a03      	ldr	r2, [sp, #12]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d1f7      	bne.n	8008e40 <_dtoa_r+0x6e8>
 8008e50:	2230      	movs	r2, #48	; 0x30
 8008e52:	9903      	ldr	r1, [sp, #12]
 8008e54:	f108 0801 	add.w	r8, r8, #1
 8008e58:	700a      	strb	r2, [r1, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	3201      	adds	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e79e      	b.n	8008da0 <_dtoa_r+0x648>
 8008e62:	46d0      	mov	r8, sl
 8008e64:	e7eb      	b.n	8008e3e <_dtoa_r+0x6e6>
 8008e66:	2200      	movs	r2, #0
 8008e68:	4b6e      	ldr	r3, [pc, #440]	; (8009024 <_dtoa_r+0x8cc>)
 8008e6a:	f7f7 fba1 	bl	80005b0 <__aeabi_dmul>
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2300      	movs	r3, #0
 8008e72:	4680      	mov	r8, r0
 8008e74:	4689      	mov	r9, r1
 8008e76:	f7f7 fe03 	bl	8000a80 <__aeabi_dcmpeq>
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d09b      	beq.n	8008db6 <_dtoa_r+0x65e>
 8008e7e:	e7cd      	b.n	8008e1c <_dtoa_r+0x6c4>
 8008e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	f000 80d0 	beq.w	8009028 <_dtoa_r+0x8d0>
 8008e88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e8a:	2a01      	cmp	r2, #1
 8008e8c:	f300 80ae 	bgt.w	8008fec <_dtoa_r+0x894>
 8008e90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	f000 80a6 	beq.w	8008fe4 <_dtoa_r+0x88c>
 8008e98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008e9e:	9f06      	ldr	r7, [sp, #24]
 8008ea0:	9a06      	ldr	r2, [sp, #24]
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	441a      	add	r2, r3
 8008ea6:	9206      	str	r2, [sp, #24]
 8008ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eaa:	4628      	mov	r0, r5
 8008eac:	441a      	add	r2, r3
 8008eae:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb0:	f000 fb5e 	bl	8009570 <__i2b>
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	dd0c      	ble.n	8008ed4 <_dtoa_r+0x77c>
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dd09      	ble.n	8008ed4 <_dtoa_r+0x77c>
 8008ec0:	42bb      	cmp	r3, r7
 8008ec2:	bfa8      	it	ge
 8008ec4:	463b      	movge	r3, r7
 8008ec6:	9a06      	ldr	r2, [sp, #24]
 8008ec8:	1aff      	subs	r7, r7, r3
 8008eca:	1ad2      	subs	r2, r2, r3
 8008ecc:	9206      	str	r2, [sp, #24]
 8008ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed6:	b1f3      	cbz	r3, 8008f16 <_dtoa_r+0x7be>
 8008ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f000 80a8 	beq.w	8009030 <_dtoa_r+0x8d8>
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	dd10      	ble.n	8008f06 <_dtoa_r+0x7ae>
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fbff 	bl	80096ec <__pow5mult>
 8008eee:	465a      	mov	r2, fp
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f000 fb51 	bl	800959c <__multiply>
 8008efa:	4680      	mov	r8, r0
 8008efc:	4659      	mov	r1, fp
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fa80 	bl	8009404 <_Bfree>
 8008f04:	46c3      	mov	fp, r8
 8008f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f08:	1b1a      	subs	r2, r3, r4
 8008f0a:	d004      	beq.n	8008f16 <_dtoa_r+0x7be>
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 fbec 	bl	80096ec <__pow5mult>
 8008f14:	4683      	mov	fp, r0
 8008f16:	2101      	movs	r1, #1
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 fb29 	bl	8009570 <__i2b>
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f20:	4604      	mov	r4, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f340 8086 	ble.w	8009034 <_dtoa_r+0x8dc>
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 fbdd 	bl	80096ec <__pow5mult>
 8008f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f34:	4604      	mov	r4, r0
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	dd7f      	ble.n	800903a <_dtoa_r+0x8e2>
 8008f3a:	f04f 0800 	mov.w	r8, #0
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f44:	6918      	ldr	r0, [r3, #16]
 8008f46:	f000 fac5 	bl	80094d4 <__hi0bits>
 8008f4a:	f1c0 0020 	rsb	r0, r0, #32
 8008f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f50:	4418      	add	r0, r3
 8008f52:	f010 001f 	ands.w	r0, r0, #31
 8008f56:	f000 8092 	beq.w	800907e <_dtoa_r+0x926>
 8008f5a:	f1c0 0320 	rsb	r3, r0, #32
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	f340 808a 	ble.w	8009078 <_dtoa_r+0x920>
 8008f64:	f1c0 001c 	rsb	r0, r0, #28
 8008f68:	9b06      	ldr	r3, [sp, #24]
 8008f6a:	4407      	add	r7, r0
 8008f6c:	4403      	add	r3, r0
 8008f6e:	9306      	str	r3, [sp, #24]
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	4403      	add	r3, r0
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	9b06      	ldr	r3, [sp, #24]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	dd05      	ble.n	8008f88 <_dtoa_r+0x830>
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 fc0d 	bl	80097a0 <__lshift>
 8008f86:	4683      	mov	fp, r0
 8008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dd05      	ble.n	8008f9a <_dtoa_r+0x842>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	461a      	mov	r2, r3
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 fc04 	bl	80097a0 <__lshift>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d070      	beq.n	8009082 <_dtoa_r+0x92a>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fc6c 	bl	8009880 <__mcmp>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	da6a      	bge.n	8009082 <_dtoa_r+0x92a>
 8008fac:	2300      	movs	r3, #0
 8008fae:	4659      	mov	r1, fp
 8008fb0:	220a      	movs	r2, #10
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 fa48 	bl	8009448 <__multadd>
 8008fb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fba:	4683      	mov	fp, r0
 8008fbc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 8194 	beq.w	80092ee <_dtoa_r+0xb96>
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	2300      	movs	r3, #0
 8008fca:	220a      	movs	r2, #10
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f000 fa3b 	bl	8009448 <__multadd>
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	4606      	mov	r6, r0
 8008fd8:	f300 8093 	bgt.w	8009102 <_dtoa_r+0x9aa>
 8008fdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	dc57      	bgt.n	8009092 <_dtoa_r+0x93a>
 8008fe2:	e08e      	b.n	8009102 <_dtoa_r+0x9aa>
 8008fe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fea:	e757      	b.n	8008e9c <_dtoa_r+0x744>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	1e5c      	subs	r4, r3, #1
 8008ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff2:	42a3      	cmp	r3, r4
 8008ff4:	bfb7      	itett	lt
 8008ff6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ff8:	1b1c      	subge	r4, r3, r4
 8008ffa:	1ae2      	sublt	r2, r4, r3
 8008ffc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ffe:	bfbe      	ittt	lt
 8009000:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009002:	189b      	addlt	r3, r3, r2
 8009004:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009006:	9b08      	ldr	r3, [sp, #32]
 8009008:	bfb8      	it	lt
 800900a:	2400      	movlt	r4, #0
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfbb      	ittet	lt
 8009010:	9b06      	ldrlt	r3, [sp, #24]
 8009012:	9a08      	ldrlt	r2, [sp, #32]
 8009014:	9f06      	ldrge	r7, [sp, #24]
 8009016:	1a9f      	sublt	r7, r3, r2
 8009018:	bfac      	ite	ge
 800901a:	9b08      	ldrge	r3, [sp, #32]
 800901c:	2300      	movlt	r3, #0
 800901e:	e73f      	b.n	8008ea0 <_dtoa_r+0x748>
 8009020:	3fe00000 	.word	0x3fe00000
 8009024:	40240000 	.word	0x40240000
 8009028:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800902a:	9f06      	ldr	r7, [sp, #24]
 800902c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800902e:	e742      	b.n	8008eb6 <_dtoa_r+0x75e>
 8009030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009032:	e76b      	b.n	8008f0c <_dtoa_r+0x7b4>
 8009034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009036:	2b01      	cmp	r3, #1
 8009038:	dc19      	bgt.n	800906e <_dtoa_r+0x916>
 800903a:	9b04      	ldr	r3, [sp, #16]
 800903c:	b9bb      	cbnz	r3, 800906e <_dtoa_r+0x916>
 800903e:	9b05      	ldr	r3, [sp, #20]
 8009040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009044:	b99b      	cbnz	r3, 800906e <_dtoa_r+0x916>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800904c:	0d1b      	lsrs	r3, r3, #20
 800904e:	051b      	lsls	r3, r3, #20
 8009050:	b183      	cbz	r3, 8009074 <_dtoa_r+0x91c>
 8009052:	f04f 0801 	mov.w	r8, #1
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	3301      	adds	r3, #1
 800905a:	9306      	str	r3, [sp, #24]
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	3301      	adds	r3, #1
 8009060:	9309      	str	r3, [sp, #36]	; 0x24
 8009062:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f af6a 	bne.w	8008f3e <_dtoa_r+0x7e6>
 800906a:	2001      	movs	r0, #1
 800906c:	e76f      	b.n	8008f4e <_dtoa_r+0x7f6>
 800906e:	f04f 0800 	mov.w	r8, #0
 8009072:	e7f6      	b.n	8009062 <_dtoa_r+0x90a>
 8009074:	4698      	mov	r8, r3
 8009076:	e7f4      	b.n	8009062 <_dtoa_r+0x90a>
 8009078:	f43f af7d 	beq.w	8008f76 <_dtoa_r+0x81e>
 800907c:	4618      	mov	r0, r3
 800907e:	301c      	adds	r0, #28
 8009080:	e772      	b.n	8008f68 <_dtoa_r+0x810>
 8009082:	9b08      	ldr	r3, [sp, #32]
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc36      	bgt.n	80090f6 <_dtoa_r+0x99e>
 8009088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800908a:	2b02      	cmp	r3, #2
 800908c:	dd33      	ble.n	80090f6 <_dtoa_r+0x99e>
 800908e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009092:	f1b9 0f00 	cmp.w	r9, #0
 8009096:	d10d      	bne.n	80090b4 <_dtoa_r+0x95c>
 8009098:	4621      	mov	r1, r4
 800909a:	464b      	mov	r3, r9
 800909c:	2205      	movs	r2, #5
 800909e:	4628      	mov	r0, r5
 80090a0:	f000 f9d2 	bl	8009448 <__multadd>
 80090a4:	4601      	mov	r1, r0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4658      	mov	r0, fp
 80090aa:	f000 fbe9 	bl	8009880 <__mcmp>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f73f adb8 	bgt.w	8008c24 <_dtoa_r+0x4cc>
 80090b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090b6:	9f03      	ldr	r7, [sp, #12]
 80090b8:	ea6f 0a03 	mvn.w	sl, r3
 80090bc:	f04f 0800 	mov.w	r8, #0
 80090c0:	4621      	mov	r1, r4
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 f99e 	bl	8009404 <_Bfree>
 80090c8:	2e00      	cmp	r6, #0
 80090ca:	f43f aea7 	beq.w	8008e1c <_dtoa_r+0x6c4>
 80090ce:	f1b8 0f00 	cmp.w	r8, #0
 80090d2:	d005      	beq.n	80090e0 <_dtoa_r+0x988>
 80090d4:	45b0      	cmp	r8, r6
 80090d6:	d003      	beq.n	80090e0 <_dtoa_r+0x988>
 80090d8:	4641      	mov	r1, r8
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f992 	bl	8009404 <_Bfree>
 80090e0:	4631      	mov	r1, r6
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 f98e 	bl	8009404 <_Bfree>
 80090e8:	e698      	b.n	8008e1c <_dtoa_r+0x6c4>
 80090ea:	2400      	movs	r4, #0
 80090ec:	4626      	mov	r6, r4
 80090ee:	e7e1      	b.n	80090b4 <_dtoa_r+0x95c>
 80090f0:	46c2      	mov	sl, r8
 80090f2:	4626      	mov	r6, r4
 80090f4:	e596      	b.n	8008c24 <_dtoa_r+0x4cc>
 80090f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f000 80fd 	beq.w	80092fc <_dtoa_r+0xba4>
 8009102:	2f00      	cmp	r7, #0
 8009104:	dd05      	ble.n	8009112 <_dtoa_r+0x9ba>
 8009106:	4631      	mov	r1, r6
 8009108:	463a      	mov	r2, r7
 800910a:	4628      	mov	r0, r5
 800910c:	f000 fb48 	bl	80097a0 <__lshift>
 8009110:	4606      	mov	r6, r0
 8009112:	f1b8 0f00 	cmp.w	r8, #0
 8009116:	d05c      	beq.n	80091d2 <_dtoa_r+0xa7a>
 8009118:	4628      	mov	r0, r5
 800911a:	6871      	ldr	r1, [r6, #4]
 800911c:	f000 f932 	bl	8009384 <_Balloc>
 8009120:	4607      	mov	r7, r0
 8009122:	b928      	cbnz	r0, 8009130 <_dtoa_r+0x9d8>
 8009124:	4602      	mov	r2, r0
 8009126:	f240 21ea 	movw	r1, #746	; 0x2ea
 800912a:	4b7f      	ldr	r3, [pc, #508]	; (8009328 <_dtoa_r+0xbd0>)
 800912c:	f7ff bb28 	b.w	8008780 <_dtoa_r+0x28>
 8009130:	6932      	ldr	r2, [r6, #16]
 8009132:	f106 010c 	add.w	r1, r6, #12
 8009136:	3202      	adds	r2, #2
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	300c      	adds	r0, #12
 800913c:	f000 f914 	bl	8009368 <memcpy>
 8009140:	2201      	movs	r2, #1
 8009142:	4639      	mov	r1, r7
 8009144:	4628      	mov	r0, r5
 8009146:	f000 fb2b 	bl	80097a0 <__lshift>
 800914a:	46b0      	mov	r8, r6
 800914c:	4606      	mov	r6, r0
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	3301      	adds	r3, #1
 8009152:	9308      	str	r3, [sp, #32]
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	444b      	add	r3, r9
 8009158:	930a      	str	r3, [sp, #40]	; 0x28
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	9b08      	ldr	r3, [sp, #32]
 8009164:	4621      	mov	r1, r4
 8009166:	3b01      	subs	r3, #1
 8009168:	4658      	mov	r0, fp
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	f7ff fa66 	bl	800863c <quorem>
 8009170:	4603      	mov	r3, r0
 8009172:	4641      	mov	r1, r8
 8009174:	3330      	adds	r3, #48	; 0x30
 8009176:	9006      	str	r0, [sp, #24]
 8009178:	4658      	mov	r0, fp
 800917a:	930b      	str	r3, [sp, #44]	; 0x2c
 800917c:	f000 fb80 	bl	8009880 <__mcmp>
 8009180:	4632      	mov	r2, r6
 8009182:	4681      	mov	r9, r0
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 fb96 	bl	80098b8 <__mdiff>
 800918c:	68c2      	ldr	r2, [r0, #12]
 800918e:	4607      	mov	r7, r0
 8009190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009192:	bb02      	cbnz	r2, 80091d6 <_dtoa_r+0xa7e>
 8009194:	4601      	mov	r1, r0
 8009196:	4658      	mov	r0, fp
 8009198:	f000 fb72 	bl	8009880 <__mcmp>
 800919c:	4602      	mov	r2, r0
 800919e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a0:	4639      	mov	r1, r7
 80091a2:	4628      	mov	r0, r5
 80091a4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80091a8:	f000 f92c 	bl	8009404 <_Bfree>
 80091ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091b0:	9f08      	ldr	r7, [sp, #32]
 80091b2:	ea43 0102 	orr.w	r1, r3, r2
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	430b      	orrs	r3, r1
 80091ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091bc:	d10d      	bne.n	80091da <_dtoa_r+0xa82>
 80091be:	2b39      	cmp	r3, #57	; 0x39
 80091c0:	d029      	beq.n	8009216 <_dtoa_r+0xabe>
 80091c2:	f1b9 0f00 	cmp.w	r9, #0
 80091c6:	dd01      	ble.n	80091cc <_dtoa_r+0xa74>
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	3331      	adds	r3, #49	; 0x31
 80091cc:	9a04      	ldr	r2, [sp, #16]
 80091ce:	7013      	strb	r3, [r2, #0]
 80091d0:	e776      	b.n	80090c0 <_dtoa_r+0x968>
 80091d2:	4630      	mov	r0, r6
 80091d4:	e7b9      	b.n	800914a <_dtoa_r+0x9f2>
 80091d6:	2201      	movs	r2, #1
 80091d8:	e7e2      	b.n	80091a0 <_dtoa_r+0xa48>
 80091da:	f1b9 0f00 	cmp.w	r9, #0
 80091de:	db06      	blt.n	80091ee <_dtoa_r+0xa96>
 80091e0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80091e2:	ea41 0909 	orr.w	r9, r1, r9
 80091e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091e8:	ea59 0101 	orrs.w	r1, r9, r1
 80091ec:	d120      	bne.n	8009230 <_dtoa_r+0xad8>
 80091ee:	2a00      	cmp	r2, #0
 80091f0:	ddec      	ble.n	80091cc <_dtoa_r+0xa74>
 80091f2:	4659      	mov	r1, fp
 80091f4:	2201      	movs	r2, #1
 80091f6:	4628      	mov	r0, r5
 80091f8:	9308      	str	r3, [sp, #32]
 80091fa:	f000 fad1 	bl	80097a0 <__lshift>
 80091fe:	4621      	mov	r1, r4
 8009200:	4683      	mov	fp, r0
 8009202:	f000 fb3d 	bl	8009880 <__mcmp>
 8009206:	2800      	cmp	r0, #0
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	dc02      	bgt.n	8009212 <_dtoa_r+0xaba>
 800920c:	d1de      	bne.n	80091cc <_dtoa_r+0xa74>
 800920e:	07da      	lsls	r2, r3, #31
 8009210:	d5dc      	bpl.n	80091cc <_dtoa_r+0xa74>
 8009212:	2b39      	cmp	r3, #57	; 0x39
 8009214:	d1d8      	bne.n	80091c8 <_dtoa_r+0xa70>
 8009216:	2339      	movs	r3, #57	; 0x39
 8009218:	9a04      	ldr	r2, [sp, #16]
 800921a:	7013      	strb	r3, [r2, #0]
 800921c:	463b      	mov	r3, r7
 800921e:	461f      	mov	r7, r3
 8009220:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009224:	3b01      	subs	r3, #1
 8009226:	2a39      	cmp	r2, #57	; 0x39
 8009228:	d050      	beq.n	80092cc <_dtoa_r+0xb74>
 800922a:	3201      	adds	r2, #1
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	e747      	b.n	80090c0 <_dtoa_r+0x968>
 8009230:	2a00      	cmp	r2, #0
 8009232:	dd03      	ble.n	800923c <_dtoa_r+0xae4>
 8009234:	2b39      	cmp	r3, #57	; 0x39
 8009236:	d0ee      	beq.n	8009216 <_dtoa_r+0xabe>
 8009238:	3301      	adds	r3, #1
 800923a:	e7c7      	b.n	80091cc <_dtoa_r+0xa74>
 800923c:	9a08      	ldr	r2, [sp, #32]
 800923e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009240:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009244:	428a      	cmp	r2, r1
 8009246:	d02a      	beq.n	800929e <_dtoa_r+0xb46>
 8009248:	4659      	mov	r1, fp
 800924a:	2300      	movs	r3, #0
 800924c:	220a      	movs	r2, #10
 800924e:	4628      	mov	r0, r5
 8009250:	f000 f8fa 	bl	8009448 <__multadd>
 8009254:	45b0      	cmp	r8, r6
 8009256:	4683      	mov	fp, r0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	f04f 020a 	mov.w	r2, #10
 8009260:	4641      	mov	r1, r8
 8009262:	4628      	mov	r0, r5
 8009264:	d107      	bne.n	8009276 <_dtoa_r+0xb1e>
 8009266:	f000 f8ef 	bl	8009448 <__multadd>
 800926a:	4680      	mov	r8, r0
 800926c:	4606      	mov	r6, r0
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	3301      	adds	r3, #1
 8009272:	9308      	str	r3, [sp, #32]
 8009274:	e775      	b.n	8009162 <_dtoa_r+0xa0a>
 8009276:	f000 f8e7 	bl	8009448 <__multadd>
 800927a:	4631      	mov	r1, r6
 800927c:	4680      	mov	r8, r0
 800927e:	2300      	movs	r3, #0
 8009280:	220a      	movs	r2, #10
 8009282:	4628      	mov	r0, r5
 8009284:	f000 f8e0 	bl	8009448 <__multadd>
 8009288:	4606      	mov	r6, r0
 800928a:	e7f0      	b.n	800926e <_dtoa_r+0xb16>
 800928c:	f1b9 0f00 	cmp.w	r9, #0
 8009290:	bfcc      	ite	gt
 8009292:	464f      	movgt	r7, r9
 8009294:	2701      	movle	r7, #1
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	9a03      	ldr	r2, [sp, #12]
 800929c:	4417      	add	r7, r2
 800929e:	4659      	mov	r1, fp
 80092a0:	2201      	movs	r2, #1
 80092a2:	4628      	mov	r0, r5
 80092a4:	9308      	str	r3, [sp, #32]
 80092a6:	f000 fa7b 	bl	80097a0 <__lshift>
 80092aa:	4621      	mov	r1, r4
 80092ac:	4683      	mov	fp, r0
 80092ae:	f000 fae7 	bl	8009880 <__mcmp>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dcb2      	bgt.n	800921c <_dtoa_r+0xac4>
 80092b6:	d102      	bne.n	80092be <_dtoa_r+0xb66>
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	07db      	lsls	r3, r3, #31
 80092bc:	d4ae      	bmi.n	800921c <_dtoa_r+0xac4>
 80092be:	463b      	mov	r3, r7
 80092c0:	461f      	mov	r7, r3
 80092c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092c6:	2a30      	cmp	r2, #48	; 0x30
 80092c8:	d0fa      	beq.n	80092c0 <_dtoa_r+0xb68>
 80092ca:	e6f9      	b.n	80090c0 <_dtoa_r+0x968>
 80092cc:	9a03      	ldr	r2, [sp, #12]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d1a5      	bne.n	800921e <_dtoa_r+0xac6>
 80092d2:	2331      	movs	r3, #49	; 0x31
 80092d4:	f10a 0a01 	add.w	sl, sl, #1
 80092d8:	e779      	b.n	80091ce <_dtoa_r+0xa76>
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <_dtoa_r+0xbd4>)
 80092dc:	f7ff baa8 	b.w	8008830 <_dtoa_r+0xd8>
 80092e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f47f aa81 	bne.w	80087ea <_dtoa_r+0x92>
 80092e8:	4b11      	ldr	r3, [pc, #68]	; (8009330 <_dtoa_r+0xbd8>)
 80092ea:	f7ff baa1 	b.w	8008830 <_dtoa_r+0xd8>
 80092ee:	f1b9 0f00 	cmp.w	r9, #0
 80092f2:	dc03      	bgt.n	80092fc <_dtoa_r+0xba4>
 80092f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	f73f aecb 	bgt.w	8009092 <_dtoa_r+0x93a>
 80092fc:	9f03      	ldr	r7, [sp, #12]
 80092fe:	4621      	mov	r1, r4
 8009300:	4658      	mov	r0, fp
 8009302:	f7ff f99b 	bl	800863c <quorem>
 8009306:	9a03      	ldr	r2, [sp, #12]
 8009308:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800930c:	f807 3b01 	strb.w	r3, [r7], #1
 8009310:	1aba      	subs	r2, r7, r2
 8009312:	4591      	cmp	r9, r2
 8009314:	ddba      	ble.n	800928c <_dtoa_r+0xb34>
 8009316:	4659      	mov	r1, fp
 8009318:	2300      	movs	r3, #0
 800931a:	220a      	movs	r2, #10
 800931c:	4628      	mov	r0, r5
 800931e:	f000 f893 	bl	8009448 <__multadd>
 8009322:	4683      	mov	fp, r0
 8009324:	e7eb      	b.n	80092fe <_dtoa_r+0xba6>
 8009326:	bf00      	nop
 8009328:	0800b3d8 	.word	0x0800b3d8
 800932c:	0800b234 	.word	0x0800b234
 8009330:	0800b359 	.word	0x0800b359

08009334 <_localeconv_r>:
 8009334:	4800      	ldr	r0, [pc, #0]	; (8009338 <_localeconv_r+0x4>)
 8009336:	4770      	bx	lr
 8009338:	2000020c 	.word	0x2000020c

0800933c <malloc>:
 800933c:	4b02      	ldr	r3, [pc, #8]	; (8009348 <malloc+0xc>)
 800933e:	4601      	mov	r1, r0
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	f000 bc1d 	b.w	8009b80 <_malloc_r>
 8009346:	bf00      	nop
 8009348:	200000b8 	.word	0x200000b8

0800934c <memchr>:
 800934c:	4603      	mov	r3, r0
 800934e:	b510      	push	{r4, lr}
 8009350:	b2c9      	uxtb	r1, r1
 8009352:	4402      	add	r2, r0
 8009354:	4293      	cmp	r3, r2
 8009356:	4618      	mov	r0, r3
 8009358:	d101      	bne.n	800935e <memchr+0x12>
 800935a:	2000      	movs	r0, #0
 800935c:	e003      	b.n	8009366 <memchr+0x1a>
 800935e:	7804      	ldrb	r4, [r0, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	428c      	cmp	r4, r1
 8009364:	d1f6      	bne.n	8009354 <memchr+0x8>
 8009366:	bd10      	pop	{r4, pc}

08009368 <memcpy>:
 8009368:	440a      	add	r2, r1
 800936a:	4291      	cmp	r1, r2
 800936c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009370:	d100      	bne.n	8009374 <memcpy+0xc>
 8009372:	4770      	bx	lr
 8009374:	b510      	push	{r4, lr}
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	4291      	cmp	r1, r2
 800937c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009380:	d1f9      	bne.n	8009376 <memcpy+0xe>
 8009382:	bd10      	pop	{r4, pc}

08009384 <_Balloc>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009388:	4604      	mov	r4, r0
 800938a:	460d      	mov	r5, r1
 800938c:	b976      	cbnz	r6, 80093ac <_Balloc+0x28>
 800938e:	2010      	movs	r0, #16
 8009390:	f7ff ffd4 	bl	800933c <malloc>
 8009394:	4602      	mov	r2, r0
 8009396:	6260      	str	r0, [r4, #36]	; 0x24
 8009398:	b920      	cbnz	r0, 80093a4 <_Balloc+0x20>
 800939a:	2166      	movs	r1, #102	; 0x66
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <_Balloc+0x78>)
 800939e:	4818      	ldr	r0, [pc, #96]	; (8009400 <_Balloc+0x7c>)
 80093a0:	f000 fdce 	bl	8009f40 <__assert_func>
 80093a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093a8:	6006      	str	r6, [r0, #0]
 80093aa:	60c6      	str	r6, [r0, #12]
 80093ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80093ae:	68f3      	ldr	r3, [r6, #12]
 80093b0:	b183      	cbz	r3, 80093d4 <_Balloc+0x50>
 80093b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ba:	b9b8      	cbnz	r0, 80093ec <_Balloc+0x68>
 80093bc:	2101      	movs	r1, #1
 80093be:	fa01 f605 	lsl.w	r6, r1, r5
 80093c2:	1d72      	adds	r2, r6, #5
 80093c4:	4620      	mov	r0, r4
 80093c6:	0092      	lsls	r2, r2, #2
 80093c8:	f000 fb5e 	bl	8009a88 <_calloc_r>
 80093cc:	b160      	cbz	r0, 80093e8 <_Balloc+0x64>
 80093ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093d2:	e00e      	b.n	80093f2 <_Balloc+0x6e>
 80093d4:	2221      	movs	r2, #33	; 0x21
 80093d6:	2104      	movs	r1, #4
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fb55 	bl	8009a88 <_calloc_r>
 80093de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093e0:	60f0      	str	r0, [r6, #12]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e4      	bne.n	80093b2 <_Balloc+0x2e>
 80093e8:	2000      	movs	r0, #0
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	6802      	ldr	r2, [r0, #0]
 80093ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093f2:	2300      	movs	r3, #0
 80093f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093f8:	e7f7      	b.n	80093ea <_Balloc+0x66>
 80093fa:	bf00      	nop
 80093fc:	0800b366 	.word	0x0800b366
 8009400:	0800b3e9 	.word	0x0800b3e9

08009404 <_Bfree>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009408:	4605      	mov	r5, r0
 800940a:	460c      	mov	r4, r1
 800940c:	b976      	cbnz	r6, 800942c <_Bfree+0x28>
 800940e:	2010      	movs	r0, #16
 8009410:	f7ff ff94 	bl	800933c <malloc>
 8009414:	4602      	mov	r2, r0
 8009416:	6268      	str	r0, [r5, #36]	; 0x24
 8009418:	b920      	cbnz	r0, 8009424 <_Bfree+0x20>
 800941a:	218a      	movs	r1, #138	; 0x8a
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <_Bfree+0x3c>)
 800941e:	4809      	ldr	r0, [pc, #36]	; (8009444 <_Bfree+0x40>)
 8009420:	f000 fd8e 	bl	8009f40 <__assert_func>
 8009424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009428:	6006      	str	r6, [r0, #0]
 800942a:	60c6      	str	r6, [r0, #12]
 800942c:	b13c      	cbz	r4, 800943e <_Bfree+0x3a>
 800942e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009430:	6862      	ldr	r2, [r4, #4]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009438:	6021      	str	r1, [r4, #0]
 800943a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	0800b366 	.word	0x0800b366
 8009444:	0800b3e9 	.word	0x0800b3e9

08009448 <__multadd>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	4607      	mov	r7, r0
 800944e:	460c      	mov	r4, r1
 8009450:	461e      	mov	r6, r3
 8009452:	2000      	movs	r0, #0
 8009454:	690d      	ldr	r5, [r1, #16]
 8009456:	f101 0c14 	add.w	ip, r1, #20
 800945a:	f8dc 3000 	ldr.w	r3, [ip]
 800945e:	3001      	adds	r0, #1
 8009460:	b299      	uxth	r1, r3
 8009462:	fb02 6101 	mla	r1, r2, r1, r6
 8009466:	0c1e      	lsrs	r6, r3, #16
 8009468:	0c0b      	lsrs	r3, r1, #16
 800946a:	fb02 3306 	mla	r3, r2, r6, r3
 800946e:	b289      	uxth	r1, r1
 8009470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009474:	4285      	cmp	r5, r0
 8009476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800947a:	f84c 1b04 	str.w	r1, [ip], #4
 800947e:	dcec      	bgt.n	800945a <__multadd+0x12>
 8009480:	b30e      	cbz	r6, 80094c6 <__multadd+0x7e>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc19      	bgt.n	80094bc <__multadd+0x74>
 8009488:	6861      	ldr	r1, [r4, #4]
 800948a:	4638      	mov	r0, r7
 800948c:	3101      	adds	r1, #1
 800948e:	f7ff ff79 	bl	8009384 <_Balloc>
 8009492:	4680      	mov	r8, r0
 8009494:	b928      	cbnz	r0, 80094a2 <__multadd+0x5a>
 8009496:	4602      	mov	r2, r0
 8009498:	21b5      	movs	r1, #181	; 0xb5
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <__multadd+0x84>)
 800949c:	480c      	ldr	r0, [pc, #48]	; (80094d0 <__multadd+0x88>)
 800949e:	f000 fd4f 	bl	8009f40 <__assert_func>
 80094a2:	6922      	ldr	r2, [r4, #16]
 80094a4:	f104 010c 	add.w	r1, r4, #12
 80094a8:	3202      	adds	r2, #2
 80094aa:	0092      	lsls	r2, r2, #2
 80094ac:	300c      	adds	r0, #12
 80094ae:	f7ff ff5b 	bl	8009368 <memcpy>
 80094b2:	4621      	mov	r1, r4
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ffa5 	bl	8009404 <_Bfree>
 80094ba:	4644      	mov	r4, r8
 80094bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094c0:	3501      	adds	r5, #1
 80094c2:	615e      	str	r6, [r3, #20]
 80094c4:	6125      	str	r5, [r4, #16]
 80094c6:	4620      	mov	r0, r4
 80094c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094cc:	0800b3d8 	.word	0x0800b3d8
 80094d0:	0800b3e9 	.word	0x0800b3e9

080094d4 <__hi0bits>:
 80094d4:	0c02      	lsrs	r2, r0, #16
 80094d6:	0412      	lsls	r2, r2, #16
 80094d8:	4603      	mov	r3, r0
 80094da:	b9ca      	cbnz	r2, 8009510 <__hi0bits+0x3c>
 80094dc:	0403      	lsls	r3, r0, #16
 80094de:	2010      	movs	r0, #16
 80094e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80094e4:	bf04      	itt	eq
 80094e6:	021b      	lsleq	r3, r3, #8
 80094e8:	3008      	addeq	r0, #8
 80094ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80094ee:	bf04      	itt	eq
 80094f0:	011b      	lsleq	r3, r3, #4
 80094f2:	3004      	addeq	r0, #4
 80094f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80094f8:	bf04      	itt	eq
 80094fa:	009b      	lsleq	r3, r3, #2
 80094fc:	3002      	addeq	r0, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	db05      	blt.n	800950e <__hi0bits+0x3a>
 8009502:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009506:	f100 0001 	add.w	r0, r0, #1
 800950a:	bf08      	it	eq
 800950c:	2020      	moveq	r0, #32
 800950e:	4770      	bx	lr
 8009510:	2000      	movs	r0, #0
 8009512:	e7e5      	b.n	80094e0 <__hi0bits+0xc>

08009514 <__lo0bits>:
 8009514:	6803      	ldr	r3, [r0, #0]
 8009516:	4602      	mov	r2, r0
 8009518:	f013 0007 	ands.w	r0, r3, #7
 800951c:	d00b      	beq.n	8009536 <__lo0bits+0x22>
 800951e:	07d9      	lsls	r1, r3, #31
 8009520:	d421      	bmi.n	8009566 <__lo0bits+0x52>
 8009522:	0798      	lsls	r0, r3, #30
 8009524:	bf49      	itett	mi
 8009526:	085b      	lsrmi	r3, r3, #1
 8009528:	089b      	lsrpl	r3, r3, #2
 800952a:	2001      	movmi	r0, #1
 800952c:	6013      	strmi	r3, [r2, #0]
 800952e:	bf5c      	itt	pl
 8009530:	2002      	movpl	r0, #2
 8009532:	6013      	strpl	r3, [r2, #0]
 8009534:	4770      	bx	lr
 8009536:	b299      	uxth	r1, r3
 8009538:	b909      	cbnz	r1, 800953e <__lo0bits+0x2a>
 800953a:	2010      	movs	r0, #16
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	b2d9      	uxtb	r1, r3
 8009540:	b909      	cbnz	r1, 8009546 <__lo0bits+0x32>
 8009542:	3008      	adds	r0, #8
 8009544:	0a1b      	lsrs	r3, r3, #8
 8009546:	0719      	lsls	r1, r3, #28
 8009548:	bf04      	itt	eq
 800954a:	091b      	lsreq	r3, r3, #4
 800954c:	3004      	addeq	r0, #4
 800954e:	0799      	lsls	r1, r3, #30
 8009550:	bf04      	itt	eq
 8009552:	089b      	lsreq	r3, r3, #2
 8009554:	3002      	addeq	r0, #2
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d403      	bmi.n	8009562 <__lo0bits+0x4e>
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	f100 0001 	add.w	r0, r0, #1
 8009560:	d003      	beq.n	800956a <__lo0bits+0x56>
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	4770      	bx	lr
 8009566:	2000      	movs	r0, #0
 8009568:	4770      	bx	lr
 800956a:	2020      	movs	r0, #32
 800956c:	4770      	bx	lr
	...

08009570 <__i2b>:
 8009570:	b510      	push	{r4, lr}
 8009572:	460c      	mov	r4, r1
 8009574:	2101      	movs	r1, #1
 8009576:	f7ff ff05 	bl	8009384 <_Balloc>
 800957a:	4602      	mov	r2, r0
 800957c:	b928      	cbnz	r0, 800958a <__i2b+0x1a>
 800957e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <__i2b+0x24>)
 8009584:	4804      	ldr	r0, [pc, #16]	; (8009598 <__i2b+0x28>)
 8009586:	f000 fcdb 	bl	8009f40 <__assert_func>
 800958a:	2301      	movs	r3, #1
 800958c:	6144      	str	r4, [r0, #20]
 800958e:	6103      	str	r3, [r0, #16]
 8009590:	bd10      	pop	{r4, pc}
 8009592:	bf00      	nop
 8009594:	0800b3d8 	.word	0x0800b3d8
 8009598:	0800b3e9 	.word	0x0800b3e9

0800959c <__multiply>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	4691      	mov	r9, r2
 80095a2:	690a      	ldr	r2, [r1, #16]
 80095a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095a8:	460c      	mov	r4, r1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	bfbe      	ittt	lt
 80095ae:	460b      	movlt	r3, r1
 80095b0:	464c      	movlt	r4, r9
 80095b2:	4699      	movlt	r9, r3
 80095b4:	6927      	ldr	r7, [r4, #16]
 80095b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80095ba:	68a3      	ldr	r3, [r4, #8]
 80095bc:	6861      	ldr	r1, [r4, #4]
 80095be:	eb07 060a 	add.w	r6, r7, sl
 80095c2:	42b3      	cmp	r3, r6
 80095c4:	b085      	sub	sp, #20
 80095c6:	bfb8      	it	lt
 80095c8:	3101      	addlt	r1, #1
 80095ca:	f7ff fedb 	bl	8009384 <_Balloc>
 80095ce:	b930      	cbnz	r0, 80095de <__multiply+0x42>
 80095d0:	4602      	mov	r2, r0
 80095d2:	f240 115d 	movw	r1, #349	; 0x15d
 80095d6:	4b43      	ldr	r3, [pc, #268]	; (80096e4 <__multiply+0x148>)
 80095d8:	4843      	ldr	r0, [pc, #268]	; (80096e8 <__multiply+0x14c>)
 80095da:	f000 fcb1 	bl	8009f40 <__assert_func>
 80095de:	f100 0514 	add.w	r5, r0, #20
 80095e2:	462b      	mov	r3, r5
 80095e4:	2200      	movs	r2, #0
 80095e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095ea:	4543      	cmp	r3, r8
 80095ec:	d321      	bcc.n	8009632 <__multiply+0x96>
 80095ee:	f104 0314 	add.w	r3, r4, #20
 80095f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095f6:	f109 0314 	add.w	r3, r9, #20
 80095fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095fe:	9202      	str	r2, [sp, #8]
 8009600:	1b3a      	subs	r2, r7, r4
 8009602:	3a15      	subs	r2, #21
 8009604:	f022 0203 	bic.w	r2, r2, #3
 8009608:	3204      	adds	r2, #4
 800960a:	f104 0115 	add.w	r1, r4, #21
 800960e:	428f      	cmp	r7, r1
 8009610:	bf38      	it	cc
 8009612:	2204      	movcc	r2, #4
 8009614:	9201      	str	r2, [sp, #4]
 8009616:	9a02      	ldr	r2, [sp, #8]
 8009618:	9303      	str	r3, [sp, #12]
 800961a:	429a      	cmp	r2, r3
 800961c:	d80c      	bhi.n	8009638 <__multiply+0x9c>
 800961e:	2e00      	cmp	r6, #0
 8009620:	dd03      	ble.n	800962a <__multiply+0x8e>
 8009622:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009626:	2b00      	cmp	r3, #0
 8009628:	d059      	beq.n	80096de <__multiply+0x142>
 800962a:	6106      	str	r6, [r0, #16]
 800962c:	b005      	add	sp, #20
 800962e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009632:	f843 2b04 	str.w	r2, [r3], #4
 8009636:	e7d8      	b.n	80095ea <__multiply+0x4e>
 8009638:	f8b3 a000 	ldrh.w	sl, [r3]
 800963c:	f1ba 0f00 	cmp.w	sl, #0
 8009640:	d023      	beq.n	800968a <__multiply+0xee>
 8009642:	46a9      	mov	r9, r5
 8009644:	f04f 0c00 	mov.w	ip, #0
 8009648:	f104 0e14 	add.w	lr, r4, #20
 800964c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009650:	f8d9 1000 	ldr.w	r1, [r9]
 8009654:	fa1f fb82 	uxth.w	fp, r2
 8009658:	b289      	uxth	r1, r1
 800965a:	fb0a 110b 	mla	r1, sl, fp, r1
 800965e:	4461      	add	r1, ip
 8009660:	f8d9 c000 	ldr.w	ip, [r9]
 8009664:	0c12      	lsrs	r2, r2, #16
 8009666:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800966a:	fb0a c202 	mla	r2, sl, r2, ip
 800966e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009672:	b289      	uxth	r1, r1
 8009674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009678:	4577      	cmp	r7, lr
 800967a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800967e:	f849 1b04 	str.w	r1, [r9], #4
 8009682:	d8e3      	bhi.n	800964c <__multiply+0xb0>
 8009684:	9a01      	ldr	r2, [sp, #4]
 8009686:	f845 c002 	str.w	ip, [r5, r2]
 800968a:	9a03      	ldr	r2, [sp, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009692:	f1b9 0f00 	cmp.w	r9, #0
 8009696:	d020      	beq.n	80096da <__multiply+0x13e>
 8009698:	46ae      	mov	lr, r5
 800969a:	f04f 0a00 	mov.w	sl, #0
 800969e:	6829      	ldr	r1, [r5, #0]
 80096a0:	f104 0c14 	add.w	ip, r4, #20
 80096a4:	f8bc b000 	ldrh.w	fp, [ip]
 80096a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80096ac:	b289      	uxth	r1, r1
 80096ae:	fb09 220b 	mla	r2, r9, fp, r2
 80096b2:	4492      	add	sl, r2
 80096b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80096b8:	f84e 1b04 	str.w	r1, [lr], #4
 80096bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096c0:	f8be 1000 	ldrh.w	r1, [lr]
 80096c4:	0c12      	lsrs	r2, r2, #16
 80096c6:	fb09 1102 	mla	r1, r9, r2, r1
 80096ca:	4567      	cmp	r7, ip
 80096cc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096d4:	d8e6      	bhi.n	80096a4 <__multiply+0x108>
 80096d6:	9a01      	ldr	r2, [sp, #4]
 80096d8:	50a9      	str	r1, [r5, r2]
 80096da:	3504      	adds	r5, #4
 80096dc:	e79b      	b.n	8009616 <__multiply+0x7a>
 80096de:	3e01      	subs	r6, #1
 80096e0:	e79d      	b.n	800961e <__multiply+0x82>
 80096e2:	bf00      	nop
 80096e4:	0800b3d8 	.word	0x0800b3d8
 80096e8:	0800b3e9 	.word	0x0800b3e9

080096ec <__pow5mult>:
 80096ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	4615      	mov	r5, r2
 80096f2:	f012 0203 	ands.w	r2, r2, #3
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	d007      	beq.n	800970c <__pow5mult+0x20>
 80096fc:	4c25      	ldr	r4, [pc, #148]	; (8009794 <__pow5mult+0xa8>)
 80096fe:	3a01      	subs	r2, #1
 8009700:	2300      	movs	r3, #0
 8009702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009706:	f7ff fe9f 	bl	8009448 <__multadd>
 800970a:	4607      	mov	r7, r0
 800970c:	10ad      	asrs	r5, r5, #2
 800970e:	d03d      	beq.n	800978c <__pow5mult+0xa0>
 8009710:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009712:	b97c      	cbnz	r4, 8009734 <__pow5mult+0x48>
 8009714:	2010      	movs	r0, #16
 8009716:	f7ff fe11 	bl	800933c <malloc>
 800971a:	4602      	mov	r2, r0
 800971c:	6270      	str	r0, [r6, #36]	; 0x24
 800971e:	b928      	cbnz	r0, 800972c <__pow5mult+0x40>
 8009720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009724:	4b1c      	ldr	r3, [pc, #112]	; (8009798 <__pow5mult+0xac>)
 8009726:	481d      	ldr	r0, [pc, #116]	; (800979c <__pow5mult+0xb0>)
 8009728:	f000 fc0a 	bl	8009f40 <__assert_func>
 800972c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009730:	6004      	str	r4, [r0, #0]
 8009732:	60c4      	str	r4, [r0, #12]
 8009734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800973c:	b94c      	cbnz	r4, 8009752 <__pow5mult+0x66>
 800973e:	f240 2171 	movw	r1, #625	; 0x271
 8009742:	4630      	mov	r0, r6
 8009744:	f7ff ff14 	bl	8009570 <__i2b>
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	f04f 0900 	mov.w	r9, #0
 8009756:	07eb      	lsls	r3, r5, #31
 8009758:	d50a      	bpl.n	8009770 <__pow5mult+0x84>
 800975a:	4639      	mov	r1, r7
 800975c:	4622      	mov	r2, r4
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff ff1c 	bl	800959c <__multiply>
 8009764:	4680      	mov	r8, r0
 8009766:	4639      	mov	r1, r7
 8009768:	4630      	mov	r0, r6
 800976a:	f7ff fe4b 	bl	8009404 <_Bfree>
 800976e:	4647      	mov	r7, r8
 8009770:	106d      	asrs	r5, r5, #1
 8009772:	d00b      	beq.n	800978c <__pow5mult+0xa0>
 8009774:	6820      	ldr	r0, [r4, #0]
 8009776:	b938      	cbnz	r0, 8009788 <__pow5mult+0x9c>
 8009778:	4622      	mov	r2, r4
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	f7ff ff0d 	bl	800959c <__multiply>
 8009782:	6020      	str	r0, [r4, #0]
 8009784:	f8c0 9000 	str.w	r9, [r0]
 8009788:	4604      	mov	r4, r0
 800978a:	e7e4      	b.n	8009756 <__pow5mult+0x6a>
 800978c:	4638      	mov	r0, r7
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	bf00      	nop
 8009794:	0800b538 	.word	0x0800b538
 8009798:	0800b366 	.word	0x0800b366
 800979c:	0800b3e9 	.word	0x0800b3e9

080097a0 <__lshift>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	4607      	mov	r7, r0
 80097a8:	4691      	mov	r9, r2
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	6849      	ldr	r1, [r1, #4]
 80097ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097b2:	68a3      	ldr	r3, [r4, #8]
 80097b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097b8:	f108 0601 	add.w	r6, r8, #1
 80097bc:	42b3      	cmp	r3, r6
 80097be:	db0b      	blt.n	80097d8 <__lshift+0x38>
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff fddf 	bl	8009384 <_Balloc>
 80097c6:	4605      	mov	r5, r0
 80097c8:	b948      	cbnz	r0, 80097de <__lshift+0x3e>
 80097ca:	4602      	mov	r2, r0
 80097cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097d0:	4b29      	ldr	r3, [pc, #164]	; (8009878 <__lshift+0xd8>)
 80097d2:	482a      	ldr	r0, [pc, #168]	; (800987c <__lshift+0xdc>)
 80097d4:	f000 fbb4 	bl	8009f40 <__assert_func>
 80097d8:	3101      	adds	r1, #1
 80097da:	005b      	lsls	r3, r3, #1
 80097dc:	e7ee      	b.n	80097bc <__lshift+0x1c>
 80097de:	2300      	movs	r3, #0
 80097e0:	f100 0114 	add.w	r1, r0, #20
 80097e4:	f100 0210 	add.w	r2, r0, #16
 80097e8:	4618      	mov	r0, r3
 80097ea:	4553      	cmp	r3, sl
 80097ec:	db37      	blt.n	800985e <__lshift+0xbe>
 80097ee:	6920      	ldr	r0, [r4, #16]
 80097f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097f4:	f104 0314 	add.w	r3, r4, #20
 80097f8:	f019 091f 	ands.w	r9, r9, #31
 80097fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009804:	d02f      	beq.n	8009866 <__lshift+0xc6>
 8009806:	468a      	mov	sl, r1
 8009808:	f04f 0c00 	mov.w	ip, #0
 800980c:	f1c9 0e20 	rsb	lr, r9, #32
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	fa02 f209 	lsl.w	r2, r2, r9
 8009816:	ea42 020c 	orr.w	r2, r2, ip
 800981a:	f84a 2b04 	str.w	r2, [sl], #4
 800981e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009822:	4298      	cmp	r0, r3
 8009824:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009828:	d8f2      	bhi.n	8009810 <__lshift+0x70>
 800982a:	1b03      	subs	r3, r0, r4
 800982c:	3b15      	subs	r3, #21
 800982e:	f023 0303 	bic.w	r3, r3, #3
 8009832:	3304      	adds	r3, #4
 8009834:	f104 0215 	add.w	r2, r4, #21
 8009838:	4290      	cmp	r0, r2
 800983a:	bf38      	it	cc
 800983c:	2304      	movcc	r3, #4
 800983e:	f841 c003 	str.w	ip, [r1, r3]
 8009842:	f1bc 0f00 	cmp.w	ip, #0
 8009846:	d001      	beq.n	800984c <__lshift+0xac>
 8009848:	f108 0602 	add.w	r6, r8, #2
 800984c:	3e01      	subs	r6, #1
 800984e:	4638      	mov	r0, r7
 8009850:	4621      	mov	r1, r4
 8009852:	612e      	str	r6, [r5, #16]
 8009854:	f7ff fdd6 	bl	8009404 <_Bfree>
 8009858:	4628      	mov	r0, r5
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009862:	3301      	adds	r3, #1
 8009864:	e7c1      	b.n	80097ea <__lshift+0x4a>
 8009866:	3904      	subs	r1, #4
 8009868:	f853 2b04 	ldr.w	r2, [r3], #4
 800986c:	4298      	cmp	r0, r3
 800986e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009872:	d8f9      	bhi.n	8009868 <__lshift+0xc8>
 8009874:	e7ea      	b.n	800984c <__lshift+0xac>
 8009876:	bf00      	nop
 8009878:	0800b3d8 	.word	0x0800b3d8
 800987c:	0800b3e9 	.word	0x0800b3e9

08009880 <__mcmp>:
 8009880:	4603      	mov	r3, r0
 8009882:	690a      	ldr	r2, [r1, #16]
 8009884:	6900      	ldr	r0, [r0, #16]
 8009886:	b530      	push	{r4, r5, lr}
 8009888:	1a80      	subs	r0, r0, r2
 800988a:	d10d      	bne.n	80098a8 <__mcmp+0x28>
 800988c:	3314      	adds	r3, #20
 800988e:	3114      	adds	r1, #20
 8009890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800989c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098a0:	4295      	cmp	r5, r2
 80098a2:	d002      	beq.n	80098aa <__mcmp+0x2a>
 80098a4:	d304      	bcc.n	80098b0 <__mcmp+0x30>
 80098a6:	2001      	movs	r0, #1
 80098a8:	bd30      	pop	{r4, r5, pc}
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d3f4      	bcc.n	8009898 <__mcmp+0x18>
 80098ae:	e7fb      	b.n	80098a8 <__mcmp+0x28>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098b4:	e7f8      	b.n	80098a8 <__mcmp+0x28>
	...

080098b8 <__mdiff>:
 80098b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	460d      	mov	r5, r1
 80098be:	4607      	mov	r7, r0
 80098c0:	4611      	mov	r1, r2
 80098c2:	4628      	mov	r0, r5
 80098c4:	4614      	mov	r4, r2
 80098c6:	f7ff ffdb 	bl	8009880 <__mcmp>
 80098ca:	1e06      	subs	r6, r0, #0
 80098cc:	d111      	bne.n	80098f2 <__mdiff+0x3a>
 80098ce:	4631      	mov	r1, r6
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fd57 	bl	8009384 <_Balloc>
 80098d6:	4602      	mov	r2, r0
 80098d8:	b928      	cbnz	r0, 80098e6 <__mdiff+0x2e>
 80098da:	f240 2132 	movw	r1, #562	; 0x232
 80098de:	4b3a      	ldr	r3, [pc, #232]	; (80099c8 <__mdiff+0x110>)
 80098e0:	483a      	ldr	r0, [pc, #232]	; (80099cc <__mdiff+0x114>)
 80098e2:	f000 fb2d 	bl	8009f40 <__assert_func>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80098ec:	4610      	mov	r0, r2
 80098ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	bfa4      	itt	ge
 80098f4:	4623      	movge	r3, r4
 80098f6:	462c      	movge	r4, r5
 80098f8:	4638      	mov	r0, r7
 80098fa:	6861      	ldr	r1, [r4, #4]
 80098fc:	bfa6      	itte	ge
 80098fe:	461d      	movge	r5, r3
 8009900:	2600      	movge	r6, #0
 8009902:	2601      	movlt	r6, #1
 8009904:	f7ff fd3e 	bl	8009384 <_Balloc>
 8009908:	4602      	mov	r2, r0
 800990a:	b918      	cbnz	r0, 8009914 <__mdiff+0x5c>
 800990c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <__mdiff+0x110>)
 8009912:	e7e5      	b.n	80098e0 <__mdiff+0x28>
 8009914:	f102 0814 	add.w	r8, r2, #20
 8009918:	46c2      	mov	sl, r8
 800991a:	f04f 0c00 	mov.w	ip, #0
 800991e:	6927      	ldr	r7, [r4, #16]
 8009920:	60c6      	str	r6, [r0, #12]
 8009922:	692e      	ldr	r6, [r5, #16]
 8009924:	f104 0014 	add.w	r0, r4, #20
 8009928:	f105 0914 	add.w	r9, r5, #20
 800992c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009934:	3410      	adds	r4, #16
 8009936:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800993a:	f859 3b04 	ldr.w	r3, [r9], #4
 800993e:	fa1f f18b 	uxth.w	r1, fp
 8009942:	448c      	add	ip, r1
 8009944:	b299      	uxth	r1, r3
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	ebac 0101 	sub.w	r1, ip, r1
 800994c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009950:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009954:	b289      	uxth	r1, r1
 8009956:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800995a:	454e      	cmp	r6, r9
 800995c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009960:	f84a 3b04 	str.w	r3, [sl], #4
 8009964:	d8e7      	bhi.n	8009936 <__mdiff+0x7e>
 8009966:	1b73      	subs	r3, r6, r5
 8009968:	3b15      	subs	r3, #21
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	3515      	adds	r5, #21
 8009970:	3304      	adds	r3, #4
 8009972:	42ae      	cmp	r6, r5
 8009974:	bf38      	it	cc
 8009976:	2304      	movcc	r3, #4
 8009978:	4418      	add	r0, r3
 800997a:	4443      	add	r3, r8
 800997c:	461e      	mov	r6, r3
 800997e:	4605      	mov	r5, r0
 8009980:	4575      	cmp	r5, lr
 8009982:	d30e      	bcc.n	80099a2 <__mdiff+0xea>
 8009984:	f10e 0103 	add.w	r1, lr, #3
 8009988:	1a09      	subs	r1, r1, r0
 800998a:	f021 0103 	bic.w	r1, r1, #3
 800998e:	3803      	subs	r0, #3
 8009990:	4586      	cmp	lr, r0
 8009992:	bf38      	it	cc
 8009994:	2100      	movcc	r1, #0
 8009996:	4419      	add	r1, r3
 8009998:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800999c:	b18b      	cbz	r3, 80099c2 <__mdiff+0x10a>
 800999e:	6117      	str	r7, [r2, #16]
 80099a0:	e7a4      	b.n	80098ec <__mdiff+0x34>
 80099a2:	f855 8b04 	ldr.w	r8, [r5], #4
 80099a6:	fa1f f188 	uxth.w	r1, r8
 80099aa:	4461      	add	r1, ip
 80099ac:	140c      	asrs	r4, r1, #16
 80099ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80099b2:	b289      	uxth	r1, r1
 80099b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80099bc:	f846 1b04 	str.w	r1, [r6], #4
 80099c0:	e7de      	b.n	8009980 <__mdiff+0xc8>
 80099c2:	3f01      	subs	r7, #1
 80099c4:	e7e8      	b.n	8009998 <__mdiff+0xe0>
 80099c6:	bf00      	nop
 80099c8:	0800b3d8 	.word	0x0800b3d8
 80099cc:	0800b3e9 	.word	0x0800b3e9

080099d0 <__d2b>:
 80099d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80099d4:	2101      	movs	r1, #1
 80099d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80099da:	4690      	mov	r8, r2
 80099dc:	461d      	mov	r5, r3
 80099de:	f7ff fcd1 	bl	8009384 <_Balloc>
 80099e2:	4604      	mov	r4, r0
 80099e4:	b930      	cbnz	r0, 80099f4 <__d2b+0x24>
 80099e6:	4602      	mov	r2, r0
 80099e8:	f240 310a 	movw	r1, #778	; 0x30a
 80099ec:	4b24      	ldr	r3, [pc, #144]	; (8009a80 <__d2b+0xb0>)
 80099ee:	4825      	ldr	r0, [pc, #148]	; (8009a84 <__d2b+0xb4>)
 80099f0:	f000 faa6 	bl	8009f40 <__assert_func>
 80099f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80099f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80099fc:	bb2d      	cbnz	r5, 8009a4a <__d2b+0x7a>
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	f1b8 0300 	subs.w	r3, r8, #0
 8009a04:	d026      	beq.n	8009a54 <__d2b+0x84>
 8009a06:	4668      	mov	r0, sp
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	f7ff fd83 	bl	8009514 <__lo0bits>
 8009a0e:	9900      	ldr	r1, [sp, #0]
 8009a10:	b1f0      	cbz	r0, 8009a50 <__d2b+0x80>
 8009a12:	9a01      	ldr	r2, [sp, #4]
 8009a14:	f1c0 0320 	rsb	r3, r0, #32
 8009a18:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	40c2      	lsrs	r2, r0
 8009a20:	6163      	str	r3, [r4, #20]
 8009a22:	9201      	str	r2, [sp, #4]
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bf14      	ite	ne
 8009a2a:	2102      	movne	r1, #2
 8009a2c:	2101      	moveq	r1, #1
 8009a2e:	61a3      	str	r3, [r4, #24]
 8009a30:	6121      	str	r1, [r4, #16]
 8009a32:	b1c5      	cbz	r5, 8009a66 <__d2b+0x96>
 8009a34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a38:	4405      	add	r5, r0
 8009a3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a3e:	603d      	str	r5, [r7, #0]
 8009a40:	6030      	str	r0, [r6, #0]
 8009a42:	4620      	mov	r0, r4
 8009a44:	b002      	add	sp, #8
 8009a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a4e:	e7d6      	b.n	80099fe <__d2b+0x2e>
 8009a50:	6161      	str	r1, [r4, #20]
 8009a52:	e7e7      	b.n	8009a24 <__d2b+0x54>
 8009a54:	a801      	add	r0, sp, #4
 8009a56:	f7ff fd5d 	bl	8009514 <__lo0bits>
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	9b01      	ldr	r3, [sp, #4]
 8009a5e:	6121      	str	r1, [r4, #16]
 8009a60:	6163      	str	r3, [r4, #20]
 8009a62:	3020      	adds	r0, #32
 8009a64:	e7e5      	b.n	8009a32 <__d2b+0x62>
 8009a66:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009a6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a6e:	6038      	str	r0, [r7, #0]
 8009a70:	6918      	ldr	r0, [r3, #16]
 8009a72:	f7ff fd2f 	bl	80094d4 <__hi0bits>
 8009a76:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a7a:	6031      	str	r1, [r6, #0]
 8009a7c:	e7e1      	b.n	8009a42 <__d2b+0x72>
 8009a7e:	bf00      	nop
 8009a80:	0800b3d8 	.word	0x0800b3d8
 8009a84:	0800b3e9 	.word	0x0800b3e9

08009a88 <_calloc_r>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	fba1 5402 	umull	r5, r4, r1, r2
 8009a8e:	b934      	cbnz	r4, 8009a9e <_calloc_r+0x16>
 8009a90:	4629      	mov	r1, r5
 8009a92:	f000 f875 	bl	8009b80 <_malloc_r>
 8009a96:	4606      	mov	r6, r0
 8009a98:	b928      	cbnz	r0, 8009aa6 <_calloc_r+0x1e>
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	220c      	movs	r2, #12
 8009aa0:	2600      	movs	r6, #0
 8009aa2:	6002      	str	r2, [r0, #0]
 8009aa4:	e7f9      	b.n	8009a9a <_calloc_r+0x12>
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7fe f8b9 	bl	8007c20 <memset>
 8009aae:	e7f4      	b.n	8009a9a <_calloc_r+0x12>

08009ab0 <_free_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	2900      	cmp	r1, #0
 8009ab6:	d040      	beq.n	8009b3a <_free_r+0x8a>
 8009ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009abc:	1f0c      	subs	r4, r1, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	bfb8      	it	lt
 8009ac2:	18e4      	addlt	r4, r4, r3
 8009ac4:	f000 fa98 	bl	8009ff8 <__malloc_lock>
 8009ac8:	4a1c      	ldr	r2, [pc, #112]	; (8009b3c <_free_r+0x8c>)
 8009aca:	6813      	ldr	r3, [r2, #0]
 8009acc:	b933      	cbnz	r3, 8009adc <_free_r+0x2c>
 8009ace:	6063      	str	r3, [r4, #4]
 8009ad0:	6014      	str	r4, [r2, #0]
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ad8:	f000 ba94 	b.w	800a004 <__malloc_unlock>
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d908      	bls.n	8009af2 <_free_r+0x42>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428b      	cmp	r3, r1
 8009ae6:	bf01      	itttt	eq
 8009ae8:	6819      	ldreq	r1, [r3, #0]
 8009aea:	685b      	ldreq	r3, [r3, #4]
 8009aec:	1809      	addeq	r1, r1, r0
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	e7ed      	b.n	8009ace <_free_r+0x1e>
 8009af2:	461a      	mov	r2, r3
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	b10b      	cbz	r3, 8009afc <_free_r+0x4c>
 8009af8:	42a3      	cmp	r3, r4
 8009afa:	d9fa      	bls.n	8009af2 <_free_r+0x42>
 8009afc:	6811      	ldr	r1, [r2, #0]
 8009afe:	1850      	adds	r0, r2, r1
 8009b00:	42a0      	cmp	r0, r4
 8009b02:	d10b      	bne.n	8009b1c <_free_r+0x6c>
 8009b04:	6820      	ldr	r0, [r4, #0]
 8009b06:	4401      	add	r1, r0
 8009b08:	1850      	adds	r0, r2, r1
 8009b0a:	4283      	cmp	r3, r0
 8009b0c:	6011      	str	r1, [r2, #0]
 8009b0e:	d1e0      	bne.n	8009ad2 <_free_r+0x22>
 8009b10:	6818      	ldr	r0, [r3, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	4401      	add	r1, r0
 8009b16:	6011      	str	r1, [r2, #0]
 8009b18:	6053      	str	r3, [r2, #4]
 8009b1a:	e7da      	b.n	8009ad2 <_free_r+0x22>
 8009b1c:	d902      	bls.n	8009b24 <_free_r+0x74>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	e7d6      	b.n	8009ad2 <_free_r+0x22>
 8009b24:	6820      	ldr	r0, [r4, #0]
 8009b26:	1821      	adds	r1, r4, r0
 8009b28:	428b      	cmp	r3, r1
 8009b2a:	bf01      	itttt	eq
 8009b2c:	6819      	ldreq	r1, [r3, #0]
 8009b2e:	685b      	ldreq	r3, [r3, #4]
 8009b30:	1809      	addeq	r1, r1, r0
 8009b32:	6021      	streq	r1, [r4, #0]
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	6054      	str	r4, [r2, #4]
 8009b38:	e7cb      	b.n	8009ad2 <_free_r+0x22>
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20001854 	.word	0x20001854

08009b40 <sbrk_aligned>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	4e0e      	ldr	r6, [pc, #56]	; (8009b7c <sbrk_aligned+0x3c>)
 8009b44:	460c      	mov	r4, r1
 8009b46:	6831      	ldr	r1, [r6, #0]
 8009b48:	4605      	mov	r5, r0
 8009b4a:	b911      	cbnz	r1, 8009b52 <sbrk_aligned+0x12>
 8009b4c:	f000 f9e8 	bl	8009f20 <_sbrk_r>
 8009b50:	6030      	str	r0, [r6, #0]
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f000 f9e3 	bl	8009f20 <_sbrk_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d00a      	beq.n	8009b74 <sbrk_aligned+0x34>
 8009b5e:	1cc4      	adds	r4, r0, #3
 8009b60:	f024 0403 	bic.w	r4, r4, #3
 8009b64:	42a0      	cmp	r0, r4
 8009b66:	d007      	beq.n	8009b78 <sbrk_aligned+0x38>
 8009b68:	1a21      	subs	r1, r4, r0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f000 f9d8 	bl	8009f20 <_sbrk_r>
 8009b70:	3001      	adds	r0, #1
 8009b72:	d101      	bne.n	8009b78 <sbrk_aligned+0x38>
 8009b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009b78:	4620      	mov	r0, r4
 8009b7a:	bd70      	pop	{r4, r5, r6, pc}
 8009b7c:	20001858 	.word	0x20001858

08009b80 <_malloc_r>:
 8009b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b84:	1ccd      	adds	r5, r1, #3
 8009b86:	f025 0503 	bic.w	r5, r5, #3
 8009b8a:	3508      	adds	r5, #8
 8009b8c:	2d0c      	cmp	r5, #12
 8009b8e:	bf38      	it	cc
 8009b90:	250c      	movcc	r5, #12
 8009b92:	2d00      	cmp	r5, #0
 8009b94:	4607      	mov	r7, r0
 8009b96:	db01      	blt.n	8009b9c <_malloc_r+0x1c>
 8009b98:	42a9      	cmp	r1, r5
 8009b9a:	d905      	bls.n	8009ba8 <_malloc_r+0x28>
 8009b9c:	230c      	movs	r3, #12
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4630      	mov	r0, r6
 8009ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ba8:	4e2e      	ldr	r6, [pc, #184]	; (8009c64 <_malloc_r+0xe4>)
 8009baa:	f000 fa25 	bl	8009ff8 <__malloc_lock>
 8009bae:	6833      	ldr	r3, [r6, #0]
 8009bb0:	461c      	mov	r4, r3
 8009bb2:	bb34      	cbnz	r4, 8009c02 <_malloc_r+0x82>
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	f7ff ffc2 	bl	8009b40 <sbrk_aligned>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	d14d      	bne.n	8009c5e <_malloc_r+0xde>
 8009bc2:	6834      	ldr	r4, [r6, #0]
 8009bc4:	4626      	mov	r6, r4
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d140      	bne.n	8009c4c <_malloc_r+0xcc>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4638      	mov	r0, r7
 8009bd0:	eb04 0803 	add.w	r8, r4, r3
 8009bd4:	f000 f9a4 	bl	8009f20 <_sbrk_r>
 8009bd8:	4580      	cmp	r8, r0
 8009bda:	d13a      	bne.n	8009c52 <_malloc_r+0xd2>
 8009bdc:	6821      	ldr	r1, [r4, #0]
 8009bde:	3503      	adds	r5, #3
 8009be0:	1a6d      	subs	r5, r5, r1
 8009be2:	f025 0503 	bic.w	r5, r5, #3
 8009be6:	3508      	adds	r5, #8
 8009be8:	2d0c      	cmp	r5, #12
 8009bea:	bf38      	it	cc
 8009bec:	250c      	movcc	r5, #12
 8009bee:	4638      	mov	r0, r7
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7ff ffa5 	bl	8009b40 <sbrk_aligned>
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d02b      	beq.n	8009c52 <_malloc_r+0xd2>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	442b      	add	r3, r5
 8009bfe:	6023      	str	r3, [r4, #0]
 8009c00:	e00e      	b.n	8009c20 <_malloc_r+0xa0>
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	1b52      	subs	r2, r2, r5
 8009c06:	d41e      	bmi.n	8009c46 <_malloc_r+0xc6>
 8009c08:	2a0b      	cmp	r2, #11
 8009c0a:	d916      	bls.n	8009c3a <_malloc_r+0xba>
 8009c0c:	1961      	adds	r1, r4, r5
 8009c0e:	42a3      	cmp	r3, r4
 8009c10:	6025      	str	r5, [r4, #0]
 8009c12:	bf18      	it	ne
 8009c14:	6059      	strne	r1, [r3, #4]
 8009c16:	6863      	ldr	r3, [r4, #4]
 8009c18:	bf08      	it	eq
 8009c1a:	6031      	streq	r1, [r6, #0]
 8009c1c:	5162      	str	r2, [r4, r5]
 8009c1e:	604b      	str	r3, [r1, #4]
 8009c20:	4638      	mov	r0, r7
 8009c22:	f104 060b 	add.w	r6, r4, #11
 8009c26:	f000 f9ed 	bl	800a004 <__malloc_unlock>
 8009c2a:	f026 0607 	bic.w	r6, r6, #7
 8009c2e:	1d23      	adds	r3, r4, #4
 8009c30:	1af2      	subs	r2, r6, r3
 8009c32:	d0b6      	beq.n	8009ba2 <_malloc_r+0x22>
 8009c34:	1b9b      	subs	r3, r3, r6
 8009c36:	50a3      	str	r3, [r4, r2]
 8009c38:	e7b3      	b.n	8009ba2 <_malloc_r+0x22>
 8009c3a:	6862      	ldr	r2, [r4, #4]
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	bf0c      	ite	eq
 8009c40:	6032      	streq	r2, [r6, #0]
 8009c42:	605a      	strne	r2, [r3, #4]
 8009c44:	e7ec      	b.n	8009c20 <_malloc_r+0xa0>
 8009c46:	4623      	mov	r3, r4
 8009c48:	6864      	ldr	r4, [r4, #4]
 8009c4a:	e7b2      	b.n	8009bb2 <_malloc_r+0x32>
 8009c4c:	4634      	mov	r4, r6
 8009c4e:	6876      	ldr	r6, [r6, #4]
 8009c50:	e7b9      	b.n	8009bc6 <_malloc_r+0x46>
 8009c52:	230c      	movs	r3, #12
 8009c54:	4638      	mov	r0, r7
 8009c56:	603b      	str	r3, [r7, #0]
 8009c58:	f000 f9d4 	bl	800a004 <__malloc_unlock>
 8009c5c:	e7a1      	b.n	8009ba2 <_malloc_r+0x22>
 8009c5e:	6025      	str	r5, [r4, #0]
 8009c60:	e7de      	b.n	8009c20 <_malloc_r+0xa0>
 8009c62:	bf00      	nop
 8009c64:	20001854 	.word	0x20001854

08009c68 <__ssputs_r>:
 8009c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c6c:	688e      	ldr	r6, [r1, #8]
 8009c6e:	4682      	mov	sl, r0
 8009c70:	429e      	cmp	r6, r3
 8009c72:	460c      	mov	r4, r1
 8009c74:	4690      	mov	r8, r2
 8009c76:	461f      	mov	r7, r3
 8009c78:	d838      	bhi.n	8009cec <__ssputs_r+0x84>
 8009c7a:	898a      	ldrh	r2, [r1, #12]
 8009c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c80:	d032      	beq.n	8009ce8 <__ssputs_r+0x80>
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	6909      	ldr	r1, [r1, #16]
 8009c86:	3301      	adds	r3, #1
 8009c88:	eba5 0901 	sub.w	r9, r5, r1
 8009c8c:	6965      	ldr	r5, [r4, #20]
 8009c8e:	444b      	add	r3, r9
 8009c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c98:	106d      	asrs	r5, r5, #1
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	bf38      	it	cc
 8009c9e:	461d      	movcc	r5, r3
 8009ca0:	0553      	lsls	r3, r2, #21
 8009ca2:	d531      	bpl.n	8009d08 <__ssputs_r+0xa0>
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	f7ff ff6b 	bl	8009b80 <_malloc_r>
 8009caa:	4606      	mov	r6, r0
 8009cac:	b950      	cbnz	r0, 8009cc4 <__ssputs_r+0x5c>
 8009cae:	230c      	movs	r3, #12
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb4:	f8ca 3000 	str.w	r3, [sl]
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbe:	81a3      	strh	r3, [r4, #12]
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc4:	464a      	mov	r2, r9
 8009cc6:	6921      	ldr	r1, [r4, #16]
 8009cc8:	f7ff fb4e 	bl	8009368 <memcpy>
 8009ccc:	89a3      	ldrh	r3, [r4, #12]
 8009cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	6126      	str	r6, [r4, #16]
 8009cda:	444e      	add	r6, r9
 8009cdc:	6026      	str	r6, [r4, #0]
 8009cde:	463e      	mov	r6, r7
 8009ce0:	6165      	str	r5, [r4, #20]
 8009ce2:	eba5 0509 	sub.w	r5, r5, r9
 8009ce6:	60a5      	str	r5, [r4, #8]
 8009ce8:	42be      	cmp	r6, r7
 8009cea:	d900      	bls.n	8009cee <__ssputs_r+0x86>
 8009cec:	463e      	mov	r6, r7
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4641      	mov	r1, r8
 8009cf2:	6820      	ldr	r0, [r4, #0]
 8009cf4:	f000 f966 	bl	8009fc4 <memmove>
 8009cf8:	68a3      	ldr	r3, [r4, #8]
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	1b9b      	subs	r3, r3, r6
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	4433      	add	r3, r6
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	e7db      	b.n	8009cc0 <__ssputs_r+0x58>
 8009d08:	462a      	mov	r2, r5
 8009d0a:	f000 f981 	bl	800a010 <_realloc_r>
 8009d0e:	4606      	mov	r6, r0
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d1e1      	bne.n	8009cd8 <__ssputs_r+0x70>
 8009d14:	4650      	mov	r0, sl
 8009d16:	6921      	ldr	r1, [r4, #16]
 8009d18:	f7ff feca 	bl	8009ab0 <_free_r>
 8009d1c:	e7c7      	b.n	8009cae <__ssputs_r+0x46>
	...

08009d20 <_svfiprintf_r>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	4698      	mov	r8, r3
 8009d26:	898b      	ldrh	r3, [r1, #12]
 8009d28:	4607      	mov	r7, r0
 8009d2a:	061b      	lsls	r3, r3, #24
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	4614      	mov	r4, r2
 8009d30:	b09d      	sub	sp, #116	; 0x74
 8009d32:	d50e      	bpl.n	8009d52 <_svfiprintf_r+0x32>
 8009d34:	690b      	ldr	r3, [r1, #16]
 8009d36:	b963      	cbnz	r3, 8009d52 <_svfiprintf_r+0x32>
 8009d38:	2140      	movs	r1, #64	; 0x40
 8009d3a:	f7ff ff21 	bl	8009b80 <_malloc_r>
 8009d3e:	6028      	str	r0, [r5, #0]
 8009d40:	6128      	str	r0, [r5, #16]
 8009d42:	b920      	cbnz	r0, 8009d4e <_svfiprintf_r+0x2e>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4c:	e0d1      	b.n	8009ef2 <_svfiprintf_r+0x1d2>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	616b      	str	r3, [r5, #20]
 8009d52:	2300      	movs	r3, #0
 8009d54:	9309      	str	r3, [sp, #36]	; 0x24
 8009d56:	2320      	movs	r3, #32
 8009d58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d5c:	2330      	movs	r3, #48	; 0x30
 8009d5e:	f04f 0901 	mov.w	r9, #1
 8009d62:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f0c <_svfiprintf_r+0x1ec>
 8009d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d6e:	4623      	mov	r3, r4
 8009d70:	469a      	mov	sl, r3
 8009d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d76:	b10a      	cbz	r2, 8009d7c <_svfiprintf_r+0x5c>
 8009d78:	2a25      	cmp	r2, #37	; 0x25
 8009d7a:	d1f9      	bne.n	8009d70 <_svfiprintf_r+0x50>
 8009d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d80:	d00b      	beq.n	8009d9a <_svfiprintf_r+0x7a>
 8009d82:	465b      	mov	r3, fp
 8009d84:	4622      	mov	r2, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	4638      	mov	r0, r7
 8009d8a:	f7ff ff6d 	bl	8009c68 <__ssputs_r>
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f000 80aa 	beq.w	8009ee8 <_svfiprintf_r+0x1c8>
 8009d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d96:	445a      	add	r2, fp
 8009d98:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 80a2 	beq.w	8009ee8 <_svfiprintf_r+0x1c8>
 8009da4:	2300      	movs	r3, #0
 8009da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dae:	f10a 0a01 	add.w	sl, sl, #1
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	9307      	str	r3, [sp, #28]
 8009db6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dba:	931a      	str	r3, [sp, #104]	; 0x68
 8009dbc:	4654      	mov	r4, sl
 8009dbe:	2205      	movs	r2, #5
 8009dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc4:	4851      	ldr	r0, [pc, #324]	; (8009f0c <_svfiprintf_r+0x1ec>)
 8009dc6:	f7ff fac1 	bl	800934c <memchr>
 8009dca:	9a04      	ldr	r2, [sp, #16]
 8009dcc:	b9d8      	cbnz	r0, 8009e06 <_svfiprintf_r+0xe6>
 8009dce:	06d0      	lsls	r0, r2, #27
 8009dd0:	bf44      	itt	mi
 8009dd2:	2320      	movmi	r3, #32
 8009dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd8:	0711      	lsls	r1, r2, #28
 8009dda:	bf44      	itt	mi
 8009ddc:	232b      	movmi	r3, #43	; 0x2b
 8009dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de2:	f89a 3000 	ldrb.w	r3, [sl]
 8009de6:	2b2a      	cmp	r3, #42	; 0x2a
 8009de8:	d015      	beq.n	8009e16 <_svfiprintf_r+0xf6>
 8009dea:	4654      	mov	r4, sl
 8009dec:	2000      	movs	r0, #0
 8009dee:	f04f 0c0a 	mov.w	ip, #10
 8009df2:	9a07      	ldr	r2, [sp, #28]
 8009df4:	4621      	mov	r1, r4
 8009df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfa:	3b30      	subs	r3, #48	; 0x30
 8009dfc:	2b09      	cmp	r3, #9
 8009dfe:	d94e      	bls.n	8009e9e <_svfiprintf_r+0x17e>
 8009e00:	b1b0      	cbz	r0, 8009e30 <_svfiprintf_r+0x110>
 8009e02:	9207      	str	r2, [sp, #28]
 8009e04:	e014      	b.n	8009e30 <_svfiprintf_r+0x110>
 8009e06:	eba0 0308 	sub.w	r3, r0, r8
 8009e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	46a2      	mov	sl, r4
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	e7d2      	b.n	8009dbc <_svfiprintf_r+0x9c>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	1d19      	adds	r1, r3, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	9103      	str	r1, [sp, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfbb      	ittet	lt
 8009e22:	425b      	neglt	r3, r3
 8009e24:	f042 0202 	orrlt.w	r2, r2, #2
 8009e28:	9307      	strge	r3, [sp, #28]
 8009e2a:	9307      	strlt	r3, [sp, #28]
 8009e2c:	bfb8      	it	lt
 8009e2e:	9204      	strlt	r2, [sp, #16]
 8009e30:	7823      	ldrb	r3, [r4, #0]
 8009e32:	2b2e      	cmp	r3, #46	; 0x2e
 8009e34:	d10c      	bne.n	8009e50 <_svfiprintf_r+0x130>
 8009e36:	7863      	ldrb	r3, [r4, #1]
 8009e38:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3a:	d135      	bne.n	8009ea8 <_svfiprintf_r+0x188>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	3402      	adds	r4, #2
 8009e40:	1d1a      	adds	r2, r3, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	9203      	str	r2, [sp, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bfb8      	it	lt
 8009e4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e4e:	9305      	str	r3, [sp, #20]
 8009e50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009f10 <_svfiprintf_r+0x1f0>
 8009e54:	2203      	movs	r2, #3
 8009e56:	4650      	mov	r0, sl
 8009e58:	7821      	ldrb	r1, [r4, #0]
 8009e5a:	f7ff fa77 	bl	800934c <memchr>
 8009e5e:	b140      	cbz	r0, 8009e72 <_svfiprintf_r+0x152>
 8009e60:	2340      	movs	r3, #64	; 0x40
 8009e62:	eba0 000a 	sub.w	r0, r0, sl
 8009e66:	fa03 f000 	lsl.w	r0, r3, r0
 8009e6a:	9b04      	ldr	r3, [sp, #16]
 8009e6c:	3401      	adds	r4, #1
 8009e6e:	4303      	orrs	r3, r0
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e76:	2206      	movs	r2, #6
 8009e78:	4826      	ldr	r0, [pc, #152]	; (8009f14 <_svfiprintf_r+0x1f4>)
 8009e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e7e:	f7ff fa65 	bl	800934c <memchr>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d038      	beq.n	8009ef8 <_svfiprintf_r+0x1d8>
 8009e86:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <_svfiprintf_r+0x1f8>)
 8009e88:	bb1b      	cbnz	r3, 8009ed2 <_svfiprintf_r+0x1b2>
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	3307      	adds	r3, #7
 8009e8e:	f023 0307 	bic.w	r3, r3, #7
 8009e92:	3308      	adds	r3, #8
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e98:	4433      	add	r3, r6
 8009e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9c:	e767      	b.n	8009d6e <_svfiprintf_r+0x4e>
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	2001      	movs	r0, #1
 8009ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea6:	e7a5      	b.n	8009df4 <_svfiprintf_r+0xd4>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4619      	mov	r1, r3
 8009eb0:	3401      	adds	r4, #1
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eba:	3a30      	subs	r2, #48	; 0x30
 8009ebc:	2a09      	cmp	r2, #9
 8009ebe:	d903      	bls.n	8009ec8 <_svfiprintf_r+0x1a8>
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0c5      	beq.n	8009e50 <_svfiprintf_r+0x130>
 8009ec4:	9105      	str	r1, [sp, #20]
 8009ec6:	e7c3      	b.n	8009e50 <_svfiprintf_r+0x130>
 8009ec8:	4604      	mov	r4, r0
 8009eca:	2301      	movs	r3, #1
 8009ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed0:	e7f0      	b.n	8009eb4 <_svfiprintf_r+0x194>
 8009ed2:	ab03      	add	r3, sp, #12
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4638      	mov	r0, r7
 8009eda:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <_svfiprintf_r+0x1fc>)
 8009edc:	a904      	add	r1, sp, #16
 8009ede:	f7fd ff45 	bl	8007d6c <_printf_float>
 8009ee2:	1c42      	adds	r2, r0, #1
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	d1d6      	bne.n	8009e96 <_svfiprintf_r+0x176>
 8009ee8:	89ab      	ldrh	r3, [r5, #12]
 8009eea:	065b      	lsls	r3, r3, #25
 8009eec:	f53f af2c 	bmi.w	8009d48 <_svfiprintf_r+0x28>
 8009ef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef2:	b01d      	add	sp, #116	; 0x74
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	ab03      	add	r3, sp, #12
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	462a      	mov	r2, r5
 8009efe:	4638      	mov	r0, r7
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <_svfiprintf_r+0x1fc>)
 8009f02:	a904      	add	r1, sp, #16
 8009f04:	f7fe f9ce 	bl	80082a4 <_printf_i>
 8009f08:	e7eb      	b.n	8009ee2 <_svfiprintf_r+0x1c2>
 8009f0a:	bf00      	nop
 8009f0c:	0800b544 	.word	0x0800b544
 8009f10:	0800b54a 	.word	0x0800b54a
 8009f14:	0800b54e 	.word	0x0800b54e
 8009f18:	08007d6d 	.word	0x08007d6d
 8009f1c:	08009c69 	.word	0x08009c69

08009f20 <_sbrk_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	2300      	movs	r3, #0
 8009f24:	4d05      	ldr	r5, [pc, #20]	; (8009f3c <_sbrk_r+0x1c>)
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	602b      	str	r3, [r5, #0]
 8009f2c:	f7f9 faba 	bl	80034a4 <_sbrk>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_sbrk_r+0x1a>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_sbrk_r+0x1a>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	2000185c 	.word	0x2000185c

08009f40 <__assert_func>:
 8009f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f42:	4614      	mov	r4, r2
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <__assert_func+0x2c>)
 8009f48:	4605      	mov	r5, r0
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68d8      	ldr	r0, [r3, #12]
 8009f4e:	b14c      	cbz	r4, 8009f64 <__assert_func+0x24>
 8009f50:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <__assert_func+0x30>)
 8009f52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f56:	9100      	str	r1, [sp, #0]
 8009f58:	462b      	mov	r3, r5
 8009f5a:	4906      	ldr	r1, [pc, #24]	; (8009f74 <__assert_func+0x34>)
 8009f5c:	f000 f80e 	bl	8009f7c <fiprintf>
 8009f60:	f000 faaa 	bl	800a4b8 <abort>
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <__assert_func+0x38>)
 8009f66:	461c      	mov	r4, r3
 8009f68:	e7f3      	b.n	8009f52 <__assert_func+0x12>
 8009f6a:	bf00      	nop
 8009f6c:	200000b8 	.word	0x200000b8
 8009f70:	0800b555 	.word	0x0800b555
 8009f74:	0800b562 	.word	0x0800b562
 8009f78:	0800b590 	.word	0x0800b590

08009f7c <fiprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	b503      	push	{r0, r1, lr}
 8009f80:	4601      	mov	r1, r0
 8009f82:	ab03      	add	r3, sp, #12
 8009f84:	4805      	ldr	r0, [pc, #20]	; (8009f9c <fiprintf+0x20>)
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	6800      	ldr	r0, [r0, #0]
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	f000 f895 	bl	800a0bc <_vfiprintf_r>
 8009f92:	b002      	add	sp, #8
 8009f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f98:	b003      	add	sp, #12
 8009f9a:	4770      	bx	lr
 8009f9c:	200000b8 	.word	0x200000b8

08009fa0 <__ascii_mbtowc>:
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	b901      	cbnz	r1, 8009fa6 <__ascii_mbtowc+0x6>
 8009fa4:	a901      	add	r1, sp, #4
 8009fa6:	b142      	cbz	r2, 8009fba <__ascii_mbtowc+0x1a>
 8009fa8:	b14b      	cbz	r3, 8009fbe <__ascii_mbtowc+0x1e>
 8009faa:	7813      	ldrb	r3, [r2, #0]
 8009fac:	600b      	str	r3, [r1, #0]
 8009fae:	7812      	ldrb	r2, [r2, #0]
 8009fb0:	1e10      	subs	r0, r2, #0
 8009fb2:	bf18      	it	ne
 8009fb4:	2001      	movne	r0, #1
 8009fb6:	b002      	add	sp, #8
 8009fb8:	4770      	bx	lr
 8009fba:	4610      	mov	r0, r2
 8009fbc:	e7fb      	b.n	8009fb6 <__ascii_mbtowc+0x16>
 8009fbe:	f06f 0001 	mvn.w	r0, #1
 8009fc2:	e7f8      	b.n	8009fb6 <__ascii_mbtowc+0x16>

08009fc4 <memmove>:
 8009fc4:	4288      	cmp	r0, r1
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	eb01 0402 	add.w	r4, r1, r2
 8009fcc:	d902      	bls.n	8009fd4 <memmove+0x10>
 8009fce:	4284      	cmp	r4, r0
 8009fd0:	4623      	mov	r3, r4
 8009fd2:	d807      	bhi.n	8009fe4 <memmove+0x20>
 8009fd4:	1e43      	subs	r3, r0, #1
 8009fd6:	42a1      	cmp	r1, r4
 8009fd8:	d008      	beq.n	8009fec <memmove+0x28>
 8009fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fe2:	e7f8      	b.n	8009fd6 <memmove+0x12>
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	4402      	add	r2, r0
 8009fe8:	428a      	cmp	r2, r1
 8009fea:	d100      	bne.n	8009fee <memmove+0x2a>
 8009fec:	bd10      	pop	{r4, pc}
 8009fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ff6:	e7f7      	b.n	8009fe8 <memmove+0x24>

08009ff8 <__malloc_lock>:
 8009ff8:	4801      	ldr	r0, [pc, #4]	; (800a000 <__malloc_lock+0x8>)
 8009ffa:	f000 bc19 	b.w	800a830 <__retarget_lock_acquire_recursive>
 8009ffe:	bf00      	nop
 800a000:	20001860 	.word	0x20001860

0800a004 <__malloc_unlock>:
 800a004:	4801      	ldr	r0, [pc, #4]	; (800a00c <__malloc_unlock+0x8>)
 800a006:	f000 bc14 	b.w	800a832 <__retarget_lock_release_recursive>
 800a00a:	bf00      	nop
 800a00c:	20001860 	.word	0x20001860

0800a010 <_realloc_r>:
 800a010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a014:	4680      	mov	r8, r0
 800a016:	4614      	mov	r4, r2
 800a018:	460e      	mov	r6, r1
 800a01a:	b921      	cbnz	r1, 800a026 <_realloc_r+0x16>
 800a01c:	4611      	mov	r1, r2
 800a01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a022:	f7ff bdad 	b.w	8009b80 <_malloc_r>
 800a026:	b92a      	cbnz	r2, 800a034 <_realloc_r+0x24>
 800a028:	f7ff fd42 	bl	8009ab0 <_free_r>
 800a02c:	4625      	mov	r5, r4
 800a02e:	4628      	mov	r0, r5
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	f000 fc64 	bl	800a900 <_malloc_usable_size_r>
 800a038:	4284      	cmp	r4, r0
 800a03a:	4607      	mov	r7, r0
 800a03c:	d802      	bhi.n	800a044 <_realloc_r+0x34>
 800a03e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a042:	d812      	bhi.n	800a06a <_realloc_r+0x5a>
 800a044:	4621      	mov	r1, r4
 800a046:	4640      	mov	r0, r8
 800a048:	f7ff fd9a 	bl	8009b80 <_malloc_r>
 800a04c:	4605      	mov	r5, r0
 800a04e:	2800      	cmp	r0, #0
 800a050:	d0ed      	beq.n	800a02e <_realloc_r+0x1e>
 800a052:	42bc      	cmp	r4, r7
 800a054:	4622      	mov	r2, r4
 800a056:	4631      	mov	r1, r6
 800a058:	bf28      	it	cs
 800a05a:	463a      	movcs	r2, r7
 800a05c:	f7ff f984 	bl	8009368 <memcpy>
 800a060:	4631      	mov	r1, r6
 800a062:	4640      	mov	r0, r8
 800a064:	f7ff fd24 	bl	8009ab0 <_free_r>
 800a068:	e7e1      	b.n	800a02e <_realloc_r+0x1e>
 800a06a:	4635      	mov	r5, r6
 800a06c:	e7df      	b.n	800a02e <_realloc_r+0x1e>

0800a06e <__sfputc_r>:
 800a06e:	6893      	ldr	r3, [r2, #8]
 800a070:	b410      	push	{r4}
 800a072:	3b01      	subs	r3, #1
 800a074:	2b00      	cmp	r3, #0
 800a076:	6093      	str	r3, [r2, #8]
 800a078:	da07      	bge.n	800a08a <__sfputc_r+0x1c>
 800a07a:	6994      	ldr	r4, [r2, #24]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	db01      	blt.n	800a084 <__sfputc_r+0x16>
 800a080:	290a      	cmp	r1, #10
 800a082:	d102      	bne.n	800a08a <__sfputc_r+0x1c>
 800a084:	bc10      	pop	{r4}
 800a086:	f000 b949 	b.w	800a31c <__swbuf_r>
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	1c58      	adds	r0, r3, #1
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	7019      	strb	r1, [r3, #0]
 800a092:	4608      	mov	r0, r1
 800a094:	bc10      	pop	{r4}
 800a096:	4770      	bx	lr

0800a098 <__sfputs_r>:
 800a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	4614      	mov	r4, r2
 800a0a0:	18d5      	adds	r5, r2, r3
 800a0a2:	42ac      	cmp	r4, r5
 800a0a4:	d101      	bne.n	800a0aa <__sfputs_r+0x12>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e007      	b.n	800a0ba <__sfputs_r+0x22>
 800a0aa:	463a      	mov	r2, r7
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b2:	f7ff ffdc 	bl	800a06e <__sfputc_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d1f3      	bne.n	800a0a2 <__sfputs_r+0xa>
 800a0ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a0bc <_vfiprintf_r>:
 800a0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	4614      	mov	r4, r2
 800a0c4:	4698      	mov	r8, r3
 800a0c6:	4606      	mov	r6, r0
 800a0c8:	b09d      	sub	sp, #116	; 0x74
 800a0ca:	b118      	cbz	r0, 800a0d4 <_vfiprintf_r+0x18>
 800a0cc:	6983      	ldr	r3, [r0, #24]
 800a0ce:	b90b      	cbnz	r3, 800a0d4 <_vfiprintf_r+0x18>
 800a0d0:	f000 fb10 	bl	800a6f4 <__sinit>
 800a0d4:	4b89      	ldr	r3, [pc, #548]	; (800a2fc <_vfiprintf_r+0x240>)
 800a0d6:	429d      	cmp	r5, r3
 800a0d8:	d11b      	bne.n	800a112 <_vfiprintf_r+0x56>
 800a0da:	6875      	ldr	r5, [r6, #4]
 800a0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0de:	07d9      	lsls	r1, r3, #31
 800a0e0:	d405      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	059a      	lsls	r2, r3, #22
 800a0e6:	d402      	bmi.n	800a0ee <_vfiprintf_r+0x32>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ea:	f000 fba1 	bl	800a830 <__retarget_lock_acquire_recursive>
 800a0ee:	89ab      	ldrh	r3, [r5, #12]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d501      	bpl.n	800a0f8 <_vfiprintf_r+0x3c>
 800a0f4:	692b      	ldr	r3, [r5, #16]
 800a0f6:	b9eb      	cbnz	r3, 800a134 <_vfiprintf_r+0x78>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f000 f96e 	bl	800a3dc <__swsetup_r>
 800a100:	b1c0      	cbz	r0, 800a134 <_vfiprintf_r+0x78>
 800a102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a104:	07dc      	lsls	r4, r3, #31
 800a106:	d50e      	bpl.n	800a126 <_vfiprintf_r+0x6a>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a10c:	b01d      	add	sp, #116	; 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	4b7b      	ldr	r3, [pc, #492]	; (800a300 <_vfiprintf_r+0x244>)
 800a114:	429d      	cmp	r5, r3
 800a116:	d101      	bne.n	800a11c <_vfiprintf_r+0x60>
 800a118:	68b5      	ldr	r5, [r6, #8]
 800a11a:	e7df      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a11c:	4b79      	ldr	r3, [pc, #484]	; (800a304 <_vfiprintf_r+0x248>)
 800a11e:	429d      	cmp	r5, r3
 800a120:	bf08      	it	eq
 800a122:	68f5      	ldreq	r5, [r6, #12]
 800a124:	e7da      	b.n	800a0dc <_vfiprintf_r+0x20>
 800a126:	89ab      	ldrh	r3, [r5, #12]
 800a128:	0598      	lsls	r0, r3, #22
 800a12a:	d4ed      	bmi.n	800a108 <_vfiprintf_r+0x4c>
 800a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a12e:	f000 fb80 	bl	800a832 <__retarget_lock_release_recursive>
 800a132:	e7e9      	b.n	800a108 <_vfiprintf_r+0x4c>
 800a134:	2300      	movs	r3, #0
 800a136:	9309      	str	r3, [sp, #36]	; 0x24
 800a138:	2320      	movs	r3, #32
 800a13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a13e:	2330      	movs	r3, #48	; 0x30
 800a140:	f04f 0901 	mov.w	r9, #1
 800a144:	f8cd 800c 	str.w	r8, [sp, #12]
 800a148:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a308 <_vfiprintf_r+0x24c>
 800a14c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a150:	4623      	mov	r3, r4
 800a152:	469a      	mov	sl, r3
 800a154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a158:	b10a      	cbz	r2, 800a15e <_vfiprintf_r+0xa2>
 800a15a:	2a25      	cmp	r2, #37	; 0x25
 800a15c:	d1f9      	bne.n	800a152 <_vfiprintf_r+0x96>
 800a15e:	ebba 0b04 	subs.w	fp, sl, r4
 800a162:	d00b      	beq.n	800a17c <_vfiprintf_r+0xc0>
 800a164:	465b      	mov	r3, fp
 800a166:	4622      	mov	r2, r4
 800a168:	4629      	mov	r1, r5
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff94 	bl	800a098 <__sfputs_r>
 800a170:	3001      	adds	r0, #1
 800a172:	f000 80aa 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a178:	445a      	add	r2, fp
 800a17a:	9209      	str	r2, [sp, #36]	; 0x24
 800a17c:	f89a 3000 	ldrb.w	r3, [sl]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f000 80a2 	beq.w	800a2ca <_vfiprintf_r+0x20e>
 800a186:	2300      	movs	r3, #0
 800a188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a190:	f10a 0a01 	add.w	sl, sl, #1
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a19c:	931a      	str	r3, [sp, #104]	; 0x68
 800a19e:	4654      	mov	r4, sl
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a6:	4858      	ldr	r0, [pc, #352]	; (800a308 <_vfiprintf_r+0x24c>)
 800a1a8:	f7ff f8d0 	bl	800934c <memchr>
 800a1ac:	9a04      	ldr	r2, [sp, #16]
 800a1ae:	b9d8      	cbnz	r0, 800a1e8 <_vfiprintf_r+0x12c>
 800a1b0:	06d1      	lsls	r1, r2, #27
 800a1b2:	bf44      	itt	mi
 800a1b4:	2320      	movmi	r3, #32
 800a1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ba:	0713      	lsls	r3, r2, #28
 800a1bc:	bf44      	itt	mi
 800a1be:	232b      	movmi	r3, #43	; 0x2b
 800a1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ca:	d015      	beq.n	800a1f8 <_vfiprintf_r+0x13c>
 800a1cc:	4654      	mov	r4, sl
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	f04f 0c0a 	mov.w	ip, #10
 800a1d4:	9a07      	ldr	r2, [sp, #28]
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1dc:	3b30      	subs	r3, #48	; 0x30
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d94e      	bls.n	800a280 <_vfiprintf_r+0x1c4>
 800a1e2:	b1b0      	cbz	r0, 800a212 <_vfiprintf_r+0x156>
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	e014      	b.n	800a212 <_vfiprintf_r+0x156>
 800a1e8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	46a2      	mov	sl, r4
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	e7d2      	b.n	800a19e <_vfiprintf_r+0xe2>
 800a1f8:	9b03      	ldr	r3, [sp, #12]
 800a1fa:	1d19      	adds	r1, r3, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	9103      	str	r1, [sp, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfbb      	ittet	lt
 800a204:	425b      	neglt	r3, r3
 800a206:	f042 0202 	orrlt.w	r2, r2, #2
 800a20a:	9307      	strge	r3, [sp, #28]
 800a20c:	9307      	strlt	r3, [sp, #28]
 800a20e:	bfb8      	it	lt
 800a210:	9204      	strlt	r2, [sp, #16]
 800a212:	7823      	ldrb	r3, [r4, #0]
 800a214:	2b2e      	cmp	r3, #46	; 0x2e
 800a216:	d10c      	bne.n	800a232 <_vfiprintf_r+0x176>
 800a218:	7863      	ldrb	r3, [r4, #1]
 800a21a:	2b2a      	cmp	r3, #42	; 0x2a
 800a21c:	d135      	bne.n	800a28a <_vfiprintf_r+0x1ce>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	3402      	adds	r4, #2
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	9203      	str	r2, [sp, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	bfb8      	it	lt
 800a22c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a230:	9305      	str	r3, [sp, #20]
 800a232:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a30c <_vfiprintf_r+0x250>
 800a236:	2203      	movs	r2, #3
 800a238:	4650      	mov	r0, sl
 800a23a:	7821      	ldrb	r1, [r4, #0]
 800a23c:	f7ff f886 	bl	800934c <memchr>
 800a240:	b140      	cbz	r0, 800a254 <_vfiprintf_r+0x198>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	eba0 000a 	sub.w	r0, r0, sl
 800a248:	fa03 f000 	lsl.w	r0, r3, r0
 800a24c:	9b04      	ldr	r3, [sp, #16]
 800a24e:	3401      	adds	r4, #1
 800a250:	4303      	orrs	r3, r0
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a258:	2206      	movs	r2, #6
 800a25a:	482d      	ldr	r0, [pc, #180]	; (800a310 <_vfiprintf_r+0x254>)
 800a25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a260:	f7ff f874 	bl	800934c <memchr>
 800a264:	2800      	cmp	r0, #0
 800a266:	d03f      	beq.n	800a2e8 <_vfiprintf_r+0x22c>
 800a268:	4b2a      	ldr	r3, [pc, #168]	; (800a314 <_vfiprintf_r+0x258>)
 800a26a:	bb1b      	cbnz	r3, 800a2b4 <_vfiprintf_r+0x1f8>
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	3307      	adds	r3, #7
 800a270:	f023 0307 	bic.w	r3, r3, #7
 800a274:	3308      	adds	r3, #8
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	443b      	add	r3, r7
 800a27c:	9309      	str	r3, [sp, #36]	; 0x24
 800a27e:	e767      	b.n	800a150 <_vfiprintf_r+0x94>
 800a280:	460c      	mov	r4, r1
 800a282:	2001      	movs	r0, #1
 800a284:	fb0c 3202 	mla	r2, ip, r2, r3
 800a288:	e7a5      	b.n	800a1d6 <_vfiprintf_r+0x11a>
 800a28a:	2300      	movs	r3, #0
 800a28c:	f04f 0c0a 	mov.w	ip, #10
 800a290:	4619      	mov	r1, r3
 800a292:	3401      	adds	r4, #1
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	4620      	mov	r0, r4
 800a298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a29c:	3a30      	subs	r2, #48	; 0x30
 800a29e:	2a09      	cmp	r2, #9
 800a2a0:	d903      	bls.n	800a2aa <_vfiprintf_r+0x1ee>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0c5      	beq.n	800a232 <_vfiprintf_r+0x176>
 800a2a6:	9105      	str	r1, [sp, #20]
 800a2a8:	e7c3      	b.n	800a232 <_vfiprintf_r+0x176>
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b2:	e7f0      	b.n	800a296 <_vfiprintf_r+0x1da>
 800a2b4:	ab03      	add	r3, sp, #12
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	4b16      	ldr	r3, [pc, #88]	; (800a318 <_vfiprintf_r+0x25c>)
 800a2be:	a904      	add	r1, sp, #16
 800a2c0:	f7fd fd54 	bl	8007d6c <_printf_float>
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	1c78      	adds	r0, r7, #1
 800a2c8:	d1d6      	bne.n	800a278 <_vfiprintf_r+0x1bc>
 800a2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2cc:	07d9      	lsls	r1, r3, #31
 800a2ce:	d405      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	059a      	lsls	r2, r3, #22
 800a2d4:	d402      	bmi.n	800a2dc <_vfiprintf_r+0x220>
 800a2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2d8:	f000 faab 	bl	800a832 <__retarget_lock_release_recursive>
 800a2dc:	89ab      	ldrh	r3, [r5, #12]
 800a2de:	065b      	lsls	r3, r3, #25
 800a2e0:	f53f af12 	bmi.w	800a108 <_vfiprintf_r+0x4c>
 800a2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e6:	e711      	b.n	800a10c <_vfiprintf_r+0x50>
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	462a      	mov	r2, r5
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	4b09      	ldr	r3, [pc, #36]	; (800a318 <_vfiprintf_r+0x25c>)
 800a2f2:	a904      	add	r1, sp, #16
 800a2f4:	f7fd ffd6 	bl	80082a4 <_printf_i>
 800a2f8:	e7e4      	b.n	800a2c4 <_vfiprintf_r+0x208>
 800a2fa:	bf00      	nop
 800a2fc:	0800b5bc 	.word	0x0800b5bc
 800a300:	0800b5dc 	.word	0x0800b5dc
 800a304:	0800b59c 	.word	0x0800b59c
 800a308:	0800b544 	.word	0x0800b544
 800a30c:	0800b54a 	.word	0x0800b54a
 800a310:	0800b54e 	.word	0x0800b54e
 800a314:	08007d6d 	.word	0x08007d6d
 800a318:	0800a099 	.word	0x0800a099

0800a31c <__swbuf_r>:
 800a31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31e:	460e      	mov	r6, r1
 800a320:	4614      	mov	r4, r2
 800a322:	4605      	mov	r5, r0
 800a324:	b118      	cbz	r0, 800a32e <__swbuf_r+0x12>
 800a326:	6983      	ldr	r3, [r0, #24]
 800a328:	b90b      	cbnz	r3, 800a32e <__swbuf_r+0x12>
 800a32a:	f000 f9e3 	bl	800a6f4 <__sinit>
 800a32e:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <__swbuf_r+0x98>)
 800a330:	429c      	cmp	r4, r3
 800a332:	d12b      	bne.n	800a38c <__swbuf_r+0x70>
 800a334:	686c      	ldr	r4, [r5, #4]
 800a336:	69a3      	ldr	r3, [r4, #24]
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	071a      	lsls	r2, r3, #28
 800a33e:	d52f      	bpl.n	800a3a0 <__swbuf_r+0x84>
 800a340:	6923      	ldr	r3, [r4, #16]
 800a342:	b36b      	cbz	r3, 800a3a0 <__swbuf_r+0x84>
 800a344:	6923      	ldr	r3, [r4, #16]
 800a346:	6820      	ldr	r0, [r4, #0]
 800a348:	b2f6      	uxtb	r6, r6
 800a34a:	1ac0      	subs	r0, r0, r3
 800a34c:	6963      	ldr	r3, [r4, #20]
 800a34e:	4637      	mov	r7, r6
 800a350:	4283      	cmp	r3, r0
 800a352:	dc04      	bgt.n	800a35e <__swbuf_r+0x42>
 800a354:	4621      	mov	r1, r4
 800a356:	4628      	mov	r0, r5
 800a358:	f000 f938 	bl	800a5cc <_fflush_r>
 800a35c:	bb30      	cbnz	r0, 800a3ac <__swbuf_r+0x90>
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	3001      	adds	r0, #1
 800a362:	3b01      	subs	r3, #1
 800a364:	60a3      	str	r3, [r4, #8]
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	6022      	str	r2, [r4, #0]
 800a36c:	701e      	strb	r6, [r3, #0]
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	4283      	cmp	r3, r0
 800a372:	d004      	beq.n	800a37e <__swbuf_r+0x62>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	07db      	lsls	r3, r3, #31
 800a378:	d506      	bpl.n	800a388 <__swbuf_r+0x6c>
 800a37a:	2e0a      	cmp	r6, #10
 800a37c:	d104      	bne.n	800a388 <__swbuf_r+0x6c>
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f000 f923 	bl	800a5cc <_fflush_r>
 800a386:	b988      	cbnz	r0, 800a3ac <__swbuf_r+0x90>
 800a388:	4638      	mov	r0, r7
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <__swbuf_r+0x9c>)
 800a38e:	429c      	cmp	r4, r3
 800a390:	d101      	bne.n	800a396 <__swbuf_r+0x7a>
 800a392:	68ac      	ldr	r4, [r5, #8]
 800a394:	e7cf      	b.n	800a336 <__swbuf_r+0x1a>
 800a396:	4b09      	ldr	r3, [pc, #36]	; (800a3bc <__swbuf_r+0xa0>)
 800a398:	429c      	cmp	r4, r3
 800a39a:	bf08      	it	eq
 800a39c:	68ec      	ldreq	r4, [r5, #12]
 800a39e:	e7ca      	b.n	800a336 <__swbuf_r+0x1a>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	f000 f81a 	bl	800a3dc <__swsetup_r>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d0cb      	beq.n	800a344 <__swbuf_r+0x28>
 800a3ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3b0:	e7ea      	b.n	800a388 <__swbuf_r+0x6c>
 800a3b2:	bf00      	nop
 800a3b4:	0800b5bc 	.word	0x0800b5bc
 800a3b8:	0800b5dc 	.word	0x0800b5dc
 800a3bc:	0800b59c 	.word	0x0800b59c

0800a3c0 <__ascii_wctomb>:
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	b141      	cbz	r1, 800a3d8 <__ascii_wctomb+0x18>
 800a3c6:	2aff      	cmp	r2, #255	; 0xff
 800a3c8:	d904      	bls.n	800a3d4 <__ascii_wctomb+0x14>
 800a3ca:	228a      	movs	r2, #138	; 0x8a
 800a3cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	4770      	bx	lr
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	700a      	strb	r2, [r1, #0]
 800a3d8:	4770      	bx	lr
	...

0800a3dc <__swsetup_r>:
 800a3dc:	4b32      	ldr	r3, [pc, #200]	; (800a4a8 <__swsetup_r+0xcc>)
 800a3de:	b570      	push	{r4, r5, r6, lr}
 800a3e0:	681d      	ldr	r5, [r3, #0]
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	b125      	cbz	r5, 800a3f2 <__swsetup_r+0x16>
 800a3e8:	69ab      	ldr	r3, [r5, #24]
 800a3ea:	b913      	cbnz	r3, 800a3f2 <__swsetup_r+0x16>
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f000 f981 	bl	800a6f4 <__sinit>
 800a3f2:	4b2e      	ldr	r3, [pc, #184]	; (800a4ac <__swsetup_r+0xd0>)
 800a3f4:	429c      	cmp	r4, r3
 800a3f6:	d10f      	bne.n	800a418 <__swsetup_r+0x3c>
 800a3f8:	686c      	ldr	r4, [r5, #4]
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a400:	0719      	lsls	r1, r3, #28
 800a402:	d42c      	bmi.n	800a45e <__swsetup_r+0x82>
 800a404:	06dd      	lsls	r5, r3, #27
 800a406:	d411      	bmi.n	800a42c <__swsetup_r+0x50>
 800a408:	2309      	movs	r3, #9
 800a40a:	6033      	str	r3, [r6, #0]
 800a40c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a414:	81a3      	strh	r3, [r4, #12]
 800a416:	e03e      	b.n	800a496 <__swsetup_r+0xba>
 800a418:	4b25      	ldr	r3, [pc, #148]	; (800a4b0 <__swsetup_r+0xd4>)
 800a41a:	429c      	cmp	r4, r3
 800a41c:	d101      	bne.n	800a422 <__swsetup_r+0x46>
 800a41e:	68ac      	ldr	r4, [r5, #8]
 800a420:	e7eb      	b.n	800a3fa <__swsetup_r+0x1e>
 800a422:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <__swsetup_r+0xd8>)
 800a424:	429c      	cmp	r4, r3
 800a426:	bf08      	it	eq
 800a428:	68ec      	ldreq	r4, [r5, #12]
 800a42a:	e7e6      	b.n	800a3fa <__swsetup_r+0x1e>
 800a42c:	0758      	lsls	r0, r3, #29
 800a42e:	d512      	bpl.n	800a456 <__swsetup_r+0x7a>
 800a430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a432:	b141      	cbz	r1, 800a446 <__swsetup_r+0x6a>
 800a434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a438:	4299      	cmp	r1, r3
 800a43a:	d002      	beq.n	800a442 <__swsetup_r+0x66>
 800a43c:	4630      	mov	r0, r6
 800a43e:	f7ff fb37 	bl	8009ab0 <_free_r>
 800a442:	2300      	movs	r3, #0
 800a444:	6363      	str	r3, [r4, #52]	; 0x34
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	2300      	movs	r3, #0
 800a450:	6063      	str	r3, [r4, #4]
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f043 0308 	orr.w	r3, r3, #8
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	b94b      	cbnz	r3, 800a476 <__swsetup_r+0x9a>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a46c:	d003      	beq.n	800a476 <__swsetup_r+0x9a>
 800a46e:	4621      	mov	r1, r4
 800a470:	4630      	mov	r0, r6
 800a472:	f000 fa05 	bl	800a880 <__smakebuf_r>
 800a476:	89a0      	ldrh	r0, [r4, #12]
 800a478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a47c:	f010 0301 	ands.w	r3, r0, #1
 800a480:	d00a      	beq.n	800a498 <__swsetup_r+0xbc>
 800a482:	2300      	movs	r3, #0
 800a484:	60a3      	str	r3, [r4, #8]
 800a486:	6963      	ldr	r3, [r4, #20]
 800a488:	425b      	negs	r3, r3
 800a48a:	61a3      	str	r3, [r4, #24]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	b943      	cbnz	r3, 800a4a2 <__swsetup_r+0xc6>
 800a490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a494:	d1ba      	bne.n	800a40c <__swsetup_r+0x30>
 800a496:	bd70      	pop	{r4, r5, r6, pc}
 800a498:	0781      	lsls	r1, r0, #30
 800a49a:	bf58      	it	pl
 800a49c:	6963      	ldrpl	r3, [r4, #20]
 800a49e:	60a3      	str	r3, [r4, #8]
 800a4a0:	e7f4      	b.n	800a48c <__swsetup_r+0xb0>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e7f7      	b.n	800a496 <__swsetup_r+0xba>
 800a4a6:	bf00      	nop
 800a4a8:	200000b8 	.word	0x200000b8
 800a4ac:	0800b5bc 	.word	0x0800b5bc
 800a4b0:	0800b5dc 	.word	0x0800b5dc
 800a4b4:	0800b59c 	.word	0x0800b59c

0800a4b8 <abort>:
 800a4b8:	2006      	movs	r0, #6
 800a4ba:	b508      	push	{r3, lr}
 800a4bc:	f000 fa50 	bl	800a960 <raise>
 800a4c0:	2001      	movs	r0, #1
 800a4c2:	f7f8 ff7c 	bl	80033be <_exit>
	...

0800a4c8 <__sflush_r>:
 800a4c8:	898a      	ldrh	r2, [r1, #12]
 800a4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	0710      	lsls	r0, r2, #28
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	d457      	bmi.n	800a584 <__sflush_r+0xbc>
 800a4d4:	684b      	ldr	r3, [r1, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dc04      	bgt.n	800a4e4 <__sflush_r+0x1c>
 800a4da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc01      	bgt.n	800a4e4 <__sflush_r+0x1c>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d0fa      	beq.n	800a4e0 <__sflush_r+0x18>
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4f0:	682f      	ldr	r7, [r5, #0]
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	d032      	beq.n	800a55c <__sflush_r+0x94>
 800a4f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	075a      	lsls	r2, r3, #29
 800a4fc:	d505      	bpl.n	800a50a <__sflush_r+0x42>
 800a4fe:	6863      	ldr	r3, [r4, #4]
 800a500:	1ac0      	subs	r0, r0, r3
 800a502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a504:	b10b      	cbz	r3, 800a50a <__sflush_r+0x42>
 800a506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a508:	1ac0      	subs	r0, r0, r3
 800a50a:	2300      	movs	r3, #0
 800a50c:	4602      	mov	r2, r0
 800a50e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a510:	4628      	mov	r0, r5
 800a512:	6a21      	ldr	r1, [r4, #32]
 800a514:	47b0      	blx	r6
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	d106      	bne.n	800a52a <__sflush_r+0x62>
 800a51c:	6829      	ldr	r1, [r5, #0]
 800a51e:	291d      	cmp	r1, #29
 800a520:	d82c      	bhi.n	800a57c <__sflush_r+0xb4>
 800a522:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <__sflush_r+0x100>)
 800a524:	40ca      	lsrs	r2, r1
 800a526:	07d6      	lsls	r6, r2, #31
 800a528:	d528      	bpl.n	800a57c <__sflush_r+0xb4>
 800a52a:	2200      	movs	r2, #0
 800a52c:	6062      	str	r2, [r4, #4]
 800a52e:	6922      	ldr	r2, [r4, #16]
 800a530:	04d9      	lsls	r1, r3, #19
 800a532:	6022      	str	r2, [r4, #0]
 800a534:	d504      	bpl.n	800a540 <__sflush_r+0x78>
 800a536:	1c42      	adds	r2, r0, #1
 800a538:	d101      	bne.n	800a53e <__sflush_r+0x76>
 800a53a:	682b      	ldr	r3, [r5, #0]
 800a53c:	b903      	cbnz	r3, 800a540 <__sflush_r+0x78>
 800a53e:	6560      	str	r0, [r4, #84]	; 0x54
 800a540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a542:	602f      	str	r7, [r5, #0]
 800a544:	2900      	cmp	r1, #0
 800a546:	d0cb      	beq.n	800a4e0 <__sflush_r+0x18>
 800a548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a54c:	4299      	cmp	r1, r3
 800a54e:	d002      	beq.n	800a556 <__sflush_r+0x8e>
 800a550:	4628      	mov	r0, r5
 800a552:	f7ff faad 	bl	8009ab0 <_free_r>
 800a556:	2000      	movs	r0, #0
 800a558:	6360      	str	r0, [r4, #52]	; 0x34
 800a55a:	e7c2      	b.n	800a4e2 <__sflush_r+0x1a>
 800a55c:	6a21      	ldr	r1, [r4, #32]
 800a55e:	2301      	movs	r3, #1
 800a560:	4628      	mov	r0, r5
 800a562:	47b0      	blx	r6
 800a564:	1c41      	adds	r1, r0, #1
 800a566:	d1c7      	bne.n	800a4f8 <__sflush_r+0x30>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0c4      	beq.n	800a4f8 <__sflush_r+0x30>
 800a56e:	2b1d      	cmp	r3, #29
 800a570:	d001      	beq.n	800a576 <__sflush_r+0xae>
 800a572:	2b16      	cmp	r3, #22
 800a574:	d101      	bne.n	800a57a <__sflush_r+0xb2>
 800a576:	602f      	str	r7, [r5, #0]
 800a578:	e7b2      	b.n	800a4e0 <__sflush_r+0x18>
 800a57a:	89a3      	ldrh	r3, [r4, #12]
 800a57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	e7ae      	b.n	800a4e2 <__sflush_r+0x1a>
 800a584:	690f      	ldr	r7, [r1, #16]
 800a586:	2f00      	cmp	r7, #0
 800a588:	d0aa      	beq.n	800a4e0 <__sflush_r+0x18>
 800a58a:	0793      	lsls	r3, r2, #30
 800a58c:	bf18      	it	ne
 800a58e:	2300      	movne	r3, #0
 800a590:	680e      	ldr	r6, [r1, #0]
 800a592:	bf08      	it	eq
 800a594:	694b      	ldreq	r3, [r1, #20]
 800a596:	1bf6      	subs	r6, r6, r7
 800a598:	600f      	str	r7, [r1, #0]
 800a59a:	608b      	str	r3, [r1, #8]
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	dd9f      	ble.n	800a4e0 <__sflush_r+0x18>
 800a5a0:	4633      	mov	r3, r6
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	6a21      	ldr	r1, [r4, #32]
 800a5a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a5ac:	47e0      	blx	ip
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	dc06      	bgt.n	800a5c0 <__sflush_r+0xf8>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	e790      	b.n	800a4e2 <__sflush_r+0x1a>
 800a5c0:	4407      	add	r7, r0
 800a5c2:	1a36      	subs	r6, r6, r0
 800a5c4:	e7ea      	b.n	800a59c <__sflush_r+0xd4>
 800a5c6:	bf00      	nop
 800a5c8:	20400001 	.word	0x20400001

0800a5cc <_fflush_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	b913      	cbnz	r3, 800a5dc <_fflush_r+0x10>
 800a5d6:	2500      	movs	r5, #0
 800a5d8:	4628      	mov	r0, r5
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	b118      	cbz	r0, 800a5e6 <_fflush_r+0x1a>
 800a5de:	6983      	ldr	r3, [r0, #24]
 800a5e0:	b90b      	cbnz	r3, 800a5e6 <_fflush_r+0x1a>
 800a5e2:	f000 f887 	bl	800a6f4 <__sinit>
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <_fflush_r+0x6c>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	d11b      	bne.n	800a624 <_fflush_r+0x58>
 800a5ec:	686c      	ldr	r4, [r5, #4]
 800a5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d0ef      	beq.n	800a5d6 <_fflush_r+0xa>
 800a5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5f8:	07d0      	lsls	r0, r2, #31
 800a5fa:	d404      	bmi.n	800a606 <_fflush_r+0x3a>
 800a5fc:	0599      	lsls	r1, r3, #22
 800a5fe:	d402      	bmi.n	800a606 <_fflush_r+0x3a>
 800a600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a602:	f000 f915 	bl	800a830 <__retarget_lock_acquire_recursive>
 800a606:	4628      	mov	r0, r5
 800a608:	4621      	mov	r1, r4
 800a60a:	f7ff ff5d 	bl	800a4c8 <__sflush_r>
 800a60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a610:	4605      	mov	r5, r0
 800a612:	07da      	lsls	r2, r3, #31
 800a614:	d4e0      	bmi.n	800a5d8 <_fflush_r+0xc>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	059b      	lsls	r3, r3, #22
 800a61a:	d4dd      	bmi.n	800a5d8 <_fflush_r+0xc>
 800a61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a61e:	f000 f908 	bl	800a832 <__retarget_lock_release_recursive>
 800a622:	e7d9      	b.n	800a5d8 <_fflush_r+0xc>
 800a624:	4b05      	ldr	r3, [pc, #20]	; (800a63c <_fflush_r+0x70>)
 800a626:	429c      	cmp	r4, r3
 800a628:	d101      	bne.n	800a62e <_fflush_r+0x62>
 800a62a:	68ac      	ldr	r4, [r5, #8]
 800a62c:	e7df      	b.n	800a5ee <_fflush_r+0x22>
 800a62e:	4b04      	ldr	r3, [pc, #16]	; (800a640 <_fflush_r+0x74>)
 800a630:	429c      	cmp	r4, r3
 800a632:	bf08      	it	eq
 800a634:	68ec      	ldreq	r4, [r5, #12]
 800a636:	e7da      	b.n	800a5ee <_fflush_r+0x22>
 800a638:	0800b5bc 	.word	0x0800b5bc
 800a63c:	0800b5dc 	.word	0x0800b5dc
 800a640:	0800b59c 	.word	0x0800b59c

0800a644 <std>:
 800a644:	2300      	movs	r3, #0
 800a646:	b510      	push	{r4, lr}
 800a648:	4604      	mov	r4, r0
 800a64a:	e9c0 3300 	strd	r3, r3, [r0]
 800a64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a652:	6083      	str	r3, [r0, #8]
 800a654:	8181      	strh	r1, [r0, #12]
 800a656:	6643      	str	r3, [r0, #100]	; 0x64
 800a658:	81c2      	strh	r2, [r0, #14]
 800a65a:	6183      	str	r3, [r0, #24]
 800a65c:	4619      	mov	r1, r3
 800a65e:	2208      	movs	r2, #8
 800a660:	305c      	adds	r0, #92	; 0x5c
 800a662:	f7fd fadd 	bl	8007c20 <memset>
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <std+0x38>)
 800a668:	6224      	str	r4, [r4, #32]
 800a66a:	6263      	str	r3, [r4, #36]	; 0x24
 800a66c:	4b04      	ldr	r3, [pc, #16]	; (800a680 <std+0x3c>)
 800a66e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a670:	4b04      	ldr	r3, [pc, #16]	; (800a684 <std+0x40>)
 800a672:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a674:	4b04      	ldr	r3, [pc, #16]	; (800a688 <std+0x44>)
 800a676:	6323      	str	r3, [r4, #48]	; 0x30
 800a678:	bd10      	pop	{r4, pc}
 800a67a:	bf00      	nop
 800a67c:	0800a999 	.word	0x0800a999
 800a680:	0800a9bb 	.word	0x0800a9bb
 800a684:	0800a9f3 	.word	0x0800a9f3
 800a688:	0800aa17 	.word	0x0800aa17

0800a68c <_cleanup_r>:
 800a68c:	4901      	ldr	r1, [pc, #4]	; (800a694 <_cleanup_r+0x8>)
 800a68e:	f000 b8af 	b.w	800a7f0 <_fwalk_reent>
 800a692:	bf00      	nop
 800a694:	0800a5cd 	.word	0x0800a5cd

0800a698 <__sfmoreglue>:
 800a698:	2268      	movs	r2, #104	; 0x68
 800a69a:	b570      	push	{r4, r5, r6, lr}
 800a69c:	1e4d      	subs	r5, r1, #1
 800a69e:	4355      	muls	r5, r2
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6a6:	f7ff fa6b 	bl	8009b80 <_malloc_r>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	b140      	cbz	r0, 800a6c0 <__sfmoreglue+0x28>
 800a6ae:	2100      	movs	r1, #0
 800a6b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a6b4:	300c      	adds	r0, #12
 800a6b6:	60a0      	str	r0, [r4, #8]
 800a6b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a6bc:	f7fd fab0 	bl	8007c20 <memset>
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}

0800a6c4 <__sfp_lock_acquire>:
 800a6c4:	4801      	ldr	r0, [pc, #4]	; (800a6cc <__sfp_lock_acquire+0x8>)
 800a6c6:	f000 b8b3 	b.w	800a830 <__retarget_lock_acquire_recursive>
 800a6ca:	bf00      	nop
 800a6cc:	20001861 	.word	0x20001861

0800a6d0 <__sfp_lock_release>:
 800a6d0:	4801      	ldr	r0, [pc, #4]	; (800a6d8 <__sfp_lock_release+0x8>)
 800a6d2:	f000 b8ae 	b.w	800a832 <__retarget_lock_release_recursive>
 800a6d6:	bf00      	nop
 800a6d8:	20001861 	.word	0x20001861

0800a6dc <__sinit_lock_acquire>:
 800a6dc:	4801      	ldr	r0, [pc, #4]	; (800a6e4 <__sinit_lock_acquire+0x8>)
 800a6de:	f000 b8a7 	b.w	800a830 <__retarget_lock_acquire_recursive>
 800a6e2:	bf00      	nop
 800a6e4:	20001862 	.word	0x20001862

0800a6e8 <__sinit_lock_release>:
 800a6e8:	4801      	ldr	r0, [pc, #4]	; (800a6f0 <__sinit_lock_release+0x8>)
 800a6ea:	f000 b8a2 	b.w	800a832 <__retarget_lock_release_recursive>
 800a6ee:	bf00      	nop
 800a6f0:	20001862 	.word	0x20001862

0800a6f4 <__sinit>:
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	f7ff fff0 	bl	800a6dc <__sinit_lock_acquire>
 800a6fc:	69a3      	ldr	r3, [r4, #24]
 800a6fe:	b11b      	cbz	r3, 800a708 <__sinit+0x14>
 800a700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a704:	f7ff bff0 	b.w	800a6e8 <__sinit_lock_release>
 800a708:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a70c:	6523      	str	r3, [r4, #80]	; 0x50
 800a70e:	4b13      	ldr	r3, [pc, #76]	; (800a75c <__sinit+0x68>)
 800a710:	4a13      	ldr	r2, [pc, #76]	; (800a760 <__sinit+0x6c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	62a2      	str	r2, [r4, #40]	; 0x28
 800a716:	42a3      	cmp	r3, r4
 800a718:	bf08      	it	eq
 800a71a:	2301      	moveq	r3, #1
 800a71c:	4620      	mov	r0, r4
 800a71e:	bf08      	it	eq
 800a720:	61a3      	streq	r3, [r4, #24]
 800a722:	f000 f81f 	bl	800a764 <__sfp>
 800a726:	6060      	str	r0, [r4, #4]
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 f81b 	bl	800a764 <__sfp>
 800a72e:	60a0      	str	r0, [r4, #8]
 800a730:	4620      	mov	r0, r4
 800a732:	f000 f817 	bl	800a764 <__sfp>
 800a736:	2200      	movs	r2, #0
 800a738:	2104      	movs	r1, #4
 800a73a:	60e0      	str	r0, [r4, #12]
 800a73c:	6860      	ldr	r0, [r4, #4]
 800a73e:	f7ff ff81 	bl	800a644 <std>
 800a742:	2201      	movs	r2, #1
 800a744:	2109      	movs	r1, #9
 800a746:	68a0      	ldr	r0, [r4, #8]
 800a748:	f7ff ff7c 	bl	800a644 <std>
 800a74c:	2202      	movs	r2, #2
 800a74e:	2112      	movs	r1, #18
 800a750:	68e0      	ldr	r0, [r4, #12]
 800a752:	f7ff ff77 	bl	800a644 <std>
 800a756:	2301      	movs	r3, #1
 800a758:	61a3      	str	r3, [r4, #24]
 800a75a:	e7d1      	b.n	800a700 <__sinit+0xc>
 800a75c:	0800b220 	.word	0x0800b220
 800a760:	0800a68d 	.word	0x0800a68d

0800a764 <__sfp>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	4607      	mov	r7, r0
 800a768:	f7ff ffac 	bl	800a6c4 <__sfp_lock_acquire>
 800a76c:	4b1e      	ldr	r3, [pc, #120]	; (800a7e8 <__sfp+0x84>)
 800a76e:	681e      	ldr	r6, [r3, #0]
 800a770:	69b3      	ldr	r3, [r6, #24]
 800a772:	b913      	cbnz	r3, 800a77a <__sfp+0x16>
 800a774:	4630      	mov	r0, r6
 800a776:	f7ff ffbd 	bl	800a6f4 <__sinit>
 800a77a:	3648      	adds	r6, #72	; 0x48
 800a77c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a780:	3b01      	subs	r3, #1
 800a782:	d503      	bpl.n	800a78c <__sfp+0x28>
 800a784:	6833      	ldr	r3, [r6, #0]
 800a786:	b30b      	cbz	r3, 800a7cc <__sfp+0x68>
 800a788:	6836      	ldr	r6, [r6, #0]
 800a78a:	e7f7      	b.n	800a77c <__sfp+0x18>
 800a78c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a790:	b9d5      	cbnz	r5, 800a7c8 <__sfp+0x64>
 800a792:	4b16      	ldr	r3, [pc, #88]	; (800a7ec <__sfp+0x88>)
 800a794:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a798:	60e3      	str	r3, [r4, #12]
 800a79a:	6665      	str	r5, [r4, #100]	; 0x64
 800a79c:	f000 f847 	bl	800a82e <__retarget_lock_init_recursive>
 800a7a0:	f7ff ff96 	bl	800a6d0 <__sfp_lock_release>
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7b0:	6025      	str	r5, [r4, #0]
 800a7b2:	61a5      	str	r5, [r4, #24]
 800a7b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a7b8:	f7fd fa32 	bl	8007c20 <memset>
 800a7bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c8:	3468      	adds	r4, #104	; 0x68
 800a7ca:	e7d9      	b.n	800a780 <__sfp+0x1c>
 800a7cc:	2104      	movs	r1, #4
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	f7ff ff62 	bl	800a698 <__sfmoreglue>
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	6030      	str	r0, [r6, #0]
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d1d5      	bne.n	800a788 <__sfp+0x24>
 800a7dc:	f7ff ff78 	bl	800a6d0 <__sfp_lock_release>
 800a7e0:	230c      	movs	r3, #12
 800a7e2:	603b      	str	r3, [r7, #0]
 800a7e4:	e7ee      	b.n	800a7c4 <__sfp+0x60>
 800a7e6:	bf00      	nop
 800a7e8:	0800b220 	.word	0x0800b220
 800a7ec:	ffff0001 	.word	0xffff0001

0800a7f0 <_fwalk_reent>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	4688      	mov	r8, r1
 800a7f8:	2700      	movs	r7, #0
 800a7fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a802:	f1b9 0901 	subs.w	r9, r9, #1
 800a806:	d505      	bpl.n	800a814 <_fwalk_reent+0x24>
 800a808:	6824      	ldr	r4, [r4, #0]
 800a80a:	2c00      	cmp	r4, #0
 800a80c:	d1f7      	bne.n	800a7fe <_fwalk_reent+0xe>
 800a80e:	4638      	mov	r0, r7
 800a810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a814:	89ab      	ldrh	r3, [r5, #12]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d907      	bls.n	800a82a <_fwalk_reent+0x3a>
 800a81a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a81e:	3301      	adds	r3, #1
 800a820:	d003      	beq.n	800a82a <_fwalk_reent+0x3a>
 800a822:	4629      	mov	r1, r5
 800a824:	4630      	mov	r0, r6
 800a826:	47c0      	blx	r8
 800a828:	4307      	orrs	r7, r0
 800a82a:	3568      	adds	r5, #104	; 0x68
 800a82c:	e7e9      	b.n	800a802 <_fwalk_reent+0x12>

0800a82e <__retarget_lock_init_recursive>:
 800a82e:	4770      	bx	lr

0800a830 <__retarget_lock_acquire_recursive>:
 800a830:	4770      	bx	lr

0800a832 <__retarget_lock_release_recursive>:
 800a832:	4770      	bx	lr

0800a834 <__swhatbuf_r>:
 800a834:	b570      	push	{r4, r5, r6, lr}
 800a836:	460e      	mov	r6, r1
 800a838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83c:	4614      	mov	r4, r2
 800a83e:	2900      	cmp	r1, #0
 800a840:	461d      	mov	r5, r3
 800a842:	b096      	sub	sp, #88	; 0x58
 800a844:	da08      	bge.n	800a858 <__swhatbuf_r+0x24>
 800a846:	2200      	movs	r2, #0
 800a848:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a84c:	602a      	str	r2, [r5, #0]
 800a84e:	061a      	lsls	r2, r3, #24
 800a850:	d410      	bmi.n	800a874 <__swhatbuf_r+0x40>
 800a852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a856:	e00e      	b.n	800a876 <__swhatbuf_r+0x42>
 800a858:	466a      	mov	r2, sp
 800a85a:	f000 f903 	bl	800aa64 <_fstat_r>
 800a85e:	2800      	cmp	r0, #0
 800a860:	dbf1      	blt.n	800a846 <__swhatbuf_r+0x12>
 800a862:	9a01      	ldr	r2, [sp, #4]
 800a864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a86c:	425a      	negs	r2, r3
 800a86e:	415a      	adcs	r2, r3
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	e7ee      	b.n	800a852 <__swhatbuf_r+0x1e>
 800a874:	2340      	movs	r3, #64	; 0x40
 800a876:	2000      	movs	r0, #0
 800a878:	6023      	str	r3, [r4, #0]
 800a87a:	b016      	add	sp, #88	; 0x58
 800a87c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a880 <__smakebuf_r>:
 800a880:	898b      	ldrh	r3, [r1, #12]
 800a882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a884:	079d      	lsls	r5, r3, #30
 800a886:	4606      	mov	r6, r0
 800a888:	460c      	mov	r4, r1
 800a88a:	d507      	bpl.n	800a89c <__smakebuf_r+0x1c>
 800a88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	2301      	movs	r3, #1
 800a896:	6163      	str	r3, [r4, #20]
 800a898:	b002      	add	sp, #8
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	466a      	mov	r2, sp
 800a89e:	ab01      	add	r3, sp, #4
 800a8a0:	f7ff ffc8 	bl	800a834 <__swhatbuf_r>
 800a8a4:	9900      	ldr	r1, [sp, #0]
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff f969 	bl	8009b80 <_malloc_r>
 800a8ae:	b948      	cbnz	r0, 800a8c4 <__smakebuf_r+0x44>
 800a8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b4:	059a      	lsls	r2, r3, #22
 800a8b6:	d4ef      	bmi.n	800a898 <__smakebuf_r+0x18>
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	f043 0302 	orr.w	r3, r3, #2
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	e7e3      	b.n	800a88c <__smakebuf_r+0xc>
 800a8c4:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <__smakebuf_r+0x7c>)
 800a8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	6020      	str	r0, [r4, #0]
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	9b00      	ldr	r3, [sp, #0]
 800a8d4:	6120      	str	r0, [r4, #16]
 800a8d6:	6163      	str	r3, [r4, #20]
 800a8d8:	9b01      	ldr	r3, [sp, #4]
 800a8da:	b15b      	cbz	r3, 800a8f4 <__smakebuf_r+0x74>
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8e2:	f000 f8d1 	bl	800aa88 <_isatty_r>
 800a8e6:	b128      	cbz	r0, 800a8f4 <__smakebuf_r+0x74>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	f023 0303 	bic.w	r3, r3, #3
 800a8ee:	f043 0301 	orr.w	r3, r3, #1
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	89a0      	ldrh	r0, [r4, #12]
 800a8f6:	4305      	orrs	r5, r0
 800a8f8:	81a5      	strh	r5, [r4, #12]
 800a8fa:	e7cd      	b.n	800a898 <__smakebuf_r+0x18>
 800a8fc:	0800a68d 	.word	0x0800a68d

0800a900 <_malloc_usable_size_r>:
 800a900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a904:	1f18      	subs	r0, r3, #4
 800a906:	2b00      	cmp	r3, #0
 800a908:	bfbc      	itt	lt
 800a90a:	580b      	ldrlt	r3, [r1, r0]
 800a90c:	18c0      	addlt	r0, r0, r3
 800a90e:	4770      	bx	lr

0800a910 <_raise_r>:
 800a910:	291f      	cmp	r1, #31
 800a912:	b538      	push	{r3, r4, r5, lr}
 800a914:	4604      	mov	r4, r0
 800a916:	460d      	mov	r5, r1
 800a918:	d904      	bls.n	800a924 <_raise_r+0x14>
 800a91a:	2316      	movs	r3, #22
 800a91c:	6003      	str	r3, [r0, #0]
 800a91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a926:	b112      	cbz	r2, 800a92e <_raise_r+0x1e>
 800a928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a92c:	b94b      	cbnz	r3, 800a942 <_raise_r+0x32>
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 f830 	bl	800a994 <_getpid_r>
 800a934:	462a      	mov	r2, r5
 800a936:	4601      	mov	r1, r0
 800a938:	4620      	mov	r0, r4
 800a93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a93e:	f000 b817 	b.w	800a970 <_kill_r>
 800a942:	2b01      	cmp	r3, #1
 800a944:	d00a      	beq.n	800a95c <_raise_r+0x4c>
 800a946:	1c59      	adds	r1, r3, #1
 800a948:	d103      	bne.n	800a952 <_raise_r+0x42>
 800a94a:	2316      	movs	r3, #22
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	2001      	movs	r0, #1
 800a950:	e7e7      	b.n	800a922 <_raise_r+0x12>
 800a952:	2400      	movs	r4, #0
 800a954:	4628      	mov	r0, r5
 800a956:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a95a:	4798      	blx	r3
 800a95c:	2000      	movs	r0, #0
 800a95e:	e7e0      	b.n	800a922 <_raise_r+0x12>

0800a960 <raise>:
 800a960:	4b02      	ldr	r3, [pc, #8]	; (800a96c <raise+0xc>)
 800a962:	4601      	mov	r1, r0
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f7ff bfd3 	b.w	800a910 <_raise_r>
 800a96a:	bf00      	nop
 800a96c:	200000b8 	.word	0x200000b8

0800a970 <_kill_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	2300      	movs	r3, #0
 800a974:	4d06      	ldr	r5, [pc, #24]	; (800a990 <_kill_r+0x20>)
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	f7f8 fd0e 	bl	800339e <_kill>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d102      	bne.n	800a98c <_kill_r+0x1c>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	b103      	cbz	r3, 800a98c <_kill_r+0x1c>
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	bf00      	nop
 800a990:	2000185c 	.word	0x2000185c

0800a994 <_getpid_r>:
 800a994:	f7f8 bcfc 	b.w	8003390 <_getpid>

0800a998 <__sread>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a0:	f000 f894 	bl	800aacc <_read_r>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	bfab      	itete	ge
 800a9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a9ac:	181b      	addge	r3, r3, r0
 800a9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9b2:	bfac      	ite	ge
 800a9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9b6:	81a3      	strhlt	r3, [r4, #12]
 800a9b8:	bd10      	pop	{r4, pc}

0800a9ba <__swrite>:
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	461f      	mov	r7, r3
 800a9c0:	898b      	ldrh	r3, [r1, #12]
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	05db      	lsls	r3, r3, #23
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	d505      	bpl.n	800a9d8 <__swrite+0x1e>
 800a9cc:	2302      	movs	r3, #2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d4:	f000 f868 	bl	800aaa8 <_lseek_r>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	4632      	mov	r2, r6
 800a9dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e0:	81a3      	strh	r3, [r4, #12]
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	f000 b817 	b.w	800aa20 <_write_r>

0800a9f2 <__sseek>:
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fa:	f000 f855 	bl	800aaa8 <_lseek_r>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	bf15      	itete	ne
 800aa04:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa0e:	81a3      	strheq	r3, [r4, #12]
 800aa10:	bf18      	it	ne
 800aa12:	81a3      	strhne	r3, [r4, #12]
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <__sclose>:
 800aa16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1a:	f000 b813 	b.w	800aa44 <_close_r>
	...

0800aa20 <_write_r>:
 800aa20:	b538      	push	{r3, r4, r5, lr}
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	2200      	movs	r2, #0
 800aa2a:	4d05      	ldr	r5, [pc, #20]	; (800aa40 <_write_r+0x20>)
 800aa2c:	602a      	str	r2, [r5, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	f7f8 fcec 	bl	800340c <_write>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_write_r+0x1e>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_write_r+0x1e>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	2000185c 	.word	0x2000185c

0800aa44 <_close_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	2300      	movs	r3, #0
 800aa48:	4d05      	ldr	r5, [pc, #20]	; (800aa60 <_close_r+0x1c>)
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	602b      	str	r3, [r5, #0]
 800aa50:	f7f8 fcf8 	bl	8003444 <_close>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_close_r+0x1a>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_close_r+0x1a>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	2000185c 	.word	0x2000185c

0800aa64 <_fstat_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	2300      	movs	r3, #0
 800aa68:	4d06      	ldr	r5, [pc, #24]	; (800aa84 <_fstat_r+0x20>)
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	602b      	str	r3, [r5, #0]
 800aa72:	f7f8 fcf2 	bl	800345a <_fstat>
 800aa76:	1c43      	adds	r3, r0, #1
 800aa78:	d102      	bne.n	800aa80 <_fstat_r+0x1c>
 800aa7a:	682b      	ldr	r3, [r5, #0]
 800aa7c:	b103      	cbz	r3, 800aa80 <_fstat_r+0x1c>
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	bd38      	pop	{r3, r4, r5, pc}
 800aa82:	bf00      	nop
 800aa84:	2000185c 	.word	0x2000185c

0800aa88 <_isatty_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4d05      	ldr	r5, [pc, #20]	; (800aaa4 <_isatty_r+0x1c>)
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	f7f8 fcf0 	bl	8003478 <_isatty>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	d102      	bne.n	800aaa2 <_isatty_r+0x1a>
 800aa9c:	682b      	ldr	r3, [r5, #0]
 800aa9e:	b103      	cbz	r3, 800aaa2 <_isatty_r+0x1a>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	bd38      	pop	{r3, r4, r5, pc}
 800aaa4:	2000185c 	.word	0x2000185c

0800aaa8 <_lseek_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	4611      	mov	r1, r2
 800aab0:	2200      	movs	r2, #0
 800aab2:	4d05      	ldr	r5, [pc, #20]	; (800aac8 <_lseek_r+0x20>)
 800aab4:	602a      	str	r2, [r5, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	f7f8 fce8 	bl	800348c <_lseek>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_lseek_r+0x1e>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_lseek_r+0x1e>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	2000185c 	.word	0x2000185c

0800aacc <_read_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	2200      	movs	r2, #0
 800aad6:	4d05      	ldr	r5, [pc, #20]	; (800aaec <_read_r+0x20>)
 800aad8:	602a      	str	r2, [r5, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	f7f8 fc79 	bl	80033d2 <_read>
 800aae0:	1c43      	adds	r3, r0, #1
 800aae2:	d102      	bne.n	800aaea <_read_r+0x1e>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	b103      	cbz	r3, 800aaea <_read_r+0x1e>
 800aae8:	6023      	str	r3, [r4, #0]
 800aaea:	bd38      	pop	{r3, r4, r5, pc}
 800aaec:	2000185c 	.word	0x2000185c

0800aaf0 <_init>:
 800aaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf2:	bf00      	nop
 800aaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaf6:	bc08      	pop	{r3}
 800aaf8:	469e      	mov	lr, r3
 800aafa:	4770      	bx	lr

0800aafc <_fini>:
 800aafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafe:	bf00      	nop
 800ab00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab02:	bc08      	pop	{r3}
 800ab04:	469e      	mov	lr, r3
 800ab06:	4770      	bx	lr
