
Slave_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007578  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007688  08007688  00017688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a8c  08007a8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007a8c  08007a8c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a8c  08007a8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a8c  08007a8c  00017a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  08007c74  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08007c74  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001045c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002133  00000000  00000000  00030665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b66  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012003  00000000  00000000  0004d16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5e0  00000000  00000000  0005f171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed751  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005284  00000000  00000000  000ed7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007670 	.word	0x08007670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007670 	.word	0x08007670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MPU6050_init>:
#define MPU6050_INT_PIN_CFG 0x37
#define MPU6050_INT_ENABLE 0x38

extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af04      	add	r7, sp, #16
	uint8_t check, data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	9301      	str	r3, [sp, #4]
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	2301      	movs	r3, #1
 8000ade:	2275      	movs	r2, #117	; 0x75
 8000ae0:	21d0      	movs	r1, #208	; 0xd0
 8000ae2:	484e      	ldr	r0, [pc, #312]	; (8000c1c <MPU6050_init+0x154>)
 8000ae4:	f001 fcde 	bl	80024a4 <HAL_I2C_Mem_Read>
	if (check == 0x68)
 8000ae8:	793b      	ldrb	r3, [r7, #4]
 8000aea:	2b68      	cmp	r3, #104	; 0x68
 8000aec:	f040 8091 	bne.w	8000c12 <MPU6050_init+0x14a>
	{

		// reset the system
		data = 0x1 << 7;
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000af8:	9302      	str	r3, [sp, #8]
 8000afa:	2301      	movs	r3, #1
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	1cfb      	adds	r3, r7, #3
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	226b      	movs	r2, #107	; 0x6b
 8000b06:	21d0      	movs	r1, #208	; 0xd0
 8000b08:	4844      	ldr	r0, [pc, #272]	; (8000c1c <MPU6050_init+0x154>)
 8000b0a:	f001 fbd1 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f000 fef2 	bl	80018f8 <HAL_Delay>
		//Power management register write all 0's to wake up sensor
		data = 0x00;
 8000b14:	2300      	movs	r3, #0
 8000b16:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1c:	9302      	str	r3, [sp, #8]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9301      	str	r3, [sp, #4]
 8000b22:	1cfb      	adds	r3, r7, #3
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2301      	movs	r3, #1
 8000b28:	226b      	movs	r2, #107	; 0x6b
 8000b2a:	21d0      	movs	r1, #208	; 0xd0
 8000b2c:	483b      	ldr	r0, [pc, #236]	; (8000c1c <MPU6050_init+0x154>)
 8000b2e:	f001 fbbf 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000b32:	2032      	movs	r0, #50	; 0x32
 8000b34:	f000 fee0 	bl	80018f8 <HAL_Delay>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 39;
 8000b38:	2327      	movs	r3, #39	; 0x27
 8000b3a:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b40:	9302      	str	r3, [sp, #8]
 8000b42:	2301      	movs	r3, #1
 8000b44:	9301      	str	r3, [sp, #4]
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	2219      	movs	r2, #25
 8000b4e:	21d0      	movs	r1, #208	; 0xd0
 8000b50:	4832      	ldr	r0, [pc, #200]	; (8000c1c <MPU6050_init+0x154>)
 8000b52:	f001 fbad 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000b56:	2032      	movs	r0, #50	; 0x32
 8000b58:	f000 fece 	bl	80018f8 <HAL_Delay>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	2301      	movs	r3, #1
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	1cfb      	adds	r3, r7, #3
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	221c      	movs	r2, #28
 8000b72:	21d0      	movs	r1, #208	; 0xd0
 8000b74:	4829      	ldr	r0, [pc, #164]	; (8000c1c <MPU6050_init+0x154>)
 8000b76:	f001 fb9b 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000b7a:	2032      	movs	r0, #50	; 0x32
 8000b7c:	f000 febc 	bl	80018f8 <HAL_Delay>

		data = 0x00;
 8000b80:	2300      	movs	r3, #0
 8000b82:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b88:	9302      	str	r3, [sp, #8]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	1cfb      	adds	r3, r7, #3
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	221b      	movs	r2, #27
 8000b96:	21d0      	movs	r1, #208	; 0xd0
 8000b98:	4820      	ldr	r0, [pc, #128]	; (8000c1c <MPU6050_init+0x154>)
 8000b9a:	f001 fb89 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000b9e:	2032      	movs	r0, #50	; 0x32
 8000ba0:	f000 feaa 	bl	80018f8 <HAL_Delay>

		//Interrupt PIN setting
		uint8_t INT_LEVEL = 0x0; //0 - active high, 1 - active low
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71fb      	strb	r3, [r7, #7]
		uint8_t LATCH_INT_EN = 0x0; //0 - INT 50us pulse, 1 - interrupt clear required
 8000ba8:	2300      	movs	r3, #0
 8000baa:	71bb      	strb	r3, [r7, #6]
		uint8_t INT_RD_CLEAR = 0x1; //0 - INT flag cleared by reading INT_STATUS, 1 - INT flag cleared by any read operation
 8000bac:	2301      	movs	r3, #1
 8000bae:	717b      	strb	r3, [r7, #5]
		data = (INT_LEVEL<<7)|(LATCH_INT_EN<<5)|(INT_RD_CLEAR<<4);
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	01db      	lsls	r3, r3, #7
 8000bb4:	b25a      	sxtb	r2, r3
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	015b      	lsls	r3, r3, #5
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b25a      	sxtb	r2, r3
 8000bc0:	797b      	ldrb	r3, [r7, #5]
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_INT_PIN_CFG, 1, &data, 1, HAL_MAX_DELAY);
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	1cfb      	adds	r3, r7, #3
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	2237      	movs	r2, #55	; 0x37
 8000be0:	21d0      	movs	r1, #208	; 0xd0
 8000be2:	480e      	ldr	r0, [pc, #56]	; (8000c1c <MPU6050_init+0x154>)
 8000be4:	f001 fb64 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000be8:	2032      	movs	r0, #50	; 0x32
 8000bea:	f000 fe85 	bl	80018f8 <HAL_Delay>

		//Interrupt enable setting
		data = 0x1; // 1 - enable, 0 - disable
 8000bee:	2301      	movs	r3, #1
 8000bf0:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_INT_ENABLE, 1, &data, 1, HAL_MAX_DELAY);
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	1cfb      	adds	r3, r7, #3
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2301      	movs	r3, #1
 8000c02:	2238      	movs	r2, #56	; 0x38
 8000c04:	21d0      	movs	r1, #208	; 0xd0
 8000c06:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MPU6050_init+0x154>)
 8000c08:	f001 fb52 	bl	80022b0 <HAL_I2C_Mem_Write>
		HAL_Delay(50);
 8000c0c:	2032      	movs	r0, #50	; 0x32
 8000c0e:	f000 fe73 	bl	80018f8 <HAL_Delay>



	}

}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001fc 	.word	0x200001fc

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c26:	f000 fe05 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2a:	f000 f9f1 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2e:	f000 fb2b 	bl	8001288 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c32:	f000 fa33 	bl	800109c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c36:	f000 fafd 	bl	8001234 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000c3a:	f000 fa5d 	bl	80010f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c3e:	f000 faab 	bl	8001198 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_init();
 8000c42:	f7ff ff41 	bl	8000ac8 <MPU6050_init>

  HAL_TIM_Base_Start(&htim1);
 8000c46:	48ac      	ldr	r0, [pc, #688]	; (8000ef8 <main+0x2d8>)
 8000c48:	f002 fea8 	bl	800399c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c4c:	48ab      	ldr	r0, [pc, #684]	; (8000efc <main+0x2dc>)
 8000c4e:	f002 feef 	bl	8003a30 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c52:	2200      	movs	r2, #0
 8000c54:	2108      	movs	r1, #8
 8000c56:	48aa      	ldr	r0, [pc, #680]	; (8000f00 <main+0x2e0>)
 8000c58:	f001 f9cd 	bl	8001ff6 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(count){
 8000c5c:	4ba9      	ldr	r3, [pc, #676]	; (8000f04 <main+0x2e4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d0fb      	beq.n	8000c5c <main+0x3c>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c64:	2201      	movs	r2, #1
 8000c66:	2108      	movs	r1, #8
 8000c68:	48a5      	ldr	r0, [pc, #660]	; (8000f00 <main+0x2e0>)
 8000c6a:	f001 f9c4 	bl	8001ff6 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000c6e:	4ba2      	ldr	r3, [pc, #648]	; (8000ef8 <main+0x2d8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
	  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000c76:	bf00      	nop
 8000c78:	4b9f      	ldr	r3, [pc, #636]	; (8000ef8 <main+0x2d8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7e:	2b09      	cmp	r3, #9
 8000c80:	d9fa      	bls.n	8000c78 <main+0x58>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c82:	2200      	movs	r2, #0
 8000c84:	2108      	movs	r1, #8
 8000c86:	489e      	ldr	r0, [pc, #632]	; (8000f00 <main+0x2e0>)
 8000c88:	f001 f9b5 	bl	8001ff6 <HAL_GPIO_WritePin>

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000c8c:	f000 fe2a 	bl	80018e4 <HAL_GetTick>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a9d      	ldr	r2, [pc, #628]	; (8000f08 <main+0x2e8>)
 8000c94:	6013      	str	r3, [r2, #0]
	  	 			 			      // wait for the echo pin to go high
	  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000c96:	bf00      	nop
 8000c98:	2110      	movs	r1, #16
 8000c9a:	4899      	ldr	r0, [pc, #612]	; (8000f00 <main+0x2e0>)
 8000c9c:	f001 f994 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d108      	bne.n	8000cb8 <main+0x98>
 8000ca6:	4b98      	ldr	r3, [pc, #608]	; (8000f08 <main+0x2e8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f103 040a 	add.w	r4, r3, #10
 8000cae:	f000 fe19 	bl	80018e4 <HAL_GetTick>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	d8ef      	bhi.n	8000c98 <main+0x78>
	  Val1 = __HAL_TIM_GET_COUNTER (&htim1);
 8000cb8:	4b8f      	ldr	r3, [pc, #572]	; (8000ef8 <main+0x2d8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	4a93      	ldr	r2, [pc, #588]	; (8000f0c <main+0x2ec>)
 8000cc0:	6013      	str	r3, [r2, #0]

	  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000cc2:	f000 fe0f 	bl	80018e4 <HAL_GetTick>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a8f      	ldr	r2, [pc, #572]	; (8000f08 <main+0x2e8>)
 8000cca:	6013      	str	r3, [r2, #0]
	  		 			 			      // wait for the echo pin to go low
	  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000ccc:	bf00      	nop
 8000cce:	2110      	movs	r1, #16
 8000cd0:	488b      	ldr	r0, [pc, #556]	; (8000f00 <main+0x2e0>)
 8000cd2:	f001 f979 	bl	8001fc8 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d008      	beq.n	8000cee <main+0xce>
 8000cdc:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <main+0x2e8>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000ce4:	f000 fdfe 	bl	80018e4 <HAL_GetTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d8ef      	bhi.n	8000cce <main+0xae>
	  Val2 = __HAL_TIM_GET_COUNTER (&htim1);
 8000cee:	4b82      	ldr	r3, [pc, #520]	; (8000ef8 <main+0x2d8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	4a86      	ldr	r2, [pc, #536]	; (8000f10 <main+0x2f0>)
 8000cf6:	6013      	str	r3, [r2, #0]

	  Distance = (Val2-Val1)* 0.034/2;
 8000cf8:	4b85      	ldr	r3, [pc, #532]	; (8000f10 <main+0x2f0>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b83      	ldr	r3, [pc, #524]	; (8000f0c <main+0x2ec>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fb6e 	bl	80003e4 <__aeabi_ui2d>
 8000d08:	a377      	add	r3, pc, #476	; (adr r3, 8000ee8 <main+0x2c8>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff fbe3 	bl	80004d8 <__aeabi_dmul>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f04f 0200 	mov.w	r2, #0
 8000d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d22:	f7ff fd03 	bl	800072c <__aeabi_ddiv>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff feab 	bl	8000a88 <__aeabi_d2uiz>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	4b77      	ldr	r3, [pc, #476]	; (8000f14 <main+0x2f4>)
 8000d38:	801a      	strh	r2, [r3, #0]


//	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == 1){

		  if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data_Acc, 6, 100) == HAL_OK){
 8000d3a:	2364      	movs	r3, #100	; 0x64
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	2306      	movs	r3, #6
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <main+0x2f8>)
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	223b      	movs	r2, #59	; 0x3b
 8000d4a:	21d0      	movs	r1, #208	; 0xd0
 8000d4c:	4873      	ldr	r0, [pc, #460]	; (8000f1c <main+0x2fc>)
 8000d4e:	f001 fba9 	bl	80024a4 <HAL_I2C_Mem_Read>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d156      	bne.n	8000e06 <main+0x1e6>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	4870      	ldr	r0, [pc, #448]	; (8000f20 <main+0x300>)
 8000d60:	f001 f949 	bl	8001ff6 <HAL_GPIO_WritePin>

		  	 	 //Adding 2 BYTES into 16 bit integer
		  		Accel_X_RAW = (Rec_Data_Acc[0] << 8) | Rec_Data_Acc[1];
 8000d64:	4b6c      	ldr	r3, [pc, #432]	; (8000f18 <main+0x2f8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <main+0x2f8>)
 8000d6e:	785b      	ldrb	r3, [r3, #1]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	4b6b      	ldr	r3, [pc, #428]	; (8000f24 <main+0x304>)
 8000d78:	801a      	strh	r2, [r3, #0]
		  		Accel_Y_RAW = Rec_Data_Acc[2] << 8 | Rec_Data_Acc [3];
 8000d7a:	4b67      	ldr	r3, [pc, #412]	; (8000f18 <main+0x2f8>)
 8000d7c:	789b      	ldrb	r3, [r3, #2]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	4b65      	ldr	r3, [pc, #404]	; (8000f18 <main+0x2f8>)
 8000d84:	78db      	ldrb	r3, [r3, #3]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b66      	ldr	r3, [pc, #408]	; (8000f28 <main+0x308>)
 8000d8e:	801a      	strh	r2, [r3, #0]
		  		Accel_Z_RAW = Rec_Data_Acc[4] << 8 | Rec_Data_Acc [5];
 8000d90:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <main+0x2f8>)
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b5f      	ldr	r3, [pc, #380]	; (8000f18 <main+0x2f8>)
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	4b62      	ldr	r3, [pc, #392]	; (8000f2c <main+0x30c>)
 8000da4:	801a      	strh	r2, [r3, #0]

		  		Ax = Accel_X_RAW/16384.0;
 8000da6:	4b5f      	ldr	r3, [pc, #380]	; (8000f24 <main+0x304>)
 8000da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb29 	bl	8000404 <__aeabi_i2d>
 8000db2:	f04f 0200 	mov.w	r2, #0
 8000db6:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <main+0x310>)
 8000db8:	f7ff fcb8 	bl	800072c <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	495c      	ldr	r1, [pc, #368]	; (8000f34 <main+0x314>)
 8000dc2:	e9c1 2300 	strd	r2, r3, [r1]
		  		Ay = Accel_Y_RAW/16384.0;
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <main+0x308>)
 8000dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fb19 	bl	8000404 <__aeabi_i2d>
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <main+0x310>)
 8000dd8:	f7ff fca8 	bl	800072c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4955      	ldr	r1, [pc, #340]	; (8000f38 <main+0x318>)
 8000de2:	e9c1 2300 	strd	r2, r3, [r1]
		  		Az = Accel_Z_RAW/16384.0;
 8000de6:	4b51      	ldr	r3, [pc, #324]	; (8000f2c <main+0x30c>)
 8000de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fb09 	bl	8000404 <__aeabi_i2d>
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	4b4e      	ldr	r3, [pc, #312]	; (8000f30 <main+0x310>)
 8000df8:	f7ff fc98 	bl	800072c <__aeabi_ddiv>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	494e      	ldr	r1, [pc, #312]	; (8000f3c <main+0x31c>)
 8000e02:	e9c1 2300 	strd	r2, r3, [r1]
		  		}

		  if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data_Gyro, 6, 100)== HAL_OK){
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	4b4c      	ldr	r3, [pc, #304]	; (8000f40 <main+0x320>)
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	2243      	movs	r2, #67	; 0x43
 8000e16:	21d0      	movs	r1, #208	; 0xd0
 8000e18:	4840      	ldr	r0, [pc, #256]	; (8000f1c <main+0x2fc>)
 8000e1a:	f001 fb43 	bl	80024a4 <HAL_I2C_Mem_Read>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d150      	bne.n	8000ec6 <main+0x2a6>

		  		Gyro_X_RAW = (Rec_Data_Gyro[0] << 8) | Rec_Data_Gyro[1];
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <main+0x320>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	021b      	lsls	r3, r3, #8
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <main+0x320>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <main+0x324>)
 8000e38:	801a      	strh	r2, [r3, #0]
		  		Gyro_Y_RAW = Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3];
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <main+0x320>)
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <main+0x320>)
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <main+0x328>)
 8000e4e:	801a      	strh	r2, [r3, #0]
		  		Gyro_Z_RAW = Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5];
 8000e50:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <main+0x320>)
 8000e52:	791b      	ldrb	r3, [r3, #4]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <main+0x320>)
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <main+0x32c>)
 8000e64:	801a      	strh	r2, [r3, #0]

		  		Gx = Gyro_X_RAW/16384.0;
 8000e66:	4b37      	ldr	r3, [pc, #220]	; (8000f44 <main+0x324>)
 8000e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fac9 	bl	8000404 <__aeabi_i2d>
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <main+0x310>)
 8000e78:	f7ff fc58 	bl	800072c <__aeabi_ddiv>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4933      	ldr	r1, [pc, #204]	; (8000f50 <main+0x330>)
 8000e82:	e9c1 2300 	strd	r2, r3, [r1]
		  		Gy = Gyro_Y_RAW/16384.0;
 8000e86:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <main+0x328>)
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fab9 	bl	8000404 <__aeabi_i2d>
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <main+0x310>)
 8000e98:	f7ff fc48 	bl	800072c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	492c      	ldr	r1, [pc, #176]	; (8000f54 <main+0x334>)
 8000ea2:	e9c1 2300 	strd	r2, r3, [r1]
		  		Gz = Gyro_Z_RAW/16384.0;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <main+0x32c>)
 8000ea8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff faa9 	bl	8000404 <__aeabi_i2d>
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <main+0x310>)
 8000eb8:	f7ff fc38 	bl	800072c <__aeabi_ddiv>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4925      	ldr	r1, [pc, #148]	; (8000f58 <main+0x338>)
 8000ec2:	e9c1 2300 	strd	r2, r3, [r1]
		  }


//	  } else HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
	  if(Distance < 10){ // The pet get around to the bowl
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <main+0x2f4>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	d873      	bhi.n	8000fb6 <main+0x396>
	  	  if ((Gx > 0.04 || Gy > 0.04 || Gz > 0.4) && pause_second < 30) {
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <main+0x330>)
 8000ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed4:	a306      	add	r3, pc, #24	; (adr r3, 8000ef0 <main+0x2d0>)
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f7ff fd8d 	bl	80009f8 <__aeabi_dcmpgt>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d151      	bne.n	8000f88 <main+0x368>
 8000ee4:	e03a      	b.n	8000f5c <main+0x33c>
 8000ee6:	bf00      	nop
 8000ee8:	b020c49c 	.word	0xb020c49c
 8000eec:	3fa16872 	.word	0x3fa16872
 8000ef0:	47ae147b 	.word	0x47ae147b
 8000ef4:	3fa47ae1 	.word	0x3fa47ae1
 8000ef8:	20000250 	.word	0x20000250
 8000efc:	20000298 	.word	0x20000298
 8000f00:	40010800 	.word	0x40010800
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000384 	.word	0x20000384
 8000f0c:	20000378 	.word	0x20000378
 8000f10:	2000037c 	.word	0x2000037c
 8000f14:	20000380 	.word	0x20000380
 8000f18:	20000368 	.word	0x20000368
 8000f1c:	200001fc 	.word	0x200001fc
 8000f20:	40011000 	.word	0x40011000
 8000f24:	20000328 	.word	0x20000328
 8000f28:	2000032a 	.word	0x2000032a
 8000f2c:	2000032c 	.word	0x2000032c
 8000f30:	40d00000 	.word	0x40d00000
 8000f34:	20000338 	.word	0x20000338
 8000f38:	20000340 	.word	0x20000340
 8000f3c:	20000348 	.word	0x20000348
 8000f40:	20000370 	.word	0x20000370
 8000f44:	2000032e 	.word	0x2000032e
 8000f48:	20000330 	.word	0x20000330
 8000f4c:	20000332 	.word	0x20000332
 8000f50:	20000350 	.word	0x20000350
 8000f54:	20000358 	.word	0x20000358
 8000f58:	20000360 	.word	0x20000360
 8000f5c:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <main+0x3d8>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	a321      	add	r3, pc, #132	; (adr r3, 8000fe8 <main+0x3c8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fd46 	bl	80009f8 <__aeabi_dcmpgt>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10a      	bne.n	8000f88 <main+0x368>
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <main+0x3dc>)
 8000f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f78:	a31d      	add	r3, pc, #116	; (adr r3, 8000ff0 <main+0x3d0>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fd3b 	bl	80009f8 <__aeabi_dcmpgt>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00f      	beq.n	8000fa8 <main+0x388>
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <main+0x3e0>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b1d      	cmp	r3, #29
 8000f8e:	d80b      	bhi.n	8000fa8 <main+0x388>
	  	  		accu_second += 1; // if the bowl is rotating, count the second
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <main+0x3e4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <main+0x3e4>)
 8000f9a:	701a      	strb	r2, [r3, #0]
	  	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	4819      	ldr	r0, [pc, #100]	; (8001008 <main+0x3e8>)
 8000fa2:	f001 f828 	bl	8001ff6 <HAL_GPIO_WritePin>
 8000fa6:	e01b      	b.n	8000fe0 <main+0x3c0>

	  	  } else  pause_second += 1;
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <main+0x3e0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <main+0x3e0>)
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e014      	b.n	8000fe0 <main+0x3c0>
	  } else {
		  pause_second += 1;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <main+0x3e0>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <main+0x3e0>)
 8000fc0:	701a      	strb	r2, [r3, #0]
		  if(pause_second > 30) {  // if it stop for long time, reset the state
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <main+0x3e0>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b1e      	cmp	r3, #30
 8000fc8:	d90a      	bls.n	8000fe0 <main+0x3c0>
		 	 accu_second = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <main+0x3e4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
		 	 pause_second = 0;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <main+0x3e0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
		 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2180      	movs	r1, #128	; 0x80
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <main+0x3e8>)
 8000fdc:	f001 f80b 	bl	8001ff6 <HAL_GPIO_WritePin>
		  }
	  }
	  count = 0;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <main+0x3ec>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
	  if(count){
 8000fe6:	e639      	b.n	8000c5c <main+0x3c>
 8000fe8:	47ae147b 	.word	0x47ae147b
 8000fec:	3fa47ae1 	.word	0x3fa47ae1
 8000ff0:	9999999a 	.word	0x9999999a
 8000ff4:	3fd99999 	.word	0x3fd99999
 8000ff8:	20000358 	.word	0x20000358
 8000ffc:	20000360 	.word	0x20000360
 8001000:	20000377 	.word	0x20000377
 8001004:	20000376 	.word	0x20000376
 8001008:	40010800 	.word	0x40010800
 800100c:	20000000 	.word	0x20000000

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b090      	sub	sp, #64	; 0x40
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0318 	add.w	r3, r7, #24
 800101a:	2228      	movs	r2, #40	; 0x28
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fe10 	bl	8004c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800104e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4618      	mov	r0, r3
 800105a:	f002 f83f 	bl	80030dc <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001064:	f000 f9ba 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2102      	movs	r1, #2
 8001082:	4618      	mov	r0, r3
 8001084:	f002 faac 	bl	80035e0 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800108e:	f000 f9a5 	bl	80013dc <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3740      	adds	r7, #64	; 0x40
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f000 ffa5 	bl	8002028 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 f97a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	40005400 	.word	0x40005400
 80010f4:	00061a80 	.word	0x00061a80

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM1_Init+0x98>)
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <MX_TIM1_Init+0x9c>)
 8001118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_TIM1_Init+0x98>)
 800111c:	2247      	movs	r2, #71	; 0x47
 800111e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_TIM1_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM1_Init+0x98>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM1_Init+0x98>)
 8001142:	f002 fbdb 	bl	80038fc <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f946 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM1_Init+0x98>)
 800115e:	f002 fdc1 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001168:	f000 f938 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM1_Init+0x98>)
 800117a:	f002 ff97 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 f92a 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000250 	.word	0x20000250
 8001194:	40012c00 	.word	0x40012c00

08001198 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <MX_TIM3_Init+0x94>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <MX_TIM3_Init+0x98>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <MX_TIM3_Init+0x94>)
 80011bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80011c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_TIM3_Init+0x94>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_TIM3_Init+0x94>)
 80011ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80011ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_TIM3_Init+0x94>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_TIM3_Init+0x94>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011dc:	4813      	ldr	r0, [pc, #76]	; (800122c <MX_TIM3_Init+0x94>)
 80011de:	f002 fb8d 	bl	80038fc <HAL_TIM_Base_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011e8:	f000 f8f8 	bl	80013dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_TIM3_Init+0x94>)
 80011fa:	f002 fd73 	bl	8003ce4 <HAL_TIM_ConfigClockSource>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f8ea 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_TIM3_Init+0x94>)
 8001216:	f002 ff49 	bl	80040ac <HAL_TIMEx_MasterConfigSynchronization>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001220:	f000 f8dc 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000298 	.word	0x20000298
 8001230:	40000400 	.word	0x40000400

08001234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <MX_USART1_UART_Init+0x50>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800126a:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_USART1_UART_Init+0x4c>)
 800126c:	f002 ff8e 	bl	800418c <HAL_UART_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001276:	f000 f8b1 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200002e0 	.word	0x200002e0
 8001284:	40013800 	.word	0x40013800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <MX_GPIO_Init+0x11c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b3e      	ldr	r3, [pc, #248]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0310 	and.w	r3, r3, #16
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b4:	4b3b      	ldr	r3, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012ba:	f043 0320 	orr.w	r3, r3, #32
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012cc:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <MX_GPIO_Init+0x11c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_LED_GPIO_Port, Debug_LED_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4829      	ldr	r0, [pc, #164]	; (80013a8 <MX_GPIO_Init+0x120>)
 8001304:	f000 fe77 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HCSR04_Trig_Pin|STM32_connection_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2188      	movs	r1, #136	; 0x88
 800130c:	4827      	ldr	r0, [pc, #156]	; (80013ac <MX_GPIO_Init+0x124>)
 800130e:	f000 fe72 	bl	8001ff6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Debug_LED_Pin */
  GPIO_InitStruct.Pin = Debug_LED_Pin;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Debug_LED_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	481f      	ldr	r0, [pc, #124]	; (80013a8 <MX_GPIO_Init+0x120>)
 800132c:	f000 fcc8 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HCSR04_Trig_Pin */
  GPIO_InitStruct.Pin = HCSR04_Trig_Pin;
 8001330:	2308      	movs	r3, #8
 8001332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HCSR04_Trig_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4619      	mov	r1, r3
 8001346:	4819      	ldr	r0, [pc, #100]	; (80013ac <MX_GPIO_Init+0x124>)
 8001348:	f000 fcba 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HCSR04_Echo_Pin */
  GPIO_InitStruct.Pin = HCSR04_Echo_Pin;
 800134c:	2310      	movs	r3, #16
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCSR04_Echo_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	4813      	ldr	r0, [pc, #76]	; (80013ac <MX_GPIO_Init+0x124>)
 8001360:	f000 fcae 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STM32_connection_Pin */
  GPIO_InitStruct.Pin = STM32_connection_Pin;
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001368:	2301      	movs	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STM32_connection_GPIO_Port, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	480c      	ldr	r0, [pc, #48]	; (80013ac <MX_GPIO_Init+0x124>)
 800137c:	f000 fca0 	bl	8001cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_GPIO_Init+0x124>)
 8001396:	f000 fc93 	bl	8001cc0 <HAL_GPIO_Init>

}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40010800 	.word	0x40010800

080013b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]

  if(htim->Instance == TIM3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d102      	bne.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
//    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    count = 1;
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40000400 	.word	0x40000400
 80013d8:	20000000 	.word	0x20000000

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <HAL_MspInit+0x5c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a14      	ldr	r2, [pc, #80]	; (8001444 <HAL_MspInit+0x5c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6193      	str	r3, [r2, #24]
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_MspInit+0x5c>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_MspInit+0x5c>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_MspInit+0x5c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x5c>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_MspInit+0x60>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_MspInit+0x60>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000

0800144c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_I2C_MspInit+0x70>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d123      	bne.n	80014b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
 8001484:	23c0      	movs	r3, #192	; 0xc0
 8001486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4619      	mov	r1, r3
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <HAL_I2C_MspInit+0x78>)
 8001498:	f000 fc12 	bl	8001cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	61d3      	str	r3, [r2, #28]
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_I2C_MspInit+0x74>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40005400 	.word	0x40005400
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010c00 	.word	0x40010c00

080014c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_TIM_Base_MspInit+0x68>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d10c      	bne.n	80014f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	6193      	str	r3, [r2, #24]
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014f2:	e018      	b.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <HAL_TIM_Base_MspInit+0x70>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d113      	bne.n	8001526 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_TIM_Base_MspInit+0x6c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	201d      	movs	r0, #29
 800151c:	f000 fae7 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001520:	201d      	movs	r0, #29
 8001522:	f000 fb00 	bl	8001b26 <HAL_NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40000400 	.word	0x40000400

0800153c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_UART_MspInit+0x9c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d139      	bne.n	80015d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_UART_MspInit+0xa0>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a1e      	ldr	r2, [pc, #120]	; (80015dc <HAL_UART_MspInit+0xa0>)
 8001562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <HAL_UART_MspInit+0xa0>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_UART_MspInit+0xa0>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_UART_MspInit+0xa0>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_UART_MspInit+0xa0>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Debug_PC_serial_Pin;
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Debug_PC_serial_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0310 	add.w	r3, r7, #16
 800159e:	4619      	mov	r1, r3
 80015a0:	480f      	ldr	r0, [pc, #60]	; (80015e0 <HAL_UART_MspInit+0xa4>)
 80015a2:	f000 fb8d 	bl	8001cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Debug_PC_serialA10_Pin;
 80015a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Debug_PC_serialA10_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4809      	ldr	r0, [pc, #36]	; (80015e0 <HAL_UART_MspInit+0xa4>)
 80015bc:	f000 fb80 	bl	8001cc0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2025      	movs	r0, #37	; 0x25
 80015c6:	f000 fa92 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ca:	2025      	movs	r0, #37	; 0x25
 80015cc:	f000 faab 	bl	8001b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40021000 	.word	0x40021000
 80015e0:	40010800 	.word	0x40010800

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f949 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM3_IRQHandler+0x10>)
 800163a:	f002 fa4b 	bl	8003ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000298 	.word	0x20000298

08001648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART1_IRQHandler+0x10>)
 800164e:	f002 fded 	bl	800422c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200002e0 	.word	0x200002e0

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_kill>:

int _kill(int pid, int sig)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001674:	f003 fabc 	bl	8004bf0 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	2216      	movs	r2, #22
 800167c:	601a      	str	r2, [r3, #0]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <_exit>:

void _exit (int status)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001692:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffe7 	bl	800166a <_kill>
	while (1) {}		/* Make sure we hang here */
 800169c:	e7fe      	b.n	800169c <_exit+0x12>

0800169e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	e00a      	b.n	80016c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016b0:	f3af 8000 	nop.w
 80016b4:	4601      	mov	r1, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	b2ca      	uxtb	r2, r1
 80016be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	3301      	adds	r3, #1
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbf0      	blt.n	80016b0 <_read+0x12>
	}

return len;
 80016ce:	687b      	ldr	r3, [r7, #4]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	e009      	b.n	80016fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf1      	blt.n	80016ea <_write+0x12>
	}
	return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_close>:

int _close(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001736:	605a      	str	r2, [r3, #4]
	return 0;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <_isatty>:

int _isatty(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001778:	4a14      	ldr	r2, [pc, #80]	; (80017cc <_sbrk+0x5c>)
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_sbrk+0x60>)
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d102      	bne.n	8001792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <_sbrk+0x64>)
 800178e:	4a12      	ldr	r2, [pc, #72]	; (80017d8 <_sbrk+0x68>)
 8001790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d207      	bcs.n	80017b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a0:	f003 fa26 	bl	8004bf0 <__errno>
 80017a4:	4603      	mov	r3, r0
 80017a6:	220c      	movs	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ae:	e009      	b.n	80017c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <_sbrk+0x64>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4413      	add	r3, r2
 80017be:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_sbrk+0x64>)
 80017c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20005000 	.word	0x20005000
 80017d0:	00000400 	.word	0x00000400
 80017d4:	20000388 	.word	0x20000388
 80017d8:	200003a0 	.word	0x200003a0

080017dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr

080017e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff fff8 	bl	80017dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480b      	ldr	r0, [pc, #44]	; (800181c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ee:	490c      	ldr	r1, [pc, #48]	; (8001820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001804:	4c09      	ldr	r4, [pc, #36]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 f9f3 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001816:	f7ff fa03 	bl	8000c20 <main>
  bx lr
 800181a:	4770      	bx	lr
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001824:	08007a94 	.word	0x08007a94
  ldr r2, =_sbss
 8001828:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800182c:	200003a0 	.word	0x200003a0

08001830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC1_2_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x28>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x28>)
 800183e:	f043 0310 	orr.w	r3, r3, #16
 8001842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f947 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	200f      	movs	r0, #15
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fdca 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f95f 	bl	8001b42 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800189c:	f000 f927 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000004 	.word	0x20000004
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <HAL_IncTick+0x20>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	2000038c 	.word	0x2000038c

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	; (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	2000038c 	.word	0x2000038c

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff0 	bl	80018e4 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffe0 	bl	80018e4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4906      	ldr	r1, [pc, #24]	; (80019d8 <__NVIC_EnableIRQ+0x34>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab8:	f7ff ff90 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff2d 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff42 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff90 	bl	8001a30 <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5f 	bl	80019dc <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff35 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b085      	sub	sp, #20
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d008      	beq.n	8001b84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2204      	movs	r2, #4
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e020      	b.n	8001bc6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020e 	bic.w	r2, r2, #14
 8001b92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0201 	bic.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d005      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e051      	b.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020e 	bic.w	r2, r2, #14
 8001c02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_DMA_Abort_IT+0xd4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d029      	beq.n	8001c72 <HAL_DMA_Abort_IT+0xa2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_DMA_Abort_IT+0xd8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x9e>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <HAL_DMA_Abort_IT+0xdc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01a      	beq.n	8001c68 <HAL_DMA_Abort_IT+0x98>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1e      	ldr	r2, [pc, #120]	; (8001cb0 <HAL_DMA_Abort_IT+0xe0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d012      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x92>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	; (8001cb4 <HAL_DMA_Abort_IT+0xe4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00a      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x8c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_DMA_Abort_IT+0xe8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d102      	bne.n	8001c56 <HAL_DMA_Abort_IT+0x86>
 8001c50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c54:	e00e      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c5a:	e00b      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c60:	e008      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c66:	e005      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c6c:	e002      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c6e:	2310      	movs	r3, #16
 8001c70:	e000      	b.n	8001c74 <HAL_DMA_Abort_IT+0xa4>
 8001c72:	2301      	movs	r3, #1
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_DMA_Abort_IT+0xec>)
 8001c76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
    } 
  }
  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020008 	.word	0x40020008
 8001ca8:	4002001c 	.word	0x4002001c
 8001cac:	40020030 	.word	0x40020030
 8001cb0:	40020044 	.word	0x40020044
 8001cb4:	40020058 	.word	0x40020058
 8001cb8:	4002006c 	.word	0x4002006c
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b08b      	sub	sp, #44	; 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd2:	e169      	b.n	8001fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8158 	bne.w	8001fa2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a9a      	ldr	r2, [pc, #616]	; (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d05e      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001cfc:	4a98      	ldr	r2, [pc, #608]	; (8001f60 <HAL_GPIO_Init+0x2a0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d875      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d02:	4a98      	ldr	r2, [pc, #608]	; (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d058      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d08:	4a96      	ldr	r2, [pc, #600]	; (8001f64 <HAL_GPIO_Init+0x2a4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d86f      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d0e:	4a96      	ldr	r2, [pc, #600]	; (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d052      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d14:	4a94      	ldr	r2, [pc, #592]	; (8001f68 <HAL_GPIO_Init+0x2a8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d869      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d1a:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d04c      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d20:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <HAL_GPIO_Init+0x2ac>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d863      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d26:	4a92      	ldr	r2, [pc, #584]	; (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d046      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
 8001d2c:	4a90      	ldr	r2, [pc, #576]	; (8001f70 <HAL_GPIO_Init+0x2b0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d85d      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d32:	2b12      	cmp	r3, #18
 8001d34:	d82a      	bhi.n	8001d8c <HAL_GPIO_Init+0xcc>
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d859      	bhi.n	8001dee <HAL_GPIO_Init+0x12e>
 8001d3a:	a201      	add	r2, pc, #4	; (adr r2, 8001d40 <HAL_GPIO_Init+0x80>)
 8001d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d40:	08001dbb 	.word	0x08001dbb
 8001d44:	08001d95 	.word	0x08001d95
 8001d48:	08001da7 	.word	0x08001da7
 8001d4c:	08001de9 	.word	0x08001de9
 8001d50:	08001def 	.word	0x08001def
 8001d54:	08001def 	.word	0x08001def
 8001d58:	08001def 	.word	0x08001def
 8001d5c:	08001def 	.word	0x08001def
 8001d60:	08001def 	.word	0x08001def
 8001d64:	08001def 	.word	0x08001def
 8001d68:	08001def 	.word	0x08001def
 8001d6c:	08001def 	.word	0x08001def
 8001d70:	08001def 	.word	0x08001def
 8001d74:	08001def 	.word	0x08001def
 8001d78:	08001def 	.word	0x08001def
 8001d7c:	08001def 	.word	0x08001def
 8001d80:	08001def 	.word	0x08001def
 8001d84:	08001d9d 	.word	0x08001d9d
 8001d88:	08001db1 	.word	0x08001db1
 8001d8c:	4a79      	ldr	r2, [pc, #484]	; (8001f74 <HAL_GPIO_Init+0x2b4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d92:	e02c      	b.n	8001dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e029      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	3304      	adds	r3, #4
 8001da2:	623b      	str	r3, [r7, #32]
          break;
 8001da4:	e024      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	3308      	adds	r3, #8
 8001dac:	623b      	str	r3, [r7, #32]
          break;
 8001dae:	e01f      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	330c      	adds	r3, #12
 8001db6:	623b      	str	r3, [r7, #32]
          break;
 8001db8:	e01a      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d102      	bne.n	8001dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	623b      	str	r3, [r7, #32]
          break;
 8001dc6:	e013      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	611a      	str	r2, [r3, #16]
          break;
 8001dda:	e009      	b.n	8001df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69fa      	ldr	r2, [r7, #28]
 8001de4:	615a      	str	r2, [r3, #20]
          break;
 8001de6:	e003      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001de8:	2300      	movs	r3, #0
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e000      	b.n	8001df0 <HAL_GPIO_Init+0x130>
          break;
 8001dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d801      	bhi.n	8001dfa <HAL_GPIO_Init+0x13a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	e001      	b.n	8001dfe <HAL_GPIO_Init+0x13e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2bff      	cmp	r3, #255	; 0xff
 8001e04:	d802      	bhi.n	8001e0c <HAL_GPIO_Init+0x14c>
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	e002      	b.n	8001e12 <HAL_GPIO_Init+0x152>
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	3b08      	subs	r3, #8
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	210f      	movs	r1, #15
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	6a39      	ldr	r1, [r7, #32]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b1 	beq.w	8001fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e40:	4b4d      	ldr	r3, [pc, #308]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	; (8001f78 <HAL_GPIO_Init+0x2b8>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e58:	4a48      	ldr	r2, [pc, #288]	; (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_GPIO_Init+0x2c0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <HAL_GPIO_Init+0x1ec>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3f      	ldr	r2, [pc, #252]	; (8001f84 <HAL_GPIO_Init+0x2c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_GPIO_Init+0x1e8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <HAL_GPIO_Init+0x2c8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d007      	beq.n	8001ea4 <HAL_GPIO_Init+0x1e4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_GPIO_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_GPIO_Init+0x1e0>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x1ee>
 8001eac:	2300      	movs	r3, #0
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ebe:	492f      	ldr	r1, [pc, #188]	; (8001f7c <HAL_GPIO_Init+0x2bc>)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	492c      	ldr	r1, [pc, #176]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4928      	ldr	r1, [pc, #160]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	4922      	ldr	r1, [pc, #136]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60cb      	str	r3, [r1, #12]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	491e      	ldr	r1, [pc, #120]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f28:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4918      	ldr	r1, [pc, #96]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	4914      	ldr	r1, [pc, #80]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d021      	beq.n	8001f94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e021      	b.n	8001fa2 <HAL_GPIO_Init+0x2e2>
 8001f5e:	bf00      	nop
 8001f60:	10320000 	.word	0x10320000
 8001f64:	10310000 	.word	0x10310000
 8001f68:	10220000 	.word	0x10220000
 8001f6c:	10210000 	.word	0x10210000
 8001f70:	10120000 	.word	0x10120000
 8001f74:	10110000 	.word	0x10110000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40010c00 	.word	0x40010c00
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40011400 	.word	0x40011400
 8001f90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	4909      	ldr	r1, [pc, #36]	; (8001fc4 <HAL_GPIO_Init+0x304>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f47f ae8e 	bne.w	8001cd4 <HAL_GPIO_Init+0x14>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	372c      	adds	r7, #44	; 0x2c
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40010400 	.word	0x40010400

08001fc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	807b      	strh	r3, [r7, #2]
 8002002:	4613      	mov	r3, r2
 8002004:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002006:	787b      	ldrb	r3, [r7, #1]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002012:	e003      	b.n	800201c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	041a      	lsls	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	611a      	str	r2, [r3, #16]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e12b      	b.n	8002292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff f9fc 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	; 0x24
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800207a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800208a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800208c:	f001 fbf0 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a81      	ldr	r2, [pc, #516]	; (800229c <HAL_I2C_Init+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d807      	bhi.n	80020ac <HAL_I2C_Init+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a80      	ldr	r2, [pc, #512]	; (80022a0 <HAL_I2C_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x92>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a7d      	ldr	r2, [pc, #500]	; (80022a4 <HAL_I2C_Init+0x27c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e7      	b.n	8002292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a78      	ldr	r2, [pc, #480]	; (80022a8 <HAL_I2C_Init+0x280>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_I2C_Init+0x274>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <HAL_I2C_Init+0xd4>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	e009      	b.n	8002110 <HAL_I2C_Init+0xe8>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a69      	ldr	r2, [pc, #420]	; (80022ac <HAL_I2C_Init+0x284>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002122:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	495c      	ldr	r1, [pc, #368]	; (800229c <HAL_I2C_Init+0x274>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d819      	bhi.n	8002164 <HAL_I2C_Init+0x13c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fbb1 f3f3 	udiv	r3, r1, r3
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002144:	400b      	ands	r3, r1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_I2C_Init+0x138>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e59      	subs	r1, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fbb1 f3f3 	udiv	r3, r1, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	e051      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002160:	2304      	movs	r3, #4
 8002162:	e04f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_I2C_Init+0x168>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Init+0x18e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Init+0x196>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e022      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <HAL_I2C_Init+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e58      	subs	r0, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e2:	e00f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002232:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6911      	ldr	r1, [r2, #16]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	000186a0 	.word	0x000186a0
 80022a0:	001e847f 	.word	0x001e847f
 80022a4:	003d08ff 	.word	0x003d08ff
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022ca:	f7ff fb0b 	bl	80018e4 <HAL_GetTick>
 80022ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b20      	cmp	r3, #32
 80022da:	f040 80d9 	bne.w	8002490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2319      	movs	r3, #25
 80022e4:	2201      	movs	r2, #1
 80022e6:	496d      	ldr	r1, [pc, #436]	; (800249c <HAL_I2C_Mem_Write+0x1ec>)
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fcc1 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
 80022f6:	e0cc      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Mem_Write+0x56>
 8002302:	2302      	movs	r3, #2
 8002304:	e0c5      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d007      	beq.n	800232c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2221      	movs	r2, #33	; 0x21
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_I2C_Mem_Write+0x1f0>)
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800236e:	88f8      	ldrh	r0, [r7, #6]
 8002370:	893a      	ldrh	r2, [r7, #8]
 8002372:	8979      	ldrh	r1, [r7, #10]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4603      	mov	r3, r0
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 faf8 	bl	8002974 <I2C_RequestMemoryWrite>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d052      	beq.n	8002430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e081      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 fd86 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00d      	beq.n	80023ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06b      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d11b      	bne.n	8002430 <HAL_I2C_Mem_Write+0x180>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d017      	beq.n	8002430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1aa      	bne.n	800238e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fd79 	bl	8002f34 <I2C_WaitOnBTFFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	2b04      	cmp	r3, #4
 800244e:	d107      	bne.n	8002460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e016      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	e000      	b.n	8002492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
  }
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	00100002 	.word	0x00100002
 80024a0:	ffff0000 	.word	0xffff0000

080024a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	; 0x30
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	817b      	strh	r3, [r7, #10]
 80024b6:	460b      	mov	r3, r1
 80024b8:	813b      	strh	r3, [r7, #8]
 80024ba:	4613      	mov	r3, r2
 80024bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c2:	f7ff fa0f 	bl	80018e4 <HAL_GetTick>
 80024c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	f040 8244 	bne.w	800295e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2319      	movs	r3, #25
 80024dc:	2201      	movs	r2, #1
 80024de:	4982      	ldr	r1, [pc, #520]	; (80026e8 <HAL_I2C_Mem_Read+0x244>)
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fbc5 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80024ec:	2302      	movs	r3, #2
 80024ee:	e237      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_I2C_Mem_Read+0x5a>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e230      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d007      	beq.n	8002524 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002532:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2222      	movs	r2, #34	; 0x22
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a62      	ldr	r2, [pc, #392]	; (80026ec <HAL_I2C_Mem_Read+0x248>)
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002566:	88f8      	ldrh	r0, [r7, #6]
 8002568:	893a      	ldrh	r2, [r7, #8]
 800256a:	8979      	ldrh	r1, [r7, #10]
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4603      	mov	r3, r0
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fa92 	bl	8002aa0 <I2C_RequestMemoryRead>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1ec      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258a:	2b00      	cmp	r3, #0
 800258c:	d113      	bne.n	80025b6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e1c0      	b.n	8002938 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d11e      	bne.n	80025fc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ce:	b672      	cpsid	i
}
 80025d0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f8:	b662      	cpsie	i
}
 80025fa:	e035      	b.n	8002668 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11e      	bne.n	8002642 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002614:	b672      	cpsid	i
}
 8002616:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800263e:	b662      	cpsie	i
}
 8002640:	e012      	b.n	8002668 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002668:	e166      	b.n	8002938 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266e:	2b03      	cmp	r3, #3
 8002670:	f200 811f 	bhi.w	80028b2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	2b01      	cmp	r3, #1
 800267a:	d123      	bne.n	80026c4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fc9f 	bl	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e167      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026c2:	e139      	b.n	8002938 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d152      	bne.n	8002772 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2200      	movs	r2, #0
 80026d4:	4906      	ldr	r1, [pc, #24]	; (80026f0 <HAL_I2C_Mem_Read+0x24c>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 faca 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e13c      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
 80026e6:	bf00      	nop
 80026e8:	00100002 	.word	0x00100002
 80026ec:	ffff0000 	.word	0xffff0000
 80026f0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800273a:	b662      	cpsie	i
}
 800273c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002770:	e0e2      	b.n	8002938 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	2200      	movs	r2, #0
 800277a:	497b      	ldr	r1, [pc, #492]	; (8002968 <HAL_I2C_Mem_Read+0x4c4>)
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fa77 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0e9      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800279a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800279c:	b672      	cpsid	i
}
 800279e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027d2:	4b66      	ldr	r3, [pc, #408]	; (800296c <HAL_I2C_Mem_Read+0x4c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	4a65      	ldr	r2, [pc, #404]	; (8002970 <HAL_I2C_Mem_Read+0x4cc>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a1a      	lsrs	r2, r3, #8
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00da      	lsls	r2, r3, #3
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d118      	bne.n	800282a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f043 0220 	orr.w	r2, r3, #32
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800281a:	b662      	cpsie	i
}
 800281c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e09a      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d1d9      	bne.n	80027ec <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800287a:	b662      	cpsie	i
}
 800287c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b0:	e042      	b.n	8002938 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb84 	bl	8002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e04c      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d118      	bne.n	8002938 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f ae94 	bne.w	800266a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010004 	.word	0x00010004
 800296c:	20000004 	.word	0x20000004
 8002970:	14f8b589 	.word	0x14f8b589

08002974 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 f960 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c4:	d103      	bne.n	80029ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e05f      	b.n	8002a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	6a3a      	ldr	r2, [r7, #32]
 80029e6:	492d      	ldr	r1, [pc, #180]	; (8002a9c <I2C_RequestMemoryWrite+0x128>)
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f9bb 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e04c      	b.n	8002a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fa46 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00d      	beq.n	8002a3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d107      	bne.n	8002a36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02b      	b.n	8002a92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a40:	893b      	ldrh	r3, [r7, #8]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	611a      	str	r2, [r3, #16]
 8002a4a:	e021      	b.n	8002a90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 fa20 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d107      	bne.n	8002a82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e005      	b.n	8002a92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a86:	893b      	ldrh	r3, [r7, #8]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	817b      	strh	r3, [r7, #10]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	813b      	strh	r3, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f8c2 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b00:	d103      	bne.n	8002b0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0aa      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0e:	897b      	ldrh	r3, [r7, #10]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	4952      	ldr	r1, [pc, #328]	; (8002c6c <I2C_RequestMemoryRead+0x1cc>)
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f91d 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e097      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4c:	6a39      	ldr	r1, [r7, #32]
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f9a8 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00d      	beq.n	8002b76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d107      	bne.n	8002b72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e076      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d105      	bne.n	8002b88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7c:	893b      	ldrh	r3, [r7, #8]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]
 8002b86:	e021      	b.n	8002bcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6a39      	ldr	r1, [r7, #32]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f982 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d107      	bne.n	8002bbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e050      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc2:	893b      	ldrh	r3, [r7, #8]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bce:	6a39      	ldr	r1, [r7, #32]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f967 	bl	8002ea4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d107      	bne.n	8002bf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e035      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f82b 	bl	8002c70 <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2e:	d103      	bne.n	8002c38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e013      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	6a3a      	ldr	r2, [r7, #32]
 8002c50:	4906      	ldr	r1, [pc, #24]	; (8002c6c <I2C_RequestMemoryRead+0x1cc>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f886 	bl	8002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	00010002 	.word	0x00010002

08002c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	e048      	b.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c88:	d044      	beq.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8a:	f7fe fe2b 	bl	80018e4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d302      	bcc.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d139      	bne.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10d      	bne.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	e00c      	b.n	8002ce0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2301      	moveq	r3, #1
 8002cda:	2300      	movne	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d116      	bne.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0220 	orr.w	r2, r3, #32
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e023      	b.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10d      	bne.n	8002d3a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	e00c      	b.n	8002d54 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4013      	ands	r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf0c      	ite	eq
 8002d4c:	2301      	moveq	r3, #1
 8002d4e:	2300      	movne	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d093      	beq.n	8002c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d72:	e071      	b.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d82:	d123      	bne.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d92:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2220      	movs	r2, #32
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e067      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd2:	d041      	beq.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd4:	f7fe fd86 	bl	80018e4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d136      	bne.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d10c      	bne.n	8002e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e00b      	b.n	8002e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0220 	orr.w	r2, r3, #32
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e021      	b.n	8002e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10c      	bne.n	8002e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf14      	ite	ne
 8002e74:	2301      	movne	r3, #1
 8002e76:	2300      	moveq	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e00b      	b.n	8002e94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bf14      	ite	ne
 8002e8e:	2301      	movne	r3, #1
 8002e90:	2300      	moveq	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af6d 	bne.w	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb0:	e034      	b.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8e3 	bl	800307e <I2C_IsAcknowledgeFailed>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e034      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec8:	d028      	beq.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe fd0b 	bl	80018e4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d11d      	bne.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d016      	beq.n	8002f1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d1c3      	bne.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f40:	e034      	b.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f89b 	bl	800307e <I2C_IsAcknowledgeFailed>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e034      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f58:	d028      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7fe fcc3 	bl	80018e4 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11d      	bne.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d016      	beq.n	8002fac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d1c3      	bne.n	8002f42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd0:	e049      	b.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d119      	bne.n	8003014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e030      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003014:	f7fe fc66 	bl	80018e4 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	d302      	bcc.n	800302a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11d      	bne.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d016      	beq.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e007      	b.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d1ae      	bne.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003094:	d11b      	bne.n	80030ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f043 0204 	orr.w	r2, r3, #4
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bc80      	pop	{r7}
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e272      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8087 	beq.w	800320a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b92      	ldr	r3, [pc, #584]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b04      	cmp	r3, #4
 8003106:	d00c      	beq.n	8003122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003108:	4b8f      	ldr	r3, [pc, #572]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d112      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
 8003114:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d10b      	bne.n	800313a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d06c      	beq.n	8003208 <HAL_RCC_OscConfig+0x12c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d168      	bne.n	8003208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e24c      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003142:	d106      	bne.n	8003152 <HAL_RCC_OscConfig+0x76>
 8003144:	4b80      	ldr	r3, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a7f      	ldr	r2, [pc, #508]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800314a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	e02e      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7a      	ldr	r2, [pc, #488]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b78      	ldr	r3, [pc, #480]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a77      	ldr	r2, [pc, #476]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800316c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xbc>
 800317e:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a71      	ldr	r2, [pc, #452]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b6f      	ldr	r3, [pc, #444]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6e      	ldr	r2, [pc, #440]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xd4>
 8003198:	4b6b      	ldr	r3, [pc, #428]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b68      	ldr	r3, [pc, #416]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fb94 	bl	80018e4 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fb90 	bl	80018e4 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e200      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b5d      	ldr	r3, [pc, #372]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe4>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fb80 	bl	80018e4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fb7c 	bl	80018e4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1ec      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x10c>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1c0      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4939      	ldr	r1, [pc, #228]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e03a      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x270>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe fb35 	bl	80018e4 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe fb31 	bl	80018e4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1a1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	4b2d      	ldr	r3, [pc, #180]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b2a      	ldr	r3, [pc, #168]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4927      	ldr	r1, [pc, #156]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x270>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fb14 	bl	80018e4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fe fb10 	bl	80018e4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e180      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03a      	beq.n	8003360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d019      	beq.n	8003326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7fe faf4 	bl	80018e4 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe faf0 	bl	80018e4 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e160      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCC_OscConfig+0x26c>)
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331e:	2001      	movs	r0, #1
 8003320:	f000 face 	bl	80038c0 <RCC_Delay>
 8003324:	e01c      	b.n	8003360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <HAL_RCC_OscConfig+0x274>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fe fada 	bl	80018e4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003332:	e00f      	b.n	8003354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7fe fad6 	bl	80018e4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d908      	bls.n	8003354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e146      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	42420000 	.word	0x42420000
 8003350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003354:	4b92      	ldr	r3, [pc, #584]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e9      	bne.n	8003334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a6 	beq.w	80034ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2300      	movs	r3, #0
 8003370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003372:	4b8b      	ldr	r3, [pc, #556]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	4b88      	ldr	r3, [pc, #544]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	4a87      	ldr	r2, [pc, #540]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003388:	61d3      	str	r3, [r2, #28]
 800338a:	4b85      	ldr	r3, [pc, #532]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d118      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033b2:	f7fe fa97 	bl	80018e4 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ba:	f7fe fa93 	bl	80018e4 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b64      	cmp	r3, #100	; 0x64
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e103      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x4c8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x312>
 80033e0:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	4a6e      	ldr	r2, [pc, #440]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6213      	str	r3, [r2, #32]
 80033ec:	e02d      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x334>
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 0301 	bic.w	r3, r3, #1
 8003400:	6213      	str	r3, [r2, #32]
 8003402:	4b67      	ldr	r3, [pc, #412]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003408:	f023 0304 	bic.w	r3, r3, #4
 800340c:	6213      	str	r3, [r2, #32]
 800340e:	e01c      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10c      	bne.n	8003432 <HAL_RCC_OscConfig+0x356>
 8003418:	4b61      	ldr	r3, [pc, #388]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a60      	ldr	r2, [pc, #384]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	f043 0304 	orr.w	r3, r3, #4
 8003422:	6213      	str	r3, [r2, #32]
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6213      	str	r3, [r2, #32]
 8003430:	e00b      	b.n	800344a <HAL_RCC_OscConfig+0x36e>
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	4b58      	ldr	r3, [pc, #352]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	4a57      	ldr	r2, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003452:	f7fe fa47 	bl	80018e4 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe fa43 	bl	80018e4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0b1      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCC_OscConfig+0x37e>
 800347c:	e014      	b.n	80034a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fa31 	bl	80018e4 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe fa2d 	bl	80018e4 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e09b      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349c:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1ee      	bne.n	8003486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ae:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a3b      	ldr	r2, [pc, #236]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d061      	beq.n	8003594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d146      	bne.n	8003566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fa01 	bl	80018e4 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe f9fd 	bl	80018e4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e06d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d108      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350e:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4921      	ldr	r1, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003520:	4b1f      	ldr	r3, [pc, #124]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a19      	ldr	r1, [r3, #32]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	430b      	orrs	r3, r1
 8003532:	491b      	ldr	r1, [pc, #108]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe f9d1 	bl	80018e4 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003546:	f7fe f9cd 	bl	80018e4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e03d      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x46a>
 8003564:	e035      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe f9ba 	bl	80018e4 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe f9b6 	bl	80018e4 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e026      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x498>
 8003592:	e01e      	b.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e019      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
 80035a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_OscConfig+0x500>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d106      	bne.n	80035ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0d0      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f4:	4b6a      	ldr	r3, [pc, #424]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d910      	bls.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 0207 	bic.w	r2, r3, #7
 800360a:	4965      	ldr	r1, [pc, #404]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0b8      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003654:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a52      	ldr	r2, [pc, #328]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003660:	4b50      	ldr	r3, [pc, #320]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	494d      	ldr	r1, [pc, #308]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d040      	beq.n	8003700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b47      	ldr	r3, [pc, #284]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d115      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e07f      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e073      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06b      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4936      	ldr	r1, [pc, #216]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036d0:	f7fe f908 	bl	80018e4 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d8:	f7fe f904 	bl	80018e4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e053      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 020c 	and.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1eb      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d210      	bcs.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 0207 	bic.w	r2, r3, #7
 8003716:	4922      	ldr	r1, [pc, #136]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e032      	b.n	8003796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373c:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4916      	ldr	r1, [pc, #88]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	4313      	orrs	r3, r2
 800374c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800375a:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	490e      	ldr	r1, [pc, #56]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376e:	f000 f821 	bl	80037b4 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490a      	ldr	r1, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	fa22 f303 	lsr.w	r3, r2, r3
 8003786:	4a09      	ldr	r2, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1cc>)
 8003788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800378a:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_ClockConfig+0x1d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f866 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40022000 	.word	0x40022000
 80037a4:	40021000 	.word	0x40021000
 80037a8:	08007688 	.word	0x08007688
 80037ac:	20000004 	.word	0x20000004
 80037b0:	20000008 	.word	0x20000008

080037b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	2300      	movs	r3, #0
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ce:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0x30>
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d003      	beq.n	80037ea <HAL_RCC_GetSysClockFreq+0x36>
 80037e2:	e027      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 80037e6:	613b      	str	r3, [r7, #16]
      break;
 80037e8:	e027      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a17      	ldr	r2, [pc, #92]	; (8003850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003802:	4b11      	ldr	r3, [pc, #68]	; (8003848 <HAL_RCC_GetSysClockFreq+0x94>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	0c5b      	lsrs	r3, r3, #17
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	4a11      	ldr	r2, [pc, #68]	; (8003854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800380e:	5cd3      	ldrb	r3, [r2, r3]
 8003810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003816:	fb03 f202 	mul.w	r2, r3, r2
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e004      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003828:	fb02 f303 	mul.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCC_GetSysClockFreq+0x98>)
 8003836:	613b      	str	r3, [r7, #16]
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	693b      	ldr	r3, [r7, #16]
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	007a1200 	.word	0x007a1200
 8003850:	080076a0 	.word	0x080076a0
 8003854:	080076b0 	.word	0x080076b0
 8003858:	003d0900 	.word	0x003d0900

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <HAL_RCC_GetHCLKFreq+0x10>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003874:	f7ff fff2 	bl	800385c <HAL_RCC_GetHCLKFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	4903      	ldr	r1, [pc, #12]	; (8003894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003886:	5ccb      	ldrb	r3, [r1, r3]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40021000 	.word	0x40021000
 8003894:	08007698 	.word	0x08007698

08003898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800389c:	f7ff ffde 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a0:	4602      	mov	r2, r0
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	0adb      	lsrs	r3, r3, #11
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	4903      	ldr	r1, [pc, #12]	; (80038bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08007698 	.word	0x08007698

080038c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038c8:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <RCC_Delay+0x34>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <RCC_Delay+0x38>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0a5b      	lsrs	r3, r3, #9
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038dc:	bf00      	nop
  }
  while (Delay --);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e5a      	subs	r2, r3, #1
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f9      	bne.n	80038dc <RCC_Delay+0x1c>
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	20000004 	.word	0x20000004
 80038f8:	10624dd3 	.word	0x10624dd3

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fdd0 	bl	80014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fabe 	bl	8003ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e032      	b.n	8003a1a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_TIM_Base_Start+0x88>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_TIM_Base_Start+0x48>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ce:	d009      	beq.n	80039e4 <HAL_TIM_Base_Start+0x48>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a14      	ldr	r2, [pc, #80]	; (8003a28 <HAL_TIM_Base_Start+0x8c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_Base_Start+0x48>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <HAL_TIM_Base_Start+0x90>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b06      	cmp	r3, #6
 80039f4:	d010      	beq.n	8003a18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f042 0201 	orr.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a06:	e007      	b.n	8003a18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40000800 	.word	0x40000800

08003a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e03a      	b.n	8003abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00e      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x58>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d009      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x58>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_TIM_Base_Start_IT+0x9c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_TIM_Base_Start_IT+0x58>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b06      	cmp	r3, #6
 8003a98:	d010      	beq.n	8003abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0201 	orr.w	r2, r2, #1
 8003aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	e007      	b.n	8003abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800

08003ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0202 	mvn.w	r2, #2
 8003b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9b4 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f9a7 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f9b6 	bl	8003e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0304 	and.w	r3, r3, #4
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0204 	mvn.w	r2, #4
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f98a 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f97d 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f98c 	bl	8003e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0208 	mvn.w	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f960 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f953 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f962 	bl	8003e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d122      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d11b      	bne.n	8003c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0210 	mvn.w	r2, #16
 8003bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2208      	movs	r2, #8
 8003c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f936 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003c18:	e005      	b.n	8003c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f929 	bl	8003e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f938 	bl	8003e96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d10e      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0201 	mvn.w	r2, #1
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fd fbac 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b80      	cmp	r3, #128	; 0x80
 8003c64:	d10e      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b80      	cmp	r3, #128	; 0x80
 8003c72:	d107      	bne.n	8003c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa7b 	bl	800417a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d10e      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b40      	cmp	r3, #64	; 0x40
 8003c9e:	d107      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8fc 	bl	8003ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d10e      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d107      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0220 	mvn.w	r2, #32
 8003cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa46 	bl	8004168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_ConfigClockSource+0x1c>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0b4      	b.n	8003e6a <HAL_TIM_ConfigClockSource+0x186>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d38:	d03e      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	f200 8087 	bhi.w	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d46:	f000 8086 	beq.w	8003e56 <HAL_TIM_ConfigClockSource+0x172>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d87f      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b70      	cmp	r3, #112	; 0x70
 8003d52:	d01a      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xa6>
 8003d54:	2b70      	cmp	r3, #112	; 0x70
 8003d56:	d87b      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b60      	cmp	r3, #96	; 0x60
 8003d5a:	d050      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x11a>
 8003d5c:	2b60      	cmp	r3, #96	; 0x60
 8003d5e:	d877      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b50      	cmp	r3, #80	; 0x50
 8003d62:	d03c      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xfa>
 8003d64:	2b50      	cmp	r3, #80	; 0x50
 8003d66:	d873      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d058      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x13a>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d86f      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b30      	cmp	r3, #48	; 0x30
 8003d72:	d064      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d74:	2b30      	cmp	r3, #48	; 0x30
 8003d76:	d86b      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d060      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d867      	bhi.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d05c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d05a      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	e062      	b.n	8003e50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f000 f968 	bl	800406e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	609a      	str	r2, [r3, #8]
      break;
 8003db6:	e04f      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6899      	ldr	r1, [r3, #8]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f000 f951 	bl	800406e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dda:	609a      	str	r2, [r3, #8]
      break;
 8003ddc:	e03c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 f8c8 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2150      	movs	r1, #80	; 0x50
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f91f 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e02c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 f8e6 	bl	8003fdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2160      	movs	r1, #96	; 0x60
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f90f 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e01c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 f8a8 	bl	8003f80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f8ff 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f000 f8f6 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e003      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      break;
 8003e54:	e000      	b.n	8003e58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
	...

08003ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a26      	ldr	r2, [pc, #152]	; (8003f78 <TIM_Base_SetConfig+0xbc>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x30>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <TIM_Base_SetConfig+0xc0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_Base_SetConfig+0xbc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0x62>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_Base_SetConfig+0xc0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <TIM_Base_SetConfig+0xb8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d103      	bne.n	8003f64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bc80      	pop	{r7}
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800

08003f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	f023 0201 	bic.w	r2, r3, #1
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003faa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 030a 	bic.w	r3, r3, #10
 8003fbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	031b      	lsls	r3, r3, #12
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004018:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	f043 0307 	orr.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800406e:	b480      	push	{r7}
 8004070:	b087      	sub	sp, #28
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
 800407a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004088:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	021a      	lsls	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4313      	orrs	r3, r2
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e046      	b.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d009      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a12      	ldr	r2, [pc, #72]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a10      	ldr	r2, [pc, #64]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800

08004168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	bc80      	pop	{r7}
 8004178:	4770      	bx	lr

0800417a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e042      	b.n	8004224 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd f9c2 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2224      	movs	r2, #36	; 0x24
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fc7f 	bl	8004ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b0ba      	sub	sp, #232	; 0xe8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800426a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_UART_IRQHandler+0x66>
 800427e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fb63 	bl	8004956 <UART_Receive_IT>
      return;
 8004290:	e25b      	b.n	800474a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80de 	beq.w	8004458 <HAL_UART_IRQHandler+0x22c>
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80d1 	beq.w	8004458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_UART_IRQHandler+0xae>
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f043 0201 	orr.w	r2, r3, #1
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_UART_IRQHandler+0xd2>
 80042e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0xf6>
 800430a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d011      	beq.n	8004352 <HAL_UART_IRQHandler+0x126>
 800432e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800433a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434a:	f043 0208 	orr.w	r2, r3, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 81f2 	beq.w	8004740 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800435c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_UART_IRQHandler+0x14e>
 8004368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d002      	beq.n	800437a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 faee 	bl	8004956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf14      	ite	ne
 8004388:	2301      	movne	r3, #1
 800438a:	2300      	moveq	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <HAL_UART_IRQHandler+0x17a>
 800439e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d04f      	beq.n	8004446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9f8 	bl	800479c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d041      	beq.n	800443e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3314      	adds	r3, #20
 80043c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043f6:	e841 2300 	strex	r3, r2, [r1]
 80043fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1d9      	bne.n	80043ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	4a7e      	ldr	r2, [pc, #504]	; (800460c <HAL_UART_IRQHandler+0x3e0>)
 8004414:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd fbd8 	bl	8001bd0 <HAL_DMA_Abort_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	e00e      	b.n	8004454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f99c 	bl	8004774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	e00a      	b.n	8004454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f998 	bl	8004774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e006      	b.n	8004454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f994 	bl	8004774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004452:	e175      	b.n	8004740 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	bf00      	nop
    return;
 8004456:	e173      	b.n	8004740 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 814f 	bne.w	8004700 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8148 	beq.w	8004700 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8141 	beq.w	8004700 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	60bb      	str	r3, [r7, #8]
 8004492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80b6 	beq.w	8004610 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8145 	beq.w	8004744 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044c2:	429a      	cmp	r2, r3
 80044c4:	f080 813e 	bcs.w	8004744 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	f000 8088 	beq.w	80045ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	330c      	adds	r3, #12
 80044e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044ea:	e853 3f00 	ldrex	r3, [r3]
 80044ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004508:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800450c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004514:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1d9      	bne.n	80044dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3314      	adds	r3, #20
 8004548:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800454c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004550:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004554:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800455e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e1      	bne.n	8004528 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004588:	66fa      	str	r2, [r7, #108]	; 0x6c
 800458a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800458e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	330c      	adds	r3, #12
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	f023 0310 	bic.w	r3, r3, #16
 80045c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	330c      	adds	r3, #12
 80045ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80045d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e3      	bne.n	80045aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fab7 	bl	8001b5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2202      	movs	r2, #2
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f8bf 	bl	8004786 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004608:	e09c      	b.n	8004744 <HAL_UART_IRQHandler+0x518>
 800460a:	bf00      	nop
 800460c:	08004861 	.word	0x08004861
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 808e 	beq.w	8004748 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800462c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8089 	beq.w	8004748 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800465a:	647a      	str	r2, [r7, #68]	; 0x44
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	623b      	str	r3, [r7, #32]
   return(result);
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004692:	633a      	str	r2, [r7, #48]	; 0x30
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e3      	bne.n	800466e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046d8:	61fa      	str	r2, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	617b      	str	r3, [r7, #20]
   return(result);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e3      	bne.n	80046b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f844 	bl	8004786 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046fe:	e023      	b.n	8004748 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_UART_IRQHandler+0x4f4>
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8b5 	bl	8004888 <UART_Transmit_IT>
    return;
 800471e:	e014      	b.n	800474a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <HAL_UART_IRQHandler+0x51e>
 800472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8f4 	bl	8004926 <UART_EndTransmit_IT>
    return;
 800473e:	e004      	b.n	800474a <HAL_UART_IRQHandler+0x51e>
    return;
 8004740:	bf00      	nop
 8004742:	e002      	b.n	800474a <HAL_UART_IRQHandler+0x51e>
      return;
 8004744:	bf00      	nop
 8004746:	e000      	b.n	800474a <HAL_UART_IRQHandler+0x51e>
      return;
 8004748:	bf00      	nop
  }
}
 800474a:	37e8      	adds	r7, #232	; 0xe8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	460b      	mov	r3, r1
 8004790:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	bc80      	pop	{r7}
 800479a:	4770      	bx	lr

0800479c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b095      	sub	sp, #84	; 0x54
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	330c      	adds	r3, #12
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c4:	643a      	str	r2, [r7, #64]	; 0x40
 80047c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e5      	bne.n	80047a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3314      	adds	r3, #20
 80047de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e5      	bne.n	80047d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	2b01      	cmp	r3, #1
 8004812:	d119      	bne.n	8004848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60bb      	str	r3, [r7, #8]
   return(result);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	647b      	str	r3, [r7, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004834:	61ba      	str	r2, [r7, #24]
 8004836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6979      	ldr	r1, [r7, #20]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004856:	bf00      	nop
 8004858:	3754      	adds	r7, #84	; 0x54
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f7ff ff7a 	bl	8004774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b21      	cmp	r3, #33	; 0x21
 800489a:	d13e      	bne.n	800491a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d114      	bne.n	80048d0 <UART_Transmit_IT+0x48>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d110      	bne.n	80048d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	1c9a      	adds	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]
 80048ce:	e008      	b.n	80048e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6211      	str	r1, [r2, #32]
 80048da:	781a      	ldrb	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4619      	mov	r1, r3
 80048f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff ff02 	bl	8004750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08c      	sub	sp, #48	; 0x30
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b22      	cmp	r3, #34	; 0x22
 8004968:	f040 80ae 	bne.w	8004ac8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004974:	d117      	bne.n	80049a6 <UART_Receive_IT+0x50>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d113      	bne.n	80049a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	b29a      	uxth	r2, r3
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e026      	b.n	80049f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d007      	beq.n	80049ca <UART_Receive_IT+0x74>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <UART_Receive_IT+0x82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e008      	b.n	80049ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d15d      	bne.n	8004ac4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0220 	bic.w	r2, r2, #32
 8004a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d135      	bne.n	8004aba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	613b      	str	r3, [r7, #16]
   return(result);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a74:	623a      	str	r2, [r7, #32]
 8004a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d10a      	bne.n	8004aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fe67 	bl	8004786 <HAL_UARTEx_RxEventCallback>
 8004ab8:	e002      	b.n	8004ac0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe51 	bl	8004762 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e002      	b.n	8004aca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3730      	adds	r7, #48	; 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b0e:	f023 030c 	bic.w	r3, r3, #12
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2c      	ldr	r2, [pc, #176]	; (8004be8 <UART_SetConfig+0x114>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d103      	bne.n	8004b44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fe feac 	bl	8003898 <HAL_RCC_GetPCLK2Freq>
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	e002      	b.n	8004b4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b44:	f7fe fe94 	bl	8003870 <HAL_RCC_GetPCLK1Freq>
 8004b48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4413      	add	r3, r2
 8004b52:	009a      	lsls	r2, r3, #2
 8004b54:	441a      	add	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	4a22      	ldr	r2, [pc, #136]	; (8004bec <UART_SetConfig+0x118>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	0119      	lsls	r1, r3, #4
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <UART_SetConfig+0x118>)
 8004b82:	fba3 0302 	umull	r0, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2064      	movs	r0, #100	; 0x64
 8004b8a:	fb00 f303 	mul.w	r3, r0, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a15      	ldr	r2, [pc, #84]	; (8004bec <UART_SetConfig+0x118>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba0:	4419      	add	r1, r3
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009a      	lsls	r2, r3, #2
 8004bac:	441a      	add	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb8:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <UART_SetConfig+0x118>)
 8004bba:	fba3 0302 	umull	r0, r3, r3, r2
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2064      	movs	r0, #100	; 0x64
 8004bc2:	fb00 f303 	mul.w	r3, r0, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	3332      	adds	r3, #50	; 0x32
 8004bcc:	4a07      	ldr	r2, [pc, #28]	; (8004bec <UART_SetConfig+0x118>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	f003 020f 	and.w	r2, r3, #15
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	440a      	add	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40013800 	.word	0x40013800
 8004bec:	51eb851f 	.word	0x51eb851f

08004bf0 <__errno>:
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <__errno+0x8>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000010 	.word	0x20000010

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	2600      	movs	r6, #0
 8004c00:	4d0c      	ldr	r5, [pc, #48]	; (8004c34 <__libc_init_array+0x38>)
 8004c02:	4c0d      	ldr	r4, [pc, #52]	; (8004c38 <__libc_init_array+0x3c>)
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	f002 fd30 	bl	8007670 <_init>
 8004c10:	2600      	movs	r6, #0
 8004c12:	4d0a      	ldr	r5, [pc, #40]	; (8004c3c <__libc_init_array+0x40>)
 8004c14:	4c0a      	ldr	r4, [pc, #40]	; (8004c40 <__libc_init_array+0x44>)
 8004c16:	1b64      	subs	r4, r4, r5
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08007a8c 	.word	0x08007a8c
 8004c38:	08007a8c 	.word	0x08007a8c
 8004c3c:	08007a8c 	.word	0x08007a8c
 8004c40:	08007a90 	.word	0x08007a90

08004c44 <memset>:
 8004c44:	4603      	mov	r3, r0
 8004c46:	4402      	add	r2, r0
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d100      	bne.n	8004c4e <memset+0xa>
 8004c4c:	4770      	bx	lr
 8004c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c52:	e7f9      	b.n	8004c48 <memset+0x4>

08004c54 <__cvt>:
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5a:	461f      	mov	r7, r3
 8004c5c:	bfbb      	ittet	lt
 8004c5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c62:	461f      	movlt	r7, r3
 8004c64:	2300      	movge	r3, #0
 8004c66:	232d      	movlt	r3, #45	; 0x2d
 8004c68:	b088      	sub	sp, #32
 8004c6a:	4614      	mov	r4, r2
 8004c6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c6e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c74:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004c78:	f023 0820 	bic.w	r8, r3, #32
 8004c7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c80:	d005      	beq.n	8004c8e <__cvt+0x3a>
 8004c82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c86:	d100      	bne.n	8004c8a <__cvt+0x36>
 8004c88:	3501      	adds	r5, #1
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e000      	b.n	8004c90 <__cvt+0x3c>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	aa07      	add	r2, sp, #28
 8004c92:	9204      	str	r2, [sp, #16]
 8004c94:	aa06      	add	r2, sp, #24
 8004c96:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c9a:	e9cd 3500 	strd	r3, r5, [sp]
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	f000 fcc5 	bl	8005630 <_dtoa_r>
 8004ca6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004caa:	4606      	mov	r6, r0
 8004cac:	d102      	bne.n	8004cb4 <__cvt+0x60>
 8004cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cb0:	07db      	lsls	r3, r3, #31
 8004cb2:	d522      	bpl.n	8004cfa <__cvt+0xa6>
 8004cb4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cb8:	eb06 0905 	add.w	r9, r6, r5
 8004cbc:	d110      	bne.n	8004ce0 <__cvt+0x8c>
 8004cbe:	7833      	ldrb	r3, [r6, #0]
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d10a      	bne.n	8004cda <__cvt+0x86>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4639      	mov	r1, r7
 8004ccc:	f7fb fe6c 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd0:	b918      	cbnz	r0, 8004cda <__cvt+0x86>
 8004cd2:	f1c5 0501 	rsb	r5, r5, #1
 8004cd6:	f8ca 5000 	str.w	r5, [sl]
 8004cda:	f8da 3000 	ldr.w	r3, [sl]
 8004cde:	4499      	add	r9, r3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8004cec:	b108      	cbz	r0, 8004cf2 <__cvt+0x9e>
 8004cee:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cf2:	2230      	movs	r2, #48	; 0x30
 8004cf4:	9b07      	ldr	r3, [sp, #28]
 8004cf6:	454b      	cmp	r3, r9
 8004cf8:	d307      	bcc.n	8004d0a <__cvt+0xb6>
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	9b07      	ldr	r3, [sp, #28]
 8004cfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d00:	1b9b      	subs	r3, r3, r6
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	b008      	add	sp, #32
 8004d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	9107      	str	r1, [sp, #28]
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	e7f0      	b.n	8004cf4 <__cvt+0xa0>

08004d12 <__exponent>:
 8004d12:	4603      	mov	r3, r0
 8004d14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d16:	2900      	cmp	r1, #0
 8004d18:	f803 2b02 	strb.w	r2, [r3], #2
 8004d1c:	bfb6      	itet	lt
 8004d1e:	222d      	movlt	r2, #45	; 0x2d
 8004d20:	222b      	movge	r2, #43	; 0x2b
 8004d22:	4249      	neglt	r1, r1
 8004d24:	2909      	cmp	r1, #9
 8004d26:	7042      	strb	r2, [r0, #1]
 8004d28:	dd2b      	ble.n	8004d82 <__exponent+0x70>
 8004d2a:	f10d 0407 	add.w	r4, sp, #7
 8004d2e:	46a4      	mov	ip, r4
 8004d30:	270a      	movs	r7, #10
 8004d32:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d36:	460a      	mov	r2, r1
 8004d38:	46a6      	mov	lr, r4
 8004d3a:	fb07 1516 	mls	r5, r7, r6, r1
 8004d3e:	2a63      	cmp	r2, #99	; 0x63
 8004d40:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d44:	4631      	mov	r1, r6
 8004d46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004d4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d4e:	dcf0      	bgt.n	8004d32 <__exponent+0x20>
 8004d50:	3130      	adds	r1, #48	; 0x30
 8004d52:	f1ae 0502 	sub.w	r5, lr, #2
 8004d56:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d5a:	4629      	mov	r1, r5
 8004d5c:	1c44      	adds	r4, r0, #1
 8004d5e:	4561      	cmp	r1, ip
 8004d60:	d30a      	bcc.n	8004d78 <__exponent+0x66>
 8004d62:	f10d 0209 	add.w	r2, sp, #9
 8004d66:	eba2 020e 	sub.w	r2, r2, lr
 8004d6a:	4565      	cmp	r5, ip
 8004d6c:	bf88      	it	hi
 8004d6e:	2200      	movhi	r2, #0
 8004d70:	4413      	add	r3, r2
 8004d72:	1a18      	subs	r0, r3, r0
 8004d74:	b003      	add	sp, #12
 8004d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d7c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d80:	e7ed      	b.n	8004d5e <__exponent+0x4c>
 8004d82:	2330      	movs	r3, #48	; 0x30
 8004d84:	3130      	adds	r1, #48	; 0x30
 8004d86:	7083      	strb	r3, [r0, #2]
 8004d88:	70c1      	strb	r1, [r0, #3]
 8004d8a:	1d03      	adds	r3, r0, #4
 8004d8c:	e7f1      	b.n	8004d72 <__exponent+0x60>
	...

08004d90 <_printf_float>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	b091      	sub	sp, #68	; 0x44
 8004d96:	460c      	mov	r4, r1
 8004d98:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	461f      	mov	r7, r3
 8004da0:	4605      	mov	r5, r0
 8004da2:	f001 fa33 	bl	800620c <_localeconv_r>
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dac:	f7fb f9d0 	bl	8000150 <strlen>
 8004db0:	2300      	movs	r3, #0
 8004db2:	930e      	str	r3, [sp, #56]	; 0x38
 8004db4:	f8d8 3000 	ldr.w	r3, [r8]
 8004db8:	900a      	str	r0, [sp, #40]	; 0x28
 8004dba:	3307      	adds	r3, #7
 8004dbc:	f023 0307 	bic.w	r3, r3, #7
 8004dc0:	f103 0208 	add.w	r2, r3, #8
 8004dc4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004dc8:	f8d4 b000 	ldr.w	fp, [r4]
 8004dcc:	f8c8 2000 	str.w	r2, [r8]
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004dd8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ddc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004de6:	4640      	mov	r0, r8
 8004de8:	4b9c      	ldr	r3, [pc, #624]	; (800505c <_printf_float+0x2cc>)
 8004dea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dec:	f7fb fe0e 	bl	8000a0c <__aeabi_dcmpun>
 8004df0:	bb70      	cbnz	r0, 8004e50 <_printf_float+0xc0>
 8004df2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df6:	4640      	mov	r0, r8
 8004df8:	4b98      	ldr	r3, [pc, #608]	; (800505c <_printf_float+0x2cc>)
 8004dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dfc:	f7fb fde8 	bl	80009d0 <__aeabi_dcmple>
 8004e00:	bb30      	cbnz	r0, 8004e50 <_printf_float+0xc0>
 8004e02:	2200      	movs	r2, #0
 8004e04:	2300      	movs	r3, #0
 8004e06:	4640      	mov	r0, r8
 8004e08:	4651      	mov	r1, sl
 8004e0a:	f7fb fdd7 	bl	80009bc <__aeabi_dcmplt>
 8004e0e:	b110      	cbz	r0, 8004e16 <_printf_float+0x86>
 8004e10:	232d      	movs	r3, #45	; 0x2d
 8004e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e16:	4b92      	ldr	r3, [pc, #584]	; (8005060 <_printf_float+0x2d0>)
 8004e18:	4892      	ldr	r0, [pc, #584]	; (8005064 <_printf_float+0x2d4>)
 8004e1a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e1e:	bf94      	ite	ls
 8004e20:	4698      	movls	r8, r3
 8004e22:	4680      	movhi	r8, r0
 8004e24:	2303      	movs	r3, #3
 8004e26:	f04f 0a00 	mov.w	sl, #0
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	f02b 0304 	bic.w	r3, fp, #4
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	4633      	mov	r3, r6
 8004e34:	4621      	mov	r1, r4
 8004e36:	4628      	mov	r0, r5
 8004e38:	9700      	str	r7, [sp, #0]
 8004e3a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e3c:	f000 f9d4 	bl	80051e8 <_printf_common>
 8004e40:	3001      	adds	r0, #1
 8004e42:	f040 8090 	bne.w	8004f66 <_printf_float+0x1d6>
 8004e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4a:	b011      	add	sp, #68	; 0x44
 8004e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e50:	4642      	mov	r2, r8
 8004e52:	4653      	mov	r3, sl
 8004e54:	4640      	mov	r0, r8
 8004e56:	4651      	mov	r1, sl
 8004e58:	f7fb fdd8 	bl	8000a0c <__aeabi_dcmpun>
 8004e5c:	b148      	cbz	r0, 8004e72 <_printf_float+0xe2>
 8004e5e:	f1ba 0f00 	cmp.w	sl, #0
 8004e62:	bfb8      	it	lt
 8004e64:	232d      	movlt	r3, #45	; 0x2d
 8004e66:	4880      	ldr	r0, [pc, #512]	; (8005068 <_printf_float+0x2d8>)
 8004e68:	bfb8      	it	lt
 8004e6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e6e:	4b7f      	ldr	r3, [pc, #508]	; (800506c <_printf_float+0x2dc>)
 8004e70:	e7d3      	b.n	8004e1a <_printf_float+0x8a>
 8004e72:	6863      	ldr	r3, [r4, #4]
 8004e74:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	d142      	bne.n	8004f02 <_printf_float+0x172>
 8004e7c:	2306      	movs	r3, #6
 8004e7e:	6063      	str	r3, [r4, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	9206      	str	r2, [sp, #24]
 8004e84:	aa0e      	add	r2, sp, #56	; 0x38
 8004e86:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e8a:	aa0d      	add	r2, sp, #52	; 0x34
 8004e8c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e90:	9203      	str	r2, [sp, #12]
 8004e92:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e9a:	6023      	str	r3, [r4, #0]
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	4642      	mov	r2, r8
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	4653      	mov	r3, sl
 8004ea6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ea8:	f7ff fed4 	bl	8004c54 <__cvt>
 8004eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eae:	4680      	mov	r8, r0
 8004eb0:	2947      	cmp	r1, #71	; 0x47
 8004eb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eb4:	d108      	bne.n	8004ec8 <_printf_float+0x138>
 8004eb6:	1cc8      	adds	r0, r1, #3
 8004eb8:	db02      	blt.n	8004ec0 <_printf_float+0x130>
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	dd40      	ble.n	8004f42 <_printf_float+0x1b2>
 8004ec0:	f1a9 0902 	sub.w	r9, r9, #2
 8004ec4:	fa5f f989 	uxtb.w	r9, r9
 8004ec8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ecc:	d81f      	bhi.n	8004f0e <_printf_float+0x17e>
 8004ece:	464a      	mov	r2, r9
 8004ed0:	3901      	subs	r1, #1
 8004ed2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ed6:	910d      	str	r1, [sp, #52]	; 0x34
 8004ed8:	f7ff ff1b 	bl	8004d12 <__exponent>
 8004edc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ede:	4682      	mov	sl, r0
 8004ee0:	1813      	adds	r3, r2, r0
 8004ee2:	2a01      	cmp	r2, #1
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	dc02      	bgt.n	8004eee <_printf_float+0x15e>
 8004ee8:	6822      	ldr	r2, [r4, #0]
 8004eea:	07d2      	lsls	r2, r2, #31
 8004eec:	d501      	bpl.n	8004ef2 <_printf_float+0x162>
 8004eee:	3301      	adds	r3, #1
 8004ef0:	6123      	str	r3, [r4, #16]
 8004ef2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d09b      	beq.n	8004e32 <_printf_float+0xa2>
 8004efa:	232d      	movs	r3, #45	; 0x2d
 8004efc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f00:	e797      	b.n	8004e32 <_printf_float+0xa2>
 8004f02:	2947      	cmp	r1, #71	; 0x47
 8004f04:	d1bc      	bne.n	8004e80 <_printf_float+0xf0>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ba      	bne.n	8004e80 <_printf_float+0xf0>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7b7      	b.n	8004e7e <_printf_float+0xee>
 8004f0e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f12:	d118      	bne.n	8004f46 <_printf_float+0x1b6>
 8004f14:	2900      	cmp	r1, #0
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	dd0b      	ble.n	8004f32 <_printf_float+0x1a2>
 8004f1a:	6121      	str	r1, [r4, #16]
 8004f1c:	b913      	cbnz	r3, 8004f24 <_printf_float+0x194>
 8004f1e:	6822      	ldr	r2, [r4, #0]
 8004f20:	07d0      	lsls	r0, r2, #31
 8004f22:	d502      	bpl.n	8004f2a <_printf_float+0x19a>
 8004f24:	3301      	adds	r3, #1
 8004f26:	440b      	add	r3, r1
 8004f28:	6123      	str	r3, [r4, #16]
 8004f2a:	f04f 0a00 	mov.w	sl, #0
 8004f2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f30:	e7df      	b.n	8004ef2 <_printf_float+0x162>
 8004f32:	b913      	cbnz	r3, 8004f3a <_printf_float+0x1aa>
 8004f34:	6822      	ldr	r2, [r4, #0]
 8004f36:	07d2      	lsls	r2, r2, #31
 8004f38:	d501      	bpl.n	8004f3e <_printf_float+0x1ae>
 8004f3a:	3302      	adds	r3, #2
 8004f3c:	e7f4      	b.n	8004f28 <_printf_float+0x198>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e7f2      	b.n	8004f28 <_printf_float+0x198>
 8004f42:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f48:	4299      	cmp	r1, r3
 8004f4a:	db05      	blt.n	8004f58 <_printf_float+0x1c8>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	6121      	str	r1, [r4, #16]
 8004f50:	07d8      	lsls	r0, r3, #31
 8004f52:	d5ea      	bpl.n	8004f2a <_printf_float+0x19a>
 8004f54:	1c4b      	adds	r3, r1, #1
 8004f56:	e7e7      	b.n	8004f28 <_printf_float+0x198>
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	bfcc      	ite	gt
 8004f5c:	2201      	movgt	r2, #1
 8004f5e:	f1c1 0202 	rsble	r2, r1, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	e7e0      	b.n	8004f28 <_printf_float+0x198>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	055a      	lsls	r2, r3, #21
 8004f6a:	d407      	bmi.n	8004f7c <_printf_float+0x1ec>
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	4642      	mov	r2, r8
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	d12b      	bne.n	8004fd2 <_printf_float+0x242>
 8004f7a:	e764      	b.n	8004e46 <_printf_float+0xb6>
 8004f7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f80:	f240 80dd 	bls.w	800513e <_printf_float+0x3ae>
 8004f84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f7fb fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d033      	beq.n	8004ffc <_printf_float+0x26c>
 8004f94:	2301      	movs	r3, #1
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	4a35      	ldr	r2, [pc, #212]	; (8005070 <_printf_float+0x2e0>)
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	f43f af51 	beq.w	8004e46 <_printf_float+0xb6>
 8004fa4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	db02      	blt.n	8004fb2 <_printf_float+0x222>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	07d8      	lsls	r0, r3, #31
 8004fb0:	d50f      	bpl.n	8004fd2 <_printf_float+0x242>
 8004fb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f43f af42 	beq.w	8004e46 <_printf_float+0xb6>
 8004fc2:	f04f 0800 	mov.w	r8, #0
 8004fc6:	f104 091a 	add.w	r9, r4, #26
 8004fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4543      	cmp	r3, r8
 8004fd0:	dc09      	bgt.n	8004fe6 <_printf_float+0x256>
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	079b      	lsls	r3, r3, #30
 8004fd6:	f100 8102 	bmi.w	80051de <_printf_float+0x44e>
 8004fda:	68e0      	ldr	r0, [r4, #12]
 8004fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fde:	4298      	cmp	r0, r3
 8004fe0:	bfb8      	it	lt
 8004fe2:	4618      	movlt	r0, r3
 8004fe4:	e731      	b.n	8004e4a <_printf_float+0xba>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	464a      	mov	r2, r9
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f43f af28 	beq.w	8004e46 <_printf_float+0xb6>
 8004ff6:	f108 0801 	add.w	r8, r8, #1
 8004ffa:	e7e6      	b.n	8004fca <_printf_float+0x23a>
 8004ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	dc38      	bgt.n	8005074 <_printf_float+0x2e4>
 8005002:	2301      	movs	r3, #1
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	4a19      	ldr	r2, [pc, #100]	; (8005070 <_printf_float+0x2e0>)
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f af1a 	beq.w	8004e46 <_printf_float+0xb6>
 8005012:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005016:	4313      	orrs	r3, r2
 8005018:	d102      	bne.n	8005020 <_printf_float+0x290>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	07d9      	lsls	r1, r3, #31
 800501e:	d5d8      	bpl.n	8004fd2 <_printf_float+0x242>
 8005020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	f43f af0b 	beq.w	8004e46 <_printf_float+0xb6>
 8005030:	f04f 0900 	mov.w	r9, #0
 8005034:	f104 0a1a 	add.w	sl, r4, #26
 8005038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800503a:	425b      	negs	r3, r3
 800503c:	454b      	cmp	r3, r9
 800503e:	dc01      	bgt.n	8005044 <_printf_float+0x2b4>
 8005040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005042:	e794      	b.n	8004f6e <_printf_float+0x1de>
 8005044:	2301      	movs	r3, #1
 8005046:	4652      	mov	r2, sl
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	f43f aef9 	beq.w	8004e46 <_printf_float+0xb6>
 8005054:	f109 0901 	add.w	r9, r9, #1
 8005058:	e7ee      	b.n	8005038 <_printf_float+0x2a8>
 800505a:	bf00      	nop
 800505c:	7fefffff 	.word	0x7fefffff
 8005060:	080076b8 	.word	0x080076b8
 8005064:	080076bc 	.word	0x080076bc
 8005068:	080076c4 	.word	0x080076c4
 800506c:	080076c0 	.word	0x080076c0
 8005070:	080076c8 	.word	0x080076c8
 8005074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005078:	429a      	cmp	r2, r3
 800507a:	bfa8      	it	ge
 800507c:	461a      	movge	r2, r3
 800507e:	2a00      	cmp	r2, #0
 8005080:	4691      	mov	r9, r2
 8005082:	dc37      	bgt.n	80050f4 <_printf_float+0x364>
 8005084:	f04f 0b00 	mov.w	fp, #0
 8005088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800508c:	f104 021a 	add.w	r2, r4, #26
 8005090:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005094:	ebaa 0309 	sub.w	r3, sl, r9
 8005098:	455b      	cmp	r3, fp
 800509a:	dc33      	bgt.n	8005104 <_printf_float+0x374>
 800509c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050a0:	429a      	cmp	r2, r3
 80050a2:	db3b      	blt.n	800511c <_printf_float+0x38c>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	07da      	lsls	r2, r3, #31
 80050a8:	d438      	bmi.n	800511c <_printf_float+0x38c>
 80050aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050ae:	eba3 020a 	sub.w	r2, r3, sl
 80050b2:	eba3 0901 	sub.w	r9, r3, r1
 80050b6:	4591      	cmp	r9, r2
 80050b8:	bfa8      	it	ge
 80050ba:	4691      	movge	r9, r2
 80050bc:	f1b9 0f00 	cmp.w	r9, #0
 80050c0:	dc34      	bgt.n	800512c <_printf_float+0x39c>
 80050c2:	f04f 0800 	mov.w	r8, #0
 80050c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ca:	f104 0a1a 	add.w	sl, r4, #26
 80050ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	eba3 0309 	sub.w	r3, r3, r9
 80050d8:	4543      	cmp	r3, r8
 80050da:	f77f af7a 	ble.w	8004fd2 <_printf_float+0x242>
 80050de:	2301      	movs	r3, #1
 80050e0:	4652      	mov	r2, sl
 80050e2:	4631      	mov	r1, r6
 80050e4:	4628      	mov	r0, r5
 80050e6:	47b8      	blx	r7
 80050e8:	3001      	adds	r0, #1
 80050ea:	f43f aeac 	beq.w	8004e46 <_printf_float+0xb6>
 80050ee:	f108 0801 	add.w	r8, r8, #1
 80050f2:	e7ec      	b.n	80050ce <_printf_float+0x33e>
 80050f4:	4613      	mov	r3, r2
 80050f6:	4631      	mov	r1, r6
 80050f8:	4642      	mov	r2, r8
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d1c0      	bne.n	8005084 <_printf_float+0x2f4>
 8005102:	e6a0      	b.n	8004e46 <_printf_float+0xb6>
 8005104:	2301      	movs	r3, #1
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	920b      	str	r2, [sp, #44]	; 0x2c
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f ae99 	beq.w	8004e46 <_printf_float+0xb6>
 8005114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005116:	f10b 0b01 	add.w	fp, fp, #1
 800511a:	e7b9      	b.n	8005090 <_printf_float+0x300>
 800511c:	4631      	mov	r1, r6
 800511e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	d1bf      	bne.n	80050aa <_printf_float+0x31a>
 800512a:	e68c      	b.n	8004e46 <_printf_float+0xb6>
 800512c:	464b      	mov	r3, r9
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	eb08 020a 	add.w	r2, r8, sl
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	d1c2      	bne.n	80050c2 <_printf_float+0x332>
 800513c:	e683      	b.n	8004e46 <_printf_float+0xb6>
 800513e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005140:	2a01      	cmp	r2, #1
 8005142:	dc01      	bgt.n	8005148 <_printf_float+0x3b8>
 8005144:	07db      	lsls	r3, r3, #31
 8005146:	d537      	bpl.n	80051b8 <_printf_float+0x428>
 8005148:	2301      	movs	r3, #1
 800514a:	4642      	mov	r2, r8
 800514c:	4631      	mov	r1, r6
 800514e:	4628      	mov	r0, r5
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f ae77 	beq.w	8004e46 <_printf_float+0xb6>
 8005158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f ae6f 	beq.w	8004e46 <_printf_float+0xb6>
 8005168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	f7fb fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8005174:	b9d8      	cbnz	r0, 80051ae <_printf_float+0x41e>
 8005176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005178:	f108 0201 	add.w	r2, r8, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	d10e      	bne.n	80051a6 <_printf_float+0x416>
 8005188:	e65d      	b.n	8004e46 <_printf_float+0xb6>
 800518a:	2301      	movs	r3, #1
 800518c:	464a      	mov	r2, r9
 800518e:	4631      	mov	r1, r6
 8005190:	4628      	mov	r0, r5
 8005192:	47b8      	blx	r7
 8005194:	3001      	adds	r0, #1
 8005196:	f43f ae56 	beq.w	8004e46 <_printf_float+0xb6>
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051a0:	3b01      	subs	r3, #1
 80051a2:	4543      	cmp	r3, r8
 80051a4:	dcf1      	bgt.n	800518a <_printf_float+0x3fa>
 80051a6:	4653      	mov	r3, sl
 80051a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051ac:	e6e0      	b.n	8004f70 <_printf_float+0x1e0>
 80051ae:	f04f 0800 	mov.w	r8, #0
 80051b2:	f104 091a 	add.w	r9, r4, #26
 80051b6:	e7f2      	b.n	800519e <_printf_float+0x40e>
 80051b8:	2301      	movs	r3, #1
 80051ba:	4642      	mov	r2, r8
 80051bc:	e7df      	b.n	800517e <_printf_float+0x3ee>
 80051be:	2301      	movs	r3, #1
 80051c0:	464a      	mov	r2, r9
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	f43f ae3c 	beq.w	8004e46 <_printf_float+0xb6>
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051d6:	1a5b      	subs	r3, r3, r1
 80051d8:	4543      	cmp	r3, r8
 80051da:	dcf0      	bgt.n	80051be <_printf_float+0x42e>
 80051dc:	e6fd      	b.n	8004fda <_printf_float+0x24a>
 80051de:	f04f 0800 	mov.w	r8, #0
 80051e2:	f104 0919 	add.w	r9, r4, #25
 80051e6:	e7f4      	b.n	80051d2 <_printf_float+0x442>

080051e8 <_printf_common>:
 80051e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	4616      	mov	r6, r2
 80051ee:	4699      	mov	r9, r3
 80051f0:	688a      	ldr	r2, [r1, #8]
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	4607      	mov	r7, r0
 80051f6:	4293      	cmp	r3, r2
 80051f8:	bfb8      	it	lt
 80051fa:	4613      	movlt	r3, r2
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005202:	460c      	mov	r4, r1
 8005204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005208:	b10a      	cbz	r2, 800520e <_printf_common+0x26>
 800520a:	3301      	adds	r3, #1
 800520c:	6033      	str	r3, [r6, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	0699      	lsls	r1, r3, #26
 8005212:	bf42      	ittt	mi
 8005214:	6833      	ldrmi	r3, [r6, #0]
 8005216:	3302      	addmi	r3, #2
 8005218:	6033      	strmi	r3, [r6, #0]
 800521a:	6825      	ldr	r5, [r4, #0]
 800521c:	f015 0506 	ands.w	r5, r5, #6
 8005220:	d106      	bne.n	8005230 <_printf_common+0x48>
 8005222:	f104 0a19 	add.w	sl, r4, #25
 8005226:	68e3      	ldr	r3, [r4, #12]
 8005228:	6832      	ldr	r2, [r6, #0]
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	42ab      	cmp	r3, r5
 800522e:	dc28      	bgt.n	8005282 <_printf_common+0x9a>
 8005230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005234:	1e13      	subs	r3, r2, #0
 8005236:	6822      	ldr	r2, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	2301      	movne	r3, #1
 800523c:	0692      	lsls	r2, r2, #26
 800523e:	d42d      	bmi.n	800529c <_printf_common+0xb4>
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d020      	beq.n	8005290 <_printf_common+0xa8>
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	68e5      	ldr	r5, [r4, #12]
 8005252:	f003 0306 	and.w	r3, r3, #6
 8005256:	2b04      	cmp	r3, #4
 8005258:	bf18      	it	ne
 800525a:	2500      	movne	r5, #0
 800525c:	6832      	ldr	r2, [r6, #0]
 800525e:	f04f 0600 	mov.w	r6, #0
 8005262:	68a3      	ldr	r3, [r4, #8]
 8005264:	bf08      	it	eq
 8005266:	1aad      	subeq	r5, r5, r2
 8005268:	6922      	ldr	r2, [r4, #16]
 800526a:	bf08      	it	eq
 800526c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005270:	4293      	cmp	r3, r2
 8005272:	bfc4      	itt	gt
 8005274:	1a9b      	subgt	r3, r3, r2
 8005276:	18ed      	addgt	r5, r5, r3
 8005278:	341a      	adds	r4, #26
 800527a:	42b5      	cmp	r5, r6
 800527c:	d11a      	bne.n	80052b4 <_printf_common+0xcc>
 800527e:	2000      	movs	r0, #0
 8005280:	e008      	b.n	8005294 <_printf_common+0xac>
 8005282:	2301      	movs	r3, #1
 8005284:	4652      	mov	r2, sl
 8005286:	4649      	mov	r1, r9
 8005288:	4638      	mov	r0, r7
 800528a:	47c0      	blx	r8
 800528c:	3001      	adds	r0, #1
 800528e:	d103      	bne.n	8005298 <_printf_common+0xb0>
 8005290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005298:	3501      	adds	r5, #1
 800529a:	e7c4      	b.n	8005226 <_printf_common+0x3e>
 800529c:	2030      	movs	r0, #48	; 0x30
 800529e:	18e1      	adds	r1, r4, r3
 80052a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052aa:	4422      	add	r2, r4
 80052ac:	3302      	adds	r3, #2
 80052ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052b2:	e7c5      	b.n	8005240 <_printf_common+0x58>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4622      	mov	r2, r4
 80052b8:	4649      	mov	r1, r9
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c0      	blx	r8
 80052be:	3001      	adds	r0, #1
 80052c0:	d0e6      	beq.n	8005290 <_printf_common+0xa8>
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7d9      	b.n	800527a <_printf_common+0x92>
	...

080052c8 <_printf_i>:
 80052c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052cc:	7e0f      	ldrb	r7, [r1, #24]
 80052ce:	4691      	mov	r9, r2
 80052d0:	2f78      	cmp	r7, #120	; 0x78
 80052d2:	4680      	mov	r8, r0
 80052d4:	460c      	mov	r4, r1
 80052d6:	469a      	mov	sl, r3
 80052d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052de:	d807      	bhi.n	80052f0 <_printf_i+0x28>
 80052e0:	2f62      	cmp	r7, #98	; 0x62
 80052e2:	d80a      	bhi.n	80052fa <_printf_i+0x32>
 80052e4:	2f00      	cmp	r7, #0
 80052e6:	f000 80d9 	beq.w	800549c <_printf_i+0x1d4>
 80052ea:	2f58      	cmp	r7, #88	; 0x58
 80052ec:	f000 80a4 	beq.w	8005438 <_printf_i+0x170>
 80052f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f8:	e03a      	b.n	8005370 <_printf_i+0xa8>
 80052fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052fe:	2b15      	cmp	r3, #21
 8005300:	d8f6      	bhi.n	80052f0 <_printf_i+0x28>
 8005302:	a101      	add	r1, pc, #4	; (adr r1, 8005308 <_printf_i+0x40>)
 8005304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005308:	08005361 	.word	0x08005361
 800530c:	08005375 	.word	0x08005375
 8005310:	080052f1 	.word	0x080052f1
 8005314:	080052f1 	.word	0x080052f1
 8005318:	080052f1 	.word	0x080052f1
 800531c:	080052f1 	.word	0x080052f1
 8005320:	08005375 	.word	0x08005375
 8005324:	080052f1 	.word	0x080052f1
 8005328:	080052f1 	.word	0x080052f1
 800532c:	080052f1 	.word	0x080052f1
 8005330:	080052f1 	.word	0x080052f1
 8005334:	08005483 	.word	0x08005483
 8005338:	080053a5 	.word	0x080053a5
 800533c:	08005465 	.word	0x08005465
 8005340:	080052f1 	.word	0x080052f1
 8005344:	080052f1 	.word	0x080052f1
 8005348:	080054a5 	.word	0x080054a5
 800534c:	080052f1 	.word	0x080052f1
 8005350:	080053a5 	.word	0x080053a5
 8005354:	080052f1 	.word	0x080052f1
 8005358:	080052f1 	.word	0x080052f1
 800535c:	0800546d 	.word	0x0800546d
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	602a      	str	r2, [r5, #0]
 8005368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800536c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005370:	2301      	movs	r3, #1
 8005372:	e0a4      	b.n	80054be <_printf_i+0x1f6>
 8005374:	6820      	ldr	r0, [r4, #0]
 8005376:	6829      	ldr	r1, [r5, #0]
 8005378:	0606      	lsls	r6, r0, #24
 800537a:	f101 0304 	add.w	r3, r1, #4
 800537e:	d50a      	bpl.n	8005396 <_printf_i+0xce>
 8005380:	680e      	ldr	r6, [r1, #0]
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	2e00      	cmp	r6, #0
 8005386:	da03      	bge.n	8005390 <_printf_i+0xc8>
 8005388:	232d      	movs	r3, #45	; 0x2d
 800538a:	4276      	negs	r6, r6
 800538c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005390:	230a      	movs	r3, #10
 8005392:	485e      	ldr	r0, [pc, #376]	; (800550c <_printf_i+0x244>)
 8005394:	e019      	b.n	80053ca <_printf_i+0x102>
 8005396:	680e      	ldr	r6, [r1, #0]
 8005398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	bf18      	it	ne
 80053a0:	b236      	sxthne	r6, r6
 80053a2:	e7ef      	b.n	8005384 <_printf_i+0xbc>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	6820      	ldr	r0, [r4, #0]
 80053a8:	1d19      	adds	r1, r3, #4
 80053aa:	6029      	str	r1, [r5, #0]
 80053ac:	0601      	lsls	r1, r0, #24
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0xec>
 80053b0:	681e      	ldr	r6, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0xf2>
 80053b4:	0646      	lsls	r6, r0, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0xe8>
 80053b8:	881e      	ldrh	r6, [r3, #0]
 80053ba:	2f6f      	cmp	r7, #111	; 0x6f
 80053bc:	bf0c      	ite	eq
 80053be:	2308      	moveq	r3, #8
 80053c0:	230a      	movne	r3, #10
 80053c2:	4852      	ldr	r0, [pc, #328]	; (800550c <_printf_i+0x244>)
 80053c4:	2100      	movs	r1, #0
 80053c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ca:	6865      	ldr	r5, [r4, #4]
 80053cc:	2d00      	cmp	r5, #0
 80053ce:	bfa8      	it	ge
 80053d0:	6821      	ldrge	r1, [r4, #0]
 80053d2:	60a5      	str	r5, [r4, #8]
 80053d4:	bfa4      	itt	ge
 80053d6:	f021 0104 	bicge.w	r1, r1, #4
 80053da:	6021      	strge	r1, [r4, #0]
 80053dc:	b90e      	cbnz	r6, 80053e2 <_printf_i+0x11a>
 80053de:	2d00      	cmp	r5, #0
 80053e0:	d04d      	beq.n	800547e <_printf_i+0x1b6>
 80053e2:	4615      	mov	r5, r2
 80053e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80053e8:	fb03 6711 	mls	r7, r3, r1, r6
 80053ec:	5dc7      	ldrb	r7, [r0, r7]
 80053ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053f2:	4637      	mov	r7, r6
 80053f4:	42bb      	cmp	r3, r7
 80053f6:	460e      	mov	r6, r1
 80053f8:	d9f4      	bls.n	80053e4 <_printf_i+0x11c>
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d10b      	bne.n	8005416 <_printf_i+0x14e>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	07de      	lsls	r6, r3, #31
 8005402:	d508      	bpl.n	8005416 <_printf_i+0x14e>
 8005404:	6923      	ldr	r3, [r4, #16]
 8005406:	6861      	ldr	r1, [r4, #4]
 8005408:	4299      	cmp	r1, r3
 800540a:	bfde      	ittt	le
 800540c:	2330      	movle	r3, #48	; 0x30
 800540e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005412:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005416:	1b52      	subs	r2, r2, r5
 8005418:	6122      	str	r2, [r4, #16]
 800541a:	464b      	mov	r3, r9
 800541c:	4621      	mov	r1, r4
 800541e:	4640      	mov	r0, r8
 8005420:	f8cd a000 	str.w	sl, [sp]
 8005424:	aa03      	add	r2, sp, #12
 8005426:	f7ff fedf 	bl	80051e8 <_printf_common>
 800542a:	3001      	adds	r0, #1
 800542c:	d14c      	bne.n	80054c8 <_printf_i+0x200>
 800542e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005432:	b004      	add	sp, #16
 8005434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005438:	4834      	ldr	r0, [pc, #208]	; (800550c <_printf_i+0x244>)
 800543a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800543e:	6829      	ldr	r1, [r5, #0]
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	f851 6b04 	ldr.w	r6, [r1], #4
 8005446:	6029      	str	r1, [r5, #0]
 8005448:	061d      	lsls	r5, r3, #24
 800544a:	d514      	bpl.n	8005476 <_printf_i+0x1ae>
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	bf44      	itt	mi
 8005450:	f043 0320 	orrmi.w	r3, r3, #32
 8005454:	6023      	strmi	r3, [r4, #0]
 8005456:	b91e      	cbnz	r6, 8005460 <_printf_i+0x198>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	f023 0320 	bic.w	r3, r3, #32
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	2310      	movs	r3, #16
 8005462:	e7af      	b.n	80053c4 <_printf_i+0xfc>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f043 0320 	orr.w	r3, r3, #32
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	2378      	movs	r3, #120	; 0x78
 800546e:	4828      	ldr	r0, [pc, #160]	; (8005510 <_printf_i+0x248>)
 8005470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005474:	e7e3      	b.n	800543e <_printf_i+0x176>
 8005476:	0659      	lsls	r1, r3, #25
 8005478:	bf48      	it	mi
 800547a:	b2b6      	uxthmi	r6, r6
 800547c:	e7e6      	b.n	800544c <_printf_i+0x184>
 800547e:	4615      	mov	r5, r2
 8005480:	e7bb      	b.n	80053fa <_printf_i+0x132>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	6826      	ldr	r6, [r4, #0]
 8005486:	1d18      	adds	r0, r3, #4
 8005488:	6961      	ldr	r1, [r4, #20]
 800548a:	6028      	str	r0, [r5, #0]
 800548c:	0635      	lsls	r5, r6, #24
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	d501      	bpl.n	8005496 <_printf_i+0x1ce>
 8005492:	6019      	str	r1, [r3, #0]
 8005494:	e002      	b.n	800549c <_printf_i+0x1d4>
 8005496:	0670      	lsls	r0, r6, #25
 8005498:	d5fb      	bpl.n	8005492 <_printf_i+0x1ca>
 800549a:	8019      	strh	r1, [r3, #0]
 800549c:	2300      	movs	r3, #0
 800549e:	4615      	mov	r5, r2
 80054a0:	6123      	str	r3, [r4, #16]
 80054a2:	e7ba      	b.n	800541a <_printf_i+0x152>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	2100      	movs	r1, #0
 80054a8:	1d1a      	adds	r2, r3, #4
 80054aa:	602a      	str	r2, [r5, #0]
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	6862      	ldr	r2, [r4, #4]
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 feb7 	bl	8006224 <memchr>
 80054b6:	b108      	cbz	r0, 80054bc <_printf_i+0x1f4>
 80054b8:	1b40      	subs	r0, r0, r5
 80054ba:	6060      	str	r0, [r4, #4]
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	6123      	str	r3, [r4, #16]
 80054c0:	2300      	movs	r3, #0
 80054c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c6:	e7a8      	b.n	800541a <_printf_i+0x152>
 80054c8:	462a      	mov	r2, r5
 80054ca:	4649      	mov	r1, r9
 80054cc:	4640      	mov	r0, r8
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	47d0      	blx	sl
 80054d2:	3001      	adds	r0, #1
 80054d4:	d0ab      	beq.n	800542e <_printf_i+0x166>
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	079b      	lsls	r3, r3, #30
 80054da:	d413      	bmi.n	8005504 <_printf_i+0x23c>
 80054dc:	68e0      	ldr	r0, [r4, #12]
 80054de:	9b03      	ldr	r3, [sp, #12]
 80054e0:	4298      	cmp	r0, r3
 80054e2:	bfb8      	it	lt
 80054e4:	4618      	movlt	r0, r3
 80054e6:	e7a4      	b.n	8005432 <_printf_i+0x16a>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4632      	mov	r2, r6
 80054ec:	4649      	mov	r1, r9
 80054ee:	4640      	mov	r0, r8
 80054f0:	47d0      	blx	sl
 80054f2:	3001      	adds	r0, #1
 80054f4:	d09b      	beq.n	800542e <_printf_i+0x166>
 80054f6:	3501      	adds	r5, #1
 80054f8:	68e3      	ldr	r3, [r4, #12]
 80054fa:	9903      	ldr	r1, [sp, #12]
 80054fc:	1a5b      	subs	r3, r3, r1
 80054fe:	42ab      	cmp	r3, r5
 8005500:	dcf2      	bgt.n	80054e8 <_printf_i+0x220>
 8005502:	e7eb      	b.n	80054dc <_printf_i+0x214>
 8005504:	2500      	movs	r5, #0
 8005506:	f104 0619 	add.w	r6, r4, #25
 800550a:	e7f5      	b.n	80054f8 <_printf_i+0x230>
 800550c:	080076ca 	.word	0x080076ca
 8005510:	080076db 	.word	0x080076db

08005514 <quorem>:
 8005514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	6903      	ldr	r3, [r0, #16]
 800551a:	690c      	ldr	r4, [r1, #16]
 800551c:	4607      	mov	r7, r0
 800551e:	42a3      	cmp	r3, r4
 8005520:	f2c0 8082 	blt.w	8005628 <quorem+0x114>
 8005524:	3c01      	subs	r4, #1
 8005526:	f100 0514 	add.w	r5, r0, #20
 800552a:	f101 0814 	add.w	r8, r1, #20
 800552e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005532:	9301      	str	r3, [sp, #4]
 8005534:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005538:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800553c:	3301      	adds	r3, #1
 800553e:	429a      	cmp	r2, r3
 8005540:	fbb2 f6f3 	udiv	r6, r2, r3
 8005544:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005548:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800554c:	d331      	bcc.n	80055b2 <quorem+0x9e>
 800554e:	f04f 0e00 	mov.w	lr, #0
 8005552:	4640      	mov	r0, r8
 8005554:	46ac      	mov	ip, r5
 8005556:	46f2      	mov	sl, lr
 8005558:	f850 2b04 	ldr.w	r2, [r0], #4
 800555c:	b293      	uxth	r3, r2
 800555e:	fb06 e303 	mla	r3, r6, r3, lr
 8005562:	0c12      	lsrs	r2, r2, #16
 8005564:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005568:	b29b      	uxth	r3, r3
 800556a:	fb06 e202 	mla	r2, r6, r2, lr
 800556e:	ebaa 0303 	sub.w	r3, sl, r3
 8005572:	f8dc a000 	ldr.w	sl, [ip]
 8005576:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800557a:	fa1f fa8a 	uxth.w	sl, sl
 800557e:	4453      	add	r3, sl
 8005580:	f8dc a000 	ldr.w	sl, [ip]
 8005584:	b292      	uxth	r2, r2
 8005586:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800558a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800558e:	b29b      	uxth	r3, r3
 8005590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005594:	4581      	cmp	r9, r0
 8005596:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800559a:	f84c 3b04 	str.w	r3, [ip], #4
 800559e:	d2db      	bcs.n	8005558 <quorem+0x44>
 80055a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80055a4:	b92b      	cbnz	r3, 80055b2 <quorem+0x9e>
 80055a6:	9b01      	ldr	r3, [sp, #4]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	429d      	cmp	r5, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	d32f      	bcc.n	8005610 <quorem+0xfc>
 80055b0:	613c      	str	r4, [r7, #16]
 80055b2:	4638      	mov	r0, r7
 80055b4:	f001 f8d0 	bl	8006758 <__mcmp>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	db25      	blt.n	8005608 <quorem+0xf4>
 80055bc:	4628      	mov	r0, r5
 80055be:	f04f 0c00 	mov.w	ip, #0
 80055c2:	3601      	adds	r6, #1
 80055c4:	f858 1b04 	ldr.w	r1, [r8], #4
 80055c8:	f8d0 e000 	ldr.w	lr, [r0]
 80055cc:	b28b      	uxth	r3, r1
 80055ce:	ebac 0303 	sub.w	r3, ip, r3
 80055d2:	fa1f f28e 	uxth.w	r2, lr
 80055d6:	4413      	add	r3, r2
 80055d8:	0c0a      	lsrs	r2, r1, #16
 80055da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055e8:	45c1      	cmp	r9, r8
 80055ea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055ee:	f840 3b04 	str.w	r3, [r0], #4
 80055f2:	d2e7      	bcs.n	80055c4 <quorem+0xb0>
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055fc:	b922      	cbnz	r2, 8005608 <quorem+0xf4>
 80055fe:	3b04      	subs	r3, #4
 8005600:	429d      	cmp	r5, r3
 8005602:	461a      	mov	r2, r3
 8005604:	d30a      	bcc.n	800561c <quorem+0x108>
 8005606:	613c      	str	r4, [r7, #16]
 8005608:	4630      	mov	r0, r6
 800560a:	b003      	add	sp, #12
 800560c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	3b04      	subs	r3, #4
 8005614:	2a00      	cmp	r2, #0
 8005616:	d1cb      	bne.n	80055b0 <quorem+0x9c>
 8005618:	3c01      	subs	r4, #1
 800561a:	e7c6      	b.n	80055aa <quorem+0x96>
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	3b04      	subs	r3, #4
 8005620:	2a00      	cmp	r2, #0
 8005622:	d1f0      	bne.n	8005606 <quorem+0xf2>
 8005624:	3c01      	subs	r4, #1
 8005626:	e7eb      	b.n	8005600 <quorem+0xec>
 8005628:	2000      	movs	r0, #0
 800562a:	e7ee      	b.n	800560a <quorem+0xf6>
 800562c:	0000      	movs	r0, r0
	...

08005630 <_dtoa_r>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	461f      	mov	r7, r3
 8005638:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800563a:	b099      	sub	sp, #100	; 0x64
 800563c:	4605      	mov	r5, r0
 800563e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005642:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005646:	b974      	cbnz	r4, 8005666 <_dtoa_r+0x36>
 8005648:	2010      	movs	r0, #16
 800564a:	f000 fde3 	bl	8006214 <malloc>
 800564e:	4602      	mov	r2, r0
 8005650:	6268      	str	r0, [r5, #36]	; 0x24
 8005652:	b920      	cbnz	r0, 800565e <_dtoa_r+0x2e>
 8005654:	21ea      	movs	r1, #234	; 0xea
 8005656:	4ba8      	ldr	r3, [pc, #672]	; (80058f8 <_dtoa_r+0x2c8>)
 8005658:	48a8      	ldr	r0, [pc, #672]	; (80058fc <_dtoa_r+0x2cc>)
 800565a:	f001 fa81 	bl	8006b60 <__assert_func>
 800565e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005662:	6004      	str	r4, [r0, #0]
 8005664:	60c4      	str	r4, [r0, #12]
 8005666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	b151      	cbz	r1, 8005682 <_dtoa_r+0x52>
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	2301      	movs	r3, #1
 8005670:	4093      	lsls	r3, r2
 8005672:	604a      	str	r2, [r1, #4]
 8005674:	608b      	str	r3, [r1, #8]
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fe30 	bl	80062dc <_Bfree>
 800567c:	2200      	movs	r2, #0
 800567e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	1e3b      	subs	r3, r7, #0
 8005684:	bfaf      	iteee	ge
 8005686:	2300      	movge	r3, #0
 8005688:	2201      	movlt	r2, #1
 800568a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800568e:	9305      	strlt	r3, [sp, #20]
 8005690:	bfa8      	it	ge
 8005692:	f8c8 3000 	strge.w	r3, [r8]
 8005696:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800569a:	4b99      	ldr	r3, [pc, #612]	; (8005900 <_dtoa_r+0x2d0>)
 800569c:	bfb8      	it	lt
 800569e:	f8c8 2000 	strlt.w	r2, [r8]
 80056a2:	ea33 0309 	bics.w	r3, r3, r9
 80056a6:	d119      	bne.n	80056dc <_dtoa_r+0xac>
 80056a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80056ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056b4:	4333      	orrs	r3, r6
 80056b6:	f000 857f 	beq.w	80061b8 <_dtoa_r+0xb88>
 80056ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056bc:	b953      	cbnz	r3, 80056d4 <_dtoa_r+0xa4>
 80056be:	4b91      	ldr	r3, [pc, #580]	; (8005904 <_dtoa_r+0x2d4>)
 80056c0:	e022      	b.n	8005708 <_dtoa_r+0xd8>
 80056c2:	4b91      	ldr	r3, [pc, #580]	; (8005908 <_dtoa_r+0x2d8>)
 80056c4:	9303      	str	r3, [sp, #12]
 80056c6:	3308      	adds	r3, #8
 80056c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	9803      	ldr	r0, [sp, #12]
 80056ce:	b019      	add	sp, #100	; 0x64
 80056d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d4:	4b8b      	ldr	r3, [pc, #556]	; (8005904 <_dtoa_r+0x2d4>)
 80056d6:	9303      	str	r3, [sp, #12]
 80056d8:	3303      	adds	r3, #3
 80056da:	e7f5      	b.n	80056c8 <_dtoa_r+0x98>
 80056dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80056e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056e8:	2200      	movs	r2, #0
 80056ea:	2300      	movs	r3, #0
 80056ec:	f7fb f95c 	bl	80009a8 <__aeabi_dcmpeq>
 80056f0:	4680      	mov	r8, r0
 80056f2:	b158      	cbz	r0, 800570c <_dtoa_r+0xdc>
 80056f4:	2301      	movs	r3, #1
 80056f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8558 	beq.w	80061b2 <_dtoa_r+0xb82>
 8005702:	4882      	ldr	r0, [pc, #520]	; (800590c <_dtoa_r+0x2dc>)
 8005704:	6018      	str	r0, [r3, #0]
 8005706:	1e43      	subs	r3, r0, #1
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	e7df      	b.n	80056cc <_dtoa_r+0x9c>
 800570c:	ab16      	add	r3, sp, #88	; 0x58
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	ab17      	add	r3, sp, #92	; 0x5c
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	4628      	mov	r0, r5
 8005716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800571a:	f001 f8c5 	bl	80068a8 <__d2b>
 800571e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005722:	4683      	mov	fp, r0
 8005724:	2c00      	cmp	r4, #0
 8005726:	d07f      	beq.n	8005828 <_dtoa_r+0x1f8>
 8005728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800572c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800572e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005736:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800573a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800573e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005742:	2200      	movs	r2, #0
 8005744:	4b72      	ldr	r3, [pc, #456]	; (8005910 <_dtoa_r+0x2e0>)
 8005746:	f7fa fd0f 	bl	8000168 <__aeabi_dsub>
 800574a:	a365      	add	r3, pc, #404	; (adr r3, 80058e0 <_dtoa_r+0x2b0>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f7fa fec2 	bl	80004d8 <__aeabi_dmul>
 8005754:	a364      	add	r3, pc, #400	; (adr r3, 80058e8 <_dtoa_r+0x2b8>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd07 	bl	800016c <__adddf3>
 800575e:	4606      	mov	r6, r0
 8005760:	4620      	mov	r0, r4
 8005762:	460f      	mov	r7, r1
 8005764:	f7fa fe4e 	bl	8000404 <__aeabi_i2d>
 8005768:	a361      	add	r3, pc, #388	; (adr r3, 80058f0 <_dtoa_r+0x2c0>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f7fa feb3 	bl	80004d8 <__aeabi_dmul>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	4630      	mov	r0, r6
 8005778:	4639      	mov	r1, r7
 800577a:	f7fa fcf7 	bl	800016c <__adddf3>
 800577e:	4606      	mov	r6, r0
 8005780:	460f      	mov	r7, r1
 8005782:	f7fb f959 	bl	8000a38 <__aeabi_d2iz>
 8005786:	2200      	movs	r2, #0
 8005788:	4682      	mov	sl, r0
 800578a:	2300      	movs	r3, #0
 800578c:	4630      	mov	r0, r6
 800578e:	4639      	mov	r1, r7
 8005790:	f7fb f914 	bl	80009bc <__aeabi_dcmplt>
 8005794:	b148      	cbz	r0, 80057aa <_dtoa_r+0x17a>
 8005796:	4650      	mov	r0, sl
 8005798:	f7fa fe34 	bl	8000404 <__aeabi_i2d>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	f7fb f902 	bl	80009a8 <__aeabi_dcmpeq>
 80057a4:	b908      	cbnz	r0, 80057aa <_dtoa_r+0x17a>
 80057a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057aa:	f1ba 0f16 	cmp.w	sl, #22
 80057ae:	d858      	bhi.n	8005862 <_dtoa_r+0x232>
 80057b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057b4:	4b57      	ldr	r3, [pc, #348]	; (8005914 <_dtoa_r+0x2e4>)
 80057b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f7fb f8fd 	bl	80009bc <__aeabi_dcmplt>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d04f      	beq.n	8005866 <_dtoa_r+0x236>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80057cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80057ce:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057d0:	1b1c      	subs	r4, r3, r4
 80057d2:	1e63      	subs	r3, r4, #1
 80057d4:	9309      	str	r3, [sp, #36]	; 0x24
 80057d6:	bf49      	itett	mi
 80057d8:	f1c4 0301 	rsbmi	r3, r4, #1
 80057dc:	2300      	movpl	r3, #0
 80057de:	9306      	strmi	r3, [sp, #24]
 80057e0:	2300      	movmi	r3, #0
 80057e2:	bf54      	ite	pl
 80057e4:	9306      	strpl	r3, [sp, #24]
 80057e6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80057e8:	f1ba 0f00 	cmp.w	sl, #0
 80057ec:	db3d      	blt.n	800586a <_dtoa_r+0x23a>
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80057f4:	4453      	add	r3, sl
 80057f6:	9309      	str	r3, [sp, #36]	; 0x24
 80057f8:	2300      	movs	r3, #0
 80057fa:	930a      	str	r3, [sp, #40]	; 0x28
 80057fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057fe:	2b09      	cmp	r3, #9
 8005800:	f200 808c 	bhi.w	800591c <_dtoa_r+0x2ec>
 8005804:	2b05      	cmp	r3, #5
 8005806:	bfc4      	itt	gt
 8005808:	3b04      	subgt	r3, #4
 800580a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800580c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800580e:	bfc8      	it	gt
 8005810:	2400      	movgt	r4, #0
 8005812:	f1a3 0302 	sub.w	r3, r3, #2
 8005816:	bfd8      	it	le
 8005818:	2401      	movle	r4, #1
 800581a:	2b03      	cmp	r3, #3
 800581c:	f200 808a 	bhi.w	8005934 <_dtoa_r+0x304>
 8005820:	e8df f003 	tbb	[pc, r3]
 8005824:	5b4d4f2d 	.word	0x5b4d4f2d
 8005828:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800582c:	441c      	add	r4, r3
 800582e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005832:	2b20      	cmp	r3, #32
 8005834:	bfc3      	ittte	gt
 8005836:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800583a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800583e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005842:	f1c3 0320 	rsble	r3, r3, #32
 8005846:	bfc6      	itte	gt
 8005848:	fa26 f000 	lsrgt.w	r0, r6, r0
 800584c:	4318      	orrgt	r0, r3
 800584e:	fa06 f003 	lslle.w	r0, r6, r3
 8005852:	f7fa fdc7 	bl	80003e4 <__aeabi_ui2d>
 8005856:	2301      	movs	r3, #1
 8005858:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800585c:	3c01      	subs	r4, #1
 800585e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005860:	e76f      	b.n	8005742 <_dtoa_r+0x112>
 8005862:	2301      	movs	r3, #1
 8005864:	e7b2      	b.n	80057cc <_dtoa_r+0x19c>
 8005866:	900f      	str	r0, [sp, #60]	; 0x3c
 8005868:	e7b1      	b.n	80057ce <_dtoa_r+0x19e>
 800586a:	9b06      	ldr	r3, [sp, #24]
 800586c:	eba3 030a 	sub.w	r3, r3, sl
 8005870:	9306      	str	r3, [sp, #24]
 8005872:	f1ca 0300 	rsb	r3, sl, #0
 8005876:	930a      	str	r3, [sp, #40]	; 0x28
 8005878:	2300      	movs	r3, #0
 800587a:	930e      	str	r3, [sp, #56]	; 0x38
 800587c:	e7be      	b.n	80057fc <_dtoa_r+0x1cc>
 800587e:	2300      	movs	r3, #0
 8005880:	930b      	str	r3, [sp, #44]	; 0x2c
 8005882:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc58      	bgt.n	800593a <_dtoa_r+0x30a>
 8005888:	f04f 0901 	mov.w	r9, #1
 800588c:	464b      	mov	r3, r9
 800588e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005892:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005896:	2200      	movs	r2, #0
 8005898:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800589a:	6042      	str	r2, [r0, #4]
 800589c:	2204      	movs	r2, #4
 800589e:	f102 0614 	add.w	r6, r2, #20
 80058a2:	429e      	cmp	r6, r3
 80058a4:	6841      	ldr	r1, [r0, #4]
 80058a6:	d94e      	bls.n	8005946 <_dtoa_r+0x316>
 80058a8:	4628      	mov	r0, r5
 80058aa:	f000 fcd7 	bl	800625c <_Balloc>
 80058ae:	9003      	str	r0, [sp, #12]
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d14c      	bne.n	800594e <_dtoa_r+0x31e>
 80058b4:	4602      	mov	r2, r0
 80058b6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <_dtoa_r+0x2e8>)
 80058bc:	e6cc      	b.n	8005658 <_dtoa_r+0x28>
 80058be:	2301      	movs	r3, #1
 80058c0:	e7de      	b.n	8005880 <_dtoa_r+0x250>
 80058c2:	2300      	movs	r3, #0
 80058c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058c8:	eb0a 0903 	add.w	r9, sl, r3
 80058cc:	f109 0301 	add.w	r3, r9, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	9308      	str	r3, [sp, #32]
 80058d4:	bfb8      	it	lt
 80058d6:	2301      	movlt	r3, #1
 80058d8:	e7dd      	b.n	8005896 <_dtoa_r+0x266>
 80058da:	2301      	movs	r3, #1
 80058dc:	e7f2      	b.n	80058c4 <_dtoa_r+0x294>
 80058de:	bf00      	nop
 80058e0:	636f4361 	.word	0x636f4361
 80058e4:	3fd287a7 	.word	0x3fd287a7
 80058e8:	8b60c8b3 	.word	0x8b60c8b3
 80058ec:	3fc68a28 	.word	0x3fc68a28
 80058f0:	509f79fb 	.word	0x509f79fb
 80058f4:	3fd34413 	.word	0x3fd34413
 80058f8:	080076f9 	.word	0x080076f9
 80058fc:	08007710 	.word	0x08007710
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	080076f5 	.word	0x080076f5
 8005908:	080076ec 	.word	0x080076ec
 800590c:	080076c9 	.word	0x080076c9
 8005910:	3ff80000 	.word	0x3ff80000
 8005914:	08007800 	.word	0x08007800
 8005918:	0800776b 	.word	0x0800776b
 800591c:	2401      	movs	r4, #1
 800591e:	2300      	movs	r3, #0
 8005920:	940b      	str	r4, [sp, #44]	; 0x2c
 8005922:	9322      	str	r3, [sp, #136]	; 0x88
 8005924:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005928:	2200      	movs	r2, #0
 800592a:	2312      	movs	r3, #18
 800592c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005930:	9223      	str	r2, [sp, #140]	; 0x8c
 8005932:	e7b0      	b.n	8005896 <_dtoa_r+0x266>
 8005934:	2301      	movs	r3, #1
 8005936:	930b      	str	r3, [sp, #44]	; 0x2c
 8005938:	e7f4      	b.n	8005924 <_dtoa_r+0x2f4>
 800593a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800593e:	464b      	mov	r3, r9
 8005940:	f8cd 9020 	str.w	r9, [sp, #32]
 8005944:	e7a7      	b.n	8005896 <_dtoa_r+0x266>
 8005946:	3101      	adds	r1, #1
 8005948:	6041      	str	r1, [r0, #4]
 800594a:	0052      	lsls	r2, r2, #1
 800594c:	e7a7      	b.n	800589e <_dtoa_r+0x26e>
 800594e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005950:	9a03      	ldr	r2, [sp, #12]
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	9b08      	ldr	r3, [sp, #32]
 8005956:	2b0e      	cmp	r3, #14
 8005958:	f200 80a8 	bhi.w	8005aac <_dtoa_r+0x47c>
 800595c:	2c00      	cmp	r4, #0
 800595e:	f000 80a5 	beq.w	8005aac <_dtoa_r+0x47c>
 8005962:	f1ba 0f00 	cmp.w	sl, #0
 8005966:	dd34      	ble.n	80059d2 <_dtoa_r+0x3a2>
 8005968:	4a9a      	ldr	r2, [pc, #616]	; (8005bd4 <_dtoa_r+0x5a4>)
 800596a:	f00a 030f 	and.w	r3, sl, #15
 800596e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005972:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800597a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800597e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005982:	d016      	beq.n	80059b2 <_dtoa_r+0x382>
 8005984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005988:	4b93      	ldr	r3, [pc, #588]	; (8005bd8 <_dtoa_r+0x5a8>)
 800598a:	2703      	movs	r7, #3
 800598c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005990:	f7fa fecc 	bl	800072c <__aeabi_ddiv>
 8005994:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005998:	f004 040f 	and.w	r4, r4, #15
 800599c:	4e8e      	ldr	r6, [pc, #568]	; (8005bd8 <_dtoa_r+0x5a8>)
 800599e:	b954      	cbnz	r4, 80059b6 <_dtoa_r+0x386>
 80059a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a8:	f7fa fec0 	bl	800072c <__aeabi_ddiv>
 80059ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059b0:	e029      	b.n	8005a06 <_dtoa_r+0x3d6>
 80059b2:	2702      	movs	r7, #2
 80059b4:	e7f2      	b.n	800599c <_dtoa_r+0x36c>
 80059b6:	07e1      	lsls	r1, r4, #31
 80059b8:	d508      	bpl.n	80059cc <_dtoa_r+0x39c>
 80059ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059be:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059c2:	f7fa fd89 	bl	80004d8 <__aeabi_dmul>
 80059c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059ca:	3701      	adds	r7, #1
 80059cc:	1064      	asrs	r4, r4, #1
 80059ce:	3608      	adds	r6, #8
 80059d0:	e7e5      	b.n	800599e <_dtoa_r+0x36e>
 80059d2:	f000 80a5 	beq.w	8005b20 <_dtoa_r+0x4f0>
 80059d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059da:	f1ca 0400 	rsb	r4, sl, #0
 80059de:	4b7d      	ldr	r3, [pc, #500]	; (8005bd4 <_dtoa_r+0x5a4>)
 80059e0:	f004 020f 	and.w	r2, r4, #15
 80059e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f7fa fd74 	bl	80004d8 <__aeabi_dmul>
 80059f0:	2702      	movs	r7, #2
 80059f2:	2300      	movs	r3, #0
 80059f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059f8:	4e77      	ldr	r6, [pc, #476]	; (8005bd8 <_dtoa_r+0x5a8>)
 80059fa:	1124      	asrs	r4, r4, #4
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	f040 8084 	bne.w	8005b0a <_dtoa_r+0x4da>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1d2      	bne.n	80059ac <_dtoa_r+0x37c>
 8005a06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 808b 	beq.w	8005b24 <_dtoa_r+0x4f4>
 8005a0e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b6f      	ldr	r3, [pc, #444]	; (8005bdc <_dtoa_r+0x5ac>)
 8005a1e:	f7fa ffcd 	bl	80009bc <__aeabi_dcmplt>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d07e      	beq.n	8005b24 <_dtoa_r+0x4f4>
 8005a26:	9b08      	ldr	r3, [sp, #32]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d07b      	beq.n	8005b24 <_dtoa_r+0x4f4>
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	dd38      	ble.n	8005aa4 <_dtoa_r+0x474>
 8005a32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a36:	2200      	movs	r2, #0
 8005a38:	4b69      	ldr	r3, [pc, #420]	; (8005be0 <_dtoa_r+0x5b0>)
 8005a3a:	f7fa fd4d 	bl	80004d8 <__aeabi_dmul>
 8005a3e:	464c      	mov	r4, r9
 8005a40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a44:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005a48:	3701      	adds	r7, #1
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f7fa fcda 	bl	8000404 <__aeabi_i2d>
 8005a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a54:	f7fa fd40 	bl	80004d8 <__aeabi_dmul>
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4b62      	ldr	r3, [pc, #392]	; (8005be4 <_dtoa_r+0x5b4>)
 8005a5c:	f7fa fb86 	bl	800016c <__adddf3>
 8005a60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a68:	9611      	str	r6, [sp, #68]	; 0x44
 8005a6a:	2c00      	cmp	r4, #0
 8005a6c:	d15d      	bne.n	8005b2a <_dtoa_r+0x4fa>
 8005a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a72:	2200      	movs	r2, #0
 8005a74:	4b5c      	ldr	r3, [pc, #368]	; (8005be8 <_dtoa_r+0x5b8>)
 8005a76:	f7fa fb77 	bl	8000168 <__aeabi_dsub>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a82:	4633      	mov	r3, r6
 8005a84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a86:	f7fa ffb7 	bl	80009f8 <__aeabi_dcmpgt>
 8005a8a:	2800      	cmp	r0, #0
 8005a8c:	f040 829c 	bne.w	8005fc8 <_dtoa_r+0x998>
 8005a90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a96:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a9a:	f7fa ff8f 	bl	80009bc <__aeabi_dcmplt>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f040 8290 	bne.w	8005fc4 <_dtoa_r+0x994>
 8005aa4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005aa8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f2c0 8152 	blt.w	8005d58 <_dtoa_r+0x728>
 8005ab4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ab8:	f300 814e 	bgt.w	8005d58 <_dtoa_r+0x728>
 8005abc:	4b45      	ldr	r3, [pc, #276]	; (8005bd4 <_dtoa_r+0x5a4>)
 8005abe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ac6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005aca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f280 80db 	bge.w	8005c88 <_dtoa_r+0x658>
 8005ad2:	9b08      	ldr	r3, [sp, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f300 80d7 	bgt.w	8005c88 <_dtoa_r+0x658>
 8005ada:	f040 8272 	bne.w	8005fc2 <_dtoa_r+0x992>
 8005ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	4b40      	ldr	r3, [pc, #256]	; (8005be8 <_dtoa_r+0x5b8>)
 8005ae6:	f7fa fcf7 	bl	80004d8 <__aeabi_dmul>
 8005aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aee:	f7fa ff79 	bl	80009e4 <__aeabi_dcmpge>
 8005af2:	9c08      	ldr	r4, [sp, #32]
 8005af4:	4626      	mov	r6, r4
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f040 8248 	bne.w	8005f8c <_dtoa_r+0x95c>
 8005afc:	2331      	movs	r3, #49	; 0x31
 8005afe:	9f03      	ldr	r7, [sp, #12]
 8005b00:	f10a 0a01 	add.w	sl, sl, #1
 8005b04:	f807 3b01 	strb.w	r3, [r7], #1
 8005b08:	e244      	b.n	8005f94 <_dtoa_r+0x964>
 8005b0a:	07e2      	lsls	r2, r4, #31
 8005b0c:	d505      	bpl.n	8005b1a <_dtoa_r+0x4ea>
 8005b0e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b12:	f7fa fce1 	bl	80004d8 <__aeabi_dmul>
 8005b16:	2301      	movs	r3, #1
 8005b18:	3701      	adds	r7, #1
 8005b1a:	1064      	asrs	r4, r4, #1
 8005b1c:	3608      	adds	r6, #8
 8005b1e:	e76d      	b.n	80059fc <_dtoa_r+0x3cc>
 8005b20:	2702      	movs	r7, #2
 8005b22:	e770      	b.n	8005a06 <_dtoa_r+0x3d6>
 8005b24:	46d0      	mov	r8, sl
 8005b26:	9c08      	ldr	r4, [sp, #32]
 8005b28:	e78f      	b.n	8005a4a <_dtoa_r+0x41a>
 8005b2a:	9903      	ldr	r1, [sp, #12]
 8005b2c:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <_dtoa_r+0x5a4>)
 8005b2e:	4421      	add	r1, r4
 8005b30:	9112      	str	r1, [sp, #72]	; 0x48
 8005b32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b38:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b3c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d055      	beq.n	8005bf0 <_dtoa_r+0x5c0>
 8005b44:	2000      	movs	r0, #0
 8005b46:	4929      	ldr	r1, [pc, #164]	; (8005bec <_dtoa_r+0x5bc>)
 8005b48:	f7fa fdf0 	bl	800072c <__aeabi_ddiv>
 8005b4c:	463b      	mov	r3, r7
 8005b4e:	4632      	mov	r2, r6
 8005b50:	f7fa fb0a 	bl	8000168 <__aeabi_dsub>
 8005b54:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b58:	9f03      	ldr	r7, [sp, #12]
 8005b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b5e:	f7fa ff6b 	bl	8000a38 <__aeabi_d2iz>
 8005b62:	4604      	mov	r4, r0
 8005b64:	f7fa fc4e 	bl	8000404 <__aeabi_i2d>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b70:	f7fa fafa 	bl	8000168 <__aeabi_dsub>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	3430      	adds	r4, #48	; 0x30
 8005b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b82:	f807 4b01 	strb.w	r4, [r7], #1
 8005b86:	f7fa ff19 	bl	80009bc <__aeabi_dcmplt>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d174      	bne.n	8005c78 <_dtoa_r+0x648>
 8005b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b92:	2000      	movs	r0, #0
 8005b94:	4911      	ldr	r1, [pc, #68]	; (8005bdc <_dtoa_r+0x5ac>)
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b9e:	f7fa ff0d 	bl	80009bc <__aeabi_dcmplt>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f040 80b7 	bne.w	8005d16 <_dtoa_r+0x6e6>
 8005ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005baa:	429f      	cmp	r7, r3
 8005bac:	f43f af7a 	beq.w	8005aa4 <_dtoa_r+0x474>
 8005bb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	; (8005be0 <_dtoa_r+0x5b0>)
 8005bb8:	f7fa fc8e 	bl	80004d8 <__aeabi_dmul>
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <_dtoa_r+0x5b0>)
 8005bc8:	f7fa fc86 	bl	80004d8 <__aeabi_dmul>
 8005bcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bd0:	e7c3      	b.n	8005b5a <_dtoa_r+0x52a>
 8005bd2:	bf00      	nop
 8005bd4:	08007800 	.word	0x08007800
 8005bd8:	080077d8 	.word	0x080077d8
 8005bdc:	3ff00000 	.word	0x3ff00000
 8005be0:	40240000 	.word	0x40240000
 8005be4:	401c0000 	.word	0x401c0000
 8005be8:	40140000 	.word	0x40140000
 8005bec:	3fe00000 	.word	0x3fe00000
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f7fa fc70 	bl	80004d8 <__aeabi_dmul>
 8005bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bfe:	9c03      	ldr	r4, [sp, #12]
 8005c00:	9314      	str	r3, [sp, #80]	; 0x50
 8005c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c06:	f7fa ff17 	bl	8000a38 <__aeabi_d2iz>
 8005c0a:	9015      	str	r0, [sp, #84]	; 0x54
 8005c0c:	f7fa fbfa 	bl	8000404 <__aeabi_i2d>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c18:	f7fa faa6 	bl	8000168 <__aeabi_dsub>
 8005c1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c1e:	4606      	mov	r6, r0
 8005c20:	3330      	adds	r3, #48	; 0x30
 8005c22:	f804 3b01 	strb.w	r3, [r4], #1
 8005c26:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c28:	460f      	mov	r7, r1
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	d124      	bne.n	8005c7c <_dtoa_r+0x64c>
 8005c32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c36:	4bb0      	ldr	r3, [pc, #704]	; (8005ef8 <_dtoa_r+0x8c8>)
 8005c38:	f7fa fa98 	bl	800016c <__adddf3>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4630      	mov	r0, r6
 8005c42:	4639      	mov	r1, r7
 8005c44:	f7fa fed8 	bl	80009f8 <__aeabi_dcmpgt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d163      	bne.n	8005d14 <_dtoa_r+0x6e4>
 8005c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c50:	2000      	movs	r0, #0
 8005c52:	49a9      	ldr	r1, [pc, #676]	; (8005ef8 <_dtoa_r+0x8c8>)
 8005c54:	f7fa fa88 	bl	8000168 <__aeabi_dsub>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	4639      	mov	r1, r7
 8005c60:	f7fa feac 	bl	80009bc <__aeabi_dcmplt>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f43f af1d 	beq.w	8005aa4 <_dtoa_r+0x474>
 8005c6a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c6c:	1e7b      	subs	r3, r7, #1
 8005c6e:	9314      	str	r3, [sp, #80]	; 0x50
 8005c70:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d0f8      	beq.n	8005c6a <_dtoa_r+0x63a>
 8005c78:	46c2      	mov	sl, r8
 8005c7a:	e03b      	b.n	8005cf4 <_dtoa_r+0x6c4>
 8005c7c:	4b9f      	ldr	r3, [pc, #636]	; (8005efc <_dtoa_r+0x8cc>)
 8005c7e:	f7fa fc2b 	bl	80004d8 <__aeabi_dmul>
 8005c82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c86:	e7bc      	b.n	8005c02 <_dtoa_r+0x5d2>
 8005c88:	9f03      	ldr	r7, [sp, #12]
 8005c8a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c92:	4640      	mov	r0, r8
 8005c94:	4649      	mov	r1, r9
 8005c96:	f7fa fd49 	bl	800072c <__aeabi_ddiv>
 8005c9a:	f7fa fecd 	bl	8000a38 <__aeabi_d2iz>
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7fa fbb0 	bl	8000404 <__aeabi_i2d>
 8005ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ca8:	f7fa fc16 	bl	80004d8 <__aeabi_dmul>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	f7fa fa58 	bl	8000168 <__aeabi_dsub>
 8005cb8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005cbc:	f807 6b01 	strb.w	r6, [r7], #1
 8005cc0:	9e03      	ldr	r6, [sp, #12]
 8005cc2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005cc6:	1bbe      	subs	r6, r7, r6
 8005cc8:	45b4      	cmp	ip, r6
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	d136      	bne.n	8005d3e <_dtoa_r+0x70e>
 8005cd0:	f7fa fa4c 	bl	800016c <__adddf3>
 8005cd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cd8:	4680      	mov	r8, r0
 8005cda:	4689      	mov	r9, r1
 8005cdc:	f7fa fe8c 	bl	80009f8 <__aeabi_dcmpgt>
 8005ce0:	bb58      	cbnz	r0, 8005d3a <_dtoa_r+0x70a>
 8005ce2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fe5d 	bl	80009a8 <__aeabi_dcmpeq>
 8005cee:	b108      	cbz	r0, 8005cf4 <_dtoa_r+0x6c4>
 8005cf0:	07e1      	lsls	r1, r4, #31
 8005cf2:	d422      	bmi.n	8005d3a <_dtoa_r+0x70a>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	4659      	mov	r1, fp
 8005cf8:	f000 faf0 	bl	80062dc <_Bfree>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	703b      	strb	r3, [r7, #0]
 8005d00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d02:	f10a 0001 	add.w	r0, sl, #1
 8005d06:	6018      	str	r0, [r3, #0]
 8005d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f43f acde 	beq.w	80056cc <_dtoa_r+0x9c>
 8005d10:	601f      	str	r7, [r3, #0]
 8005d12:	e4db      	b.n	80056cc <_dtoa_r+0x9c>
 8005d14:	4627      	mov	r7, r4
 8005d16:	463b      	mov	r3, r7
 8005d18:	461f      	mov	r7, r3
 8005d1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d1e:	2a39      	cmp	r2, #57	; 0x39
 8005d20:	d107      	bne.n	8005d32 <_dtoa_r+0x702>
 8005d22:	9a03      	ldr	r2, [sp, #12]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d1f7      	bne.n	8005d18 <_dtoa_r+0x6e8>
 8005d28:	2230      	movs	r2, #48	; 0x30
 8005d2a:	9903      	ldr	r1, [sp, #12]
 8005d2c:	f108 0801 	add.w	r8, r8, #1
 8005d30:	700a      	strb	r2, [r1, #0]
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	3201      	adds	r2, #1
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e79e      	b.n	8005c78 <_dtoa_r+0x648>
 8005d3a:	46d0      	mov	r8, sl
 8005d3c:	e7eb      	b.n	8005d16 <_dtoa_r+0x6e6>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4b6e      	ldr	r3, [pc, #440]	; (8005efc <_dtoa_r+0x8cc>)
 8005d42:	f7fa fbc9 	bl	80004d8 <__aeabi_dmul>
 8005d46:	2200      	movs	r2, #0
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	f7fa fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d09b      	beq.n	8005c8e <_dtoa_r+0x65e>
 8005d56:	e7cd      	b.n	8005cf4 <_dtoa_r+0x6c4>
 8005d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	f000 80d0 	beq.w	8005f00 <_dtoa_r+0x8d0>
 8005d60:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d62:	2a01      	cmp	r2, #1
 8005d64:	f300 80ae 	bgt.w	8005ec4 <_dtoa_r+0x894>
 8005d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d6a:	2a00      	cmp	r2, #0
 8005d6c:	f000 80a6 	beq.w	8005ebc <_dtoa_r+0x88c>
 8005d70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d76:	9f06      	ldr	r7, [sp, #24]
 8005d78:	9a06      	ldr	r2, [sp, #24]
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	441a      	add	r2, r3
 8005d7e:	9206      	str	r2, [sp, #24]
 8005d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d82:	4628      	mov	r0, r5
 8005d84:	441a      	add	r2, r3
 8005d86:	9209      	str	r2, [sp, #36]	; 0x24
 8005d88:	f000 fb5e 	bl	8006448 <__i2b>
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	dd0c      	ble.n	8005dac <_dtoa_r+0x77c>
 8005d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	dd09      	ble.n	8005dac <_dtoa_r+0x77c>
 8005d98:	42bb      	cmp	r3, r7
 8005d9a:	bfa8      	it	ge
 8005d9c:	463b      	movge	r3, r7
 8005d9e:	9a06      	ldr	r2, [sp, #24]
 8005da0:	1aff      	subs	r7, r7, r3
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	9206      	str	r2, [sp, #24]
 8005da6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	9309      	str	r3, [sp, #36]	; 0x24
 8005dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dae:	b1f3      	cbz	r3, 8005dee <_dtoa_r+0x7be>
 8005db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 80a8 	beq.w	8005f08 <_dtoa_r+0x8d8>
 8005db8:	2c00      	cmp	r4, #0
 8005dba:	dd10      	ble.n	8005dde <_dtoa_r+0x7ae>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 fbff 	bl	80065c4 <__pow5mult>
 8005dc6:	465a      	mov	r2, fp
 8005dc8:	4601      	mov	r1, r0
 8005dca:	4606      	mov	r6, r0
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f000 fb51 	bl	8006474 <__multiply>
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fa80 	bl	80062dc <_Bfree>
 8005ddc:	46c3      	mov	fp, r8
 8005dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de0:	1b1a      	subs	r2, r3, r4
 8005de2:	d004      	beq.n	8005dee <_dtoa_r+0x7be>
 8005de4:	4659      	mov	r1, fp
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 fbec 	bl	80065c4 <__pow5mult>
 8005dec:	4683      	mov	fp, r0
 8005dee:	2101      	movs	r1, #1
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fb29 	bl	8006448 <__i2b>
 8005df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005df8:	4604      	mov	r4, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f340 8086 	ble.w	8005f0c <_dtoa_r+0x8dc>
 8005e00:	461a      	mov	r2, r3
 8005e02:	4601      	mov	r1, r0
 8005e04:	4628      	mov	r0, r5
 8005e06:	f000 fbdd 	bl	80065c4 <__pow5mult>
 8005e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	dd7f      	ble.n	8005f12 <_dtoa_r+0x8e2>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	6923      	ldr	r3, [r4, #16]
 8005e18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e1c:	6918      	ldr	r0, [r3, #16]
 8005e1e:	f000 fac5 	bl	80063ac <__hi0bits>
 8005e22:	f1c0 0020 	rsb	r0, r0, #32
 8005e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e28:	4418      	add	r0, r3
 8005e2a:	f010 001f 	ands.w	r0, r0, #31
 8005e2e:	f000 8092 	beq.w	8005f56 <_dtoa_r+0x926>
 8005e32:	f1c0 0320 	rsb	r3, r0, #32
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	f340 808a 	ble.w	8005f50 <_dtoa_r+0x920>
 8005e3c:	f1c0 001c 	rsb	r0, r0, #28
 8005e40:	9b06      	ldr	r3, [sp, #24]
 8005e42:	4407      	add	r7, r0
 8005e44:	4403      	add	r3, r0
 8005e46:	9306      	str	r3, [sp, #24]
 8005e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4a:	4403      	add	r3, r0
 8005e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4e:	9b06      	ldr	r3, [sp, #24]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	dd05      	ble.n	8005e60 <_dtoa_r+0x830>
 8005e54:	4659      	mov	r1, fp
 8005e56:	461a      	mov	r2, r3
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f000 fc0d 	bl	8006678 <__lshift>
 8005e5e:	4683      	mov	fp, r0
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dd05      	ble.n	8005e72 <_dtoa_r+0x842>
 8005e66:	4621      	mov	r1, r4
 8005e68:	461a      	mov	r2, r3
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f000 fc04 	bl	8006678 <__lshift>
 8005e70:	4604      	mov	r4, r0
 8005e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d070      	beq.n	8005f5a <_dtoa_r+0x92a>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4658      	mov	r0, fp
 8005e7c:	f000 fc6c 	bl	8006758 <__mcmp>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	da6a      	bge.n	8005f5a <_dtoa_r+0x92a>
 8005e84:	2300      	movs	r3, #0
 8005e86:	4659      	mov	r1, fp
 8005e88:	220a      	movs	r2, #10
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f000 fa48 	bl	8006320 <__multadd>
 8005e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e92:	4683      	mov	fp, r0
 8005e94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8194 	beq.w	80061c6 <_dtoa_r+0xb96>
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f000 fa3b 	bl	8006320 <__multadd>
 8005eaa:	f1b9 0f00 	cmp.w	r9, #0
 8005eae:	4606      	mov	r6, r0
 8005eb0:	f300 8093 	bgt.w	8005fda <_dtoa_r+0x9aa>
 8005eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	dc57      	bgt.n	8005f6a <_dtoa_r+0x93a>
 8005eba:	e08e      	b.n	8005fda <_dtoa_r+0x9aa>
 8005ebc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ec2:	e757      	b.n	8005d74 <_dtoa_r+0x744>
 8005ec4:	9b08      	ldr	r3, [sp, #32]
 8005ec6:	1e5c      	subs	r4, r3, #1
 8005ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eca:	42a3      	cmp	r3, r4
 8005ecc:	bfb7      	itett	lt
 8005ece:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ed0:	1b1c      	subge	r4, r3, r4
 8005ed2:	1ae2      	sublt	r2, r4, r3
 8005ed4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ed6:	bfbe      	ittt	lt
 8005ed8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005eda:	189b      	addlt	r3, r3, r2
 8005edc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	bfb8      	it	lt
 8005ee2:	2400      	movlt	r4, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bfbb      	ittet	lt
 8005ee8:	9b06      	ldrlt	r3, [sp, #24]
 8005eea:	9a08      	ldrlt	r2, [sp, #32]
 8005eec:	9f06      	ldrge	r7, [sp, #24]
 8005eee:	1a9f      	sublt	r7, r3, r2
 8005ef0:	bfac      	ite	ge
 8005ef2:	9b08      	ldrge	r3, [sp, #32]
 8005ef4:	2300      	movlt	r3, #0
 8005ef6:	e73f      	b.n	8005d78 <_dtoa_r+0x748>
 8005ef8:	3fe00000 	.word	0x3fe00000
 8005efc:	40240000 	.word	0x40240000
 8005f00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f02:	9f06      	ldr	r7, [sp, #24]
 8005f04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f06:	e742      	b.n	8005d8e <_dtoa_r+0x75e>
 8005f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0a:	e76b      	b.n	8005de4 <_dtoa_r+0x7b4>
 8005f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	dc19      	bgt.n	8005f46 <_dtoa_r+0x916>
 8005f12:	9b04      	ldr	r3, [sp, #16]
 8005f14:	b9bb      	cbnz	r3, 8005f46 <_dtoa_r+0x916>
 8005f16:	9b05      	ldr	r3, [sp, #20]
 8005f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f1c:	b99b      	cbnz	r3, 8005f46 <_dtoa_r+0x916>
 8005f1e:	9b05      	ldr	r3, [sp, #20]
 8005f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	0d1b      	lsrs	r3, r3, #20
 8005f26:	051b      	lsls	r3, r3, #20
 8005f28:	b183      	cbz	r3, 8005f4c <_dtoa_r+0x91c>
 8005f2a:	f04f 0801 	mov.w	r8, #1
 8005f2e:	9b06      	ldr	r3, [sp, #24]
 8005f30:	3301      	adds	r3, #1
 8005f32:	9306      	str	r3, [sp, #24]
 8005f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f36:	3301      	adds	r3, #1
 8005f38:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f47f af6a 	bne.w	8005e16 <_dtoa_r+0x7e6>
 8005f42:	2001      	movs	r0, #1
 8005f44:	e76f      	b.n	8005e26 <_dtoa_r+0x7f6>
 8005f46:	f04f 0800 	mov.w	r8, #0
 8005f4a:	e7f6      	b.n	8005f3a <_dtoa_r+0x90a>
 8005f4c:	4698      	mov	r8, r3
 8005f4e:	e7f4      	b.n	8005f3a <_dtoa_r+0x90a>
 8005f50:	f43f af7d 	beq.w	8005e4e <_dtoa_r+0x81e>
 8005f54:	4618      	mov	r0, r3
 8005f56:	301c      	adds	r0, #28
 8005f58:	e772      	b.n	8005e40 <_dtoa_r+0x810>
 8005f5a:	9b08      	ldr	r3, [sp, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dc36      	bgt.n	8005fce <_dtoa_r+0x99e>
 8005f60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	dd33      	ble.n	8005fce <_dtoa_r+0x99e>
 8005f66:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f6a:	f1b9 0f00 	cmp.w	r9, #0
 8005f6e:	d10d      	bne.n	8005f8c <_dtoa_r+0x95c>
 8005f70:	4621      	mov	r1, r4
 8005f72:	464b      	mov	r3, r9
 8005f74:	2205      	movs	r2, #5
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 f9d2 	bl	8006320 <__multadd>
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4658      	mov	r0, fp
 8005f82:	f000 fbe9 	bl	8006758 <__mcmp>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	f73f adb8 	bgt.w	8005afc <_dtoa_r+0x4cc>
 8005f8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f8e:	9f03      	ldr	r7, [sp, #12]
 8005f90:	ea6f 0a03 	mvn.w	sl, r3
 8005f94:	f04f 0800 	mov.w	r8, #0
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	f000 f99e 	bl	80062dc <_Bfree>
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	f43f aea7 	beq.w	8005cf4 <_dtoa_r+0x6c4>
 8005fa6:	f1b8 0f00 	cmp.w	r8, #0
 8005faa:	d005      	beq.n	8005fb8 <_dtoa_r+0x988>
 8005fac:	45b0      	cmp	r8, r6
 8005fae:	d003      	beq.n	8005fb8 <_dtoa_r+0x988>
 8005fb0:	4641      	mov	r1, r8
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 f992 	bl	80062dc <_Bfree>
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f98e 	bl	80062dc <_Bfree>
 8005fc0:	e698      	b.n	8005cf4 <_dtoa_r+0x6c4>
 8005fc2:	2400      	movs	r4, #0
 8005fc4:	4626      	mov	r6, r4
 8005fc6:	e7e1      	b.n	8005f8c <_dtoa_r+0x95c>
 8005fc8:	46c2      	mov	sl, r8
 8005fca:	4626      	mov	r6, r4
 8005fcc:	e596      	b.n	8005afc <_dtoa_r+0x4cc>
 8005fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80fd 	beq.w	80061d4 <_dtoa_r+0xba4>
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	dd05      	ble.n	8005fea <_dtoa_r+0x9ba>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	463a      	mov	r2, r7
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 fb48 	bl	8006678 <__lshift>
 8005fe8:	4606      	mov	r6, r0
 8005fea:	f1b8 0f00 	cmp.w	r8, #0
 8005fee:	d05c      	beq.n	80060aa <_dtoa_r+0xa7a>
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	6871      	ldr	r1, [r6, #4]
 8005ff4:	f000 f932 	bl	800625c <_Balloc>
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	b928      	cbnz	r0, 8006008 <_dtoa_r+0x9d8>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006002:	4b7f      	ldr	r3, [pc, #508]	; (8006200 <_dtoa_r+0xbd0>)
 8006004:	f7ff bb28 	b.w	8005658 <_dtoa_r+0x28>
 8006008:	6932      	ldr	r2, [r6, #16]
 800600a:	f106 010c 	add.w	r1, r6, #12
 800600e:	3202      	adds	r2, #2
 8006010:	0092      	lsls	r2, r2, #2
 8006012:	300c      	adds	r0, #12
 8006014:	f000 f914 	bl	8006240 <memcpy>
 8006018:	2201      	movs	r2, #1
 800601a:	4639      	mov	r1, r7
 800601c:	4628      	mov	r0, r5
 800601e:	f000 fb2b 	bl	8006678 <__lshift>
 8006022:	46b0      	mov	r8, r6
 8006024:	4606      	mov	r6, r0
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	9308      	str	r3, [sp, #32]
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	444b      	add	r3, r9
 8006030:	930a      	str	r3, [sp, #40]	; 0x28
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	9309      	str	r3, [sp, #36]	; 0x24
 800603a:	9b08      	ldr	r3, [sp, #32]
 800603c:	4621      	mov	r1, r4
 800603e:	3b01      	subs	r3, #1
 8006040:	4658      	mov	r0, fp
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	f7ff fa66 	bl	8005514 <quorem>
 8006048:	4603      	mov	r3, r0
 800604a:	4641      	mov	r1, r8
 800604c:	3330      	adds	r3, #48	; 0x30
 800604e:	9006      	str	r0, [sp, #24]
 8006050:	4658      	mov	r0, fp
 8006052:	930b      	str	r3, [sp, #44]	; 0x2c
 8006054:	f000 fb80 	bl	8006758 <__mcmp>
 8006058:	4632      	mov	r2, r6
 800605a:	4681      	mov	r9, r0
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 fb96 	bl	8006790 <__mdiff>
 8006064:	68c2      	ldr	r2, [r0, #12]
 8006066:	4607      	mov	r7, r0
 8006068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606a:	bb02      	cbnz	r2, 80060ae <_dtoa_r+0xa7e>
 800606c:	4601      	mov	r1, r0
 800606e:	4658      	mov	r0, fp
 8006070:	f000 fb72 	bl	8006758 <__mcmp>
 8006074:	4602      	mov	r2, r0
 8006076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006078:	4639      	mov	r1, r7
 800607a:	4628      	mov	r0, r5
 800607c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006080:	f000 f92c 	bl	80062dc <_Bfree>
 8006084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006088:	9f08      	ldr	r7, [sp, #32]
 800608a:	ea43 0102 	orr.w	r1, r3, r2
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	430b      	orrs	r3, r1
 8006092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006094:	d10d      	bne.n	80060b2 <_dtoa_r+0xa82>
 8006096:	2b39      	cmp	r3, #57	; 0x39
 8006098:	d029      	beq.n	80060ee <_dtoa_r+0xabe>
 800609a:	f1b9 0f00 	cmp.w	r9, #0
 800609e:	dd01      	ble.n	80060a4 <_dtoa_r+0xa74>
 80060a0:	9b06      	ldr	r3, [sp, #24]
 80060a2:	3331      	adds	r3, #49	; 0x31
 80060a4:	9a04      	ldr	r2, [sp, #16]
 80060a6:	7013      	strb	r3, [r2, #0]
 80060a8:	e776      	b.n	8005f98 <_dtoa_r+0x968>
 80060aa:	4630      	mov	r0, r6
 80060ac:	e7b9      	b.n	8006022 <_dtoa_r+0x9f2>
 80060ae:	2201      	movs	r2, #1
 80060b0:	e7e2      	b.n	8006078 <_dtoa_r+0xa48>
 80060b2:	f1b9 0f00 	cmp.w	r9, #0
 80060b6:	db06      	blt.n	80060c6 <_dtoa_r+0xa96>
 80060b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80060ba:	ea41 0909 	orr.w	r9, r1, r9
 80060be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c0:	ea59 0101 	orrs.w	r1, r9, r1
 80060c4:	d120      	bne.n	8006108 <_dtoa_r+0xad8>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	ddec      	ble.n	80060a4 <_dtoa_r+0xa74>
 80060ca:	4659      	mov	r1, fp
 80060cc:	2201      	movs	r2, #1
 80060ce:	4628      	mov	r0, r5
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	f000 fad1 	bl	8006678 <__lshift>
 80060d6:	4621      	mov	r1, r4
 80060d8:	4683      	mov	fp, r0
 80060da:	f000 fb3d 	bl	8006758 <__mcmp>
 80060de:	2800      	cmp	r0, #0
 80060e0:	9b08      	ldr	r3, [sp, #32]
 80060e2:	dc02      	bgt.n	80060ea <_dtoa_r+0xaba>
 80060e4:	d1de      	bne.n	80060a4 <_dtoa_r+0xa74>
 80060e6:	07da      	lsls	r2, r3, #31
 80060e8:	d5dc      	bpl.n	80060a4 <_dtoa_r+0xa74>
 80060ea:	2b39      	cmp	r3, #57	; 0x39
 80060ec:	d1d8      	bne.n	80060a0 <_dtoa_r+0xa70>
 80060ee:	2339      	movs	r3, #57	; 0x39
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	7013      	strb	r3, [r2, #0]
 80060f4:	463b      	mov	r3, r7
 80060f6:	461f      	mov	r7, r3
 80060f8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	2a39      	cmp	r2, #57	; 0x39
 8006100:	d050      	beq.n	80061a4 <_dtoa_r+0xb74>
 8006102:	3201      	adds	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e747      	b.n	8005f98 <_dtoa_r+0x968>
 8006108:	2a00      	cmp	r2, #0
 800610a:	dd03      	ble.n	8006114 <_dtoa_r+0xae4>
 800610c:	2b39      	cmp	r3, #57	; 0x39
 800610e:	d0ee      	beq.n	80060ee <_dtoa_r+0xabe>
 8006110:	3301      	adds	r3, #1
 8006112:	e7c7      	b.n	80060a4 <_dtoa_r+0xa74>
 8006114:	9a08      	ldr	r2, [sp, #32]
 8006116:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006118:	f802 3c01 	strb.w	r3, [r2, #-1]
 800611c:	428a      	cmp	r2, r1
 800611e:	d02a      	beq.n	8006176 <_dtoa_r+0xb46>
 8006120:	4659      	mov	r1, fp
 8006122:	2300      	movs	r3, #0
 8006124:	220a      	movs	r2, #10
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f8fa 	bl	8006320 <__multadd>
 800612c:	45b0      	cmp	r8, r6
 800612e:	4683      	mov	fp, r0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	f04f 020a 	mov.w	r2, #10
 8006138:	4641      	mov	r1, r8
 800613a:	4628      	mov	r0, r5
 800613c:	d107      	bne.n	800614e <_dtoa_r+0xb1e>
 800613e:	f000 f8ef 	bl	8006320 <__multadd>
 8006142:	4680      	mov	r8, r0
 8006144:	4606      	mov	r6, r0
 8006146:	9b08      	ldr	r3, [sp, #32]
 8006148:	3301      	adds	r3, #1
 800614a:	9308      	str	r3, [sp, #32]
 800614c:	e775      	b.n	800603a <_dtoa_r+0xa0a>
 800614e:	f000 f8e7 	bl	8006320 <__multadd>
 8006152:	4631      	mov	r1, r6
 8006154:	4680      	mov	r8, r0
 8006156:	2300      	movs	r3, #0
 8006158:	220a      	movs	r2, #10
 800615a:	4628      	mov	r0, r5
 800615c:	f000 f8e0 	bl	8006320 <__multadd>
 8006160:	4606      	mov	r6, r0
 8006162:	e7f0      	b.n	8006146 <_dtoa_r+0xb16>
 8006164:	f1b9 0f00 	cmp.w	r9, #0
 8006168:	bfcc      	ite	gt
 800616a:	464f      	movgt	r7, r9
 800616c:	2701      	movle	r7, #1
 800616e:	f04f 0800 	mov.w	r8, #0
 8006172:	9a03      	ldr	r2, [sp, #12]
 8006174:	4417      	add	r7, r2
 8006176:	4659      	mov	r1, fp
 8006178:	2201      	movs	r2, #1
 800617a:	4628      	mov	r0, r5
 800617c:	9308      	str	r3, [sp, #32]
 800617e:	f000 fa7b 	bl	8006678 <__lshift>
 8006182:	4621      	mov	r1, r4
 8006184:	4683      	mov	fp, r0
 8006186:	f000 fae7 	bl	8006758 <__mcmp>
 800618a:	2800      	cmp	r0, #0
 800618c:	dcb2      	bgt.n	80060f4 <_dtoa_r+0xac4>
 800618e:	d102      	bne.n	8006196 <_dtoa_r+0xb66>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	07db      	lsls	r3, r3, #31
 8006194:	d4ae      	bmi.n	80060f4 <_dtoa_r+0xac4>
 8006196:	463b      	mov	r3, r7
 8006198:	461f      	mov	r7, r3
 800619a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800619e:	2a30      	cmp	r2, #48	; 0x30
 80061a0:	d0fa      	beq.n	8006198 <_dtoa_r+0xb68>
 80061a2:	e6f9      	b.n	8005f98 <_dtoa_r+0x968>
 80061a4:	9a03      	ldr	r2, [sp, #12]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d1a5      	bne.n	80060f6 <_dtoa_r+0xac6>
 80061aa:	2331      	movs	r3, #49	; 0x31
 80061ac:	f10a 0a01 	add.w	sl, sl, #1
 80061b0:	e779      	b.n	80060a6 <_dtoa_r+0xa76>
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <_dtoa_r+0xbd4>)
 80061b4:	f7ff baa8 	b.w	8005708 <_dtoa_r+0xd8>
 80061b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f47f aa81 	bne.w	80056c2 <_dtoa_r+0x92>
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <_dtoa_r+0xbd8>)
 80061c2:	f7ff baa1 	b.w	8005708 <_dtoa_r+0xd8>
 80061c6:	f1b9 0f00 	cmp.w	r9, #0
 80061ca:	dc03      	bgt.n	80061d4 <_dtoa_r+0xba4>
 80061cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	f73f aecb 	bgt.w	8005f6a <_dtoa_r+0x93a>
 80061d4:	9f03      	ldr	r7, [sp, #12]
 80061d6:	4621      	mov	r1, r4
 80061d8:	4658      	mov	r0, fp
 80061da:	f7ff f99b 	bl	8005514 <quorem>
 80061de:	9a03      	ldr	r2, [sp, #12]
 80061e0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061e4:	f807 3b01 	strb.w	r3, [r7], #1
 80061e8:	1aba      	subs	r2, r7, r2
 80061ea:	4591      	cmp	r9, r2
 80061ec:	ddba      	ble.n	8006164 <_dtoa_r+0xb34>
 80061ee:	4659      	mov	r1, fp
 80061f0:	2300      	movs	r3, #0
 80061f2:	220a      	movs	r2, #10
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 f893 	bl	8006320 <__multadd>
 80061fa:	4683      	mov	fp, r0
 80061fc:	e7eb      	b.n	80061d6 <_dtoa_r+0xba6>
 80061fe:	bf00      	nop
 8006200:	0800776b 	.word	0x0800776b
 8006204:	080076c8 	.word	0x080076c8
 8006208:	080076ec 	.word	0x080076ec

0800620c <_localeconv_r>:
 800620c:	4800      	ldr	r0, [pc, #0]	; (8006210 <_localeconv_r+0x4>)
 800620e:	4770      	bx	lr
 8006210:	20000164 	.word	0x20000164

08006214 <malloc>:
 8006214:	4b02      	ldr	r3, [pc, #8]	; (8006220 <malloc+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f000 bc1d 	b.w	8006a58 <_malloc_r>
 800621e:	bf00      	nop
 8006220:	20000010 	.word	0x20000010

08006224 <memchr>:
 8006224:	4603      	mov	r3, r0
 8006226:	b510      	push	{r4, lr}
 8006228:	b2c9      	uxtb	r1, r1
 800622a:	4402      	add	r2, r0
 800622c:	4293      	cmp	r3, r2
 800622e:	4618      	mov	r0, r3
 8006230:	d101      	bne.n	8006236 <memchr+0x12>
 8006232:	2000      	movs	r0, #0
 8006234:	e003      	b.n	800623e <memchr+0x1a>
 8006236:	7804      	ldrb	r4, [r0, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	428c      	cmp	r4, r1
 800623c:	d1f6      	bne.n	800622c <memchr+0x8>
 800623e:	bd10      	pop	{r4, pc}

08006240 <memcpy>:
 8006240:	440a      	add	r2, r1
 8006242:	4291      	cmp	r1, r2
 8006244:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006248:	d100      	bne.n	800624c <memcpy+0xc>
 800624a:	4770      	bx	lr
 800624c:	b510      	push	{r4, lr}
 800624e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006252:	4291      	cmp	r1, r2
 8006254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006258:	d1f9      	bne.n	800624e <memcpy+0xe>
 800625a:	bd10      	pop	{r4, pc}

0800625c <_Balloc>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	b976      	cbnz	r6, 8006284 <_Balloc+0x28>
 8006266:	2010      	movs	r0, #16
 8006268:	f7ff ffd4 	bl	8006214 <malloc>
 800626c:	4602      	mov	r2, r0
 800626e:	6260      	str	r0, [r4, #36]	; 0x24
 8006270:	b920      	cbnz	r0, 800627c <_Balloc+0x20>
 8006272:	2166      	movs	r1, #102	; 0x66
 8006274:	4b17      	ldr	r3, [pc, #92]	; (80062d4 <_Balloc+0x78>)
 8006276:	4818      	ldr	r0, [pc, #96]	; (80062d8 <_Balloc+0x7c>)
 8006278:	f000 fc72 	bl	8006b60 <__assert_func>
 800627c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006280:	6006      	str	r6, [r0, #0]
 8006282:	60c6      	str	r6, [r0, #12]
 8006284:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006286:	68f3      	ldr	r3, [r6, #12]
 8006288:	b183      	cbz	r3, 80062ac <_Balloc+0x50>
 800628a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006292:	b9b8      	cbnz	r0, 80062c4 <_Balloc+0x68>
 8006294:	2101      	movs	r1, #1
 8006296:	fa01 f605 	lsl.w	r6, r1, r5
 800629a:	1d72      	adds	r2, r6, #5
 800629c:	4620      	mov	r0, r4
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	f000 fb5e 	bl	8006960 <_calloc_r>
 80062a4:	b160      	cbz	r0, 80062c0 <_Balloc+0x64>
 80062a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062aa:	e00e      	b.n	80062ca <_Balloc+0x6e>
 80062ac:	2221      	movs	r2, #33	; 0x21
 80062ae:	2104      	movs	r1, #4
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fb55 	bl	8006960 <_calloc_r>
 80062b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b8:	60f0      	str	r0, [r6, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e4      	bne.n	800628a <_Balloc+0x2e>
 80062c0:	2000      	movs	r0, #0
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	6802      	ldr	r2, [r0, #0]
 80062c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ca:	2300      	movs	r3, #0
 80062cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062d0:	e7f7      	b.n	80062c2 <_Balloc+0x66>
 80062d2:	bf00      	nop
 80062d4:	080076f9 	.word	0x080076f9
 80062d8:	0800777c 	.word	0x0800777c

080062dc <_Bfree>:
 80062dc:	b570      	push	{r4, r5, r6, lr}
 80062de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062e0:	4605      	mov	r5, r0
 80062e2:	460c      	mov	r4, r1
 80062e4:	b976      	cbnz	r6, 8006304 <_Bfree+0x28>
 80062e6:	2010      	movs	r0, #16
 80062e8:	f7ff ff94 	bl	8006214 <malloc>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6268      	str	r0, [r5, #36]	; 0x24
 80062f0:	b920      	cbnz	r0, 80062fc <_Bfree+0x20>
 80062f2:	218a      	movs	r1, #138	; 0x8a
 80062f4:	4b08      	ldr	r3, [pc, #32]	; (8006318 <_Bfree+0x3c>)
 80062f6:	4809      	ldr	r0, [pc, #36]	; (800631c <_Bfree+0x40>)
 80062f8:	f000 fc32 	bl	8006b60 <__assert_func>
 80062fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006300:	6006      	str	r6, [r0, #0]
 8006302:	60c6      	str	r6, [r0, #12]
 8006304:	b13c      	cbz	r4, 8006316 <_Bfree+0x3a>
 8006306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006308:	6862      	ldr	r2, [r4, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006310:	6021      	str	r1, [r4, #0]
 8006312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	080076f9 	.word	0x080076f9
 800631c:	0800777c 	.word	0x0800777c

08006320 <__multadd>:
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	4607      	mov	r7, r0
 8006326:	460c      	mov	r4, r1
 8006328:	461e      	mov	r6, r3
 800632a:	2000      	movs	r0, #0
 800632c:	690d      	ldr	r5, [r1, #16]
 800632e:	f101 0c14 	add.w	ip, r1, #20
 8006332:	f8dc 3000 	ldr.w	r3, [ip]
 8006336:	3001      	adds	r0, #1
 8006338:	b299      	uxth	r1, r3
 800633a:	fb02 6101 	mla	r1, r2, r1, r6
 800633e:	0c1e      	lsrs	r6, r3, #16
 8006340:	0c0b      	lsrs	r3, r1, #16
 8006342:	fb02 3306 	mla	r3, r2, r6, r3
 8006346:	b289      	uxth	r1, r1
 8006348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800634c:	4285      	cmp	r5, r0
 800634e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006352:	f84c 1b04 	str.w	r1, [ip], #4
 8006356:	dcec      	bgt.n	8006332 <__multadd+0x12>
 8006358:	b30e      	cbz	r6, 800639e <__multadd+0x7e>
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	42ab      	cmp	r3, r5
 800635e:	dc19      	bgt.n	8006394 <__multadd+0x74>
 8006360:	6861      	ldr	r1, [r4, #4]
 8006362:	4638      	mov	r0, r7
 8006364:	3101      	adds	r1, #1
 8006366:	f7ff ff79 	bl	800625c <_Balloc>
 800636a:	4680      	mov	r8, r0
 800636c:	b928      	cbnz	r0, 800637a <__multadd+0x5a>
 800636e:	4602      	mov	r2, r0
 8006370:	21b5      	movs	r1, #181	; 0xb5
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <__multadd+0x84>)
 8006374:	480c      	ldr	r0, [pc, #48]	; (80063a8 <__multadd+0x88>)
 8006376:	f000 fbf3 	bl	8006b60 <__assert_func>
 800637a:	6922      	ldr	r2, [r4, #16]
 800637c:	f104 010c 	add.w	r1, r4, #12
 8006380:	3202      	adds	r2, #2
 8006382:	0092      	lsls	r2, r2, #2
 8006384:	300c      	adds	r0, #12
 8006386:	f7ff ff5b 	bl	8006240 <memcpy>
 800638a:	4621      	mov	r1, r4
 800638c:	4638      	mov	r0, r7
 800638e:	f7ff ffa5 	bl	80062dc <_Bfree>
 8006392:	4644      	mov	r4, r8
 8006394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006398:	3501      	adds	r5, #1
 800639a:	615e      	str	r6, [r3, #20]
 800639c:	6125      	str	r5, [r4, #16]
 800639e:	4620      	mov	r0, r4
 80063a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a4:	0800776b 	.word	0x0800776b
 80063a8:	0800777c 	.word	0x0800777c

080063ac <__hi0bits>:
 80063ac:	0c02      	lsrs	r2, r0, #16
 80063ae:	0412      	lsls	r2, r2, #16
 80063b0:	4603      	mov	r3, r0
 80063b2:	b9ca      	cbnz	r2, 80063e8 <__hi0bits+0x3c>
 80063b4:	0403      	lsls	r3, r0, #16
 80063b6:	2010      	movs	r0, #16
 80063b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063bc:	bf04      	itt	eq
 80063be:	021b      	lsleq	r3, r3, #8
 80063c0:	3008      	addeq	r0, #8
 80063c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063c6:	bf04      	itt	eq
 80063c8:	011b      	lsleq	r3, r3, #4
 80063ca:	3004      	addeq	r0, #4
 80063cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063d0:	bf04      	itt	eq
 80063d2:	009b      	lsleq	r3, r3, #2
 80063d4:	3002      	addeq	r0, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	db05      	blt.n	80063e6 <__hi0bits+0x3a>
 80063da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80063de:	f100 0001 	add.w	r0, r0, #1
 80063e2:	bf08      	it	eq
 80063e4:	2020      	moveq	r0, #32
 80063e6:	4770      	bx	lr
 80063e8:	2000      	movs	r0, #0
 80063ea:	e7e5      	b.n	80063b8 <__hi0bits+0xc>

080063ec <__lo0bits>:
 80063ec:	6803      	ldr	r3, [r0, #0]
 80063ee:	4602      	mov	r2, r0
 80063f0:	f013 0007 	ands.w	r0, r3, #7
 80063f4:	d00b      	beq.n	800640e <__lo0bits+0x22>
 80063f6:	07d9      	lsls	r1, r3, #31
 80063f8:	d421      	bmi.n	800643e <__lo0bits+0x52>
 80063fa:	0798      	lsls	r0, r3, #30
 80063fc:	bf49      	itett	mi
 80063fe:	085b      	lsrmi	r3, r3, #1
 8006400:	089b      	lsrpl	r3, r3, #2
 8006402:	2001      	movmi	r0, #1
 8006404:	6013      	strmi	r3, [r2, #0]
 8006406:	bf5c      	itt	pl
 8006408:	2002      	movpl	r0, #2
 800640a:	6013      	strpl	r3, [r2, #0]
 800640c:	4770      	bx	lr
 800640e:	b299      	uxth	r1, r3
 8006410:	b909      	cbnz	r1, 8006416 <__lo0bits+0x2a>
 8006412:	2010      	movs	r0, #16
 8006414:	0c1b      	lsrs	r3, r3, #16
 8006416:	b2d9      	uxtb	r1, r3
 8006418:	b909      	cbnz	r1, 800641e <__lo0bits+0x32>
 800641a:	3008      	adds	r0, #8
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	0719      	lsls	r1, r3, #28
 8006420:	bf04      	itt	eq
 8006422:	091b      	lsreq	r3, r3, #4
 8006424:	3004      	addeq	r0, #4
 8006426:	0799      	lsls	r1, r3, #30
 8006428:	bf04      	itt	eq
 800642a:	089b      	lsreq	r3, r3, #2
 800642c:	3002      	addeq	r0, #2
 800642e:	07d9      	lsls	r1, r3, #31
 8006430:	d403      	bmi.n	800643a <__lo0bits+0x4e>
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	f100 0001 	add.w	r0, r0, #1
 8006438:	d003      	beq.n	8006442 <__lo0bits+0x56>
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	4770      	bx	lr
 800643e:	2000      	movs	r0, #0
 8006440:	4770      	bx	lr
 8006442:	2020      	movs	r0, #32
 8006444:	4770      	bx	lr
	...

08006448 <__i2b>:
 8006448:	b510      	push	{r4, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	2101      	movs	r1, #1
 800644e:	f7ff ff05 	bl	800625c <_Balloc>
 8006452:	4602      	mov	r2, r0
 8006454:	b928      	cbnz	r0, 8006462 <__i2b+0x1a>
 8006456:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <__i2b+0x24>)
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <__i2b+0x28>)
 800645e:	f000 fb7f 	bl	8006b60 <__assert_func>
 8006462:	2301      	movs	r3, #1
 8006464:	6144      	str	r4, [r0, #20]
 8006466:	6103      	str	r3, [r0, #16]
 8006468:	bd10      	pop	{r4, pc}
 800646a:	bf00      	nop
 800646c:	0800776b 	.word	0x0800776b
 8006470:	0800777c 	.word	0x0800777c

08006474 <__multiply>:
 8006474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006478:	4691      	mov	r9, r2
 800647a:	690a      	ldr	r2, [r1, #16]
 800647c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006480:	460c      	mov	r4, r1
 8006482:	429a      	cmp	r2, r3
 8006484:	bfbe      	ittt	lt
 8006486:	460b      	movlt	r3, r1
 8006488:	464c      	movlt	r4, r9
 800648a:	4699      	movlt	r9, r3
 800648c:	6927      	ldr	r7, [r4, #16]
 800648e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006492:	68a3      	ldr	r3, [r4, #8]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	eb07 060a 	add.w	r6, r7, sl
 800649a:	42b3      	cmp	r3, r6
 800649c:	b085      	sub	sp, #20
 800649e:	bfb8      	it	lt
 80064a0:	3101      	addlt	r1, #1
 80064a2:	f7ff fedb 	bl	800625c <_Balloc>
 80064a6:	b930      	cbnz	r0, 80064b6 <__multiply+0x42>
 80064a8:	4602      	mov	r2, r0
 80064aa:	f240 115d 	movw	r1, #349	; 0x15d
 80064ae:	4b43      	ldr	r3, [pc, #268]	; (80065bc <__multiply+0x148>)
 80064b0:	4843      	ldr	r0, [pc, #268]	; (80065c0 <__multiply+0x14c>)
 80064b2:	f000 fb55 	bl	8006b60 <__assert_func>
 80064b6:	f100 0514 	add.w	r5, r0, #20
 80064ba:	462b      	mov	r3, r5
 80064bc:	2200      	movs	r2, #0
 80064be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064c2:	4543      	cmp	r3, r8
 80064c4:	d321      	bcc.n	800650a <__multiply+0x96>
 80064c6:	f104 0314 	add.w	r3, r4, #20
 80064ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064ce:	f109 0314 	add.w	r3, r9, #20
 80064d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064d6:	9202      	str	r2, [sp, #8]
 80064d8:	1b3a      	subs	r2, r7, r4
 80064da:	3a15      	subs	r2, #21
 80064dc:	f022 0203 	bic.w	r2, r2, #3
 80064e0:	3204      	adds	r2, #4
 80064e2:	f104 0115 	add.w	r1, r4, #21
 80064e6:	428f      	cmp	r7, r1
 80064e8:	bf38      	it	cc
 80064ea:	2204      	movcc	r2, #4
 80064ec:	9201      	str	r2, [sp, #4]
 80064ee:	9a02      	ldr	r2, [sp, #8]
 80064f0:	9303      	str	r3, [sp, #12]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d80c      	bhi.n	8006510 <__multiply+0x9c>
 80064f6:	2e00      	cmp	r6, #0
 80064f8:	dd03      	ble.n	8006502 <__multiply+0x8e>
 80064fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d059      	beq.n	80065b6 <__multiply+0x142>
 8006502:	6106      	str	r6, [r0, #16]
 8006504:	b005      	add	sp, #20
 8006506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800650a:	f843 2b04 	str.w	r2, [r3], #4
 800650e:	e7d8      	b.n	80064c2 <__multiply+0x4e>
 8006510:	f8b3 a000 	ldrh.w	sl, [r3]
 8006514:	f1ba 0f00 	cmp.w	sl, #0
 8006518:	d023      	beq.n	8006562 <__multiply+0xee>
 800651a:	46a9      	mov	r9, r5
 800651c:	f04f 0c00 	mov.w	ip, #0
 8006520:	f104 0e14 	add.w	lr, r4, #20
 8006524:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006528:	f8d9 1000 	ldr.w	r1, [r9]
 800652c:	fa1f fb82 	uxth.w	fp, r2
 8006530:	b289      	uxth	r1, r1
 8006532:	fb0a 110b 	mla	r1, sl, fp, r1
 8006536:	4461      	add	r1, ip
 8006538:	f8d9 c000 	ldr.w	ip, [r9]
 800653c:	0c12      	lsrs	r2, r2, #16
 800653e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006542:	fb0a c202 	mla	r2, sl, r2, ip
 8006546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800654a:	b289      	uxth	r1, r1
 800654c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006550:	4577      	cmp	r7, lr
 8006552:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006556:	f849 1b04 	str.w	r1, [r9], #4
 800655a:	d8e3      	bhi.n	8006524 <__multiply+0xb0>
 800655c:	9a01      	ldr	r2, [sp, #4]
 800655e:	f845 c002 	str.w	ip, [r5, r2]
 8006562:	9a03      	ldr	r2, [sp, #12]
 8006564:	3304      	adds	r3, #4
 8006566:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800656a:	f1b9 0f00 	cmp.w	r9, #0
 800656e:	d020      	beq.n	80065b2 <__multiply+0x13e>
 8006570:	46ae      	mov	lr, r5
 8006572:	f04f 0a00 	mov.w	sl, #0
 8006576:	6829      	ldr	r1, [r5, #0]
 8006578:	f104 0c14 	add.w	ip, r4, #20
 800657c:	f8bc b000 	ldrh.w	fp, [ip]
 8006580:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006584:	b289      	uxth	r1, r1
 8006586:	fb09 220b 	mla	r2, r9, fp, r2
 800658a:	4492      	add	sl, r2
 800658c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006590:	f84e 1b04 	str.w	r1, [lr], #4
 8006594:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006598:	f8be 1000 	ldrh.w	r1, [lr]
 800659c:	0c12      	lsrs	r2, r2, #16
 800659e:	fb09 1102 	mla	r1, r9, r2, r1
 80065a2:	4567      	cmp	r7, ip
 80065a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065ac:	d8e6      	bhi.n	800657c <__multiply+0x108>
 80065ae:	9a01      	ldr	r2, [sp, #4]
 80065b0:	50a9      	str	r1, [r5, r2]
 80065b2:	3504      	adds	r5, #4
 80065b4:	e79b      	b.n	80064ee <__multiply+0x7a>
 80065b6:	3e01      	subs	r6, #1
 80065b8:	e79d      	b.n	80064f6 <__multiply+0x82>
 80065ba:	bf00      	nop
 80065bc:	0800776b 	.word	0x0800776b
 80065c0:	0800777c 	.word	0x0800777c

080065c4 <__pow5mult>:
 80065c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c8:	4615      	mov	r5, r2
 80065ca:	f012 0203 	ands.w	r2, r2, #3
 80065ce:	4606      	mov	r6, r0
 80065d0:	460f      	mov	r7, r1
 80065d2:	d007      	beq.n	80065e4 <__pow5mult+0x20>
 80065d4:	4c25      	ldr	r4, [pc, #148]	; (800666c <__pow5mult+0xa8>)
 80065d6:	3a01      	subs	r2, #1
 80065d8:	2300      	movs	r3, #0
 80065da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065de:	f7ff fe9f 	bl	8006320 <__multadd>
 80065e2:	4607      	mov	r7, r0
 80065e4:	10ad      	asrs	r5, r5, #2
 80065e6:	d03d      	beq.n	8006664 <__pow5mult+0xa0>
 80065e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065ea:	b97c      	cbnz	r4, 800660c <__pow5mult+0x48>
 80065ec:	2010      	movs	r0, #16
 80065ee:	f7ff fe11 	bl	8006214 <malloc>
 80065f2:	4602      	mov	r2, r0
 80065f4:	6270      	str	r0, [r6, #36]	; 0x24
 80065f6:	b928      	cbnz	r0, 8006604 <__pow5mult+0x40>
 80065f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065fc:	4b1c      	ldr	r3, [pc, #112]	; (8006670 <__pow5mult+0xac>)
 80065fe:	481d      	ldr	r0, [pc, #116]	; (8006674 <__pow5mult+0xb0>)
 8006600:	f000 faae 	bl	8006b60 <__assert_func>
 8006604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006608:	6004      	str	r4, [r0, #0]
 800660a:	60c4      	str	r4, [r0, #12]
 800660c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006614:	b94c      	cbnz	r4, 800662a <__pow5mult+0x66>
 8006616:	f240 2171 	movw	r1, #625	; 0x271
 800661a:	4630      	mov	r0, r6
 800661c:	f7ff ff14 	bl	8006448 <__i2b>
 8006620:	2300      	movs	r3, #0
 8006622:	4604      	mov	r4, r0
 8006624:	f8c8 0008 	str.w	r0, [r8, #8]
 8006628:	6003      	str	r3, [r0, #0]
 800662a:	f04f 0900 	mov.w	r9, #0
 800662e:	07eb      	lsls	r3, r5, #31
 8006630:	d50a      	bpl.n	8006648 <__pow5mult+0x84>
 8006632:	4639      	mov	r1, r7
 8006634:	4622      	mov	r2, r4
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ff1c 	bl	8006474 <__multiply>
 800663c:	4680      	mov	r8, r0
 800663e:	4639      	mov	r1, r7
 8006640:	4630      	mov	r0, r6
 8006642:	f7ff fe4b 	bl	80062dc <_Bfree>
 8006646:	4647      	mov	r7, r8
 8006648:	106d      	asrs	r5, r5, #1
 800664a:	d00b      	beq.n	8006664 <__pow5mult+0xa0>
 800664c:	6820      	ldr	r0, [r4, #0]
 800664e:	b938      	cbnz	r0, 8006660 <__pow5mult+0x9c>
 8006650:	4622      	mov	r2, r4
 8006652:	4621      	mov	r1, r4
 8006654:	4630      	mov	r0, r6
 8006656:	f7ff ff0d 	bl	8006474 <__multiply>
 800665a:	6020      	str	r0, [r4, #0]
 800665c:	f8c0 9000 	str.w	r9, [r0]
 8006660:	4604      	mov	r4, r0
 8006662:	e7e4      	b.n	800662e <__pow5mult+0x6a>
 8006664:	4638      	mov	r0, r7
 8006666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800666a:	bf00      	nop
 800666c:	080078c8 	.word	0x080078c8
 8006670:	080076f9 	.word	0x080076f9
 8006674:	0800777c 	.word	0x0800777c

08006678 <__lshift>:
 8006678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	4607      	mov	r7, r0
 8006680:	4691      	mov	r9, r2
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	6849      	ldr	r1, [r1, #4]
 8006686:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800668a:	68a3      	ldr	r3, [r4, #8]
 800668c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006690:	f108 0601 	add.w	r6, r8, #1
 8006694:	42b3      	cmp	r3, r6
 8006696:	db0b      	blt.n	80066b0 <__lshift+0x38>
 8006698:	4638      	mov	r0, r7
 800669a:	f7ff fddf 	bl	800625c <_Balloc>
 800669e:	4605      	mov	r5, r0
 80066a0:	b948      	cbnz	r0, 80066b6 <__lshift+0x3e>
 80066a2:	4602      	mov	r2, r0
 80066a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066a8:	4b29      	ldr	r3, [pc, #164]	; (8006750 <__lshift+0xd8>)
 80066aa:	482a      	ldr	r0, [pc, #168]	; (8006754 <__lshift+0xdc>)
 80066ac:	f000 fa58 	bl	8006b60 <__assert_func>
 80066b0:	3101      	adds	r1, #1
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	e7ee      	b.n	8006694 <__lshift+0x1c>
 80066b6:	2300      	movs	r3, #0
 80066b8:	f100 0114 	add.w	r1, r0, #20
 80066bc:	f100 0210 	add.w	r2, r0, #16
 80066c0:	4618      	mov	r0, r3
 80066c2:	4553      	cmp	r3, sl
 80066c4:	db37      	blt.n	8006736 <__lshift+0xbe>
 80066c6:	6920      	ldr	r0, [r4, #16]
 80066c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066cc:	f104 0314 	add.w	r3, r4, #20
 80066d0:	f019 091f 	ands.w	r9, r9, #31
 80066d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066dc:	d02f      	beq.n	800673e <__lshift+0xc6>
 80066de:	468a      	mov	sl, r1
 80066e0:	f04f 0c00 	mov.w	ip, #0
 80066e4:	f1c9 0e20 	rsb	lr, r9, #32
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	fa02 f209 	lsl.w	r2, r2, r9
 80066ee:	ea42 020c 	orr.w	r2, r2, ip
 80066f2:	f84a 2b04 	str.w	r2, [sl], #4
 80066f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80066fa:	4298      	cmp	r0, r3
 80066fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006700:	d8f2      	bhi.n	80066e8 <__lshift+0x70>
 8006702:	1b03      	subs	r3, r0, r4
 8006704:	3b15      	subs	r3, #21
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	3304      	adds	r3, #4
 800670c:	f104 0215 	add.w	r2, r4, #21
 8006710:	4290      	cmp	r0, r2
 8006712:	bf38      	it	cc
 8006714:	2304      	movcc	r3, #4
 8006716:	f841 c003 	str.w	ip, [r1, r3]
 800671a:	f1bc 0f00 	cmp.w	ip, #0
 800671e:	d001      	beq.n	8006724 <__lshift+0xac>
 8006720:	f108 0602 	add.w	r6, r8, #2
 8006724:	3e01      	subs	r6, #1
 8006726:	4638      	mov	r0, r7
 8006728:	4621      	mov	r1, r4
 800672a:	612e      	str	r6, [r5, #16]
 800672c:	f7ff fdd6 	bl	80062dc <_Bfree>
 8006730:	4628      	mov	r0, r5
 8006732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006736:	f842 0f04 	str.w	r0, [r2, #4]!
 800673a:	3301      	adds	r3, #1
 800673c:	e7c1      	b.n	80066c2 <__lshift+0x4a>
 800673e:	3904      	subs	r1, #4
 8006740:	f853 2b04 	ldr.w	r2, [r3], #4
 8006744:	4298      	cmp	r0, r3
 8006746:	f841 2f04 	str.w	r2, [r1, #4]!
 800674a:	d8f9      	bhi.n	8006740 <__lshift+0xc8>
 800674c:	e7ea      	b.n	8006724 <__lshift+0xac>
 800674e:	bf00      	nop
 8006750:	0800776b 	.word	0x0800776b
 8006754:	0800777c 	.word	0x0800777c

08006758 <__mcmp>:
 8006758:	4603      	mov	r3, r0
 800675a:	690a      	ldr	r2, [r1, #16]
 800675c:	6900      	ldr	r0, [r0, #16]
 800675e:	b530      	push	{r4, r5, lr}
 8006760:	1a80      	subs	r0, r0, r2
 8006762:	d10d      	bne.n	8006780 <__mcmp+0x28>
 8006764:	3314      	adds	r3, #20
 8006766:	3114      	adds	r1, #20
 8006768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800676c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006778:	4295      	cmp	r5, r2
 800677a:	d002      	beq.n	8006782 <__mcmp+0x2a>
 800677c:	d304      	bcc.n	8006788 <__mcmp+0x30>
 800677e:	2001      	movs	r0, #1
 8006780:	bd30      	pop	{r4, r5, pc}
 8006782:	42a3      	cmp	r3, r4
 8006784:	d3f4      	bcc.n	8006770 <__mcmp+0x18>
 8006786:	e7fb      	b.n	8006780 <__mcmp+0x28>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800678c:	e7f8      	b.n	8006780 <__mcmp+0x28>
	...

08006790 <__mdiff>:
 8006790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	460d      	mov	r5, r1
 8006796:	4607      	mov	r7, r0
 8006798:	4611      	mov	r1, r2
 800679a:	4628      	mov	r0, r5
 800679c:	4614      	mov	r4, r2
 800679e:	f7ff ffdb 	bl	8006758 <__mcmp>
 80067a2:	1e06      	subs	r6, r0, #0
 80067a4:	d111      	bne.n	80067ca <__mdiff+0x3a>
 80067a6:	4631      	mov	r1, r6
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff fd57 	bl	800625c <_Balloc>
 80067ae:	4602      	mov	r2, r0
 80067b0:	b928      	cbnz	r0, 80067be <__mdiff+0x2e>
 80067b2:	f240 2132 	movw	r1, #562	; 0x232
 80067b6:	4b3a      	ldr	r3, [pc, #232]	; (80068a0 <__mdiff+0x110>)
 80067b8:	483a      	ldr	r0, [pc, #232]	; (80068a4 <__mdiff+0x114>)
 80067ba:	f000 f9d1 	bl	8006b60 <__assert_func>
 80067be:	2301      	movs	r3, #1
 80067c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067c4:	4610      	mov	r0, r2
 80067c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	bfa4      	itt	ge
 80067cc:	4623      	movge	r3, r4
 80067ce:	462c      	movge	r4, r5
 80067d0:	4638      	mov	r0, r7
 80067d2:	6861      	ldr	r1, [r4, #4]
 80067d4:	bfa6      	itte	ge
 80067d6:	461d      	movge	r5, r3
 80067d8:	2600      	movge	r6, #0
 80067da:	2601      	movlt	r6, #1
 80067dc:	f7ff fd3e 	bl	800625c <_Balloc>
 80067e0:	4602      	mov	r2, r0
 80067e2:	b918      	cbnz	r0, 80067ec <__mdiff+0x5c>
 80067e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067e8:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <__mdiff+0x110>)
 80067ea:	e7e5      	b.n	80067b8 <__mdiff+0x28>
 80067ec:	f102 0814 	add.w	r8, r2, #20
 80067f0:	46c2      	mov	sl, r8
 80067f2:	f04f 0c00 	mov.w	ip, #0
 80067f6:	6927      	ldr	r7, [r4, #16]
 80067f8:	60c6      	str	r6, [r0, #12]
 80067fa:	692e      	ldr	r6, [r5, #16]
 80067fc:	f104 0014 	add.w	r0, r4, #20
 8006800:	f105 0914 	add.w	r9, r5, #20
 8006804:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006808:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800680c:	3410      	adds	r4, #16
 800680e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006812:	f859 3b04 	ldr.w	r3, [r9], #4
 8006816:	fa1f f18b 	uxth.w	r1, fp
 800681a:	448c      	add	ip, r1
 800681c:	b299      	uxth	r1, r3
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	ebac 0101 	sub.w	r1, ip, r1
 8006824:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006828:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800682c:	b289      	uxth	r1, r1
 800682e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006832:	454e      	cmp	r6, r9
 8006834:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006838:	f84a 3b04 	str.w	r3, [sl], #4
 800683c:	d8e7      	bhi.n	800680e <__mdiff+0x7e>
 800683e:	1b73      	subs	r3, r6, r5
 8006840:	3b15      	subs	r3, #21
 8006842:	f023 0303 	bic.w	r3, r3, #3
 8006846:	3515      	adds	r5, #21
 8006848:	3304      	adds	r3, #4
 800684a:	42ae      	cmp	r6, r5
 800684c:	bf38      	it	cc
 800684e:	2304      	movcc	r3, #4
 8006850:	4418      	add	r0, r3
 8006852:	4443      	add	r3, r8
 8006854:	461e      	mov	r6, r3
 8006856:	4605      	mov	r5, r0
 8006858:	4575      	cmp	r5, lr
 800685a:	d30e      	bcc.n	800687a <__mdiff+0xea>
 800685c:	f10e 0103 	add.w	r1, lr, #3
 8006860:	1a09      	subs	r1, r1, r0
 8006862:	f021 0103 	bic.w	r1, r1, #3
 8006866:	3803      	subs	r0, #3
 8006868:	4586      	cmp	lr, r0
 800686a:	bf38      	it	cc
 800686c:	2100      	movcc	r1, #0
 800686e:	4419      	add	r1, r3
 8006870:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006874:	b18b      	cbz	r3, 800689a <__mdiff+0x10a>
 8006876:	6117      	str	r7, [r2, #16]
 8006878:	e7a4      	b.n	80067c4 <__mdiff+0x34>
 800687a:	f855 8b04 	ldr.w	r8, [r5], #4
 800687e:	fa1f f188 	uxth.w	r1, r8
 8006882:	4461      	add	r1, ip
 8006884:	140c      	asrs	r4, r1, #16
 8006886:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800688a:	b289      	uxth	r1, r1
 800688c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006890:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006894:	f846 1b04 	str.w	r1, [r6], #4
 8006898:	e7de      	b.n	8006858 <__mdiff+0xc8>
 800689a:	3f01      	subs	r7, #1
 800689c:	e7e8      	b.n	8006870 <__mdiff+0xe0>
 800689e:	bf00      	nop
 80068a0:	0800776b 	.word	0x0800776b
 80068a4:	0800777c 	.word	0x0800777c

080068a8 <__d2b>:
 80068a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068ac:	2101      	movs	r1, #1
 80068ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80068b2:	4690      	mov	r8, r2
 80068b4:	461d      	mov	r5, r3
 80068b6:	f7ff fcd1 	bl	800625c <_Balloc>
 80068ba:	4604      	mov	r4, r0
 80068bc:	b930      	cbnz	r0, 80068cc <__d2b+0x24>
 80068be:	4602      	mov	r2, r0
 80068c0:	f240 310a 	movw	r1, #778	; 0x30a
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <__d2b+0xb0>)
 80068c6:	4825      	ldr	r0, [pc, #148]	; (800695c <__d2b+0xb4>)
 80068c8:	f000 f94a 	bl	8006b60 <__assert_func>
 80068cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068d4:	bb2d      	cbnz	r5, 8006922 <__d2b+0x7a>
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	f1b8 0300 	subs.w	r3, r8, #0
 80068dc:	d026      	beq.n	800692c <__d2b+0x84>
 80068de:	4668      	mov	r0, sp
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	f7ff fd83 	bl	80063ec <__lo0bits>
 80068e6:	9900      	ldr	r1, [sp, #0]
 80068e8:	b1f0      	cbz	r0, 8006928 <__d2b+0x80>
 80068ea:	9a01      	ldr	r2, [sp, #4]
 80068ec:	f1c0 0320 	rsb	r3, r0, #32
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	430b      	orrs	r3, r1
 80068f6:	40c2      	lsrs	r2, r0
 80068f8:	6163      	str	r3, [r4, #20]
 80068fa:	9201      	str	r2, [sp, #4]
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bf14      	ite	ne
 8006902:	2102      	movne	r1, #2
 8006904:	2101      	moveq	r1, #1
 8006906:	61a3      	str	r3, [r4, #24]
 8006908:	6121      	str	r1, [r4, #16]
 800690a:	b1c5      	cbz	r5, 800693e <__d2b+0x96>
 800690c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006910:	4405      	add	r5, r0
 8006912:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006916:	603d      	str	r5, [r7, #0]
 8006918:	6030      	str	r0, [r6, #0]
 800691a:	4620      	mov	r0, r4
 800691c:	b002      	add	sp, #8
 800691e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006926:	e7d6      	b.n	80068d6 <__d2b+0x2e>
 8006928:	6161      	str	r1, [r4, #20]
 800692a:	e7e7      	b.n	80068fc <__d2b+0x54>
 800692c:	a801      	add	r0, sp, #4
 800692e:	f7ff fd5d 	bl	80063ec <__lo0bits>
 8006932:	2101      	movs	r1, #1
 8006934:	9b01      	ldr	r3, [sp, #4]
 8006936:	6121      	str	r1, [r4, #16]
 8006938:	6163      	str	r3, [r4, #20]
 800693a:	3020      	adds	r0, #32
 800693c:	e7e5      	b.n	800690a <__d2b+0x62>
 800693e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006942:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006946:	6038      	str	r0, [r7, #0]
 8006948:	6918      	ldr	r0, [r3, #16]
 800694a:	f7ff fd2f 	bl	80063ac <__hi0bits>
 800694e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006952:	6031      	str	r1, [r6, #0]
 8006954:	e7e1      	b.n	800691a <__d2b+0x72>
 8006956:	bf00      	nop
 8006958:	0800776b 	.word	0x0800776b
 800695c:	0800777c 	.word	0x0800777c

08006960 <_calloc_r>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	fba1 5402 	umull	r5, r4, r1, r2
 8006966:	b934      	cbnz	r4, 8006976 <_calloc_r+0x16>
 8006968:	4629      	mov	r1, r5
 800696a:	f000 f875 	bl	8006a58 <_malloc_r>
 800696e:	4606      	mov	r6, r0
 8006970:	b928      	cbnz	r0, 800697e <_calloc_r+0x1e>
 8006972:	4630      	mov	r0, r6
 8006974:	bd70      	pop	{r4, r5, r6, pc}
 8006976:	220c      	movs	r2, #12
 8006978:	2600      	movs	r6, #0
 800697a:	6002      	str	r2, [r0, #0]
 800697c:	e7f9      	b.n	8006972 <_calloc_r+0x12>
 800697e:	462a      	mov	r2, r5
 8006980:	4621      	mov	r1, r4
 8006982:	f7fe f95f 	bl	8004c44 <memset>
 8006986:	e7f4      	b.n	8006972 <_calloc_r+0x12>

08006988 <_free_r>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	4605      	mov	r5, r0
 800698c:	2900      	cmp	r1, #0
 800698e:	d040      	beq.n	8006a12 <_free_r+0x8a>
 8006990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006994:	1f0c      	subs	r4, r1, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	bfb8      	it	lt
 800699a:	18e4      	addlt	r4, r4, r3
 800699c:	f000 f922 	bl	8006be4 <__malloc_lock>
 80069a0:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <_free_r+0x8c>)
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	b933      	cbnz	r3, 80069b4 <_free_r+0x2c>
 80069a6:	6063      	str	r3, [r4, #4]
 80069a8:	6014      	str	r4, [r2, #0]
 80069aa:	4628      	mov	r0, r5
 80069ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b0:	f000 b91e 	b.w	8006bf0 <__malloc_unlock>
 80069b4:	42a3      	cmp	r3, r4
 80069b6:	d908      	bls.n	80069ca <_free_r+0x42>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	1821      	adds	r1, r4, r0
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1809      	addeq	r1, r1, r0
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	e7ed      	b.n	80069a6 <_free_r+0x1e>
 80069ca:	461a      	mov	r2, r3
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	b10b      	cbz	r3, 80069d4 <_free_r+0x4c>
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d9fa      	bls.n	80069ca <_free_r+0x42>
 80069d4:	6811      	ldr	r1, [r2, #0]
 80069d6:	1850      	adds	r0, r2, r1
 80069d8:	42a0      	cmp	r0, r4
 80069da:	d10b      	bne.n	80069f4 <_free_r+0x6c>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	4401      	add	r1, r0
 80069e0:	1850      	adds	r0, r2, r1
 80069e2:	4283      	cmp	r3, r0
 80069e4:	6011      	str	r1, [r2, #0]
 80069e6:	d1e0      	bne.n	80069aa <_free_r+0x22>
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4401      	add	r1, r0
 80069ee:	6011      	str	r1, [r2, #0]
 80069f0:	6053      	str	r3, [r2, #4]
 80069f2:	e7da      	b.n	80069aa <_free_r+0x22>
 80069f4:	d902      	bls.n	80069fc <_free_r+0x74>
 80069f6:	230c      	movs	r3, #12
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	e7d6      	b.n	80069aa <_free_r+0x22>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	1821      	adds	r1, r4, r0
 8006a00:	428b      	cmp	r3, r1
 8006a02:	bf01      	itttt	eq
 8006a04:	6819      	ldreq	r1, [r3, #0]
 8006a06:	685b      	ldreq	r3, [r3, #4]
 8006a08:	1809      	addeq	r1, r1, r0
 8006a0a:	6021      	streq	r1, [r4, #0]
 8006a0c:	6063      	str	r3, [r4, #4]
 8006a0e:	6054      	str	r4, [r2, #4]
 8006a10:	e7cb      	b.n	80069aa <_free_r+0x22>
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	20000390 	.word	0x20000390

08006a18 <sbrk_aligned>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	4e0e      	ldr	r6, [pc, #56]	; (8006a54 <sbrk_aligned+0x3c>)
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	6831      	ldr	r1, [r6, #0]
 8006a20:	4605      	mov	r5, r0
 8006a22:	b911      	cbnz	r1, 8006a2a <sbrk_aligned+0x12>
 8006a24:	f000 f88c 	bl	8006b40 <_sbrk_r>
 8006a28:	6030      	str	r0, [r6, #0]
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	f000 f887 	bl	8006b40 <_sbrk_r>
 8006a32:	1c43      	adds	r3, r0, #1
 8006a34:	d00a      	beq.n	8006a4c <sbrk_aligned+0x34>
 8006a36:	1cc4      	adds	r4, r0, #3
 8006a38:	f024 0403 	bic.w	r4, r4, #3
 8006a3c:	42a0      	cmp	r0, r4
 8006a3e:	d007      	beq.n	8006a50 <sbrk_aligned+0x38>
 8006a40:	1a21      	subs	r1, r4, r0
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 f87c 	bl	8006b40 <_sbrk_r>
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d101      	bne.n	8006a50 <sbrk_aligned+0x38>
 8006a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a50:	4620      	mov	r0, r4
 8006a52:	bd70      	pop	{r4, r5, r6, pc}
 8006a54:	20000394 	.word	0x20000394

08006a58 <_malloc_r>:
 8006a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a5c:	1ccd      	adds	r5, r1, #3
 8006a5e:	f025 0503 	bic.w	r5, r5, #3
 8006a62:	3508      	adds	r5, #8
 8006a64:	2d0c      	cmp	r5, #12
 8006a66:	bf38      	it	cc
 8006a68:	250c      	movcc	r5, #12
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	db01      	blt.n	8006a74 <_malloc_r+0x1c>
 8006a70:	42a9      	cmp	r1, r5
 8006a72:	d905      	bls.n	8006a80 <_malloc_r+0x28>
 8006a74:	230c      	movs	r3, #12
 8006a76:	2600      	movs	r6, #0
 8006a78:	603b      	str	r3, [r7, #0]
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a80:	4e2e      	ldr	r6, [pc, #184]	; (8006b3c <_malloc_r+0xe4>)
 8006a82:	f000 f8af 	bl	8006be4 <__malloc_lock>
 8006a86:	6833      	ldr	r3, [r6, #0]
 8006a88:	461c      	mov	r4, r3
 8006a8a:	bb34      	cbnz	r4, 8006ada <_malloc_r+0x82>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f7ff ffc2 	bl	8006a18 <sbrk_aligned>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	4604      	mov	r4, r0
 8006a98:	d14d      	bne.n	8006b36 <_malloc_r+0xde>
 8006a9a:	6834      	ldr	r4, [r6, #0]
 8006a9c:	4626      	mov	r6, r4
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	d140      	bne.n	8006b24 <_malloc_r+0xcc>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	eb04 0803 	add.w	r8, r4, r3
 8006aac:	f000 f848 	bl	8006b40 <_sbrk_r>
 8006ab0:	4580      	cmp	r8, r0
 8006ab2:	d13a      	bne.n	8006b2a <_malloc_r+0xd2>
 8006ab4:	6821      	ldr	r1, [r4, #0]
 8006ab6:	3503      	adds	r5, #3
 8006ab8:	1a6d      	subs	r5, r5, r1
 8006aba:	f025 0503 	bic.w	r5, r5, #3
 8006abe:	3508      	adds	r5, #8
 8006ac0:	2d0c      	cmp	r5, #12
 8006ac2:	bf38      	it	cc
 8006ac4:	250c      	movcc	r5, #12
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7ff ffa5 	bl	8006a18 <sbrk_aligned>
 8006ace:	3001      	adds	r0, #1
 8006ad0:	d02b      	beq.n	8006b2a <_malloc_r+0xd2>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	442b      	add	r3, r5
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	e00e      	b.n	8006af8 <_malloc_r+0xa0>
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	1b52      	subs	r2, r2, r5
 8006ade:	d41e      	bmi.n	8006b1e <_malloc_r+0xc6>
 8006ae0:	2a0b      	cmp	r2, #11
 8006ae2:	d916      	bls.n	8006b12 <_malloc_r+0xba>
 8006ae4:	1961      	adds	r1, r4, r5
 8006ae6:	42a3      	cmp	r3, r4
 8006ae8:	6025      	str	r5, [r4, #0]
 8006aea:	bf18      	it	ne
 8006aec:	6059      	strne	r1, [r3, #4]
 8006aee:	6863      	ldr	r3, [r4, #4]
 8006af0:	bf08      	it	eq
 8006af2:	6031      	streq	r1, [r6, #0]
 8006af4:	5162      	str	r2, [r4, r5]
 8006af6:	604b      	str	r3, [r1, #4]
 8006af8:	4638      	mov	r0, r7
 8006afa:	f104 060b 	add.w	r6, r4, #11
 8006afe:	f000 f877 	bl	8006bf0 <__malloc_unlock>
 8006b02:	f026 0607 	bic.w	r6, r6, #7
 8006b06:	1d23      	adds	r3, r4, #4
 8006b08:	1af2      	subs	r2, r6, r3
 8006b0a:	d0b6      	beq.n	8006a7a <_malloc_r+0x22>
 8006b0c:	1b9b      	subs	r3, r3, r6
 8006b0e:	50a3      	str	r3, [r4, r2]
 8006b10:	e7b3      	b.n	8006a7a <_malloc_r+0x22>
 8006b12:	6862      	ldr	r2, [r4, #4]
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	bf0c      	ite	eq
 8006b18:	6032      	streq	r2, [r6, #0]
 8006b1a:	605a      	strne	r2, [r3, #4]
 8006b1c:	e7ec      	b.n	8006af8 <_malloc_r+0xa0>
 8006b1e:	4623      	mov	r3, r4
 8006b20:	6864      	ldr	r4, [r4, #4]
 8006b22:	e7b2      	b.n	8006a8a <_malloc_r+0x32>
 8006b24:	4634      	mov	r4, r6
 8006b26:	6876      	ldr	r6, [r6, #4]
 8006b28:	e7b9      	b.n	8006a9e <_malloc_r+0x46>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	f000 f85e 	bl	8006bf0 <__malloc_unlock>
 8006b34:	e7a1      	b.n	8006a7a <_malloc_r+0x22>
 8006b36:	6025      	str	r5, [r4, #0]
 8006b38:	e7de      	b.n	8006af8 <_malloc_r+0xa0>
 8006b3a:	bf00      	nop
 8006b3c:	20000390 	.word	0x20000390

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	2300      	movs	r3, #0
 8006b44:	4d05      	ldr	r5, [pc, #20]	; (8006b5c <_sbrk_r+0x1c>)
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	602b      	str	r3, [r5, #0]
 8006b4c:	f7fa fe10 	bl	8001770 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	682b      	ldr	r3, [r5, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000398 	.word	0x20000398

08006b60 <__assert_func>:
 8006b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b62:	4614      	mov	r4, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <__assert_func+0x2c>)
 8006b68:	4605      	mov	r5, r0
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68d8      	ldr	r0, [r3, #12]
 8006b6e:	b14c      	cbz	r4, 8006b84 <__assert_func+0x24>
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <__assert_func+0x30>)
 8006b72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b76:	9100      	str	r1, [sp, #0]
 8006b78:	462b      	mov	r3, r5
 8006b7a:	4906      	ldr	r1, [pc, #24]	; (8006b94 <__assert_func+0x34>)
 8006b7c:	f000 f80e 	bl	8006b9c <fiprintf>
 8006b80:	f000 fa62 	bl	8007048 <abort>
 8006b84:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <__assert_func+0x38>)
 8006b86:	461c      	mov	r4, r3
 8006b88:	e7f3      	b.n	8006b72 <__assert_func+0x12>
 8006b8a:	bf00      	nop
 8006b8c:	20000010 	.word	0x20000010
 8006b90:	080078d4 	.word	0x080078d4
 8006b94:	080078e1 	.word	0x080078e1
 8006b98:	0800790f 	.word	0x0800790f

08006b9c <fiprintf>:
 8006b9c:	b40e      	push	{r1, r2, r3}
 8006b9e:	b503      	push	{r0, r1, lr}
 8006ba0:	4601      	mov	r1, r0
 8006ba2:	ab03      	add	r3, sp, #12
 8006ba4:	4805      	ldr	r0, [pc, #20]	; (8006bbc <fiprintf+0x20>)
 8006ba6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	f000 f84d 	bl	8006c4c <_vfiprintf_r>
 8006bb2:	b002      	add	sp, #8
 8006bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb8:	b003      	add	sp, #12
 8006bba:	4770      	bx	lr
 8006bbc:	20000010 	.word	0x20000010

08006bc0 <__ascii_mbtowc>:
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	b901      	cbnz	r1, 8006bc6 <__ascii_mbtowc+0x6>
 8006bc4:	a901      	add	r1, sp, #4
 8006bc6:	b142      	cbz	r2, 8006bda <__ascii_mbtowc+0x1a>
 8006bc8:	b14b      	cbz	r3, 8006bde <__ascii_mbtowc+0x1e>
 8006bca:	7813      	ldrb	r3, [r2, #0]
 8006bcc:	600b      	str	r3, [r1, #0]
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	1e10      	subs	r0, r2, #0
 8006bd2:	bf18      	it	ne
 8006bd4:	2001      	movne	r0, #1
 8006bd6:	b002      	add	sp, #8
 8006bd8:	4770      	bx	lr
 8006bda:	4610      	mov	r0, r2
 8006bdc:	e7fb      	b.n	8006bd6 <__ascii_mbtowc+0x16>
 8006bde:	f06f 0001 	mvn.w	r0, #1
 8006be2:	e7f8      	b.n	8006bd6 <__ascii_mbtowc+0x16>

08006be4 <__malloc_lock>:
 8006be4:	4801      	ldr	r0, [pc, #4]	; (8006bec <__malloc_lock+0x8>)
 8006be6:	f000 bbeb 	b.w	80073c0 <__retarget_lock_acquire_recursive>
 8006bea:	bf00      	nop
 8006bec:	2000039c 	.word	0x2000039c

08006bf0 <__malloc_unlock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	; (8006bf8 <__malloc_unlock+0x8>)
 8006bf2:	f000 bbe6 	b.w	80073c2 <__retarget_lock_release_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	2000039c 	.word	0x2000039c

08006bfc <__sfputc_r>:
 8006bfc:	6893      	ldr	r3, [r2, #8]
 8006bfe:	b410      	push	{r4}
 8006c00:	3b01      	subs	r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	6093      	str	r3, [r2, #8]
 8006c06:	da07      	bge.n	8006c18 <__sfputc_r+0x1c>
 8006c08:	6994      	ldr	r4, [r2, #24]
 8006c0a:	42a3      	cmp	r3, r4
 8006c0c:	db01      	blt.n	8006c12 <__sfputc_r+0x16>
 8006c0e:	290a      	cmp	r1, #10
 8006c10:	d102      	bne.n	8006c18 <__sfputc_r+0x1c>
 8006c12:	bc10      	pop	{r4}
 8006c14:	f000 b94a 	b.w	8006eac <__swbuf_r>
 8006c18:	6813      	ldr	r3, [r2, #0]
 8006c1a:	1c58      	adds	r0, r3, #1
 8006c1c:	6010      	str	r0, [r2, #0]
 8006c1e:	7019      	strb	r1, [r3, #0]
 8006c20:	4608      	mov	r0, r1
 8006c22:	bc10      	pop	{r4}
 8006c24:	4770      	bx	lr

08006c26 <__sfputs_r>:
 8006c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c28:	4606      	mov	r6, r0
 8006c2a:	460f      	mov	r7, r1
 8006c2c:	4614      	mov	r4, r2
 8006c2e:	18d5      	adds	r5, r2, r3
 8006c30:	42ac      	cmp	r4, r5
 8006c32:	d101      	bne.n	8006c38 <__sfputs_r+0x12>
 8006c34:	2000      	movs	r0, #0
 8006c36:	e007      	b.n	8006c48 <__sfputs_r+0x22>
 8006c38:	463a      	mov	r2, r7
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c40:	f7ff ffdc 	bl	8006bfc <__sfputc_r>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d1f3      	bne.n	8006c30 <__sfputs_r+0xa>
 8006c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c4c <_vfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	460d      	mov	r5, r1
 8006c52:	4614      	mov	r4, r2
 8006c54:	4698      	mov	r8, r3
 8006c56:	4606      	mov	r6, r0
 8006c58:	b09d      	sub	sp, #116	; 0x74
 8006c5a:	b118      	cbz	r0, 8006c64 <_vfiprintf_r+0x18>
 8006c5c:	6983      	ldr	r3, [r0, #24]
 8006c5e:	b90b      	cbnz	r3, 8006c64 <_vfiprintf_r+0x18>
 8006c60:	f000 fb10 	bl	8007284 <__sinit>
 8006c64:	4b89      	ldr	r3, [pc, #548]	; (8006e8c <_vfiprintf_r+0x240>)
 8006c66:	429d      	cmp	r5, r3
 8006c68:	d11b      	bne.n	8006ca2 <_vfiprintf_r+0x56>
 8006c6a:	6875      	ldr	r5, [r6, #4]
 8006c6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c6e:	07d9      	lsls	r1, r3, #31
 8006c70:	d405      	bmi.n	8006c7e <_vfiprintf_r+0x32>
 8006c72:	89ab      	ldrh	r3, [r5, #12]
 8006c74:	059a      	lsls	r2, r3, #22
 8006c76:	d402      	bmi.n	8006c7e <_vfiprintf_r+0x32>
 8006c78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c7a:	f000 fba1 	bl	80073c0 <__retarget_lock_acquire_recursive>
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	071b      	lsls	r3, r3, #28
 8006c82:	d501      	bpl.n	8006c88 <_vfiprintf_r+0x3c>
 8006c84:	692b      	ldr	r3, [r5, #16]
 8006c86:	b9eb      	cbnz	r3, 8006cc4 <_vfiprintf_r+0x78>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	f000 f96e 	bl	8006f6c <__swsetup_r>
 8006c90:	b1c0      	cbz	r0, 8006cc4 <_vfiprintf_r+0x78>
 8006c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c94:	07dc      	lsls	r4, r3, #31
 8006c96:	d50e      	bpl.n	8006cb6 <_vfiprintf_r+0x6a>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c9c:	b01d      	add	sp, #116	; 0x74
 8006c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca2:	4b7b      	ldr	r3, [pc, #492]	; (8006e90 <_vfiprintf_r+0x244>)
 8006ca4:	429d      	cmp	r5, r3
 8006ca6:	d101      	bne.n	8006cac <_vfiprintf_r+0x60>
 8006ca8:	68b5      	ldr	r5, [r6, #8]
 8006caa:	e7df      	b.n	8006c6c <_vfiprintf_r+0x20>
 8006cac:	4b79      	ldr	r3, [pc, #484]	; (8006e94 <_vfiprintf_r+0x248>)
 8006cae:	429d      	cmp	r5, r3
 8006cb0:	bf08      	it	eq
 8006cb2:	68f5      	ldreq	r5, [r6, #12]
 8006cb4:	e7da      	b.n	8006c6c <_vfiprintf_r+0x20>
 8006cb6:	89ab      	ldrh	r3, [r5, #12]
 8006cb8:	0598      	lsls	r0, r3, #22
 8006cba:	d4ed      	bmi.n	8006c98 <_vfiprintf_r+0x4c>
 8006cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cbe:	f000 fb80 	bl	80073c2 <__retarget_lock_release_recursive>
 8006cc2:	e7e9      	b.n	8006c98 <_vfiprintf_r+0x4c>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc8:	2320      	movs	r3, #32
 8006cca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cce:	2330      	movs	r3, #48	; 0x30
 8006cd0:	f04f 0901 	mov.w	r9, #1
 8006cd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cd8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e98 <_vfiprintf_r+0x24c>
 8006cdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ce0:	4623      	mov	r3, r4
 8006ce2:	469a      	mov	sl, r3
 8006ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ce8:	b10a      	cbz	r2, 8006cee <_vfiprintf_r+0xa2>
 8006cea:	2a25      	cmp	r2, #37	; 0x25
 8006cec:	d1f9      	bne.n	8006ce2 <_vfiprintf_r+0x96>
 8006cee:	ebba 0b04 	subs.w	fp, sl, r4
 8006cf2:	d00b      	beq.n	8006d0c <_vfiprintf_r+0xc0>
 8006cf4:	465b      	mov	r3, fp
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7ff ff93 	bl	8006c26 <__sfputs_r>
 8006d00:	3001      	adds	r0, #1
 8006d02:	f000 80aa 	beq.w	8006e5a <_vfiprintf_r+0x20e>
 8006d06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d08:	445a      	add	r2, fp
 8006d0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80a2 	beq.w	8006e5a <_vfiprintf_r+0x20e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d20:	f10a 0a01 	add.w	sl, sl, #1
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	9307      	str	r3, [sp, #28]
 8006d28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d2c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d2e:	4654      	mov	r4, sl
 8006d30:	2205      	movs	r2, #5
 8006d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d36:	4858      	ldr	r0, [pc, #352]	; (8006e98 <_vfiprintf_r+0x24c>)
 8006d38:	f7ff fa74 	bl	8006224 <memchr>
 8006d3c:	9a04      	ldr	r2, [sp, #16]
 8006d3e:	b9d8      	cbnz	r0, 8006d78 <_vfiprintf_r+0x12c>
 8006d40:	06d1      	lsls	r1, r2, #27
 8006d42:	bf44      	itt	mi
 8006d44:	2320      	movmi	r3, #32
 8006d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d4a:	0713      	lsls	r3, r2, #28
 8006d4c:	bf44      	itt	mi
 8006d4e:	232b      	movmi	r3, #43	; 0x2b
 8006d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d54:	f89a 3000 	ldrb.w	r3, [sl]
 8006d58:	2b2a      	cmp	r3, #42	; 0x2a
 8006d5a:	d015      	beq.n	8006d88 <_vfiprintf_r+0x13c>
 8006d5c:	4654      	mov	r4, sl
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f04f 0c0a 	mov.w	ip, #10
 8006d64:	9a07      	ldr	r2, [sp, #28]
 8006d66:	4621      	mov	r1, r4
 8006d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d6c:	3b30      	subs	r3, #48	; 0x30
 8006d6e:	2b09      	cmp	r3, #9
 8006d70:	d94e      	bls.n	8006e10 <_vfiprintf_r+0x1c4>
 8006d72:	b1b0      	cbz	r0, 8006da2 <_vfiprintf_r+0x156>
 8006d74:	9207      	str	r2, [sp, #28]
 8006d76:	e014      	b.n	8006da2 <_vfiprintf_r+0x156>
 8006d78:	eba0 0308 	sub.w	r3, r0, r8
 8006d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8006d80:	4313      	orrs	r3, r2
 8006d82:	46a2      	mov	sl, r4
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	e7d2      	b.n	8006d2e <_vfiprintf_r+0xe2>
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	1d19      	adds	r1, r3, #4
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	9103      	str	r1, [sp, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfbb      	ittet	lt
 8006d94:	425b      	neglt	r3, r3
 8006d96:	f042 0202 	orrlt.w	r2, r2, #2
 8006d9a:	9307      	strge	r3, [sp, #28]
 8006d9c:	9307      	strlt	r3, [sp, #28]
 8006d9e:	bfb8      	it	lt
 8006da0:	9204      	strlt	r2, [sp, #16]
 8006da2:	7823      	ldrb	r3, [r4, #0]
 8006da4:	2b2e      	cmp	r3, #46	; 0x2e
 8006da6:	d10c      	bne.n	8006dc2 <_vfiprintf_r+0x176>
 8006da8:	7863      	ldrb	r3, [r4, #1]
 8006daa:	2b2a      	cmp	r3, #42	; 0x2a
 8006dac:	d135      	bne.n	8006e1a <_vfiprintf_r+0x1ce>
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	3402      	adds	r4, #2
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	9203      	str	r2, [sp, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfb8      	it	lt
 8006dbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006dc0:	9305      	str	r3, [sp, #20]
 8006dc2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006e9c <_vfiprintf_r+0x250>
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	4650      	mov	r0, sl
 8006dca:	7821      	ldrb	r1, [r4, #0]
 8006dcc:	f7ff fa2a 	bl	8006224 <memchr>
 8006dd0:	b140      	cbz	r0, 8006de4 <_vfiprintf_r+0x198>
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	eba0 000a 	sub.w	r0, r0, sl
 8006dd8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	3401      	adds	r4, #1
 8006de0:	4303      	orrs	r3, r0
 8006de2:	9304      	str	r3, [sp, #16]
 8006de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006de8:	2206      	movs	r2, #6
 8006dea:	482d      	ldr	r0, [pc, #180]	; (8006ea0 <_vfiprintf_r+0x254>)
 8006dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006df0:	f7ff fa18 	bl	8006224 <memchr>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d03f      	beq.n	8006e78 <_vfiprintf_r+0x22c>
 8006df8:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <_vfiprintf_r+0x258>)
 8006dfa:	bb1b      	cbnz	r3, 8006e44 <_vfiprintf_r+0x1f8>
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	3307      	adds	r3, #7
 8006e00:	f023 0307 	bic.w	r3, r3, #7
 8006e04:	3308      	adds	r3, #8
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0a:	443b      	add	r3, r7
 8006e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0e:	e767      	b.n	8006ce0 <_vfiprintf_r+0x94>
 8006e10:	460c      	mov	r4, r1
 8006e12:	2001      	movs	r0, #1
 8006e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e18:	e7a5      	b.n	8006d66 <_vfiprintf_r+0x11a>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f04f 0c0a 	mov.w	ip, #10
 8006e20:	4619      	mov	r1, r3
 8006e22:	3401      	adds	r4, #1
 8006e24:	9305      	str	r3, [sp, #20]
 8006e26:	4620      	mov	r0, r4
 8006e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e2c:	3a30      	subs	r2, #48	; 0x30
 8006e2e:	2a09      	cmp	r2, #9
 8006e30:	d903      	bls.n	8006e3a <_vfiprintf_r+0x1ee>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0c5      	beq.n	8006dc2 <_vfiprintf_r+0x176>
 8006e36:	9105      	str	r1, [sp, #20]
 8006e38:	e7c3      	b.n	8006dc2 <_vfiprintf_r+0x176>
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e42:	e7f0      	b.n	8006e26 <_vfiprintf_r+0x1da>
 8006e44:	ab03      	add	r3, sp, #12
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	462a      	mov	r2, r5
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	4b16      	ldr	r3, [pc, #88]	; (8006ea8 <_vfiprintf_r+0x25c>)
 8006e4e:	a904      	add	r1, sp, #16
 8006e50:	f7fd ff9e 	bl	8004d90 <_printf_float>
 8006e54:	4607      	mov	r7, r0
 8006e56:	1c78      	adds	r0, r7, #1
 8006e58:	d1d6      	bne.n	8006e08 <_vfiprintf_r+0x1bc>
 8006e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e5c:	07d9      	lsls	r1, r3, #31
 8006e5e:	d405      	bmi.n	8006e6c <_vfiprintf_r+0x220>
 8006e60:	89ab      	ldrh	r3, [r5, #12]
 8006e62:	059a      	lsls	r2, r3, #22
 8006e64:	d402      	bmi.n	8006e6c <_vfiprintf_r+0x220>
 8006e66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e68:	f000 faab 	bl	80073c2 <__retarget_lock_release_recursive>
 8006e6c:	89ab      	ldrh	r3, [r5, #12]
 8006e6e:	065b      	lsls	r3, r3, #25
 8006e70:	f53f af12 	bmi.w	8006c98 <_vfiprintf_r+0x4c>
 8006e74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e76:	e711      	b.n	8006c9c <_vfiprintf_r+0x50>
 8006e78:	ab03      	add	r3, sp, #12
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	462a      	mov	r2, r5
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <_vfiprintf_r+0x25c>)
 8006e82:	a904      	add	r1, sp, #16
 8006e84:	f7fe fa20 	bl	80052c8 <_printf_i>
 8006e88:	e7e4      	b.n	8006e54 <_vfiprintf_r+0x208>
 8006e8a:	bf00      	nop
 8006e8c:	08007a4c 	.word	0x08007a4c
 8006e90:	08007a6c 	.word	0x08007a6c
 8006e94:	08007a2c 	.word	0x08007a2c
 8006e98:	0800791a 	.word	0x0800791a
 8006e9c:	08007920 	.word	0x08007920
 8006ea0:	08007924 	.word	0x08007924
 8006ea4:	08004d91 	.word	0x08004d91
 8006ea8:	08006c27 	.word	0x08006c27

08006eac <__swbuf_r>:
 8006eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eae:	460e      	mov	r6, r1
 8006eb0:	4614      	mov	r4, r2
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	b118      	cbz	r0, 8006ebe <__swbuf_r+0x12>
 8006eb6:	6983      	ldr	r3, [r0, #24]
 8006eb8:	b90b      	cbnz	r3, 8006ebe <__swbuf_r+0x12>
 8006eba:	f000 f9e3 	bl	8007284 <__sinit>
 8006ebe:	4b21      	ldr	r3, [pc, #132]	; (8006f44 <__swbuf_r+0x98>)
 8006ec0:	429c      	cmp	r4, r3
 8006ec2:	d12b      	bne.n	8006f1c <__swbuf_r+0x70>
 8006ec4:	686c      	ldr	r4, [r5, #4]
 8006ec6:	69a3      	ldr	r3, [r4, #24]
 8006ec8:	60a3      	str	r3, [r4, #8]
 8006eca:	89a3      	ldrh	r3, [r4, #12]
 8006ecc:	071a      	lsls	r2, r3, #28
 8006ece:	d52f      	bpl.n	8006f30 <__swbuf_r+0x84>
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	b36b      	cbz	r3, 8006f30 <__swbuf_r+0x84>
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	6820      	ldr	r0, [r4, #0]
 8006ed8:	b2f6      	uxtb	r6, r6
 8006eda:	1ac0      	subs	r0, r0, r3
 8006edc:	6963      	ldr	r3, [r4, #20]
 8006ede:	4637      	mov	r7, r6
 8006ee0:	4283      	cmp	r3, r0
 8006ee2:	dc04      	bgt.n	8006eee <__swbuf_r+0x42>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f938 	bl	800715c <_fflush_r>
 8006eec:	bb30      	cbnz	r0, 8006f3c <__swbuf_r+0x90>
 8006eee:	68a3      	ldr	r3, [r4, #8]
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	60a3      	str	r3, [r4, #8]
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	6022      	str	r2, [r4, #0]
 8006efc:	701e      	strb	r6, [r3, #0]
 8006efe:	6963      	ldr	r3, [r4, #20]
 8006f00:	4283      	cmp	r3, r0
 8006f02:	d004      	beq.n	8006f0e <__swbuf_r+0x62>
 8006f04:	89a3      	ldrh	r3, [r4, #12]
 8006f06:	07db      	lsls	r3, r3, #31
 8006f08:	d506      	bpl.n	8006f18 <__swbuf_r+0x6c>
 8006f0a:	2e0a      	cmp	r6, #10
 8006f0c:	d104      	bne.n	8006f18 <__swbuf_r+0x6c>
 8006f0e:	4621      	mov	r1, r4
 8006f10:	4628      	mov	r0, r5
 8006f12:	f000 f923 	bl	800715c <_fflush_r>
 8006f16:	b988      	cbnz	r0, 8006f3c <__swbuf_r+0x90>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <__swbuf_r+0x9c>)
 8006f1e:	429c      	cmp	r4, r3
 8006f20:	d101      	bne.n	8006f26 <__swbuf_r+0x7a>
 8006f22:	68ac      	ldr	r4, [r5, #8]
 8006f24:	e7cf      	b.n	8006ec6 <__swbuf_r+0x1a>
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <__swbuf_r+0xa0>)
 8006f28:	429c      	cmp	r4, r3
 8006f2a:	bf08      	it	eq
 8006f2c:	68ec      	ldreq	r4, [r5, #12]
 8006f2e:	e7ca      	b.n	8006ec6 <__swbuf_r+0x1a>
 8006f30:	4621      	mov	r1, r4
 8006f32:	4628      	mov	r0, r5
 8006f34:	f000 f81a 	bl	8006f6c <__swsetup_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d0cb      	beq.n	8006ed4 <__swbuf_r+0x28>
 8006f3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f40:	e7ea      	b.n	8006f18 <__swbuf_r+0x6c>
 8006f42:	bf00      	nop
 8006f44:	08007a4c 	.word	0x08007a4c
 8006f48:	08007a6c 	.word	0x08007a6c
 8006f4c:	08007a2c 	.word	0x08007a2c

08006f50 <__ascii_wctomb>:
 8006f50:	4603      	mov	r3, r0
 8006f52:	4608      	mov	r0, r1
 8006f54:	b141      	cbz	r1, 8006f68 <__ascii_wctomb+0x18>
 8006f56:	2aff      	cmp	r2, #255	; 0xff
 8006f58:	d904      	bls.n	8006f64 <__ascii_wctomb+0x14>
 8006f5a:	228a      	movs	r2, #138	; 0x8a
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	4770      	bx	lr
 8006f64:	2001      	movs	r0, #1
 8006f66:	700a      	strb	r2, [r1, #0]
 8006f68:	4770      	bx	lr
	...

08006f6c <__swsetup_r>:
 8006f6c:	4b32      	ldr	r3, [pc, #200]	; (8007038 <__swsetup_r+0xcc>)
 8006f6e:	b570      	push	{r4, r5, r6, lr}
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	4606      	mov	r6, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	b125      	cbz	r5, 8006f82 <__swsetup_r+0x16>
 8006f78:	69ab      	ldr	r3, [r5, #24]
 8006f7a:	b913      	cbnz	r3, 8006f82 <__swsetup_r+0x16>
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f000 f981 	bl	8007284 <__sinit>
 8006f82:	4b2e      	ldr	r3, [pc, #184]	; (800703c <__swsetup_r+0xd0>)
 8006f84:	429c      	cmp	r4, r3
 8006f86:	d10f      	bne.n	8006fa8 <__swsetup_r+0x3c>
 8006f88:	686c      	ldr	r4, [r5, #4]
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f90:	0719      	lsls	r1, r3, #28
 8006f92:	d42c      	bmi.n	8006fee <__swsetup_r+0x82>
 8006f94:	06dd      	lsls	r5, r3, #27
 8006f96:	d411      	bmi.n	8006fbc <__swsetup_r+0x50>
 8006f98:	2309      	movs	r3, #9
 8006f9a:	6033      	str	r3, [r6, #0]
 8006f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fa4:	81a3      	strh	r3, [r4, #12]
 8006fa6:	e03e      	b.n	8007026 <__swsetup_r+0xba>
 8006fa8:	4b25      	ldr	r3, [pc, #148]	; (8007040 <__swsetup_r+0xd4>)
 8006faa:	429c      	cmp	r4, r3
 8006fac:	d101      	bne.n	8006fb2 <__swsetup_r+0x46>
 8006fae:	68ac      	ldr	r4, [r5, #8]
 8006fb0:	e7eb      	b.n	8006f8a <__swsetup_r+0x1e>
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <__swsetup_r+0xd8>)
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	bf08      	it	eq
 8006fb8:	68ec      	ldreq	r4, [r5, #12]
 8006fba:	e7e6      	b.n	8006f8a <__swsetup_r+0x1e>
 8006fbc:	0758      	lsls	r0, r3, #29
 8006fbe:	d512      	bpl.n	8006fe6 <__swsetup_r+0x7a>
 8006fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fc2:	b141      	cbz	r1, 8006fd6 <__swsetup_r+0x6a>
 8006fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fc8:	4299      	cmp	r1, r3
 8006fca:	d002      	beq.n	8006fd2 <__swsetup_r+0x66>
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff fcdb 	bl	8006988 <_free_r>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fd6:	89a3      	ldrh	r3, [r4, #12]
 8006fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fdc:	81a3      	strh	r3, [r4, #12]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6063      	str	r3, [r4, #4]
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f043 0308 	orr.w	r3, r3, #8
 8006fec:	81a3      	strh	r3, [r4, #12]
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	b94b      	cbnz	r3, 8007006 <__swsetup_r+0x9a>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffc:	d003      	beq.n	8007006 <__swsetup_r+0x9a>
 8006ffe:	4621      	mov	r1, r4
 8007000:	4630      	mov	r0, r6
 8007002:	f000 fa05 	bl	8007410 <__smakebuf_r>
 8007006:	89a0      	ldrh	r0, [r4, #12]
 8007008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800700c:	f010 0301 	ands.w	r3, r0, #1
 8007010:	d00a      	beq.n	8007028 <__swsetup_r+0xbc>
 8007012:	2300      	movs	r3, #0
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	6963      	ldr	r3, [r4, #20]
 8007018:	425b      	negs	r3, r3
 800701a:	61a3      	str	r3, [r4, #24]
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	b943      	cbnz	r3, 8007032 <__swsetup_r+0xc6>
 8007020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007024:	d1ba      	bne.n	8006f9c <__swsetup_r+0x30>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	0781      	lsls	r1, r0, #30
 800702a:	bf58      	it	pl
 800702c:	6963      	ldrpl	r3, [r4, #20]
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	e7f4      	b.n	800701c <__swsetup_r+0xb0>
 8007032:	2000      	movs	r0, #0
 8007034:	e7f7      	b.n	8007026 <__swsetup_r+0xba>
 8007036:	bf00      	nop
 8007038:	20000010 	.word	0x20000010
 800703c:	08007a4c 	.word	0x08007a4c
 8007040:	08007a6c 	.word	0x08007a6c
 8007044:	08007a2c 	.word	0x08007a2c

08007048 <abort>:
 8007048:	2006      	movs	r0, #6
 800704a:	b508      	push	{r3, lr}
 800704c:	f000 fa48 	bl	80074e0 <raise>
 8007050:	2001      	movs	r0, #1
 8007052:	f7fa fb1a 	bl	800168a <_exit>
	...

08007058 <__sflush_r>:
 8007058:	898a      	ldrh	r2, [r1, #12]
 800705a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705c:	4605      	mov	r5, r0
 800705e:	0710      	lsls	r0, r2, #28
 8007060:	460c      	mov	r4, r1
 8007062:	d457      	bmi.n	8007114 <__sflush_r+0xbc>
 8007064:	684b      	ldr	r3, [r1, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	dc04      	bgt.n	8007074 <__sflush_r+0x1c>
 800706a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	dc01      	bgt.n	8007074 <__sflush_r+0x1c>
 8007070:	2000      	movs	r0, #0
 8007072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007076:	2e00      	cmp	r6, #0
 8007078:	d0fa      	beq.n	8007070 <__sflush_r+0x18>
 800707a:	2300      	movs	r3, #0
 800707c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007080:	682f      	ldr	r7, [r5, #0]
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	d032      	beq.n	80070ec <__sflush_r+0x94>
 8007086:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	075a      	lsls	r2, r3, #29
 800708c:	d505      	bpl.n	800709a <__sflush_r+0x42>
 800708e:	6863      	ldr	r3, [r4, #4]
 8007090:	1ac0      	subs	r0, r0, r3
 8007092:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007094:	b10b      	cbz	r3, 800709a <__sflush_r+0x42>
 8007096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007098:	1ac0      	subs	r0, r0, r3
 800709a:	2300      	movs	r3, #0
 800709c:	4602      	mov	r2, r0
 800709e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070a0:	4628      	mov	r0, r5
 80070a2:	6a21      	ldr	r1, [r4, #32]
 80070a4:	47b0      	blx	r6
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	d106      	bne.n	80070ba <__sflush_r+0x62>
 80070ac:	6829      	ldr	r1, [r5, #0]
 80070ae:	291d      	cmp	r1, #29
 80070b0:	d82c      	bhi.n	800710c <__sflush_r+0xb4>
 80070b2:	4a29      	ldr	r2, [pc, #164]	; (8007158 <__sflush_r+0x100>)
 80070b4:	40ca      	lsrs	r2, r1
 80070b6:	07d6      	lsls	r6, r2, #31
 80070b8:	d528      	bpl.n	800710c <__sflush_r+0xb4>
 80070ba:	2200      	movs	r2, #0
 80070bc:	6062      	str	r2, [r4, #4]
 80070be:	6922      	ldr	r2, [r4, #16]
 80070c0:	04d9      	lsls	r1, r3, #19
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	d504      	bpl.n	80070d0 <__sflush_r+0x78>
 80070c6:	1c42      	adds	r2, r0, #1
 80070c8:	d101      	bne.n	80070ce <__sflush_r+0x76>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	b903      	cbnz	r3, 80070d0 <__sflush_r+0x78>
 80070ce:	6560      	str	r0, [r4, #84]	; 0x54
 80070d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070d2:	602f      	str	r7, [r5, #0]
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d0cb      	beq.n	8007070 <__sflush_r+0x18>
 80070d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070dc:	4299      	cmp	r1, r3
 80070de:	d002      	beq.n	80070e6 <__sflush_r+0x8e>
 80070e0:	4628      	mov	r0, r5
 80070e2:	f7ff fc51 	bl	8006988 <_free_r>
 80070e6:	2000      	movs	r0, #0
 80070e8:	6360      	str	r0, [r4, #52]	; 0x34
 80070ea:	e7c2      	b.n	8007072 <__sflush_r+0x1a>
 80070ec:	6a21      	ldr	r1, [r4, #32]
 80070ee:	2301      	movs	r3, #1
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b0      	blx	r6
 80070f4:	1c41      	adds	r1, r0, #1
 80070f6:	d1c7      	bne.n	8007088 <__sflush_r+0x30>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0c4      	beq.n	8007088 <__sflush_r+0x30>
 80070fe:	2b1d      	cmp	r3, #29
 8007100:	d001      	beq.n	8007106 <__sflush_r+0xae>
 8007102:	2b16      	cmp	r3, #22
 8007104:	d101      	bne.n	800710a <__sflush_r+0xb2>
 8007106:	602f      	str	r7, [r5, #0]
 8007108:	e7b2      	b.n	8007070 <__sflush_r+0x18>
 800710a:	89a3      	ldrh	r3, [r4, #12]
 800710c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	e7ae      	b.n	8007072 <__sflush_r+0x1a>
 8007114:	690f      	ldr	r7, [r1, #16]
 8007116:	2f00      	cmp	r7, #0
 8007118:	d0aa      	beq.n	8007070 <__sflush_r+0x18>
 800711a:	0793      	lsls	r3, r2, #30
 800711c:	bf18      	it	ne
 800711e:	2300      	movne	r3, #0
 8007120:	680e      	ldr	r6, [r1, #0]
 8007122:	bf08      	it	eq
 8007124:	694b      	ldreq	r3, [r1, #20]
 8007126:	1bf6      	subs	r6, r6, r7
 8007128:	600f      	str	r7, [r1, #0]
 800712a:	608b      	str	r3, [r1, #8]
 800712c:	2e00      	cmp	r6, #0
 800712e:	dd9f      	ble.n	8007070 <__sflush_r+0x18>
 8007130:	4633      	mov	r3, r6
 8007132:	463a      	mov	r2, r7
 8007134:	4628      	mov	r0, r5
 8007136:	6a21      	ldr	r1, [r4, #32]
 8007138:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800713c:	47e0      	blx	ip
 800713e:	2800      	cmp	r0, #0
 8007140:	dc06      	bgt.n	8007150 <__sflush_r+0xf8>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800714c:	81a3      	strh	r3, [r4, #12]
 800714e:	e790      	b.n	8007072 <__sflush_r+0x1a>
 8007150:	4407      	add	r7, r0
 8007152:	1a36      	subs	r6, r6, r0
 8007154:	e7ea      	b.n	800712c <__sflush_r+0xd4>
 8007156:	bf00      	nop
 8007158:	20400001 	.word	0x20400001

0800715c <_fflush_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	4605      	mov	r5, r0
 8007162:	460c      	mov	r4, r1
 8007164:	b913      	cbnz	r3, 800716c <_fflush_r+0x10>
 8007166:	2500      	movs	r5, #0
 8007168:	4628      	mov	r0, r5
 800716a:	bd38      	pop	{r3, r4, r5, pc}
 800716c:	b118      	cbz	r0, 8007176 <_fflush_r+0x1a>
 800716e:	6983      	ldr	r3, [r0, #24]
 8007170:	b90b      	cbnz	r3, 8007176 <_fflush_r+0x1a>
 8007172:	f000 f887 	bl	8007284 <__sinit>
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <_fflush_r+0x6c>)
 8007178:	429c      	cmp	r4, r3
 800717a:	d11b      	bne.n	80071b4 <_fflush_r+0x58>
 800717c:	686c      	ldr	r4, [r5, #4]
 800717e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0ef      	beq.n	8007166 <_fflush_r+0xa>
 8007186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007188:	07d0      	lsls	r0, r2, #31
 800718a:	d404      	bmi.n	8007196 <_fflush_r+0x3a>
 800718c:	0599      	lsls	r1, r3, #22
 800718e:	d402      	bmi.n	8007196 <_fflush_r+0x3a>
 8007190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007192:	f000 f915 	bl	80073c0 <__retarget_lock_acquire_recursive>
 8007196:	4628      	mov	r0, r5
 8007198:	4621      	mov	r1, r4
 800719a:	f7ff ff5d 	bl	8007058 <__sflush_r>
 800719e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071a0:	4605      	mov	r5, r0
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d4e0      	bmi.n	8007168 <_fflush_r+0xc>
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	059b      	lsls	r3, r3, #22
 80071aa:	d4dd      	bmi.n	8007168 <_fflush_r+0xc>
 80071ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ae:	f000 f908 	bl	80073c2 <__retarget_lock_release_recursive>
 80071b2:	e7d9      	b.n	8007168 <_fflush_r+0xc>
 80071b4:	4b05      	ldr	r3, [pc, #20]	; (80071cc <_fflush_r+0x70>)
 80071b6:	429c      	cmp	r4, r3
 80071b8:	d101      	bne.n	80071be <_fflush_r+0x62>
 80071ba:	68ac      	ldr	r4, [r5, #8]
 80071bc:	e7df      	b.n	800717e <_fflush_r+0x22>
 80071be:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <_fflush_r+0x74>)
 80071c0:	429c      	cmp	r4, r3
 80071c2:	bf08      	it	eq
 80071c4:	68ec      	ldreq	r4, [r5, #12]
 80071c6:	e7da      	b.n	800717e <_fflush_r+0x22>
 80071c8:	08007a4c 	.word	0x08007a4c
 80071cc:	08007a6c 	.word	0x08007a6c
 80071d0:	08007a2c 	.word	0x08007a2c

080071d4 <std>:
 80071d4:	2300      	movs	r3, #0
 80071d6:	b510      	push	{r4, lr}
 80071d8:	4604      	mov	r4, r0
 80071da:	e9c0 3300 	strd	r3, r3, [r0]
 80071de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071e2:	6083      	str	r3, [r0, #8]
 80071e4:	8181      	strh	r1, [r0, #12]
 80071e6:	6643      	str	r3, [r0, #100]	; 0x64
 80071e8:	81c2      	strh	r2, [r0, #14]
 80071ea:	6183      	str	r3, [r0, #24]
 80071ec:	4619      	mov	r1, r3
 80071ee:	2208      	movs	r2, #8
 80071f0:	305c      	adds	r0, #92	; 0x5c
 80071f2:	f7fd fd27 	bl	8004c44 <memset>
 80071f6:	4b05      	ldr	r3, [pc, #20]	; (800720c <std+0x38>)
 80071f8:	6224      	str	r4, [r4, #32]
 80071fa:	6263      	str	r3, [r4, #36]	; 0x24
 80071fc:	4b04      	ldr	r3, [pc, #16]	; (8007210 <std+0x3c>)
 80071fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8007200:	4b04      	ldr	r3, [pc, #16]	; (8007214 <std+0x40>)
 8007202:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <std+0x44>)
 8007206:	6323      	str	r3, [r4, #48]	; 0x30
 8007208:	bd10      	pop	{r4, pc}
 800720a:	bf00      	nop
 800720c:	08007519 	.word	0x08007519
 8007210:	0800753b 	.word	0x0800753b
 8007214:	08007573 	.word	0x08007573
 8007218:	08007597 	.word	0x08007597

0800721c <_cleanup_r>:
 800721c:	4901      	ldr	r1, [pc, #4]	; (8007224 <_cleanup_r+0x8>)
 800721e:	f000 b8af 	b.w	8007380 <_fwalk_reent>
 8007222:	bf00      	nop
 8007224:	0800715d 	.word	0x0800715d

08007228 <__sfmoreglue>:
 8007228:	2268      	movs	r2, #104	; 0x68
 800722a:	b570      	push	{r4, r5, r6, lr}
 800722c:	1e4d      	subs	r5, r1, #1
 800722e:	4355      	muls	r5, r2
 8007230:	460e      	mov	r6, r1
 8007232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007236:	f7ff fc0f 	bl	8006a58 <_malloc_r>
 800723a:	4604      	mov	r4, r0
 800723c:	b140      	cbz	r0, 8007250 <__sfmoreglue+0x28>
 800723e:	2100      	movs	r1, #0
 8007240:	e9c0 1600 	strd	r1, r6, [r0]
 8007244:	300c      	adds	r0, #12
 8007246:	60a0      	str	r0, [r4, #8]
 8007248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800724c:	f7fd fcfa 	bl	8004c44 <memset>
 8007250:	4620      	mov	r0, r4
 8007252:	bd70      	pop	{r4, r5, r6, pc}

08007254 <__sfp_lock_acquire>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__sfp_lock_acquire+0x8>)
 8007256:	f000 b8b3 	b.w	80073c0 <__retarget_lock_acquire_recursive>
 800725a:	bf00      	nop
 800725c:	2000039d 	.word	0x2000039d

08007260 <__sfp_lock_release>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__sfp_lock_release+0x8>)
 8007262:	f000 b8ae 	b.w	80073c2 <__retarget_lock_release_recursive>
 8007266:	bf00      	nop
 8007268:	2000039d 	.word	0x2000039d

0800726c <__sinit_lock_acquire>:
 800726c:	4801      	ldr	r0, [pc, #4]	; (8007274 <__sinit_lock_acquire+0x8>)
 800726e:	f000 b8a7 	b.w	80073c0 <__retarget_lock_acquire_recursive>
 8007272:	bf00      	nop
 8007274:	2000039e 	.word	0x2000039e

08007278 <__sinit_lock_release>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__sinit_lock_release+0x8>)
 800727a:	f000 b8a2 	b.w	80073c2 <__retarget_lock_release_recursive>
 800727e:	bf00      	nop
 8007280:	2000039e 	.word	0x2000039e

08007284 <__sinit>:
 8007284:	b510      	push	{r4, lr}
 8007286:	4604      	mov	r4, r0
 8007288:	f7ff fff0 	bl	800726c <__sinit_lock_acquire>
 800728c:	69a3      	ldr	r3, [r4, #24]
 800728e:	b11b      	cbz	r3, 8007298 <__sinit+0x14>
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f7ff bff0 	b.w	8007278 <__sinit_lock_release>
 8007298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800729c:	6523      	str	r3, [r4, #80]	; 0x50
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <__sinit+0x68>)
 80072a0:	4a13      	ldr	r2, [pc, #76]	; (80072f0 <__sinit+0x6c>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	bf08      	it	eq
 80072aa:	2301      	moveq	r3, #1
 80072ac:	4620      	mov	r0, r4
 80072ae:	bf08      	it	eq
 80072b0:	61a3      	streq	r3, [r4, #24]
 80072b2:	f000 f81f 	bl	80072f4 <__sfp>
 80072b6:	6060      	str	r0, [r4, #4]
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 f81b 	bl	80072f4 <__sfp>
 80072be:	60a0      	str	r0, [r4, #8]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 f817 	bl	80072f4 <__sfp>
 80072c6:	2200      	movs	r2, #0
 80072c8:	2104      	movs	r1, #4
 80072ca:	60e0      	str	r0, [r4, #12]
 80072cc:	6860      	ldr	r0, [r4, #4]
 80072ce:	f7ff ff81 	bl	80071d4 <std>
 80072d2:	2201      	movs	r2, #1
 80072d4:	2109      	movs	r1, #9
 80072d6:	68a0      	ldr	r0, [r4, #8]
 80072d8:	f7ff ff7c 	bl	80071d4 <std>
 80072dc:	2202      	movs	r2, #2
 80072de:	2112      	movs	r1, #18
 80072e0:	68e0      	ldr	r0, [r4, #12]
 80072e2:	f7ff ff77 	bl	80071d4 <std>
 80072e6:	2301      	movs	r3, #1
 80072e8:	61a3      	str	r3, [r4, #24]
 80072ea:	e7d1      	b.n	8007290 <__sinit+0xc>
 80072ec:	080076b4 	.word	0x080076b4
 80072f0:	0800721d 	.word	0x0800721d

080072f4 <__sfp>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	4607      	mov	r7, r0
 80072f8:	f7ff ffac 	bl	8007254 <__sfp_lock_acquire>
 80072fc:	4b1e      	ldr	r3, [pc, #120]	; (8007378 <__sfp+0x84>)
 80072fe:	681e      	ldr	r6, [r3, #0]
 8007300:	69b3      	ldr	r3, [r6, #24]
 8007302:	b913      	cbnz	r3, 800730a <__sfp+0x16>
 8007304:	4630      	mov	r0, r6
 8007306:	f7ff ffbd 	bl	8007284 <__sinit>
 800730a:	3648      	adds	r6, #72	; 0x48
 800730c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007310:	3b01      	subs	r3, #1
 8007312:	d503      	bpl.n	800731c <__sfp+0x28>
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	b30b      	cbz	r3, 800735c <__sfp+0x68>
 8007318:	6836      	ldr	r6, [r6, #0]
 800731a:	e7f7      	b.n	800730c <__sfp+0x18>
 800731c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007320:	b9d5      	cbnz	r5, 8007358 <__sfp+0x64>
 8007322:	4b16      	ldr	r3, [pc, #88]	; (800737c <__sfp+0x88>)
 8007324:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007328:	60e3      	str	r3, [r4, #12]
 800732a:	6665      	str	r5, [r4, #100]	; 0x64
 800732c:	f000 f847 	bl	80073be <__retarget_lock_init_recursive>
 8007330:	f7ff ff96 	bl	8007260 <__sfp_lock_release>
 8007334:	2208      	movs	r2, #8
 8007336:	4629      	mov	r1, r5
 8007338:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800733c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007340:	6025      	str	r5, [r4, #0]
 8007342:	61a5      	str	r5, [r4, #24]
 8007344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007348:	f7fd fc7c 	bl	8004c44 <memset>
 800734c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007354:	4620      	mov	r0, r4
 8007356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007358:	3468      	adds	r4, #104	; 0x68
 800735a:	e7d9      	b.n	8007310 <__sfp+0x1c>
 800735c:	2104      	movs	r1, #4
 800735e:	4638      	mov	r0, r7
 8007360:	f7ff ff62 	bl	8007228 <__sfmoreglue>
 8007364:	4604      	mov	r4, r0
 8007366:	6030      	str	r0, [r6, #0]
 8007368:	2800      	cmp	r0, #0
 800736a:	d1d5      	bne.n	8007318 <__sfp+0x24>
 800736c:	f7ff ff78 	bl	8007260 <__sfp_lock_release>
 8007370:	230c      	movs	r3, #12
 8007372:	603b      	str	r3, [r7, #0]
 8007374:	e7ee      	b.n	8007354 <__sfp+0x60>
 8007376:	bf00      	nop
 8007378:	080076b4 	.word	0x080076b4
 800737c:	ffff0001 	.word	0xffff0001

08007380 <_fwalk_reent>:
 8007380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007384:	4606      	mov	r6, r0
 8007386:	4688      	mov	r8, r1
 8007388:	2700      	movs	r7, #0
 800738a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800738e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007392:	f1b9 0901 	subs.w	r9, r9, #1
 8007396:	d505      	bpl.n	80073a4 <_fwalk_reent+0x24>
 8007398:	6824      	ldr	r4, [r4, #0]
 800739a:	2c00      	cmp	r4, #0
 800739c:	d1f7      	bne.n	800738e <_fwalk_reent+0xe>
 800739e:	4638      	mov	r0, r7
 80073a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a4:	89ab      	ldrh	r3, [r5, #12]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d907      	bls.n	80073ba <_fwalk_reent+0x3a>
 80073aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ae:	3301      	adds	r3, #1
 80073b0:	d003      	beq.n	80073ba <_fwalk_reent+0x3a>
 80073b2:	4629      	mov	r1, r5
 80073b4:	4630      	mov	r0, r6
 80073b6:	47c0      	blx	r8
 80073b8:	4307      	orrs	r7, r0
 80073ba:	3568      	adds	r5, #104	; 0x68
 80073bc:	e7e9      	b.n	8007392 <_fwalk_reent+0x12>

080073be <__retarget_lock_init_recursive>:
 80073be:	4770      	bx	lr

080073c0 <__retarget_lock_acquire_recursive>:
 80073c0:	4770      	bx	lr

080073c2 <__retarget_lock_release_recursive>:
 80073c2:	4770      	bx	lr

080073c4 <__swhatbuf_r>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	460e      	mov	r6, r1
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	4614      	mov	r4, r2
 80073ce:	2900      	cmp	r1, #0
 80073d0:	461d      	mov	r5, r3
 80073d2:	b096      	sub	sp, #88	; 0x58
 80073d4:	da08      	bge.n	80073e8 <__swhatbuf_r+0x24>
 80073d6:	2200      	movs	r2, #0
 80073d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	061a      	lsls	r2, r3, #24
 80073e0:	d410      	bmi.n	8007404 <__swhatbuf_r+0x40>
 80073e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e6:	e00e      	b.n	8007406 <__swhatbuf_r+0x42>
 80073e8:	466a      	mov	r2, sp
 80073ea:	f000 f8fb 	bl	80075e4 <_fstat_r>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	dbf1      	blt.n	80073d6 <__swhatbuf_r+0x12>
 80073f2:	9a01      	ldr	r2, [sp, #4]
 80073f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80073f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80073fc:	425a      	negs	r2, r3
 80073fe:	415a      	adcs	r2, r3
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	e7ee      	b.n	80073e2 <__swhatbuf_r+0x1e>
 8007404:	2340      	movs	r3, #64	; 0x40
 8007406:	2000      	movs	r0, #0
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	b016      	add	sp, #88	; 0x58
 800740c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007410 <__smakebuf_r>:
 8007410:	898b      	ldrh	r3, [r1, #12]
 8007412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007414:	079d      	lsls	r5, r3, #30
 8007416:	4606      	mov	r6, r0
 8007418:	460c      	mov	r4, r1
 800741a:	d507      	bpl.n	800742c <__smakebuf_r+0x1c>
 800741c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	6123      	str	r3, [r4, #16]
 8007424:	2301      	movs	r3, #1
 8007426:	6163      	str	r3, [r4, #20]
 8007428:	b002      	add	sp, #8
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	466a      	mov	r2, sp
 800742e:	ab01      	add	r3, sp, #4
 8007430:	f7ff ffc8 	bl	80073c4 <__swhatbuf_r>
 8007434:	9900      	ldr	r1, [sp, #0]
 8007436:	4605      	mov	r5, r0
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff fb0d 	bl	8006a58 <_malloc_r>
 800743e:	b948      	cbnz	r0, 8007454 <__smakebuf_r+0x44>
 8007440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007444:	059a      	lsls	r2, r3, #22
 8007446:	d4ef      	bmi.n	8007428 <__smakebuf_r+0x18>
 8007448:	f023 0303 	bic.w	r3, r3, #3
 800744c:	f043 0302 	orr.w	r3, r3, #2
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	e7e3      	b.n	800741c <__smakebuf_r+0xc>
 8007454:	4b0d      	ldr	r3, [pc, #52]	; (800748c <__smakebuf_r+0x7c>)
 8007456:	62b3      	str	r3, [r6, #40]	; 0x28
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	6020      	str	r0, [r4, #0]
 800745c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	9b00      	ldr	r3, [sp, #0]
 8007464:	6120      	str	r0, [r4, #16]
 8007466:	6163      	str	r3, [r4, #20]
 8007468:	9b01      	ldr	r3, [sp, #4]
 800746a:	b15b      	cbz	r3, 8007484 <__smakebuf_r+0x74>
 800746c:	4630      	mov	r0, r6
 800746e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007472:	f000 f8c9 	bl	8007608 <_isatty_r>
 8007476:	b128      	cbz	r0, 8007484 <__smakebuf_r+0x74>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	89a0      	ldrh	r0, [r4, #12]
 8007486:	4305      	orrs	r5, r0
 8007488:	81a5      	strh	r5, [r4, #12]
 800748a:	e7cd      	b.n	8007428 <__smakebuf_r+0x18>
 800748c:	0800721d 	.word	0x0800721d

08007490 <_raise_r>:
 8007490:	291f      	cmp	r1, #31
 8007492:	b538      	push	{r3, r4, r5, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	460d      	mov	r5, r1
 8007498:	d904      	bls.n	80074a4 <_raise_r+0x14>
 800749a:	2316      	movs	r3, #22
 800749c:	6003      	str	r3, [r0, #0]
 800749e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074a6:	b112      	cbz	r2, 80074ae <_raise_r+0x1e>
 80074a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074ac:	b94b      	cbnz	r3, 80074c2 <_raise_r+0x32>
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f830 	bl	8007514 <_getpid_r>
 80074b4:	462a      	mov	r2, r5
 80074b6:	4601      	mov	r1, r0
 80074b8:	4620      	mov	r0, r4
 80074ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074be:	f000 b817 	b.w	80074f0 <_kill_r>
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d00a      	beq.n	80074dc <_raise_r+0x4c>
 80074c6:	1c59      	adds	r1, r3, #1
 80074c8:	d103      	bne.n	80074d2 <_raise_r+0x42>
 80074ca:	2316      	movs	r3, #22
 80074cc:	6003      	str	r3, [r0, #0]
 80074ce:	2001      	movs	r0, #1
 80074d0:	e7e7      	b.n	80074a2 <_raise_r+0x12>
 80074d2:	2400      	movs	r4, #0
 80074d4:	4628      	mov	r0, r5
 80074d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074da:	4798      	blx	r3
 80074dc:	2000      	movs	r0, #0
 80074de:	e7e0      	b.n	80074a2 <_raise_r+0x12>

080074e0 <raise>:
 80074e0:	4b02      	ldr	r3, [pc, #8]	; (80074ec <raise+0xc>)
 80074e2:	4601      	mov	r1, r0
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	f7ff bfd3 	b.w	8007490 <_raise_r>
 80074ea:	bf00      	nop
 80074ec:	20000010 	.word	0x20000010

080074f0 <_kill_r>:
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	2300      	movs	r3, #0
 80074f4:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_kill_r+0x20>)
 80074f6:	4604      	mov	r4, r0
 80074f8:	4608      	mov	r0, r1
 80074fa:	4611      	mov	r1, r2
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f7fa f8b4 	bl	800166a <_kill>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d102      	bne.n	800750c <_kill_r+0x1c>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	b103      	cbz	r3, 800750c <_kill_r+0x1c>
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	bd38      	pop	{r3, r4, r5, pc}
 800750e:	bf00      	nop
 8007510:	20000398 	.word	0x20000398

08007514 <_getpid_r>:
 8007514:	f7fa b8a2 	b.w	800165c <_getpid>

08007518 <__sread>:
 8007518:	b510      	push	{r4, lr}
 800751a:	460c      	mov	r4, r1
 800751c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007520:	f000 f894 	bl	800764c <_read_r>
 8007524:	2800      	cmp	r0, #0
 8007526:	bfab      	itete	ge
 8007528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800752a:	89a3      	ldrhlt	r3, [r4, #12]
 800752c:	181b      	addge	r3, r3, r0
 800752e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007532:	bfac      	ite	ge
 8007534:	6563      	strge	r3, [r4, #84]	; 0x54
 8007536:	81a3      	strhlt	r3, [r4, #12]
 8007538:	bd10      	pop	{r4, pc}

0800753a <__swrite>:
 800753a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753e:	461f      	mov	r7, r3
 8007540:	898b      	ldrh	r3, [r1, #12]
 8007542:	4605      	mov	r5, r0
 8007544:	05db      	lsls	r3, r3, #23
 8007546:	460c      	mov	r4, r1
 8007548:	4616      	mov	r6, r2
 800754a:	d505      	bpl.n	8007558 <__swrite+0x1e>
 800754c:	2302      	movs	r3, #2
 800754e:	2200      	movs	r2, #0
 8007550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007554:	f000 f868 	bl	8007628 <_lseek_r>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	4632      	mov	r2, r6
 800755c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007560:	81a3      	strh	r3, [r4, #12]
 8007562:	4628      	mov	r0, r5
 8007564:	463b      	mov	r3, r7
 8007566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800756e:	f000 b817 	b.w	80075a0 <_write_r>

08007572 <__sseek>:
 8007572:	b510      	push	{r4, lr}
 8007574:	460c      	mov	r4, r1
 8007576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757a:	f000 f855 	bl	8007628 <_lseek_r>
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	bf15      	itete	ne
 8007584:	6560      	strne	r0, [r4, #84]	; 0x54
 8007586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800758a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800758e:	81a3      	strheq	r3, [r4, #12]
 8007590:	bf18      	it	ne
 8007592:	81a3      	strhne	r3, [r4, #12]
 8007594:	bd10      	pop	{r4, pc}

08007596 <__sclose>:
 8007596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759a:	f000 b813 	b.w	80075c4 <_close_r>
	...

080075a0 <_write_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	2200      	movs	r2, #0
 80075aa:	4d05      	ldr	r5, [pc, #20]	; (80075c0 <_write_r+0x20>)
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fa f892 	bl	80016d8 <_write>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_write_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_write_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000398 	.word	0x20000398

080075c4 <_close_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	2300      	movs	r3, #0
 80075c8:	4d05      	ldr	r5, [pc, #20]	; (80075e0 <_close_r+0x1c>)
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	602b      	str	r3, [r5, #0]
 80075d0:	f7fa f89e 	bl	8001710 <_close>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_close_r+0x1a>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_close_r+0x1a>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20000398 	.word	0x20000398

080075e4 <_fstat_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	2300      	movs	r3, #0
 80075e8:	4d06      	ldr	r5, [pc, #24]	; (8007604 <_fstat_r+0x20>)
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	4611      	mov	r1, r2
 80075f0:	602b      	str	r3, [r5, #0]
 80075f2:	f7fa f898 	bl	8001726 <_fstat>
 80075f6:	1c43      	adds	r3, r0, #1
 80075f8:	d102      	bne.n	8007600 <_fstat_r+0x1c>
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	b103      	cbz	r3, 8007600 <_fstat_r+0x1c>
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	bd38      	pop	{r3, r4, r5, pc}
 8007602:	bf00      	nop
 8007604:	20000398 	.word	0x20000398

08007608 <_isatty_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	2300      	movs	r3, #0
 800760c:	4d05      	ldr	r5, [pc, #20]	; (8007624 <_isatty_r+0x1c>)
 800760e:	4604      	mov	r4, r0
 8007610:	4608      	mov	r0, r1
 8007612:	602b      	str	r3, [r5, #0]
 8007614:	f7fa f896 	bl	8001744 <_isatty>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d102      	bne.n	8007622 <_isatty_r+0x1a>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b103      	cbz	r3, 8007622 <_isatty_r+0x1a>
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	bd38      	pop	{r3, r4, r5, pc}
 8007624:	20000398 	.word	0x20000398

08007628 <_lseek_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4604      	mov	r4, r0
 800762c:	4608      	mov	r0, r1
 800762e:	4611      	mov	r1, r2
 8007630:	2200      	movs	r2, #0
 8007632:	4d05      	ldr	r5, [pc, #20]	; (8007648 <_lseek_r+0x20>)
 8007634:	602a      	str	r2, [r5, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f7fa f88e 	bl	8001758 <_lseek>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_lseek_r+0x1e>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b103      	cbz	r3, 8007646 <_lseek_r+0x1e>
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	20000398 	.word	0x20000398

0800764c <_read_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	4611      	mov	r1, r2
 8007654:	2200      	movs	r2, #0
 8007656:	4d05      	ldr	r5, [pc, #20]	; (800766c <_read_r+0x20>)
 8007658:	602a      	str	r2, [r5, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f7fa f81f 	bl	800169e <_read>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_read_r+0x1e>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_read_r+0x1e>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	20000398 	.word	0x20000398

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
